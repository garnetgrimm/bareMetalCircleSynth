
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea007634 	b	25938 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    806c:	e24dda02 	sub	sp, sp, #8192	; 0x2000
    8070:	e24dd01c 	sub	sp, sp, #28
    8074:	e1a0000d 	mov	r0, sp
    8078:	eb000009 	bl	80a4 <CKernel::CKernel()>
    807c:	e1a0000d 	mov	r0, sp
    8080:	eb000064 	bl	8218 <CKernel::Initialize()>
    8084:	e3500000 	cmp	r0, #0
    8088:	0a000003 	beq	809c <main+0x34>
    808c:	e1a0000d 	mov	r0, sp
    8090:	eb000082 	bl	82a0 <CKernel::Run()>
    8094:	e3500002 	cmp	r0, #2
    8098:	0a000000 	beq	80a0 <main+0x38>
    809c:	eb00760d 	bl	258d8 <halt>
    80a0:	eb00760f 	bl	258e4 <reboot>

000080a4 <CKernel::CKernel()>:
    80a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80a8:	e1a04000 	mov	r4, r0
    80ac:	e24dd010 	sub	sp, sp, #16
    80b0:	e28080dc 	add	r8, r0, #220	; 0xdc
    80b4:	e3a01001 	mov	r1, #1
    80b8:	eb008084 	bl	282d0 <CMemorySystem::CMemorySystem(bool)>
    80bc:	e28460e8 	add	r6, r4, #232	; 0xe8
    80c0:	e3a01000 	mov	r1, #0
    80c4:	e1a00008 	mov	r0, r8
    80c8:	eb005530 	bl	1d590 <CActLED::CActLED(bool)>
    80cc:	e2845d25 	add	r5, r4, #2368	; 0x940
    80d0:	e1a00006 	mov	r0, r6
    80d4:	eb005c6f 	bl	1f298 <CKernelOptions::CKernelOptions()>
    80d8:	e2850004 	add	r0, r5, #4
    80dc:	eb00578a 	bl	1df0c <CDeviceNameService::CDeviceNameService()>
    80e0:	e1a00006 	mov	r0, r6
    80e4:	eb005c2f 	bl	1f1a8 <CKernelOptions::GetWidth() const>
    80e8:	e1a01000 	mov	r1, r0
    80ec:	e1a00006 	mov	r0, r6
    80f0:	e58d100c 	str	r1, [sp, #12]
    80f4:	eb005c2d 	bl	1f1b0 <CKernelOptions::GetHeight() const>
    80f8:	e3a03000 	mov	r3, #0
    80fc:	e1a02000 	mov	r2, r0
    8100:	e58d3000 	str	r3, [sp]
    8104:	e59d100c 	ldr	r1, [sp, #12]
    8108:	e285000c 	add	r0, r5, #12
    810c:	eb006526 	bl	215ac <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
    8110:	e2840e9d 	add	r0, r4, #2512	; 0x9d0
    8114:	e2845e9e 	add	r5, r4, #2528	; 0x9e0
    8118:	e280000c 	add	r0, r0, #12
    811c:	eb007f70 	bl	27ee4 <CExceptionHandler::CExceptionHandler()>
    8120:	e2847ec2 	add	r7, r4, #3104	; 0xc20
    8124:	e1a00005 	mov	r0, r5
    8128:	eb0081b4 	bl	28800 <CInterruptSystem::CInterruptSystem()>
    812c:	e1a01005 	mov	r1, r5
    8130:	e1a00007 	mov	r0, r7
    8134:	eb007642 	bl	25a44 <CTimer::CTimer(CInterruptSystem*)>
    8138:	e1a00006 	mov	r0, r6
    813c:	eb005c20 	bl	1f1c4 <CKernelOptions::GetLogLevel() const>
    8140:	e1a01000 	mov	r1, r0
    8144:	e2840ec5 	add	r0, r4, #3152	; 0xc50
    8148:	e1a02007 	mov	r2, r7
    814c:	e280000c 	add	r0, r0, #12
    8150:	eb005d64 	bl	1f6e8 <CLogger::CLogger(unsigned int, CTimer*)>
    8154:	e2840ed5 	add	r0, r4, #3408	; 0xd50
    8158:	e1a02007 	mov	r2, r7
    815c:	e1a01005 	mov	r1, r5
    8160:	e3a03001 	mov	r3, #1
    8164:	e2800004 	add	r0, r0, #4
    8168:	eb000ea7 	bl	bc0c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)>
    816c:	e2840ede 	add	r0, r4, #3552	; 0xde0
    8170:	e1a01005 	mov	r1, r5
    8174:	e280000c 	add	r0, r0, #12
    8178:	eb000072 	bl	8348 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)>
    817c:	e1a00008 	mov	r0, r8
    8180:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8184:	e3a020c8 	mov	r2, #200	; 0xc8
    8188:	e3a01005 	mov	r1, #5
    818c:	eb005544 	bl	1d6a4 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8190:	e1a00004 	mov	r0, r4
    8194:	e28dd010 	add	sp, sp, #16
    8198:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000819c <CKernel::~CKernel()>:
    819c:	e92d4070 	push	{r4, r5, r6, lr}
    81a0:	e1a04000 	mov	r4, r0
    81a4:	e2800ede 	add	r0, r0, #3552	; 0xde0
    81a8:	e280000c 	add	r0, r0, #12
    81ac:	eb00010c 	bl	85e4 <CMiniOrgan::~CMiniOrgan()>
    81b0:	e2840ed5 	add	r0, r4, #3408	; 0xd50
    81b4:	e2800004 	add	r0, r0, #4
    81b8:	eb001814 	bl	e210 <CDWHCIDevice::~CDWHCIDevice()>
    81bc:	e2840ec5 	add	r0, r4, #3152	; 0xc50
    81c0:	e280000c 	add	r0, r0, #12
    81c4:	eb005d5d 	bl	1f740 <CLogger::~CLogger()>
    81c8:	e2840ec2 	add	r0, r4, #3104	; 0xc20
    81cc:	eb00763d 	bl	25ac8 <CTimer::~CTimer()>
    81d0:	e2840e9e 	add	r0, r4, #2528	; 0x9e0
    81d4:	eb008194 	bl	2882c <CInterruptSystem::~CInterruptSystem()>
    81d8:	e2840e9d 	add	r0, r4, #2512	; 0x9d0
    81dc:	e2845d25 	add	r5, r4, #2368	; 0x940
    81e0:	e280000c 	add	r0, r0, #12
    81e4:	eb007f63 	bl	27f78 <CExceptionHandler::~CExceptionHandler()>
    81e8:	e285000c 	add	r0, r5, #12
    81ec:	eb006512 	bl	2163c <CScreenDevice::~CScreenDevice()>
    81f0:	e2850004 	add	r0, r5, #4
    81f4:	eb005755 	bl	1df50 <CDeviceNameService::~CDeviceNameService()>
    81f8:	e28400e8 	add	r0, r4, #232	; 0xe8
    81fc:	eb005be4 	bl	1f194 <CKernelOptions::~CKernelOptions()>
    8200:	e28400dc 	add	r0, r4, #220	; 0xdc
    8204:	eb005507 	bl	1d628 <CActLED::~CActLED()>
    8208:	e1a00004 	mov	r0, r4
    820c:	eb00807f 	bl	28410 <CMemorySystem::~CMemorySystem()>
    8210:	e1a00004 	mov	r0, r4
    8214:	e8bd8070 	pop	{r4, r5, r6, pc}

00008218 <CKernel::Initialize()>:
    8218:	e92d4070 	push	{r4, r5, r6, lr}
    821c:	e2805d25 	add	r5, r0, #2368	; 0x940
    8220:	e285500c 	add	r5, r5, #12
    8224:	e1a04000 	mov	r4, r0
    8228:	e1a00005 	mov	r0, r5
    822c:	eb00652a 	bl	216dc <CScreenDevice::Initialize()>
    8230:	e3500000 	cmp	r0, #0
    8234:	1a000001 	bne	8240 <CKernel::Initialize()+0x28>
    8238:	e3a00000 	mov	r0, #0
    823c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8240:	e2840ec5 	add	r0, r4, #3152	; 0xc50
    8244:	e1a01005 	mov	r1, r5
    8248:	e280000c 	add	r0, r0, #12
    824c:	eb005d5a 	bl	1f7bc <CLogger::Initialize(CDevice*)>
    8250:	e3500000 	cmp	r0, #0
    8254:	0afffff7 	beq	8238 <CKernel::Initialize()+0x20>
    8258:	e2840e9e 	add	r0, r4, #2528	; 0x9e0
    825c:	eb008181 	bl	28868 <CInterruptSystem::Initialize()>
    8260:	e3500000 	cmp	r0, #0
    8264:	0afffff3 	beq	8238 <CKernel::Initialize()+0x20>
    8268:	e2840ec2 	add	r0, r4, #3104	; 0xc20
    826c:	eb0078c0 	bl	26574 <CTimer::Initialize()>
    8270:	e3500000 	cmp	r0, #0
    8274:	0affffef 	beq	8238 <CKernel::Initialize()+0x20>
    8278:	e2840ed5 	add	r0, r4, #3408	; 0xd50
    827c:	e3a01001 	mov	r1, #1
    8280:	e2800004 	add	r0, r0, #4
    8284:	eb001848 	bl	e3ac <CDWHCIDevice::Initialize(bool)>
    8288:	e3500000 	cmp	r0, #0
    828c:	0affffe9 	beq	8238 <CKernel::Initialize()+0x20>
    8290:	e2840ede 	add	r0, r4, #3552	; 0xde0
    8294:	e280000c 	add	r0, r0, #12
    8298:	e8bd4070 	pop	{r4, r5, r6, lr}
    829c:	ea0000f0 	b	8664 <CMiniOrgan::Initialize()>

000082a0 <CKernel::Run()>:
    82a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    82a4:	e1a06000 	mov	r6, r0
    82a8:	e2804ec5 	add	r4, r0, #3152	; 0xc50
    82ac:	e284400c 	add	r4, r4, #12
    82b0:	e1a00004 	mov	r0, r4
    82b4:	e3a02003 	mov	r2, #3
    82b8:	e59f307c 	ldr	r3, [pc, #124]	; 833c <CKernel::Run()+0x9c>
    82bc:	e59f107c 	ldr	r1, [pc, #124]	; 8340 <CKernel::Run()+0xa0>
    82c0:	e2865ede 	add	r5, r6, #3552	; 0xde0
    82c4:	eb005d4f 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    82c8:	e285500c 	add	r5, r5, #12
    82cc:	e1a00004 	mov	r0, r4
    82d0:	e3a02003 	mov	r2, #3
    82d4:	e59f3068 	ldr	r3, [pc, #104]	; 8344 <CKernel::Run()+0xa4>
    82d8:	e59f1060 	ldr	r1, [pc, #96]	; 8340 <CKernel::Run()+0xa0>
    82dc:	eb005d49 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    82e0:	e2867ed5 	add	r7, r6, #3408	; 0xd50
    82e4:	e1a00005 	mov	r0, r5
    82e8:	eb006312 	bl	20f38 <CPWMSoundBaseDevice::Start()>
    82ec:	e3a04000 	mov	r4, #0
    82f0:	e2877004 	add	r7, r7, #4
    82f4:	e2866d25 	add	r6, r6, #2368	; 0x940
    82f8:	ea000009 	b	8324 <CKernel::Run()+0x84>
    82fc:	e1a00007 	mov	r0, r7
    8300:	eb0003c5 	bl	921c <CUSBHostController::UpdatePlugAndPlay()>
    8304:	e1a01000 	mov	r1, r0
    8308:	e1a00005 	mov	r0, r5
    830c:	eb0000e5 	bl	86a8 <CMiniOrgan::Process(bool)>
    8310:	e1a02004 	mov	r2, r4
    8314:	e3a01000 	mov	r1, #0
    8318:	e286000c 	add	r0, r6, #12
    831c:	e2844001 	add	r4, r4, #1
    8320:	eb0068df 	bl	226a4 <CScreenDevice::Rotor(unsigned int, unsigned int)>
    8324:	e1a00005 	mov	r0, r5
    8328:	eb006394 	bl	21180 <CPWMSoundBaseDevice::IsActive() const>
    832c:	e3500000 	cmp	r0, #0
    8330:	1afffff1 	bne	82fc <CKernel::Run()+0x5c>
    8334:	e3a00001 	mov	r0, #1
    8338:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    833c:	0002c368 	.word	0x0002c368
    8340:	0002c398 	.word	0x0002c398
    8344:	0002c38c 	.word	0x0002c38c

00008348 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)>:
    8348:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    834c:	e1a06000 	mov	r6, r0
    8350:	e3a04000 	mov	r4, #0
    8354:	e1a05001 	mov	r5, r1
    8358:	ed2d8b08 	vpush	{d8-d11}
    835c:	e3a03b02 	mov	r3, #2048	; 0x800
    8360:	e59f2268 	ldr	r2, [pc, #616]	; 85d0 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x288>
    8364:	eb0061f8 	bl	20b4c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>
    8368:	e59f3264 	ldr	r3, [pc, #612]	; 85d4 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x28c>
    836c:	e1a01005 	mov	r1, r5
    8370:	e3a02001 	mov	r2, #1
    8374:	e2865a01 	add	r5, r6, #4096	; 0x1000
    8378:	e59f7258 	ldr	r7, [pc, #600]	; 85d8 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x290>
    837c:	e5863000 	str	r3, [r6]
    8380:	e58640e4 	str	r4, [r6, #228]	; 0xe4
    8384:	e1a03004 	mov	r3, r4
    8388:	e28600ec 	add	r0, r6, #236	; 0xec
    838c:	e58640e8 	str	r4, [r6, #232]	; 0xe8
    8390:	eb00691d 	bl	2280c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8394:	e1a00006 	mov	r0, r6
    8398:	e5c541d8 	strb	r4, [r5, #472]	; 0x1d8
    839c:	e58541dc 	str	r4, [r5, #476]	; 0x1dc
    83a0:	e58541f4 	str	r4, [r5, #500]	; 0x1f4
    83a4:	e5876010 	str	r6, [r7, #16]
    83a8:	eb0062dd 	bl	20f24 <CPWMSoundBaseDevice::GetRangeMin() const>
    83ac:	e59f8228 	ldr	r8, [pc, #552]	; 85dc <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x294>
    83b0:	e1a03fc0 	asr	r3, r0, #31
    83b4:	e0c02098 	smull	r2, r0, r8, r0
    83b8:	e06300c0 	rsb	r0, r3, r0, asr #1
    83bc:	e58501e4 	str	r0, [r5, #484]	; 0x1e4
    83c0:	e1a00006 	mov	r0, r6
    83c4:	eb0062d8 	bl	20f2c <CPWMSoundBaseDevice::GetRangeMax() const>
    83c8:	e0c23098 	smull	r3, r2, r8, r0
    83cc:	e59531e4 	ldr	r3, [r5, #484]	; 0x1e4
    83d0:	e1a00fc0 	asr	r0, r0, #31
    83d4:	e06020c2 	rsb	r2, r0, r2, asr #1
    83d8:	e0823003 	add	r3, r2, r3
    83dc:	e0833fa3 	add	r3, r3, r3, lsr #31
    83e0:	e1a030c3 	asr	r3, r3, #1
    83e4:	e58521ec 	str	r2, [r5, #492]	; 0x1ec
    83e8:	e58531e8 	str	r3, [r5, #488]	; 0x1e8
    83ec:	e58531f0 	str	r3, [r5, #496]	; 0x1f0
    83f0:	e3a00020 	mov	r0, #32
    83f4:	eb007d10 	bl	2783c <operator new[](unsigned int)>
    83f8:	e1a03000 	mov	r3, r0
    83fc:	e3a00008 	mov	r0, #8
    8400:	e3a02003 	mov	r2, #3
    8404:	e0831000 	add	r1, r3, r0
    8408:	e59581ec 	ldr	r8, [r5, #492]	; 0x1ec
    840c:	e5871000 	str	r1, [r7]
    8410:	e59511e4 	ldr	r1, [r5, #484]	; 0x1e4
    8414:	e5830000 	str	r0, [r3]
    8418:	e0488001 	sub	r8, r8, r1
    841c:	e5832004 	str	r2, [r3, #4]
    8420:	e0888fa8 	add	r8, r8, r8, lsr #31
    8424:	e3a00501 	mov	r0, #4194304	; 0x400000
    8428:	eb007d03 	bl	2783c <operator new[](unsigned int)>
    842c:	e1a030c8 	asr	r3, r8, #1
    8430:	ee083a10 	vmov	s16, r3
    8434:	eeb89ac8 	vcvt.f32.s32	s18, s16
    8438:	e1a09000 	mov	r9, r0
    843c:	eeb79ac9 	vcvt.f64.f32	d9, s18
    8440:	eeb88bc8 	vcvt.f64.s32	d8, s16
    8444:	ed9fba5f 	vldr	s22, [pc, #380]	; 85c8 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x280>
    8448:	ed9fab56 	vldr	d10, [pc, #344]	; 85a8 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x260>
    844c:	e2408004 	sub	r8, r0, #4
    8450:	ee074a90 	vmov	s15, r4
    8454:	eeb80ae7 	vcvt.f32.s32	s0, s15
    8458:	ee200a0b 	vmul.f32	s0, s0, s22
    845c:	ee300a00 	vadd.f32	s0, s0, s0
    8460:	eeb70ac0 	vcvt.f64.f32	d0, s0
    8464:	ee200b0a 	vmul.f64	d0, d0, d10
    8468:	eb008b5c 	bl	2b1e0 <sin>
    846c:	eeb07b48 	vmov.f64	d7, d8
    8470:	ee097b00 	vmla.f64	d7, d9, d0
    8474:	eebd7bc7 	vcvt.s32.f64	s14, d7
    8478:	ee173a10 	vmov	r3, s14
    847c:	e2844001 	add	r4, r4, #1
    8480:	e3540601 	cmp	r4, #1048576	; 0x100000
    8484:	e5a83004 	str	r3, [r8, #4]!
    8488:	1afffff0 	bne	8450 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x108>
    848c:	e5973000 	ldr	r3, [r7]
    8490:	e1a00009 	mov	r0, r9
    8494:	e8830210 	stm	r3, {r4, r9}
    8498:	eb007cee 	bl	27858 <operator delete[](void*)>
    849c:	e59531ec 	ldr	r3, [r5, #492]	; 0x1ec
    84a0:	e59541e4 	ldr	r4, [r5, #484]	; 0x1e4
    84a4:	e3a00501 	mov	r0, #4194304	; 0x400000
    84a8:	e0434004 	sub	r4, r3, r4
    84ac:	eb007ce2 	bl	2783c <operator new[](unsigned int)>
    84b0:	ee074a90 	vmov	s15, r4
    84b4:	e3a03000 	mov	r3, #0
    84b8:	eeb87ae7 	vcvt.f32.s32	s14, s15
    84bc:	eddf6a41 	vldr	s13, [pc, #260]	; 85c8 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x280>
    84c0:	e2402004 	sub	r2, r0, #4
    84c4:	ee073a90 	vmov	s15, r3
    84c8:	eef87ae7 	vcvt.f32.s32	s15, s15
    84cc:	ee677aa6 	vmul.f32	s15, s15, s13
    84d0:	ee677a87 	vmul.f32	s15, s15, s14
    84d4:	eefd7ae7 	vcvt.s32.f32	s15, s15
    84d8:	ee171a90 	vmov	r1, s15
    84dc:	e2833001 	add	r3, r3, #1
    84e0:	e3530601 	cmp	r3, #1048576	; 0x100000
    84e4:	e5a21004 	str	r1, [r2, #4]!
    84e8:	1afffff5 	bne	84c4 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x17c>
    84ec:	e5972000 	ldr	r2, [r7]
    84f0:	e5823008 	str	r3, [r2, #8]
    84f4:	e582000c 	str	r0, [r2, #12]
    84f8:	eb007cd6 	bl	27858 <operator delete[](void*)>
    84fc:	e59531e4 	ldr	r3, [r5, #484]	; 0x1e4
    8500:	e59541ec 	ldr	r4, [r5, #492]	; 0x1ec
    8504:	e3a00501 	mov	r0, #4194304	; 0x400000
    8508:	e0444003 	sub	r4, r4, r3
    850c:	eb007cca 	bl	2783c <operator new[](unsigned int)>
    8510:	e3a03000 	mov	r3, #0
    8514:	eddf6a2b 	vldr	s13, [pc, #172]	; 85c8 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x280>
    8518:	e1a02003 	mov	r2, r3
    851c:	ed9f7a2a 	vldr	s14, [pc, #168]	; 85cc <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x284>
    8520:	ee073a90 	vmov	s15, r3
    8524:	eef87ae7 	vcvt.f32.s32	s15, s15
    8528:	ee677aa6 	vmul.f32	s15, s15, s13
    852c:	eef47ac7 	vcmpe.f32	s15, s14
    8530:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    8534:	47802103 	strmi	r2, [r0, r3, lsl #2]
    8538:	57804103 	strpl	r4, [r0, r3, lsl #2]
    853c:	e2833001 	add	r3, r3, #1
    8540:	e3530601 	cmp	r3, #1048576	; 0x100000
    8544:	1afffff5 	bne	8520 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x1d8>
    8548:	e5972000 	ldr	r2, [r7]
    854c:	e5823010 	str	r3, [r2, #16]
    8550:	e5820014 	str	r0, [r2, #20]
    8554:	eb007cbf 	bl	27858 <operator delete[](void*)>
    8558:	e3a0e000 	mov	lr, #0
    855c:	e3e0c000 	mvn	ip, #0
    8560:	e2862c12 	add	r2, r6, #4608	; 0x1200
    8564:	e59501e8 	ldr	r0, [r5, #488]	; 0x1e8
    8568:	e2823008 	add	r3, r2, #8
    856c:	e2821028 	add	r1, r2, #40	; 0x28
    8570:	e2822018 	add	r2, r2, #24
    8574:	e483e004 	str	lr, [r3], #4
    8578:	e1530002 	cmp	r3, r2
    857c:	e4c1c001 	strb	ip, [r1], #1
    8580:	e583000c 	str	r0, [r3, #12]
    8584:	1afffffa 	bne	8574 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x22c>
    8588:	e59f0050 	ldr	r0, [pc, #80]	; 85e0 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x298>
    858c:	ed9f2b07 	vldr	d2, [pc, #28]	; 85b0 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x268>
    8590:	ed9f1b08 	vldr	d1, [pc, #32]	; 85b8 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x270>
    8594:	ed9f0b09 	vldr	d0, [pc, #36]	; 85c0 <CMiniOrgan::CMiniOrgan(CInterruptSystem*)+0x278>
    8598:	eb0001eb 	bl	8d4c <IIRFilter::generateBandPass(double, double, double)>
    859c:	ecbd8b08 	vpop	{d8-d11}
    85a0:	e1a00006 	mov	r0, r6
    85a4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    85a8:	54442d18 	.word	0x54442d18
    85ac:	400921fb 	.word	0x400921fb
    85b0:	00000000 	.word	0x00000000
    85b4:	40590000 	.word	0x40590000
    85b8:	60000000 	.word	0x60000000
    85bc:	40771fe7 	.word	0x40771fe7
    85c0:	00000000 	.word	0x00000000
    85c4:	40e77000 	.word	0x40e77000
    85c8:	35800000 	.word	0x35800000
    85cc:	3f000000 	.word	0x3f000000
    85d0:	0000bb80 	.word	0x0000bb80
    85d4:	0002c5cc 	.word	0x0002c5cc
    85d8:	00034b40 	.word	0x00034b40
    85dc:	66666667 	.word	0x66666667
    85e0:	00034b44 	.word	0x00034b44

000085e4 <CMiniOrgan::~CMiniOrgan()>:
    85e4:	e92d4010 	push	{r4, lr}
    85e8:	e3a02000 	mov	r2, #0
    85ec:	e1a04000 	mov	r4, r0
    85f0:	e59f101c 	ldr	r1, [pc, #28]	; 8614 <CMiniOrgan::~CMiniOrgan()+0x30>
    85f4:	e59f301c 	ldr	r3, [pc, #28]	; 8618 <CMiniOrgan::~CMiniOrgan()+0x34>
    85f8:	e48010ec 	str	r1, [r0], #236	; 0xec
    85fc:	e5832010 	str	r2, [r3, #16]
    8600:	eb0068f7 	bl	229e4 <CSerialDevice::~CSerialDevice()>
    8604:	e1a00004 	mov	r0, r4
    8608:	eb0061d7 	bl	20d6c <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>
    860c:	e1a00004 	mov	r0, r4
    8610:	e8bd8010 	pop	{r4, pc}
    8614:	0002c5cc 	.word	0x0002c5cc
    8618:	00034b40 	.word	0x00034b40

0000861c <CMiniOrgan::~CMiniOrgan()>:
    861c:	e92d4010 	push	{r4, lr}
    8620:	e3a02000 	mov	r2, #0
    8624:	e1a04000 	mov	r4, r0
    8628:	e59f1028 	ldr	r1, [pc, #40]	; 8658 <CMiniOrgan::~CMiniOrgan()+0x3c>
    862c:	e59f3028 	ldr	r3, [pc, #40]	; 865c <CMiniOrgan::~CMiniOrgan()+0x40>
    8630:	e48010ec 	str	r1, [r0], #236	; 0xec
    8634:	e5832010 	str	r2, [r3, #16]
    8638:	eb0068e9 	bl	229e4 <CSerialDevice::~CSerialDevice()>
    863c:	e1a00004 	mov	r0, r4
    8640:	eb0061c9 	bl	20d6c <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>
    8644:	e1a00004 	mov	r0, r4
    8648:	e59f1010 	ldr	r1, [pc, #16]	; 8660 <CMiniOrgan::~CMiniOrgan()+0x44>
    864c:	eb007c82 	bl	2785c <operator delete(void*, unsigned int)>
    8650:	e1a00004 	mov	r0, r4
    8654:	e8bd8010 	pop	{r4, pc}
    8658:	0002c5cc 	.word	0x0002c5cc
    865c:	00034b40 	.word	0x00034b40
    8660:	0000122c 	.word	0x0000122c

00008664 <CMiniOrgan::Initialize()>:
    8664:	e92d4010 	push	{r4, lr}
    8668:	e1a04000 	mov	r4, r0
    866c:	eb005d23 	bl	1fb00 <CLogger::Get()>
    8670:	e59f3028 	ldr	r3, [pc, #40]	; 86a0 <CMiniOrgan::Initialize()+0x3c>
    8674:	e3a02003 	mov	r2, #3
    8678:	e2431e26 	sub	r1, r3, #608	; 0x260
    867c:	eb005c61 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8680:	e28400ec 	add	r0, r4, #236	; 0xec
    8684:	e59f1018 	ldr	r1, [pc, #24]	; 86a4 <CMiniOrgan::Initialize()+0x40>
    8688:	eb006930 	bl	22b50 <CSerialDevice::Initialize(unsigned int)>
    868c:	e3500000 	cmp	r0, #0
    8690:	13a03001 	movne	r3, #1
    8694:	12844a01 	addne	r4, r4, #4096	; 0x1000
    8698:	15c431d8 	strbne	r3, [r4, #472]	; 0x1d8
    869c:	e8bd8010 	pop	{r4, pc}
    86a0:	0002c600 	.word	0x0002c600
    86a4:	00007a12 	.word	0x00007a12

000086a8 <CMiniOrgan::Process(bool)>:
    86a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    86ac:	e59050e4 	ldr	r5, [r0, #228]	; 0xe4
    86b0:	e24dd018 	sub	sp, sp, #24
    86b4:	e3550000 	cmp	r5, #0
    86b8:	0a000001 	beq	86c4 <CMiniOrgan::Process(bool)+0x1c>
    86bc:	e28dd018 	add	sp, sp, #24
    86c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    86c4:	e3510000 	cmp	r1, #0
    86c8:	e1a04000 	mov	r4, r0
    86cc:	1a000034 	bne	87a4 <CMiniOrgan::Process(bool)+0xfc>
    86d0:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
    86d4:	e3530000 	cmp	r3, #0
    86d8:	1afffff7 	bne	86bc <CMiniOrgan::Process(bool)+0x14>
    86dc:	e2846a01 	add	r6, r4, #4096	; 0x1000
    86e0:	e5d631d8 	ldrb	r3, [r6, #472]	; 0x1d8
    86e4:	e3530000 	cmp	r3, #0
    86e8:	0afffff3 	beq	86bc <CMiniOrgan::Process(bool)+0x14>
    86ec:	e3a02014 	mov	r2, #20
    86f0:	e28d1004 	add	r1, sp, #4
    86f4:	e28400ec 	add	r0, r4, #236	; 0xec
    86f8:	eb006a17 	bl	22f5c <CSerialDevice::Read(void*, unsigned int)>
    86fc:	e3500000 	cmp	r0, #0
    8700:	daffffed 	ble	86bc <CMiniOrgan::Process(bool)+0x14>
    8704:	e28d5004 	add	r5, sp, #4
    8708:	e2848d47 	add	r8, r4, #4544	; 0x11c0
    870c:	e0857000 	add	r7, r5, r0
    8710:	e2888020 	add	r8, r8, #32
    8714:	ea00000a 	b	8744 <CMiniOrgan::Process(bool)+0x9c>
    8718:	e20030e0 	and	r3, r0, #224	; 0xe0
    871c:	e3530080 	cmp	r3, #128	; 0x80
    8720:	1a000005 	bne	873c <CMiniOrgan::Process(bool)+0x94>
    8724:	e59631dc 	ldr	r3, [r6, #476]	; 0x1dc
    8728:	e0842003 	add	r2, r4, r3
    872c:	e2822d47 	add	r2, r2, #4544	; 0x11c0
    8730:	e2833001 	add	r3, r3, #1
    8734:	e58631dc 	str	r3, [r6, #476]	; 0x1dc
    8738:	e5c20020 	strb	r0, [r2, #32]
    873c:	e1570005 	cmp	r7, r5
    8740:	0affffdd 	beq	86bc <CMiniOrgan::Process(bool)+0x14>
    8744:	e59631dc 	ldr	r3, [r6, #476]	; 0x1dc
    8748:	e4d50001 	ldrb	r0, [r5], #1
    874c:	e3530000 	cmp	r3, #0
    8750:	0afffff0 	beq	8718 <CMiniOrgan::Process(bool)+0x70>
    8754:	e2432001 	sub	r2, r3, #1
    8758:	e3520001 	cmp	r2, #1
    875c:	8a000034 	bhi	8834 <CMiniOrgan::Process(bool)+0x18c>
    8760:	e3100080 	tst	r0, #128	; 0x80
    8764:	13a03000 	movne	r3, #0
    8768:	158631dc 	strne	r3, [r6, #476]	; 0x1dc
    876c:	1affffe9 	bne	8718 <CMiniOrgan::Process(bool)+0x70>
    8770:	e2832001 	add	r2, r3, #1
    8774:	e0843003 	add	r3, r4, r3
    8778:	e2833d47 	add	r3, r3, #4544	; 0x11c0
    877c:	e3520003 	cmp	r2, #3
    8780:	e58621dc 	str	r2, [r6, #476]	; 0x1dc
    8784:	e5c30020 	strb	r0, [r3, #32]
    8788:	1affffeb 	bne	873c <CMiniOrgan::Process(bool)+0x94>
    878c:	e1a01008 	mov	r1, r8
    8790:	e3a00000 	mov	r0, #0
    8794:	eb00007d 	bl	8990 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)>
    8798:	e3a03000 	mov	r3, #0
    879c:	e58631dc 	str	r3, [r6, #476]	; 0x1dc
    87a0:	eaffffe5 	b	873c <CMiniOrgan::Process(bool)+0x94>
    87a4:	eb0056af 	bl	1e268 <CDeviceNameService::Get()>
    87a8:	e1a02005 	mov	r2, r5
    87ac:	e59f1090 	ldr	r1, [pc, #144]	; 8844 <CMiniOrgan::Process(bool)+0x19c>
    87b0:	eb00566d 	bl	1e16c <CDeviceNameService::GetDevice(char const*, bool)>
    87b4:	e58400e4 	str	r0, [r4, #228]	; 0xe4
    87b8:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
    87bc:	e3530000 	cmp	r3, #0
    87c0:	1a000013 	bne	8814 <CMiniOrgan::Process(bool)+0x16c>
    87c4:	e59450e8 	ldr	r5, [r4, #232]	; 0xe8
    87c8:	e3550000 	cmp	r5, #0
    87cc:	1affffba 	bne	86bc <CMiniOrgan::Process(bool)+0x14>
    87d0:	eb0056a4 	bl	1e268 <CDeviceNameService::Get()>
    87d4:	e1a02005 	mov	r2, r5
    87d8:	e59f1068 	ldr	r1, [pc, #104]	; 8848 <CMiniOrgan::Process(bool)+0x1a0>
    87dc:	eb005662 	bl	1e16c <CDeviceNameService::GetDevice(char const*, bool)>
    87e0:	e58400e8 	str	r0, [r4, #232]	; 0xe8
    87e4:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    87e8:	e3530000 	cmp	r3, #0
    87ec:	0affffba 	beq	86dc <CMiniOrgan::Process(bool)+0x34>
    87f0:	e1a02005 	mov	r2, r5
    87f4:	e59400e8 	ldr	r0, [r4, #232]	; 0xe8
    87f8:	e59f104c 	ldr	r1, [pc, #76]	; 884c <CMiniOrgan::Process(bool)+0x1a4>
    87fc:	eb0055c0 	bl	1df04 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>
    8800:	e1a02005 	mov	r2, r5
    8804:	e59400e8 	ldr	r0, [r4, #232]	; 0xe8
    8808:	e59f1040 	ldr	r1, [pc, #64]	; 8850 <CMiniOrgan::Process(bool)+0x1a8>
    880c:	eb0003fc 	bl	9804 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*), bool)>
    8810:	eaffffa9 	b	86bc <CMiniOrgan::Process(bool)+0x14>
    8814:	e59400e4 	ldr	r0, [r4, #228]	; 0xe4
    8818:	e1a02005 	mov	r2, r5
    881c:	e59f1028 	ldr	r1, [pc, #40]	; 884c <CMiniOrgan::Process(bool)+0x1a4>
    8820:	eb0055b7 	bl	1df04 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>
    8824:	e59400e4 	ldr	r0, [r4, #228]	; 0xe4
    8828:	e59f1024 	ldr	r1, [pc, #36]	; 8854 <CMiniOrgan::Process(bool)+0x1ac>
    882c:	eb0004d1 	bl	9b78 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>
    8830:	eaffffa1 	b	86bc <CMiniOrgan::Process(bool)+0x14>
    8834:	e59f101c 	ldr	r1, [pc, #28]	; 8858 <CMiniOrgan::Process(bool)+0x1b0>
    8838:	e3a020dc 	mov	r2, #220	; 0xdc
    883c:	e2810010 	add	r0, r1, #16
    8840:	eb0053ae 	bl	1d700 <assertion_failed>
    8844:	0002c634 	.word	0x0002c634
    8848:	0002c63c 	.word	0x0002c63c
    884c:	00008c34 	.word	0x00008c34
    8850:	00008ac0 	.word	0x00008ac0
    8854:	00008990 	.word	0x00008990
    8858:	0002c644 	.word	0x0002c644

0000885c <CMiniOrgan::GetChunk(unsigned int*, unsigned int)>:
    885c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8860:	e280bc12 	add	fp, r0, #4608	; 0x1200
    8864:	ed2d8b02 	vpush	{d8}
    8868:	e28b8008 	add	r8, fp, #8
    886c:	e1a03008 	mov	r3, r8
    8870:	e24dd00c 	sub	sp, sp, #12
    8874:	e58d2004 	str	r2, [sp, #4]
    8878:	e28bb018 	add	fp, fp, #24
    887c:	e4932004 	ldr	r2, [r3], #4
    8880:	e3520000 	cmp	r2, #0
    8884:	1a00003c 	bne	897c <CMiniOrgan::GetChunk(unsigned int*, unsigned int)+0x120>
    8888:	e153000b 	cmp	r3, fp
    888c:	1afffffa 	bne	887c <CMiniOrgan::GetChunk(unsigned int*, unsigned int)+0x20>
    8890:	e2806a01 	add	r6, r0, #4096	; 0x1000
    8894:	e58621f4 	str	r2, [r6, #500]	; 0x1f4
    8898:	e59d3004 	ldr	r3, [sp, #4]
    889c:	e1b090a3 	lsrs	r9, r3, #1
    88a0:	0a00002e 	beq	8960 <CMiniOrgan::GetChunk(unsigned int*, unsigned int)+0x104>
    88a4:	e3a07000 	mov	r7, #0
    88a8:	ed9f8a35 	vldr	s16, [pc, #212]	; 8984 <CMiniOrgan::GetChunk(unsigned int*, unsigned int)+0x128>
    88ac:	e59f30d4 	ldr	r3, [pc, #212]	; 8988 <CMiniOrgan::GetChunk(unsigned int*, unsigned int)+0x12c>
    88b0:	e2815008 	add	r5, r1, #8
    88b4:	edd38a00 	vldr	s17, [r3]
    88b8:	e59f30cc 	ldr	r3, [pc, #204]	; 898c <CMiniOrgan::GetChunk(unsigned int*, unsigned int)+0x130>
    88bc:	e593a000 	ldr	sl, [r3]
    88c0:	e1a04008 	mov	r4, r8
    88c4:	e59631e8 	ldr	r3, [r6, #488]	; 0x1e8
    88c8:	e5053008 	str	r3, [r5, #-8]
    88cc:	e59631e8 	ldr	r3, [r6, #488]	; 0x1e8
    88d0:	e5053004 	str	r3, [r5, #-4]
    88d4:	e4941004 	ldr	r1, [r4], #4
    88d8:	e3510000 	cmp	r1, #0
    88dc:	0a000019 	beq	8948 <CMiniOrgan::GetChunk(unsigned int*, unsigned int)+0xec>
    88e0:	ee071a90 	vmov	s15, r1
    88e4:	e59631f4 	ldr	r3, [r6, #500]	; 0x1f4
    88e8:	eeb87a67 	vcvt.f32.u32	s14, s15
    88ec:	e0873003 	add	r3, r7, r3
    88f0:	ee073a90 	vmov	s15, r3
    88f4:	eef87a67 	vcvt.f32.u32	s15, s15
    88f8:	ee277a08 	vmul.f32	s14, s14, s16
    88fc:	ee677aa8 	vmul.f32	s15, s15, s17
    8900:	ee677a87 	vmul.f32	s15, s15, s14
    8904:	eefd7ae7 	vcvt.s32.f32	s15, s15
    8908:	e59a1000 	ldr	r1, [sl]
    890c:	ee170a90 	vmov	r0, s15
    8910:	eb0088d6 	bl	2ac70 <__aeabi_uidivmod>
    8914:	e59a3004 	ldr	r3, [sl, #4]
    8918:	e7933101 	ldr	r3, [r3, r1, lsl #2]
    891c:	e2831003 	add	r1, r3, #3
    8920:	e3530000 	cmp	r3, #0
    8924:	b1a03001 	movlt	r3, r1
    8928:	e1a03143 	asr	r3, r3, #2
    892c:	e58631f0 	str	r3, [r6, #496]	; 0x1f0
    8930:	e14500d8 	ldrd	r0, [r5, #-8]
    8934:	e0803003 	add	r3, r0, r3
    8938:	e5053008 	str	r3, [r5, #-8]
    893c:	e59631f0 	ldr	r3, [r6, #496]	; 0x1f0
    8940:	e0813003 	add	r3, r1, r3
    8944:	e5053004 	str	r3, [r5, #-4]
    8948:	e154000b 	cmp	r4, fp
    894c:	1affffe0 	bne	88d4 <CMiniOrgan::GetChunk(unsigned int*, unsigned int)+0x78>
    8950:	e2877001 	add	r7, r7, #1
    8954:	e1590007 	cmp	r9, r7
    8958:	e2855008 	add	r5, r5, #8
    895c:	1affffd7 	bne	88c0 <CMiniOrgan::GetChunk(unsigned int*, unsigned int)+0x64>
    8960:	e59631f4 	ldr	r3, [r6, #500]	; 0x1f4
    8964:	e59d0004 	ldr	r0, [sp, #4]
    8968:	e0839009 	add	r9, r3, r9
    896c:	e58691f4 	str	r9, [r6, #500]	; 0x1f4
    8970:	e28dd00c 	add	sp, sp, #12
    8974:	ecbd8b02 	vpop	{d8}
    8978:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    897c:	e2806a01 	add	r6, r0, #4096	; 0x1000
    8980:	eaffffc4 	b	8898 <CMiniOrgan::GetChunk(unsigned int*, unsigned int)+0x3c>
    8984:	49800000 	.word	0x49800000
    8988:	00034728 	.word	0x00034728
    898c:	00034b40 	.word	0x00034b40

00008990 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)>:
    8990:	e59f3118 	ldr	r3, [pc, #280]	; 8ab0 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0x120>
    8994:	e5930010 	ldr	r0, [r3, #16]
    8998:	e3500000 	cmp	r0, #0
    899c:	0a00002b 	beq	8a50 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0xc0>
    89a0:	e3520002 	cmp	r2, #2
    89a4:	912fff1e 	bxls	lr
    89a8:	e5d13000 	ldrb	r3, [r1]
    89ac:	e5d1c001 	ldrb	ip, [r1, #1]
    89b0:	e1a03243 	asr	r3, r3, #4
    89b4:	e3530009 	cmp	r3, #9
    89b8:	0a000013 	beq	8a0c <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0x7c>
    89bc:	e3530008 	cmp	r3, #8
    89c0:	112fff1e 	bxne	lr
    89c4:	e59f30e8 	ldr	r3, [pc, #232]	; 8ab4 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0x124>
    89c8:	ed9f6b36 	vldr	d6, [pc, #216]	; 8aa8 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0x118>
    89cc:	e083c10c 	add	ip, r3, ip, lsl #2
    89d0:	ed9c7a02 	vldr	s14, [ip, #8]
    89d4:	eeb77ac7 	vcvt.f64.f32	d7, s14
    89d8:	ee377b06 	vadd.f64	d7, d7, d6
    89dc:	eefc7bc7 	vcvt.u32.f64	s15, d7
    89e0:	e3a03000 	mov	r3, #0
    89e4:	ee172a90 	vmov	r2, s15
    89e8:	e2801c12 	add	r1, r0, #4608	; 0x1200
    89ec:	e2811008 	add	r1, r1, #8
    89f0:	e491c004 	ldr	ip, [r1], #4
    89f4:	e15c0002 	cmp	ip, r2
    89f8:	0a000019 	beq	8a64 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0xd4>
    89fc:	e2833001 	add	r3, r3, #1
    8a00:	e3530004 	cmp	r3, #4
    8a04:	1afffff9 	bne	89f0 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0x60>
    8a08:	e12fff1e 	bx	lr
    8a0c:	e5d12002 	ldrb	r2, [r1, #2]
    8a10:	e22c3080 	eor	r3, ip, #128	; 0x80
    8a14:	e3520000 	cmp	r2, #0
    8a18:	03a03000 	moveq	r3, #0
    8a1c:	11a033a3 	lsrne	r3, r3, #7
    8a20:	e3530000 	cmp	r3, #0
    8a24:	012fff1e 	bxeq	lr
    8a28:	e3a03000 	mov	r3, #0
    8a2c:	e2802c12 	add	r2, r0, #4608	; 0x1200
    8a30:	e2822008 	add	r2, r2, #8
    8a34:	e4921004 	ldr	r1, [r2], #4
    8a38:	e3510000 	cmp	r1, #0
    8a3c:	0a00000d 	beq	8a78 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0xe8>
    8a40:	e2833001 	add	r3, r3, #1
    8a44:	e3530004 	cmp	r3, #4
    8a48:	1afffff9 	bne	8a34 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0xa4>
    8a4c:	e12fff1e 	bx	lr
    8a50:	e59f1060 	ldr	r1, [pc, #96]	; 8ab8 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0x128>
    8a54:	e92d4010 	push	{r4, lr}
    8a58:	e59f205c 	ldr	r2, [pc, #92]	; 8abc <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0x12c>
    8a5c:	e2810014 	add	r0, r1, #20
    8a60:	eb005326 	bl	1d700 <assertion_failed>
    8a64:	e3a02000 	mov	r2, #0
    8a68:	e2833d12 	add	r3, r3, #1152	; 0x480
    8a6c:	e2833002 	add	r3, r3, #2
    8a70:	e7802103 	str	r2, [r0, r3, lsl #2]
    8a74:	e12fff1e 	bx	lr
    8a78:	e59f2034 	ldr	r2, [pc, #52]	; 8ab4 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0x124>
    8a7c:	ed9f6b09 	vldr	d6, [pc, #36]	; 8aa8 <CMiniOrgan::MIDIPacketHandler(unsigned int, unsigned char*, unsigned int)+0x118>
    8a80:	e082c10c 	add	ip, r2, ip, lsl #2
    8a84:	ed9c7a02 	vldr	s14, [ip, #8]
    8a88:	eeb77ac7 	vcvt.f64.f32	d7, s14
    8a8c:	ee377b06 	vadd.f64	d7, d7, d6
    8a90:	eebc7bc7 	vcvt.u32.f64	s14, d7
    8a94:	ee172a10 	vmov	r2, s14
    8a98:	e2833d12 	add	r3, r3, #1152	; 0x480
    8a9c:	e2833002 	add	r3, r3, #2
    8aa0:	e7802103 	str	r2, [r0, r3, lsl #2]
    8aa4:	e12fff1e 	bx	lr
    8aa8:	00000000 	.word	0x00000000
    8aac:	3fe00000 	.word	0x3fe00000
    8ab0:	00034b40 	.word	0x00034b40
    8ab4:	0002c3a0 	.word	0x0002c3a0
    8ab8:	0002c644 	.word	0x0002c644
    8abc:	00000113 	.word	0x00000113

00008ac0 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    8ac0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    8ac4:	e59f3154 	ldr	r3, [pc, #340]	; 8c20 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x160>
    8ac8:	e24dd00c 	sub	sp, sp, #12
    8acc:	e5934010 	ldr	r4, [r3, #16]
    8ad0:	e3540000 	cmp	r4, #0
    8ad4:	0a00004a 	beq	8c04 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x144>
    8ad8:	e1a0c001 	mov	ip, r1
    8adc:	e59f3140 	ldr	r3, [pc, #320]	; 8c24 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x164>
    8ae0:	e2412001 	sub	r2, r1, #1
    8ae4:	e3a06000 	mov	r6, #0
    8ae8:	e8930003 	ldm	r3, {r0, r1}
    8aec:	e3a0e02c 	mov	lr, #44	; 0x2c
    8af0:	e28cc005 	add	ip, ip, #5
    8af4:	e58d0000 	str	r0, [sp]
    8af8:	e1cd10b4 	strh	r1, [sp, #4]
    8afc:	ea000006 	b	8b1c <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x5c>
    8b00:	e28d1008 	add	r1, sp, #8
    8b04:	e0811006 	add	r1, r1, r6
    8b08:	e283303d 	add	r3, r3, #61	; 0x3d
    8b0c:	e5413008 	strb	r3, [r1, #-8]
    8b10:	e2866001 	add	r6, r6, #1
    8b14:	e152000c 	cmp	r2, ip
    8b18:	0a00000c 	beq	8b50 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x90>
    8b1c:	e5f23001 	ldrb	r3, [r2, #1]!
    8b20:	e3530000 	cmp	r3, #0
    8b24:	0afffffa 	beq	8b14 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x54>
    8b28:	e2431004 	sub	r1, r3, #4
    8b2c:	e3510019 	cmp	r1, #25
    8b30:	9afffff2 	bls	8b00 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x40>
    8b34:	e3530036 	cmp	r3, #54	; 0x36
    8b38:	028d3008 	addeq	r3, sp, #8
    8b3c:	00833006 	addeq	r3, r3, r6
    8b40:	0543e008 	strbeq	lr, [r3, #-8]
    8b44:	02866001 	addeq	r6, r6, #1
    8b48:	e152000c 	cmp	r2, ip
    8b4c:	1afffff2 	bne	8b1c <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x5c>
    8b50:	e3560004 	cmp	r6, #4
    8b54:	b1a07006 	movlt	r7, r6
    8b58:	a3a07004 	movge	r7, #4
    8b5c:	e3560000 	cmp	r6, #0
    8b60:	02849c12 	addeq	r9, r4, #4608	; 0x1200
    8b64:	0a00001c 	beq	8bdc <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x11c>
    8b68:	e3a05000 	mov	r5, #0
    8b6c:	ed9f6b29 	vldr	d6, [pc, #164]	; 8c18 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x158>
    8b70:	e1a0800d 	mov	r8, sp
    8b74:	e59f00ac 	ldr	r0, [pc, #172]	; 8c28 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x168>
    8b78:	e2849c12 	add	r9, r4, #4608	; 0x1200
    8b7c:	e240ee22 	sub	lr, r0, #544	; 0x220
    8b80:	e289c008 	add	ip, r9, #8
    8b84:	e3a0202c 	mov	r2, #44	; 0x2c
    8b88:	e0d810d1 	ldrsb	r1, [r8], #1
    8b8c:	e59f3098 	ldr	r3, [pc, #152]	; 8c2c <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x16c>
    8b90:	ea000000 	b	8b98 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xd8>
    8b94:	e1f320d2 	ldrsb	r2, [r3, #2]!
    8b98:	e1510002 	cmp	r1, r2
    8b9c:	1a000006 	bne	8bbc <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xfc>
    8ba0:	e5d32001 	ldrb	r2, [r3, #1]
    8ba4:	e08e2102 	add	r2, lr, r2, lsl #2
    8ba8:	ed927a02 	vldr	s14, [r2, #8]
    8bac:	eeb77ac7 	vcvt.f64.f32	d7, s14
    8bb0:	ee377b06 	vadd.f64	d7, d7, d6
    8bb4:	eebc7bc7 	vcvt.u32.f64	s14, d7
    8bb8:	ed8c7a00 	vstr	s14, [ip]
    8bbc:	e1530000 	cmp	r3, r0
    8bc0:	1afffff3 	bne	8b94 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xd4>
    8bc4:	e2855001 	add	r5, r5, #1
    8bc8:	e1570005 	cmp	r7, r5
    8bcc:	e28cc004 	add	ip, ip, #4
    8bd0:	caffffeb 	bgt	8b84 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xc4>
    8bd4:	e3560003 	cmp	r6, #3
    8bd8:	ca000007 	bgt	8bfc <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x13c>
    8bdc:	e3a03000 	mov	r3, #0
    8be0:	e2877d12 	add	r7, r7, #1152	; 0x480
    8be4:	e2877002 	add	r7, r7, #2
    8be8:	e0844107 	add	r4, r4, r7, lsl #2
    8bec:	e2899018 	add	r9, r9, #24
    8bf0:	e4843004 	str	r3, [r4], #4
    8bf4:	e1540009 	cmp	r4, r9
    8bf8:	1afffffc 	bne	8bf0 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x130>
    8bfc:	e28dd00c 	add	sp, sp, #12
    8c00:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    8c04:	e59f1024 	ldr	r1, [pc, #36]	; 8c30 <CMiniOrgan::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x170>
    8c08:	e3a02f4e 	mov	r2, #312	; 0x138
    8c0c:	e2810014 	add	r0, r1, #20
    8c10:	eb0052ba 	bl	1d700 <assertion_failed>
    8c14:	e320f000 	nop	{0}
    8c18:	00000000 	.word	0x00000000
    8c1c:	3fe00000 	.word	0x3fe00000
    8c20:	00034b40 	.word	0x00034b40
    8c24:	0002c668 	.word	0x0002c668
    8c28:	0002c5c0 	.word	0x0002c5c0
    8c2c:	0002c5a8 	.word	0x0002c5a8
    8c30:	0002c644 	.word	0x0002c644

00008c34 <CMiniOrgan::USBDeviceRemovedHandler(CDevice*, void*)>:
    8c34:	e92d4010 	push	{r4, lr}
    8c38:	e59f4078 	ldr	r4, [pc, #120]	; 8cb8 <CMiniOrgan::USBDeviceRemovedHandler(CDevice*, void*)+0x84>
    8c3c:	e5943010 	ldr	r3, [r4, #16]
    8c40:	e3530000 	cmp	r3, #0
    8c44:	0a000017 	beq	8ca8 <CMiniOrgan::USBDeviceRemovedHandler(CDevice*, void*)+0x74>
    8c48:	e59320e4 	ldr	r2, [r3, #228]	; 0xe4
    8c4c:	e1520000 	cmp	r2, r0
    8c50:	0a00000b 	beq	8c84 <CMiniOrgan::USBDeviceRemovedHandler(CDevice*, void*)+0x50>
    8c54:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
    8c58:	e1530000 	cmp	r3, r0
    8c5c:	18bd8010 	popne	{r4, pc}
    8c60:	eb005ba6 	bl	1fb00 <CLogger::Get()>
    8c64:	e59f3050 	ldr	r3, [pc, #80]	; 8cbc <CMiniOrgan::USBDeviceRemovedHandler(CDevice*, void*)+0x88>
    8c68:	e3a02004 	mov	r2, #4
    8c6c:	e2431fbb 	sub	r1, r3, #748	; 0x2ec
    8c70:	eb005ae4 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8c74:	e3a02000 	mov	r2, #0
    8c78:	e5943010 	ldr	r3, [r4, #16]
    8c7c:	e58320e8 	str	r2, [r3, #232]	; 0xe8
    8c80:	e8bd8010 	pop	{r4, pc}
    8c84:	eb005b9d 	bl	1fb00 <CLogger::Get()>
    8c88:	e59f3030 	ldr	r3, [pc, #48]	; 8cc0 <CMiniOrgan::USBDeviceRemovedHandler(CDevice*, void*)+0x8c>
    8c8c:	e3a02004 	mov	r2, #4
    8c90:	e2431e2d 	sub	r1, r3, #720	; 0x2d0
    8c94:	eb005adb 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8c98:	e3a02000 	mov	r2, #0
    8c9c:	e5943010 	ldr	r3, [r4, #16]
    8ca0:	e58320e4 	str	r2, [r3, #228]	; 0xe4
    8ca4:	e8bd8010 	pop	{r4, pc}
    8ca8:	e59f1014 	ldr	r1, [pc, #20]	; 8cc4 <CMiniOrgan::USBDeviceRemovedHandler(CDevice*, void*)+0x90>
    8cac:	e59f2014 	ldr	r2, [pc, #20]	; 8cc8 <CMiniOrgan::USBDeviceRemovedHandler(CDevice*, void*)+0x94>
    8cb0:	e2810014 	add	r0, r1, #20
    8cb4:	eb005291 	bl	1d700 <assertion_failed>
    8cb8:	00034b40 	.word	0x00034b40
    8cbc:	0002c68c 	.word	0x0002c68c
    8cc0:	0002c670 	.word	0x0002c670
    8cc4:	0002c644 	.word	0x0002c644
    8cc8:	00000161 	.word	0x00000161

00008ccc <__static_initialization_and_destruction_0(int, int)>:
    8ccc:	e59f300c 	ldr	r3, [pc, #12]	; 8ce0 <__static_initialization_and_destruction_0(int, int)+0x14>
    8cd0:	e1510003 	cmp	r1, r3
    8cd4:	03500001 	cmpeq	r0, #1
    8cd8:	112fff1e 	bxne	lr
    8cdc:	ea000000 	b	8ce4 <__static_initialization_and_destruction_0(int, int) [clone .part.0]>
    8ce0:	0000ffff 	.word	0x0000ffff

00008ce4 <__static_initialization_and_destruction_0(int, int) [clone .part.0]>:
    8ce4:	e92d4010 	push	{r4, lr}
    8ce8:	e59f4018 	ldr	r4, [pc, #24]	; 8d08 <__static_initialization_and_destruction_0(int, int) [clone .part.0]+0x24>
    8cec:	e1a00004 	mov	r0, r4
    8cf0:	eb000008 	bl	8d18 <IIRFilter::IIRFilter()>
    8cf4:	e1a00004 	mov	r0, r4
    8cf8:	e8bd4010 	pop	{r4, lr}
    8cfc:	e59f2008 	ldr	r2, [pc, #8]	; 8d0c <__static_initialization_and_destruction_0(int, int) [clone .part.0]+0x28>
    8d00:	e59f1008 	ldr	r1, [pc, #8]	; 8d10 <__static_initialization_and_destruction_0(int, int) [clone .part.0]+0x2c>
    8d04:	ea0072eb 	b	258b8 <__aeabi_atexit>
    8d08:	00034b44 	.word	0x00034b44
    8d0c:	00034c44 	.word	0x00034c44
    8d10:	00008d1c 	.word	0x00008d1c

00008d14 <_GLOBAL__sub_I_tables>:
    8d14:	eafffff2 	b	8ce4 <__static_initialization_and_destruction_0(int, int) [clone .part.0]>

00008d18 <IIRFilter::IIRFilter()>:
    8d18:	e12fff1e 	bx	lr

00008d1c <IIRFilter::~IIRFilter()>:
    8d1c:	e92d4010 	push	{r4, lr}
    8d20:	e1a04000 	mov	r4, r0
    8d24:	e5900000 	ldr	r0, [r0]
    8d28:	e3500000 	cmp	r0, #0
    8d2c:	0a000000 	beq	8d34 <IIRFilter::~IIRFilter()+0x18>
    8d30:	eb007ac8 	bl	27858 <operator delete[](void*)>
    8d34:	e5940004 	ldr	r0, [r4, #4]
    8d38:	e3500000 	cmp	r0, #0
    8d3c:	0a000000 	beq	8d44 <IIRFilter::~IIRFilter()+0x28>
    8d40:	eb007ac4 	bl	27858 <operator delete[](void*)>
    8d44:	e1a00004 	mov	r0, r4
    8d48:	e8bd8010 	pop	{r4, pc}

00008d4c <IIRFilter::generateBandPass(double, double, double)>:
    8d4c:	e3a03003 	mov	r3, #3
    8d50:	e92d4010 	push	{r4, lr}
    8d54:	e1a04000 	mov	r4, r0
    8d58:	ed2d8b06 	vpush	{d8-d10}
    8d5c:	e5803008 	str	r3, [r0, #8]
    8d60:	e3a00018 	mov	r0, #24
    8d64:	eeb08b40 	vmov.f64	d8, d0
    8d68:	eeb0ab41 	vmov.f64	d10, d1
    8d6c:	eeb09b42 	vmov.f64	d9, d2
    8d70:	eb007ab1 	bl	2783c <operator new[](unsigned int)>
    8d74:	e5943008 	ldr	r3, [r4, #8]
    8d78:	e5840000 	str	r0, [r4]
    8d7c:	e373021f 	cmn	r3, #-268435455	; 0xf0000001
    8d80:	91a00183 	lslls	r0, r3, #3
    8d84:	83e00000 	mvnhi	r0, #0
    8d88:	eb007aab 	bl	2783c <operator new[](unsigned int)>
    8d8c:	ee896b08 	vdiv.f64	d6, d9, d8
    8d90:	ed9f9b22 	vldr	d9, [pc, #136]	; 8e20 <IIRFilter::generateBandPass(double, double, double)+0xd4>
    8d94:	ee8a0b08 	vdiv.f64	d0, d10, d8
    8d98:	ed9f7b22 	vldr	d7, [pc, #136]	; 8e28 <IIRFilter::generateBandPass(double, double, double)+0xdc>
    8d9c:	eeb08b49 	vmov.f64	d8, d9
    8da0:	ed9f5b22 	vldr	d5, [pc, #136]	; 8e30 <IIRFilter::generateBandPass(double, double, double)+0xe4>
    8da4:	ee068b47 	vmls.f64	d8, d6, d7
    8da8:	ee200b05 	vmul.f64	d0, d0, d5
    8dac:	e5840004 	str	r0, [r4, #4]
    8db0:	eb0088d8 	bl	2b118 <cos>
    8db4:	e1c420d0 	ldrd	r2, [r4]
    8db8:	ee386b08 	vadd.f64	d6, d8, d8
    8dbc:	ee266b00 	vmul.f64	d6, d6, d0
    8dc0:	ee285b08 	vmul.f64	d5, d8, d8
    8dc4:	ee393b46 	vsub.f64	d3, d9, d6
    8dc8:	ee304b00 	vadd.f64	d4, d0, d0
    8dcc:	ed9f7b19 	vldr	d7, [pc, #100]	; 8e38 <IIRFilter::generateBandPass(double, double, double)+0xec>
    8dd0:	ee333b05 	vadd.f64	d3, d3, d5
    8dd4:	ee377b44 	vsub.f64	d7, d7, d4
    8dd8:	ee834b07 	vdiv.f64	d4, d3, d7
    8ddc:	ee347b48 	vsub.f64	d7, d4, d8
    8de0:	ee377b07 	vadd.f64	d7, d7, d7
    8de4:	ee399b44 	vsub.f64	d9, d9, d4
    8de8:	ee288b48 	vnmul.f64	d8, d8, d8
    8dec:	ee355b44 	vsub.f64	d5, d5, d4
    8df0:	ee277b00 	vmul.f64	d7, d7, d0
    8df4:	e3a00000 	mov	r0, #0
    8df8:	e3a01000 	mov	r1, #0
    8dfc:	ed829b00 	vstr	d9, [r2]
    8e00:	ed827b02 	vstr	d7, [r2, #8]
    8e04:	ed825b04 	vstr	d5, [r2, #16]
    8e08:	ed838b04 	vstr	d8, [r3, #16]
    8e0c:	ecbd8b06 	vpop	{d8-d10}
    8e10:	ed836b02 	vstr	d6, [r3, #8]
    8e14:	e1c300f0 	strd	r0, [r3]
    8e18:	e8bd8010 	pop	{r4, pc}
    8e1c:	e320f000 	nop	{0}
    8e20:	00000000 	.word	0x00000000
    8e24:	3ff00000 	.word	0x3ff00000
    8e28:	00000000 	.word	0x00000000
    8e2c:	40080000 	.word	0x40080000
    8e30:	54442d18 	.word	0x54442d18
    8e34:	401921fb 	.word	0x401921fb
    8e38:	00000000 	.word	0x00000000
    8e3c:	40000000 	.word	0x40000000

00008e40 <IIRFilter::processSamples(unsigned int*, unsigned int)>:
    8e40:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e44:	e1a08000 	mov	r8, r0
    8e48:	e372021f 	cmn	r2, #-268435455	; 0xf0000001
    8e4c:	91a00182 	lslls	r0, r2, #3
    8e50:	83e00000 	mvnhi	r0, #0
    8e54:	e24dd00c 	sub	sp, sp, #12
    8e58:	e1a09002 	mov	r9, r2
    8e5c:	e58d1004 	str	r1, [sp, #4]
    8e60:	eb007a75 	bl	2783c <operator new[](unsigned int)>
    8e64:	e5982008 	ldr	r2, [r8, #8]
    8e68:	e3520000 	cmp	r2, #0
    8e6c:	da000006 	ble	8e8c <IIRFilter::processSamples(unsigned int*, unsigned int)+0x4c>
    8e70:	e1a03000 	mov	r3, r0
    8e74:	e3a04000 	mov	r4, #0
    8e78:	e3a05000 	mov	r5, #0
    8e7c:	e0801182 	add	r1, r0, r2, lsl #3
    8e80:	e0c340f8 	strd	r4, [r3], #8
    8e84:	e1530001 	cmp	r3, r1
    8e88:	1afffffc 	bne	8e80 <IIRFilter::processSamples(unsigned int*, unsigned int)+0x40>
    8e8c:	e1590002 	cmp	r9, r2
    8e90:	9a00001d 	bls	8f0c <IIRFilter::processSamples(unsigned int*, unsigned int)+0xcc>
    8e94:	ed9f3b2f 	vldr	d3, [pc, #188]	; 8f58 <IIRFilter::processSamples(unsigned int*, unsigned int)+0x118>
    8e98:	e59d3004 	ldr	r3, [sp, #4]
    8e9c:	e2826001 	add	r6, r2, #1
    8ea0:	e0836106 	add	r6, r3, r6, lsl #2
    8ea4:	e1a0b182 	lsl	fp, r2, #3
    8ea8:	e0805182 	add	r5, r0, r2, lsl #3
    8eac:	e080a189 	add	sl, r0, r9, lsl #3
    8eb0:	e3520000 	cmp	r2, #0
    8eb4:	da000023 	ble	8f48 <IIRFilter::processSamples(unsigned int*, unsigned int)+0x108>
    8eb8:	e2857008 	add	r7, r5, #8
    8ebc:	e1a0e007 	mov	lr, r7
    8ec0:	e1a0c006 	mov	ip, r6
    8ec4:	eeb07b43 	vmov.f64	d7, d3
    8ec8:	e5983000 	ldr	r3, [r8]
    8ecc:	e5981004 	ldr	r1, [r8, #4]
    8ed0:	e083400b 	add	r4, r3, fp
    8ed4:	ed3c6a01 	vldmdb	ip!, {s12}
    8ed8:	ecb34b02 	vldmia	r3!, {d4}
    8edc:	eeb86b46 	vcvt.f64.u32	d6, s12
    8ee0:	ecb15b02 	vldmia	r1!, {d5}
    8ee4:	ee067b04 	vmla.f64	d7, d6, d4
    8ee8:	ed3e6b02 	vldmdb	lr!, {d6}
    8eec:	e1540003 	cmp	r4, r3
    8ef0:	ee057b06 	vmla.f64	d7, d5, d6
    8ef4:	1afffff6 	bne	8ed4 <IIRFilter::processSamples(unsigned int*, unsigned int)+0x94>
    8ef8:	e157000a 	cmp	r7, sl
    8efc:	ed857b00 	vstr	d7, [r5]
    8f00:	e2866004 	add	r6, r6, #4
    8f04:	e1a05007 	mov	r5, r7
    8f08:	1affffe8 	bne	8eb0 <IIRFilter::processSamples(unsigned int*, unsigned int)+0x70>
    8f0c:	e3590000 	cmp	r9, #0
    8f10:	0a000009 	beq	8f3c <IIRFilter::processSamples(unsigned int*, unsigned int)+0xfc>
    8f14:	e1a03000 	mov	r3, r0
    8f18:	e59d2004 	ldr	r2, [sp, #4]
    8f1c:	e0809189 	add	r9, r0, r9, lsl #3
    8f20:	e2422004 	sub	r2, r2, #4
    8f24:	ecb37b02 	vldmia	r3!, {d7}
    8f28:	eebc7bc7 	vcvt.u32.f64	s14, d7
    8f2c:	ee171a10 	vmov	r1, s14
    8f30:	e1530009 	cmp	r3, r9
    8f34:	e5a21004 	str	r1, [r2, #4]!
    8f38:	1afffff9 	bne	8f24 <IIRFilter::processSamples(unsigned int*, unsigned int)+0xe4>
    8f3c:	e28dd00c 	add	sp, sp, #12
    8f40:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f44:	ea007a43 	b	27858 <operator delete[](void*)>
    8f48:	eeb07b43 	vmov.f64	d7, d3
    8f4c:	e2857008 	add	r7, r5, #8
    8f50:	eaffffe8 	b	8ef8 <IIRFilter::processSamples(unsigned int*, unsigned int)+0xb8>
    8f54:	e320f000 	nop	{0}
	...

00008f60 <CUSBHostController::CUSBHostController(bool)>:
    8f60:	e92d4070 	push	{r4, r5, r6, lr}
    8f64:	e3a06001 	mov	r6, #1
    8f68:	e1a04000 	mov	r4, r0
    8f6c:	e1a05001 	mov	r5, r1
    8f70:	e59f3024 	ldr	r3, [pc, #36]	; 8f9c <CUSBHostController::CUSBHostController(bool)+0x3c>
    8f74:	e5c06004 	strb	r6, [r0, #4]
    8f78:	e5803000 	str	r3, [r0]
    8f7c:	e2800008 	add	r0, r0, #8
    8f80:	eb005deb 	bl	20734 <CPtrList::CPtrList()>
    8f84:	e59f3014 	ldr	r3, [pc, #20]	; 8fa0 <CUSBHostController::CUSBHostController(bool)+0x40>
    8f88:	e1a00004 	mov	r0, r4
    8f8c:	e584600c 	str	r6, [r4, #12]
    8f90:	e5c35004 	strb	r5, [r3, #4]
    8f94:	e5834000 	str	r4, [r3]
    8f98:	e8bd8070 	pop	{r4, r5, r6, pc}
    8f9c:	0002c71c 	.word	0x0002c71c
    8fa0:	00034b54 	.word	0x00034b54

00008fa4 <CUSBHostController::~CUSBHostController()>:
    8fa4:	e92d4010 	push	{r4, lr}
    8fa8:	e3a02000 	mov	r2, #0
    8fac:	e1a04000 	mov	r4, r0
    8fb0:	e59f1014 	ldr	r1, [pc, #20]	; 8fcc <CUSBHostController::~CUSBHostController()+0x28>
    8fb4:	e59f3014 	ldr	r3, [pc, #20]	; 8fd0 <CUSBHostController::~CUSBHostController()+0x2c>
    8fb8:	e4801008 	str	r1, [r0], #8
    8fbc:	e5832000 	str	r2, [r3]
    8fc0:	eb005dde 	bl	20740 <CPtrList::~CPtrList()>
    8fc4:	e1a00004 	mov	r0, r4
    8fc8:	e8bd8010 	pop	{r4, pc}
    8fcc:	0002c71c 	.word	0x0002c71c
    8fd0:	00034b54 	.word	0x00034b54

00008fd4 <CUSBHostController::~CUSBHostController()>:
    8fd4:	e92d4010 	push	{r4, lr}
    8fd8:	e3a02000 	mov	r2, #0
    8fdc:	e1a04000 	mov	r4, r0
    8fe0:	e59f1020 	ldr	r1, [pc, #32]	; 9008 <CUSBHostController::~CUSBHostController()+0x34>
    8fe4:	e59f3020 	ldr	r3, [pc, #32]	; 900c <CUSBHostController::~CUSBHostController()+0x38>
    8fe8:	e4801008 	str	r1, [r0], #8
    8fec:	e5832000 	str	r2, [r3]
    8ff0:	eb005dd2 	bl	20740 <CPtrList::~CPtrList()>
    8ff4:	e1a00004 	mov	r0, r4
    8ff8:	e3a01010 	mov	r1, #16
    8ffc:	eb007a16 	bl	2785c <operator delete(void*, unsigned int)>
    9000:	e1a00004 	mov	r0, r4
    9004:	e8bd8010 	pop	{r4, pc}
    9008:	0002c71c 	.word	0x0002c71c
    900c:	00034b54 	.word	0x00034b54

00009010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
    9010:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9014:	e1a05000 	mov	r5, r0
    9018:	e24dd040 	sub	sp, sp, #64	; 0x40
    901c:	e3a00008 	mov	r0, #8
    9020:	e1dd66bc 	ldrh	r6, [sp, #108]	; 0x6c
    9024:	e1a08002 	mov	r8, r2
    9028:	e1a07003 	mov	r7, r3
    902c:	e1dda6b0 	ldrh	sl, [sp, #96]	; 0x60
    9030:	e1dd96b4 	ldrh	r9, [sp, #100]	; 0x64
    9034:	e58d100c 	str	r1, [sp, #12]
    9038:	eb0079f9 	bl	27824 <operator new(unsigned int)>
    903c:	e1a04000 	mov	r4, r0
    9040:	e58d0000 	str	r0, [sp]
    9044:	e5c08000 	strb	r8, [r0]
    9048:	e1a0042a 	lsr	r0, sl, #8
    904c:	e1a0e429 	lsr	lr, r9, #8
    9050:	e1a0c426 	lsr	ip, r6, #8
    9054:	e1a03006 	mov	r3, r6
    9058:	e59d100c 	ldr	r1, [sp, #12]
    905c:	e59d2068 	ldr	r2, [sp, #104]	; 0x68
    9060:	e5c40003 	strb	r0, [r4, #3]
    9064:	e28d0014 	add	r0, sp, #20
    9068:	e5c4e005 	strb	lr, [r4, #5]
    906c:	e5c4c007 	strb	ip, [r4, #7]
    9070:	e5c47001 	strb	r7, [r4, #1]
    9074:	e5c4a002 	strb	sl, [r4, #2]
    9078:	e5c49004 	strb	r9, [r4, #4]
    907c:	e5c46006 	strb	r6, [r4, #6]
    9080:	eb000574 	bl	a658 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    9084:	e5953000 	ldr	r3, [r5]
    9088:	e1a00005 	mov	r0, r5
    908c:	e3a02000 	mov	r2, #0
    9090:	e5933008 	ldr	r3, [r3, #8]
    9094:	e28d1014 	add	r1, sp, #20
    9098:	e12fff33 	blx	r3
    909c:	e3500000 	cmp	r0, #0
    90a0:	0a00000a 	beq	90d0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
    90a4:	e28d0014 	add	r0, sp, #20
    90a8:	eb00059f 	bl	a72c <CUSBRequest::GetResultLength() const>
    90ac:	e1a05000 	mov	r5, r0
    90b0:	e1a00004 	mov	r0, r4
    90b4:	e3a01008 	mov	r1, #8
    90b8:	eb0079e7 	bl	2785c <operator delete(void*, unsigned int)>
    90bc:	e28d0014 	add	r0, sp, #20
    90c0:	eb000586 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
    90c4:	e1a00005 	mov	r0, r5
    90c8:	e28dd040 	add	sp, sp, #64	; 0x40
    90cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    90d0:	e3e05000 	mvn	r5, #0
    90d4:	eafffff5 	b	90b0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa0>

000090d8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
    90d8:	e92d4010 	push	{r4, lr}
    90dc:	e1833402 	orr	r3, r3, r2, lsl #8
    90e0:	e59d4008 	ldr	r4, [sp, #8]
    90e4:	e5dde010 	ldrb	lr, [sp, #16]
    90e8:	e1ddc1b4 	ldrh	ip, [sp, #20]
    90ec:	e58d3008 	str	r3, [sp, #8]
    90f0:	e1dd30bc 	ldrh	r3, [sp, #12]
    90f4:	e1a0200e 	mov	r2, lr
    90f8:	e58d3014 	str	r3, [sp, #20]
    90fc:	e58d4010 	str	r4, [sp, #16]
    9100:	e58dc00c 	str	ip, [sp, #12]
    9104:	e3a03006 	mov	r3, #6
    9108:	e8bd4010 	pop	{r4, lr}
    910c:	eaffffbf 	b	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

00009110 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
    9110:	e92d4010 	push	{r4, lr}
    9114:	e3a04000 	mov	r4, #0
    9118:	e24dd010 	sub	sp, sp, #16
    911c:	e58d2000 	str	r2, [sp]
    9120:	e3a03005 	mov	r3, #5
    9124:	e1a02004 	mov	r2, r4
    9128:	e58d400c 	str	r4, [sp, #12]
    912c:	e58d4008 	str	r4, [sp, #8]
    9130:	e58d4004 	str	r4, [sp, #4]
    9134:	ebffffb5 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    9138:	e1500004 	cmp	r0, r4
    913c:	b1a00004 	movlt	r0, r4
    9140:	ba000003 	blt	9154 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
    9144:	eb00757b 	bl	26738 <CTimer::Get()>
    9148:	e3a00032 	mov	r0, #50	; 0x32
    914c:	eb007544 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
    9150:	e3a00001 	mov	r0, #1
    9154:	e28dd010 	add	sp, sp, #16
    9158:	e8bd8010 	pop	{r4, pc}

0000915c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
    915c:	e92d4010 	push	{r4, lr}
    9160:	e3a04000 	mov	r4, #0
    9164:	e24dd010 	sub	sp, sp, #16
    9168:	e58d2000 	str	r2, [sp]
    916c:	e3a03009 	mov	r3, #9
    9170:	e1a02004 	mov	r2, r4
    9174:	e58d400c 	str	r4, [sp, #12]
    9178:	e58d4008 	str	r4, [sp, #8]
    917c:	e58d4004 	str	r4, [sp, #4]
    9180:	ebffffa2 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    9184:	e1500004 	cmp	r0, r4
    9188:	b1a00004 	movlt	r0, r4
    918c:	ba000003 	blt	91a0 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
    9190:	eb007568 	bl	26738 <CTimer::Get()>
    9194:	e3a00032 	mov	r0, #50	; 0x32
    9198:	eb007531 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
    919c:	e3a00001 	mov	r0, #1
    91a0:	e28dd010 	add	sp, sp, #16
    91a4:	e8bd8010 	pop	{r4, pc}

000091a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
    91a8:	e3a0c000 	mov	ip, #0
    91ac:	e92d4010 	push	{r4, lr}
    91b0:	e1a04000 	mov	r4, r0
    91b4:	e24dd038 	sub	sp, sp, #56	; 0x38
    91b8:	e58dc000 	str	ip, [sp]
    91bc:	e28d000c 	add	r0, sp, #12
    91c0:	eb000524 	bl	a658 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    91c4:	e5943000 	ldr	r3, [r4]
    91c8:	e1a00004 	mov	r0, r4
    91cc:	e5933008 	ldr	r3, [r3, #8]
    91d0:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
    91d4:	e28d100c 	add	r1, sp, #12
    91d8:	e12fff33 	blx	r3
    91dc:	e3500000 	cmp	r0, #0
    91e0:	0a000007 	beq	9204 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
    91e4:	e28d000c 	add	r0, sp, #12
    91e8:	eb00054f 	bl	a72c <CUSBRequest::GetResultLength() const>
    91ec:	e1a04000 	mov	r4, r0
    91f0:	e28d000c 	add	r0, sp, #12
    91f4:	eb000539 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
    91f8:	e1a00004 	mov	r0, r4
    91fc:	e28dd038 	add	sp, sp, #56	; 0x38
    9200:	e8bd8010 	pop	{r4, pc}
    9204:	e3e04000 	mvn	r4, #0
    9208:	eafffff8 	b	91f0 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

0000920c <CUSBHostController::IsPlugAndPlay()>:
    920c:	e59f3004 	ldr	r3, [pc, #4]	; 9218 <CUSBHostController::IsPlugAndPlay()+0xc>
    9210:	e5d30004 	ldrb	r0, [r3, #4]
    9214:	e12fff1e 	bx	lr
    9218:	00034b54 	.word	0x00034b54

0000921c <CUSBHostController::UpdatePlugAndPlay()>:
    921c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9220:	e59f313c 	ldr	r3, [pc, #316]	; 9364 <CUSBHostController::UpdatePlugAndPlay()+0x148>
    9224:	e24dd00c 	sub	sp, sp, #12
    9228:	e5d37004 	ldrb	r7, [r3, #4]
    922c:	e3570000 	cmp	r7, #0
    9230:	0a00003f 	beq	9334 <CUSBHostController::UpdatePlugAndPlay()+0x118>
    9234:	e3a03000 	mov	r3, #0
    9238:	e1a05000 	mov	r5, r0
    923c:	e590000c 	ldr	r0, [r0, #12]
    9240:	e5d54004 	ldrb	r4, [r5, #4]
    9244:	e1500003 	cmp	r0, r3
    9248:	e5c53004 	strb	r3, [r5, #4]
    924c:	1a00002e 	bne	930c <CUSBHostController::UpdatePlugAndPlay()+0xf0>
    9250:	e2856008 	add	r6, r5, #8
    9254:	e1a00006 	mov	r0, r6
    9258:	eb005d42 	bl	20768 <CPtrList::GetFirst()>
    925c:	e2501000 	subs	r1, r0, #0
    9260:	0a000037 	beq	9344 <CUSBHostController::UpdatePlugAndPlay()+0x128>
    9264:	e1a00006 	mov	r0, r6
    9268:	e58d1004 	str	r1, [sp, #4]
    926c:	eb005d54 	bl	207c4 <CPtrList::GetPtr(TPtrListElement*)>
    9270:	e59d1004 	ldr	r1, [sp, #4]
    9274:	e1a04000 	mov	r4, r0
    9278:	e1a00006 	mov	r0, r6
    927c:	eb005dd8 	bl	209e4 <CPtrList::Remove(TPtrListElement*)>
    9280:	e595300c 	ldr	r3, [r5, #12]
    9284:	e3530000 	cmp	r3, #0
    9288:	1a000018 	bne	92f0 <CUSBHostController::UpdatePlugAndPlay()+0xd4>
    928c:	e3540000 	cmp	r4, #0
    9290:	0a000019 	beq	92fc <CUSBHostController::UpdatePlugAndPlay()+0xe0>
    9294:	e5d43000 	ldrb	r3, [r4]
    9298:	e5940004 	ldr	r0, [r4, #4]
    929c:	e3530000 	cmp	r3, #0
    92a0:	0a00000e 	beq	92e0 <CUSBHostController::UpdatePlugAndPlay()+0xc4>
    92a4:	e3500000 	cmp	r0, #0
    92a8:	0a00001d 	beq	9324 <CUSBHostController::UpdatePlugAndPlay()+0x108>
    92ac:	e5903000 	ldr	r3, [r0]
    92b0:	e5933010 	ldr	r3, [r3, #16]
    92b4:	e12fff33 	blx	r3
    92b8:	e1a00004 	mov	r0, r4
    92bc:	e3a01008 	mov	r1, #8
    92c0:	eb007965 	bl	2785c <operator delete(void*, unsigned int)>
    92c4:	e595000c 	ldr	r0, [r5, #12]
    92c8:	e3500000 	cmp	r0, #0
    92cc:	01a04007 	moveq	r4, r7
    92d0:	0affffdf 	beq	9254 <CUSBHostController::UpdatePlugAndPlay()+0x38>
    92d4:	eb007cf2 	bl	286a4 <EnterCritical>
    92d8:	e1a04007 	mov	r4, r7
    92dc:	eaffffdc 	b	9254 <CUSBHostController::UpdatePlugAndPlay()+0x38>
    92e0:	e3500000 	cmp	r0, #0
    92e4:	0a00000a 	beq	9314 <CUSBHostController::UpdatePlugAndPlay()+0xf8>
    92e8:	eb0006e2 	bl	ae78 <CUSBStandardHub::HandlePortStatusChange()>
    92ec:	eafffff1 	b	92b8 <CUSBHostController::UpdatePlugAndPlay()+0x9c>
    92f0:	eb007d15 	bl	2874c <LeaveCritical>
    92f4:	e3540000 	cmp	r4, #0
    92f8:	1affffe5 	bne	9294 <CUSBHostController::UpdatePlugAndPlay()+0x78>
    92fc:	e3a0209c 	mov	r2, #156	; 0x9c
    9300:	e59f1060 	ldr	r1, [pc, #96]	; 9368 <CUSBHostController::UpdatePlugAndPlay()+0x14c>
    9304:	e59f0060 	ldr	r0, [pc, #96]	; 936c <CUSBHostController::UpdatePlugAndPlay()+0x150>
    9308:	eb0050fc 	bl	1d700 <assertion_failed>
    930c:	eb007ce4 	bl	286a4 <EnterCritical>
    9310:	eaffffce 	b	9250 <CUSBHostController::UpdatePlugAndPlay()+0x34>
    9314:	e3a020a4 	mov	r2, #164	; 0xa4
    9318:	e59f1048 	ldr	r1, [pc, #72]	; 9368 <CUSBHostController::UpdatePlugAndPlay()+0x14c>
    931c:	e59f004c 	ldr	r0, [pc, #76]	; 9370 <CUSBHostController::UpdatePlugAndPlay()+0x154>
    9320:	eb0050f6 	bl	1d700 <assertion_failed>
    9324:	e3a0209f 	mov	r2, #159	; 0x9f
    9328:	e59f1038 	ldr	r1, [pc, #56]	; 9368 <CUSBHostController::UpdatePlugAndPlay()+0x14c>
    932c:	e59f0040 	ldr	r0, [pc, #64]	; 9374 <CUSBHostController::UpdatePlugAndPlay()+0x158>
    9330:	eb0050f2 	bl	1d700 <assertion_failed>
    9334:	e3a0208c 	mov	r2, #140	; 0x8c
    9338:	e59f1028 	ldr	r1, [pc, #40]	; 9368 <CUSBHostController::UpdatePlugAndPlay()+0x14c>
    933c:	e59f0034 	ldr	r0, [pc, #52]	; 9378 <CUSBHostController::UpdatePlugAndPlay()+0x15c>
    9340:	eb0050ee 	bl	1d700 <assertion_failed>
    9344:	e595300c 	ldr	r3, [r5, #12]
    9348:	e3530000 	cmp	r3, #0
    934c:	1a000002 	bne	935c <CUSBHostController::UpdatePlugAndPlay()+0x140>
    9350:	e1a00004 	mov	r0, r4
    9354:	e28dd00c 	add	sp, sp, #12
    9358:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    935c:	eb007cfa 	bl	2874c <LeaveCritical>
    9360:	eafffffa 	b	9350 <CUSBHostController::UpdatePlugAndPlay()+0x134>
    9364:	00034b54 	.word	0x00034b54
    9368:	0002c6a4 	.word	0x0002c6a4
    936c:	0002c6cc 	.word	0x0002c6cc
    9370:	0002c6f0 	.word	0x0002c6f0
    9374:	0002c6d8 	.word	0x0002c6d8
    9378:	0002c6bc 	.word	0x0002c6bc

0000937c <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>:
    937c:	e59f30bc 	ldr	r3, [pc, #188]	; 9440 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xc4>
    9380:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9384:	e5d33004 	ldrb	r3, [r3, #4]
    9388:	e3530000 	cmp	r3, #0
    938c:	0a000021 	beq	9418 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x9c>
    9390:	e3510000 	cmp	r1, #0
    9394:	e1a04001 	mov	r4, r1
    9398:	0a000022 	beq	9428 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xac>
    939c:	e1a06000 	mov	r6, r0
    93a0:	e3a00008 	mov	r0, #8
    93a4:	eb00791e 	bl	27824 <operator new(unsigned int)>
    93a8:	e3a03001 	mov	r3, #1
    93ac:	e1a07000 	mov	r7, r0
    93b0:	e596000c 	ldr	r0, [r6, #12]
    93b4:	e5874004 	str	r4, [r7, #4]
    93b8:	e3500000 	cmp	r0, #0
    93bc:	e5c73000 	strb	r3, [r7]
    93c0:	1a000012 	bne	9410 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x94>
    93c4:	e2864008 	add	r4, r6, #8
    93c8:	e1a00004 	mov	r0, r4
    93cc:	eb005ce5 	bl	20768 <CPtrList::GetFirst()>
    93d0:	e2501000 	subs	r1, r0, #0
    93d4:	0a000017 	beq	9438 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xbc>
    93d8:	e1a00004 	mov	r0, r4
    93dc:	e1a05001 	mov	r5, r1
    93e0:	eb005ce2 	bl	20770 <CPtrList::GetNext(TPtrListElement*)>
    93e4:	e2501000 	subs	r1, r0, #0
    93e8:	1afffffa 	bne	93d8 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x5c>
    93ec:	e1a02007 	mov	r2, r7
    93f0:	e1a01005 	mov	r1, r5
    93f4:	e1a00004 	mov	r0, r4
    93f8:	eb005d40 	bl	20900 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    93fc:	e596300c 	ldr	r3, [r6, #12]
    9400:	e3530000 	cmp	r3, #0
    9404:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9408:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    940c:	ea007cce 	b	2874c <LeaveCritical>
    9410:	eb007ca3 	bl	286a4 <EnterCritical>
    9414:	eaffffea 	b	93c4 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x48>
    9418:	e3a020b6 	mov	r2, #182	; 0xb6
    941c:	e59f1020 	ldr	r1, [pc, #32]	; 9444 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xc8>
    9420:	e59f0020 	ldr	r0, [pc, #32]	; 9448 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xcc>
    9424:	eb0050b5 	bl	1d700 <assertion_failed>
    9428:	e3a020b7 	mov	r2, #183	; 0xb7
    942c:	e59f1010 	ldr	r1, [pc, #16]	; 9444 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xc8>
    9430:	e59f0014 	ldr	r0, [pc, #20]	; 944c <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xd0>
    9434:	eb0050b1 	bl	1d700 <assertion_failed>
    9438:	e1a05001 	mov	r5, r1
    943c:	eaffffea 	b	93ec <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x70>
    9440:	00034b54 	.word	0x00034b54
    9444:	0002c6a4 	.word	0x0002c6a4
    9448:	0002c6bc 	.word	0x0002c6bc
    944c:	0002c6e0 	.word	0x0002c6e0

00009450 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)>:
    9450:	e59f30bc 	ldr	r3, [pc, #188]	; 9514 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xc4>
    9454:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9458:	e5d33004 	ldrb	r3, [r3, #4]
    945c:	e3530000 	cmp	r3, #0
    9460:	0a000021 	beq	94ec <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x9c>
    9464:	e3510000 	cmp	r1, #0
    9468:	e1a04001 	mov	r4, r1
    946c:	0a000022 	beq	94fc <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xac>
    9470:	e1a06000 	mov	r6, r0
    9474:	e3a00008 	mov	r0, #8
    9478:	eb0078e9 	bl	27824 <operator new(unsigned int)>
    947c:	e3a03000 	mov	r3, #0
    9480:	e1a07000 	mov	r7, r0
    9484:	e596000c 	ldr	r0, [r6, #12]
    9488:	e5874004 	str	r4, [r7, #4]
    948c:	e1500003 	cmp	r0, r3
    9490:	e5c73000 	strb	r3, [r7]
    9494:	1a000012 	bne	94e4 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x94>
    9498:	e2864008 	add	r4, r6, #8
    949c:	e1a00004 	mov	r0, r4
    94a0:	eb005cb0 	bl	20768 <CPtrList::GetFirst()>
    94a4:	e2501000 	subs	r1, r0, #0
    94a8:	0a000017 	beq	950c <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xbc>
    94ac:	e1a00004 	mov	r0, r4
    94b0:	e1a05001 	mov	r5, r1
    94b4:	eb005cad 	bl	20770 <CPtrList::GetNext(TPtrListElement*)>
    94b8:	e2501000 	subs	r1, r0, #0
    94bc:	1afffffa 	bne	94ac <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x5c>
    94c0:	e1a02007 	mov	r2, r7
    94c4:	e1a01005 	mov	r1, r5
    94c8:	e1a00004 	mov	r0, r4
    94cc:	eb005d0b 	bl	20900 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    94d0:	e596300c 	ldr	r3, [r6, #12]
    94d4:	e3530000 	cmp	r3, #0
    94d8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    94dc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    94e0:	ea007c99 	b	2874c <LeaveCritical>
    94e4:	eb007c6e 	bl	286a4 <EnterCritical>
    94e8:	eaffffea 	b	9498 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x48>
    94ec:	e3a020cf 	mov	r2, #207	; 0xcf
    94f0:	e59f1020 	ldr	r1, [pc, #32]	; 9518 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xc8>
    94f4:	e59f0020 	ldr	r0, [pc, #32]	; 951c <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xcc>
    94f8:	eb005080 	bl	1d700 <assertion_failed>
    94fc:	e3a020d0 	mov	r2, #208	; 0xd0
    9500:	e59f1010 	ldr	r1, [pc, #16]	; 9518 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xc8>
    9504:	e59f0014 	ldr	r0, [pc, #20]	; 9520 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xd0>
    9508:	eb00507c 	bl	1d700 <assertion_failed>
    950c:	e1a05001 	mov	r5, r1
    9510:	eaffffea 	b	94c0 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x70>
    9514:	00034b54 	.word	0x00034b54
    9518:	0002c6a4 	.word	0x0002c6a4
    951c:	0002c6bc 	.word	0x0002c6bc
    9520:	0002c6f8 	.word	0x0002c6f8

00009524 <CUSBHostController::Get()>:
    9524:	e59f301c 	ldr	r3, [pc, #28]	; 9548 <CUSBHostController::Get()+0x24>
    9528:	e5930000 	ldr	r0, [r3]
    952c:	e3500000 	cmp	r0, #0
    9530:	112fff1e 	bxne	lr
    9534:	e3a020e8 	mov	r2, #232	; 0xe8
    9538:	e92d4010 	push	{r4, lr}
    953c:	e59f1008 	ldr	r1, [pc, #8]	; 954c <CUSBHostController::Get()+0x28>
    9540:	e59f0008 	ldr	r0, [pc, #8]	; 9550 <CUSBHostController::Get()+0x2c>
    9544:	eb00506d 	bl	1d700 <assertion_failed>
    9548:	00034b54 	.word	0x00034b54
    954c:	0002c6a4 	.word	0x0002c6a4
    9550:	0002c704 	.word	0x0002c704

00009554 <CUSBHostController::CancelDeviceTransactions(CUSBDevice*)>:
    9554:	e12fff1e 	bx	lr

00009558 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    9558:	e92d4070 	push	{r4, r5, r6, lr}
    955c:	e3a06000 	mov	r6, #0
    9560:	e5903450 	ldr	r3, [r0, #1104]	; 0x450
    9564:	e59f504c 	ldr	r5, [pc, #76]	; 95b8 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x60>
    9568:	e1530006 	cmp	r3, r6
    956c:	e1a04000 	mov	r4, r0
    9570:	e5805000 	str	r5, [r0]
    9574:	e5806440 	str	r6, [r0, #1088]	; 0x440
    9578:	1a000005 	bne	9594 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x3c>
    957c:	e2840028 	add	r0, r4, #40	; 0x28
    9580:	eb004b24 	bl	1c218 <CKeyboardBehaviour::~CKeyboardBehaviour()>
    9584:	e1a00004 	mov	r0, r4
    9588:	eb002e17 	bl	14dec <CUSBHIDDevice::~CUSBHIDDevice()>
    958c:	e1a00004 	mov	r0, r4
    9590:	e8bd8070 	pop	{r4, r5, r6, pc}
    9594:	eb005333 	bl	1e268 <CDeviceNameService::Get()>
    9598:	e2851028 	add	r1, r5, #40	; 0x28
    959c:	e1a03006 	mov	r3, r6
    95a0:	e5942450 	ldr	r2, [r4, #1104]	; 0x450
    95a4:	eb005355 	bl	1e300 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    95a8:	e5941450 	ldr	r1, [r4, #1104]	; 0x450
    95ac:	e59f0008 	ldr	r0, [pc, #8]	; 95bc <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x64>
    95b0:	eb007a21 	bl	27e3c <CNumberPool::FreeNumber(unsigned int)>
    95b4:	eafffff0 	b	957c <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x24>
    95b8:	0002c798 	.word	0x0002c798
    95bc:	00034b60 	.word	0x00034b60

000095c0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    95c0:	e92d4010 	push	{r4, lr}
    95c4:	e1a04000 	mov	r4, r0
    95c8:	ebffffe2 	bl	9558 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
    95cc:	e1a00004 	mov	r0, r4
    95d0:	e59f1008 	ldr	r1, [pc, #8]	; 95e0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x20>
    95d4:	eb0078a0 	bl	2785c <operator delete(void*, unsigned int)>
    95d8:	e1a00004 	mov	r0, r4
    95dc:	e8bd8010 	pop	{r4, pc}
    95e0:	00000454 	.word	0x00000454

000095e4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
    95e4:	e2522008 	subs	r2, r2, #8
    95e8:	13a02001 	movne	r2, #1
    95ec:	e3510000 	cmp	r1, #0
    95f0:	03a02001 	moveq	r2, #1
    95f4:	e3520000 	cmp	r2, #0
    95f8:	112fff1e 	bxne	lr
    95fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9600:	e5903440 	ldr	r3, [r0, #1088]	; 0x440
    9604:	e1a05001 	mov	r5, r1
    9608:	e3530000 	cmp	r3, #0
    960c:	e1a09000 	mov	r9, r0
    9610:	e24dd00c 	sub	sp, sp, #12
    9614:	0a000054 	beq	976c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x188>
    9618:	e1a06001 	mov	r6, r1
    961c:	e4d60002 	ldrb	r0, [r6], #2
    9620:	e1a01006 	mov	r1, r6
    9624:	e12fff33 	blx	r3
    9628:	e5d93444 	ldrb	r3, [r9, #1092]	; 0x444
    962c:	e3530000 	cmp	r3, #0
    9630:	0a00004b 	beq	9764 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x180>
    9634:	e3a04000 	mov	r4, #0
    9638:	e3a07001 	mov	r7, #1
    963c:	e2898028 	add	r8, r9, #40	; 0x28
    9640:	ea000004 	b	9658 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x74>
    9644:	e1120003 	tst	r2, r3
    9648:	1a000040 	bne	9750 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x16c>
    964c:	e2844001 	add	r4, r4, #1
    9650:	e3540008 	cmp	r4, #8
    9654:	0a00000d 	beq	9690 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xac>
    9658:	e5d52000 	ldrb	r2, [r5]
    965c:	e1a03417 	lsl	r3, r7, r4
    9660:	e1120003 	tst	r2, r3
    9664:	e5d92445 	ldrb	r2, [r9, #1093]	; 0x445
    9668:	0afffff5 	beq	9644 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x60>
    966c:	e1120003 	tst	r2, r3
    9670:	1afffff5 	bne	964c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
    9674:	e2441080 	sub	r1, r4, #128	; 0x80
    9678:	e1a00008 	mov	r0, r8
    967c:	e6ef1071 	uxtb	r1, r1
    9680:	e2844001 	add	r4, r4, #1
    9684:	eb004b45 	bl	1c3a0 <CKeyboardBehaviour::KeyPressed(unsigned char)>
    9688:	e3540008 	cmp	r4, #8
    968c:	1afffff1 	bne	9658 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x74>
    9690:	e2897d11 	add	r7, r9, #1088	; 0x440
    9694:	e2878007 	add	r8, r7, #7
    9698:	e1a0a008 	mov	sl, r8
    969c:	e287400d 	add	r4, r7, #13
    96a0:	e285b008 	add	fp, r5, #8
    96a4:	e2890028 	add	r0, r9, #40	; 0x28
    96a8:	ea000001 	b	96b4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd0>
    96ac:	e15a0004 	cmp	sl, r4
    96b0:	0a00000d 	beq	96ec <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
    96b4:	e4da1001 	ldrb	r1, [sl], #1
    96b8:	e3510000 	cmp	r1, #0
    96bc:	11a03006 	movne	r3, r6
    96c0:	0afffff9 	beq	96ac <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc8>
    96c4:	e4d32001 	ldrb	r2, [r3], #1
    96c8:	e1520001 	cmp	r2, r1
    96cc:	0afffff6 	beq	96ac <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc8>
    96d0:	e15b0003 	cmp	fp, r3
    96d4:	1afffffa 	bne	96c4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
    96d8:	e58d0004 	str	r0, [sp, #4]
    96dc:	eb004b3d 	bl	1c3d8 <CKeyboardBehaviour::KeyReleased(unsigned char)>
    96e0:	e15a0004 	cmp	sl, r4
    96e4:	e59d0004 	ldr	r0, [sp, #4]
    96e8:	1afffff1 	bne	96b4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd0>
    96ec:	e2899028 	add	r9, r9, #40	; 0x28
    96f0:	e2856001 	add	r6, r5, #1
    96f4:	e285a007 	add	sl, r5, #7
    96f8:	ea000001 	b	9704 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x120>
    96fc:	e15a0006 	cmp	sl, r6
    9700:	0a00000c 	beq	9738 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x154>
    9704:	e5f61001 	ldrb	r1, [r6, #1]!
    9708:	e3510000 	cmp	r1, #0
    970c:	11a03008 	movne	r3, r8
    9710:	0afffff9 	beq	96fc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>
    9714:	e4d32001 	ldrb	r2, [r3], #1
    9718:	e1520001 	cmp	r2, r1
    971c:	0afffff6 	beq	96fc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>
    9720:	e1530004 	cmp	r3, r4
    9724:	1afffffa 	bne	9714 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x130>
    9728:	e1a00009 	mov	r0, r9
    972c:	eb004b1b 	bl	1c3a0 <CKeyboardBehaviour::KeyPressed(unsigned char)>
    9730:	e15a0006 	cmp	sl, r6
    9734:	1afffff2 	bne	9704 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x120>
    9738:	e1a01005 	mov	r1, r5
    973c:	e3a02008 	mov	r2, #8
    9740:	e2870005 	add	r0, r7, #5
    9744:	e28dd00c 	add	sp, sp, #12
    9748:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    974c:	ea00764e 	b	2708c <memcpy>
    9750:	e2441080 	sub	r1, r4, #128	; 0x80
    9754:	e1a00008 	mov	r0, r8
    9758:	e6ef1071 	uxtb	r1, r1
    975c:	eb004b1d 	bl	1c3d8 <CKeyboardBehaviour::KeyReleased(unsigned char)>
    9760:	eaffffb9 	b	964c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
    9764:	e28dd00c 	add	sp, sp, #12
    9768:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    976c:	e2816002 	add	r6, r1, #2
    9770:	eaffffaf 	b	9634 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x50>

00009774 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
    9774:	e92d4010 	push	{r4, lr}
    9778:	e1a04000 	mov	r4, r0
    977c:	e3a02008 	mov	r2, #8
    9780:	eb002d84 	bl	14d98 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
    9784:	e1a00004 	mov	r0, r4
    9788:	e59f3030 	ldr	r3, [pc, #48]	; 97c0 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x4c>
    978c:	e4803028 	str	r3, [r0], #40	; 0x28
    9790:	eb004a94 	bl	1c1e8 <CKeyboardBehaviour::CKeyboardBehaviour()>
    9794:	e3a01000 	mov	r1, #0
    9798:	e2840d11 	add	r0, r4, #1088	; 0x440
    979c:	e3a02008 	mov	r2, #8
    97a0:	e5841440 	str	r1, [r4, #1088]	; 0x440
    97a4:	e5c41444 	strb	r1, [r4, #1092]	; 0x444
    97a8:	e5c4144d 	strb	r1, [r4, #1101]	; 0x44d
    97ac:	e5841450 	str	r1, [r4, #1104]	; 0x450
    97b0:	e2800005 	add	r0, r0, #5
    97b4:	eb0073eb 	bl	26768 <memset>
    97b8:	e1a00004 	mov	r0, r4
    97bc:	e8bd8010 	pop	{r4, pc}
    97c0:	0002c798 	.word	0x0002c798

000097c4 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
    97c4:	e2800028 	add	r0, r0, #40	; 0x28
    97c8:	ea004a9c 	b	1c240 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

000097cc <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
    97cc:	e2800028 	add	r0, r0, #40	; 0x28
    97d0:	ea004aa5 	b	1c26c <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

000097d4 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
    97d4:	e2800028 	add	r0, r0, #40	; 0x28
    97d8:	ea004aae 	b	1c298 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

000097dc <CUSBKeyboardDevice::GetLEDStatus() const>:
    97dc:	e92d4010 	push	{r4, lr}
    97e0:	e2800028 	add	r0, r0, #40	; 0x28
    97e4:	eb004ab6 	bl	1c2c4 <CKeyboardBehaviour::GetLEDStatus() const>
    97e8:	e2003001 	and	r3, r0, #1
    97ec:	e3100002 	tst	r0, #2
    97f0:	13833002 	orrne	r3, r3, #2
    97f4:	e3100004 	tst	r0, #4
    97f8:	13833004 	orrne	r3, r3, #4
    97fc:	e1a00003 	mov	r0, r3
    9800:	e8bd8010 	pop	{r4, pc}

00009804 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*), bool)>:
    9804:	e3510000 	cmp	r1, #0
    9808:	0a000002 	beq	9818 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*), bool)+0x14>
    980c:	e5801440 	str	r1, [r0, #1088]	; 0x440
    9810:	e5c02444 	strb	r2, [r0, #1092]	; 0x444
    9814:	e12fff1e 	bx	lr
    9818:	e3a02086 	mov	r2, #134	; 0x86
    981c:	e92d4010 	push	{r4, lr}
    9820:	e59f1004 	ldr	r1, [pc, #4]	; 982c <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*), bool)+0x28>
    9824:	e59f0004 	ldr	r0, [pc, #4]	; 9830 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*), bool)+0x2c>
    9828:	eb004fb4 	bl	1d700 <assertion_failed>
    982c:	0002c730 	.word	0x0002c730
    9830:	0002c740 	.word	0x0002c740

00009834 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
    9834:	e92d4070 	push	{r4, r5, r6, lr}
    9838:	e1a05000 	mov	r5, r0
    983c:	e1a06001 	mov	r6, r1
    9840:	e24dd050 	sub	sp, sp, #80	; 0x50
    9844:	e28d4037 	add	r4, sp, #55	; 0x37
    9848:	e3c4401f 	bic	r4, r4, #31
    984c:	e3a02020 	mov	r2, #32
    9850:	e3a01000 	mov	r1, #0
    9854:	e1a00004 	mov	r0, r4
    9858:	eb0073c2 	bl	26768 <memset>
    985c:	e1a00005 	mov	r0, r5
    9860:	e5c46000 	strb	r6, [r4]
    9864:	eb002340 	bl	1256c <CUSBFunction::GetHost() const>
    9868:	e1a06000 	mov	r6, r0
    986c:	e1a00005 	mov	r0, r5
    9870:	eb002332 	bl	12540 <CUSBFunction::GetEndpoint0() const>
    9874:	e1a01000 	mov	r1, r0
    9878:	e1a00005 	mov	r0, r5
    987c:	e58d1014 	str	r1, [sp, #20]
    9880:	eb002395 	bl	126dc <CUSBFunction::GetInterfaceNumber() const>
    9884:	e3a0c001 	mov	ip, #1
    9888:	e3a02c02 	mov	r2, #512	; 0x200
    988c:	e6ff3070 	uxth	r3, r0
    9890:	e58d3004 	str	r3, [sp, #4]
    9894:	e58d2000 	str	r2, [sp]
    9898:	e1a00006 	mov	r0, r6
    989c:	e3a03009 	mov	r3, #9
    98a0:	e3a02021 	mov	r2, #33	; 0x21
    98a4:	e59d1014 	ldr	r1, [sp, #20]
    98a8:	e58d4008 	str	r4, [sp, #8]
    98ac:	e58dc00c 	str	ip, [sp, #12]
    98b0:	ebfffdd6 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    98b4:	e1e00000 	mvn	r0, r0
    98b8:	e1a00fa0 	lsr	r0, r0, #31
    98bc:	e28dd050 	add	sp, sp, #80	; 0x50
    98c0:	e8bd8070 	pop	{r4, r5, r6, pc}

000098c4 <CUSBKeyboardDevice::Configure()>:
    98c4:	e92d4030 	push	{r4, r5, lr}
    98c8:	e3a01000 	mov	r1, #0
    98cc:	e24dd00c 	sub	sp, sp, #12
    98d0:	e1a04000 	mov	r4, r0
    98d4:	eb002d6f 	bl	14e98 <CUSBHIDDevice::Configure(unsigned int)>
    98d8:	e2505000 	subs	r5, r0, #0
    98dc:	0a000012 	beq	992c <CUSBKeyboardDevice::Configure()+0x68>
    98e0:	e5d4144d 	ldrb	r1, [r4, #1101]	; 0x44d
    98e4:	e1a00004 	mov	r0, r4
    98e8:	ebffffd1 	bl	9834 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    98ec:	e3a01001 	mov	r1, #1
    98f0:	e59f2054 	ldr	r2, [pc, #84]	; 994c <CUSBKeyboardDevice::Configure()+0x88>
    98f4:	e59f0054 	ldr	r0, [pc, #84]	; 9950 <CUSBKeyboardDevice::Configure()+0x8c>
    98f8:	eb007914 	bl	27d50 <CNumberPool::AllocateNumber(bool, char const*)>
    98fc:	e5840450 	str	r0, [r4, #1104]	; 0x450
    9900:	eb005258 	bl	1e268 <CDeviceNameService::Get()>
    9904:	e3a02000 	mov	r2, #0
    9908:	e58d2000 	str	r2, [sp]
    990c:	e1a03004 	mov	r3, r4
    9910:	e5942450 	ldr	r2, [r4, #1104]	; 0x450
    9914:	e59f1038 	ldr	r1, [pc, #56]	; 9954 <CUSBKeyboardDevice::Configure()+0x90>
    9918:	eb00525e 	bl	1e298 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    991c:	e1a00004 	mov	r0, r4
    9920:	e28dd00c 	add	sp, sp, #12
    9924:	e8bd4030 	pop	{r4, r5, lr}
    9928:	ea002e7b 	b	1531c <CUSBHIDDevice::StartRequest()>
    992c:	eb005873 	bl	1fb00 <CLogger::Get()>
    9930:	e3a02001 	mov	r2, #1
    9934:	e59f301c 	ldr	r3, [pc, #28]	; 9958 <CUSBKeyboardDevice::Configure()+0x94>
    9938:	e59f100c 	ldr	r1, [pc, #12]	; 994c <CUSBKeyboardDevice::Configure()+0x88>
    993c:	eb0057b1 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9940:	e1a00005 	mov	r0, r5
    9944:	e28dd00c 	add	sp, sp, #12
    9948:	e8bd8030 	pop	{r4, r5, pc}
    994c:	0002c7c8 	.word	0x0002c7c8
    9950:	00034b60 	.word	0x00034b60
    9954:	0002c7c0 	.word	0x0002c7c0
    9958:	0002c75c 	.word	0x0002c75c

0000995c <CUSBKeyboardDevice::UpdateLEDs()>:
    995c:	e5903440 	ldr	r3, [r0, #1088]	; 0x440
    9960:	e92d4010 	push	{r4, lr}
    9964:	e3530000 	cmp	r3, #0
    9968:	e1a04000 	mov	r4, r0
    996c:	0a000002 	beq	997c <CUSBKeyboardDevice::UpdateLEDs()+0x20>
    9970:	e5d03444 	ldrb	r3, [r0, #1092]	; 0x444
    9974:	e3530000 	cmp	r3, #0
    9978:	08bd8010 	popeq	{r4, pc}
    997c:	e1a00004 	mov	r0, r4
    9980:	ebffff95 	bl	97dc <CUSBKeyboardDevice::GetLEDStatus() const>
    9984:	e5d4344d 	ldrb	r3, [r4, #1101]	; 0x44d
    9988:	e1530000 	cmp	r3, r0
    998c:	08bd8010 	popeq	{r4, pc}
    9990:	e1a01000 	mov	r1, r0
    9994:	e5c4044d 	strb	r0, [r4, #1101]	; 0x44d
    9998:	e1a00004 	mov	r0, r4
    999c:	ebffffa4 	bl	9834 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    99a0:	e3500000 	cmp	r0, #0
    99a4:	18bd8010 	popne	{r4, pc}
    99a8:	eb005854 	bl	1fb00 <CLogger::Get()>
    99ac:	e8bd4010 	pop	{r4, lr}
    99b0:	e3a02001 	mov	r2, #1
    99b4:	e59f3004 	ldr	r3, [pc, #4]	; 99c0 <CUSBKeyboardDevice::UpdateLEDs()+0x64>
    99b8:	e59f1004 	ldr	r1, [pc, #4]	; 99c4 <CUSBKeyboardDevice::UpdateLEDs()+0x68>
    99bc:	ea005791 	b	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    99c0:	0002c778 	.word	0x0002c778
    99c4:	0002c7c8 	.word	0x0002c7c8

000099c8 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
    99c8:	e0802002 	add	r2, r0, r2
    99cc:	ea000002 	b	99dc <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
    99d0:	e4d03001 	ldrb	r3, [r0], #1
    99d4:	e1530001 	cmp	r3, r1
    99d8:	0a000003 	beq	99ec <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
    99dc:	e1500002 	cmp	r0, r2
    99e0:	1afffffa 	bne	99d0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
    99e4:	e3a00000 	mov	r0, #0
    99e8:	e12fff1e 	bx	lr
    99ec:	e3a00001 	mov	r0, #1
    99f0:	e12fff1e 	bx	lr

000099f4 <_GLOBAL__sub_I__ZN18CUSBKeyboardDevice18s_DeviceNumberPoolE>:
    99f4:	e92d4010 	push	{r4, lr}
    99f8:	e59f4020 	ldr	r4, [pc, #32]	; 9a20 <_GLOBAL__sub_I__ZN18CUSBKeyboardDevice18s_DeviceNumberPoolE+0x2c>
    99fc:	e3a0203f 	mov	r2, #63	; 0x3f
    9a00:	e1a00004 	mov	r0, r4
    9a04:	e3a01001 	mov	r1, #1
    9a08:	eb0078bb 	bl	27cfc <CNumberPool::CNumberPool(unsigned int, unsigned int)>
    9a0c:	e1a00004 	mov	r0, r4
    9a10:	e8bd4010 	pop	{r4, lr}
    9a14:	e59f2008 	ldr	r2, [pc, #8]	; 9a24 <_GLOBAL__sub_I__ZN18CUSBKeyboardDevice18s_DeviceNumberPoolE+0x30>
    9a18:	e59f1008 	ldr	r1, [pc, #8]	; 9a28 <_GLOBAL__sub_I__ZN18CUSBKeyboardDevice18s_DeviceNumberPoolE+0x34>
    9a1c:	ea006fa5 	b	258b8 <__aeabi_atexit>
    9a20:	00034b60 	.word	0x00034b60
    9a24:	00034c44 	.word	0x00034c44
    9a28:	00027d4c 	.word	0x00027d4c

00009a2c <CUSBMIDIDevice::~CUSBMIDIDevice()>:
    9a2c:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
    9a30:	e59f30d8 	ldr	r3, [pc, #216]	; 9b10 <CUSBMIDIDevice::~CUSBMIDIDevice()+0xe4>
    9a34:	e3520000 	cmp	r2, #0
    9a38:	e92d4070 	push	{r4, r5, r6, lr}
    9a3c:	e1a04000 	mov	r4, r0
    9a40:	e5803000 	str	r3, [r0]
    9a44:	1a000020 	bne	9acc <CUSBMIDIDevice::~CUSBMIDIDevice()+0xa0>
    9a48:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    9a4c:	e3530000 	cmp	r3, #0
    9a50:	1a000025 	bne	9aec <CUSBMIDIDevice::~CUSBMIDIDevice()+0xc0>
    9a54:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    9a58:	e3500000 	cmp	r0, #0
    9a5c:	0a000000 	beq	9a64 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x38>
    9a60:	eb00777c 	bl	27858 <operator delete[](void*)>
    9a64:	e3a03000 	mov	r3, #0
    9a68:	e5945018 	ldr	r5, [r4, #24]
    9a6c:	e5843028 	str	r3, [r4, #40]	; 0x28
    9a70:	e1550003 	cmp	r5, r3
    9a74:	0a000004 	beq	9a8c <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
    9a78:	e1a00005 	mov	r0, r5
    9a7c:	eb002145 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
    9a80:	e1a00005 	mov	r0, r5
    9a84:	e3a01014 	mov	r1, #20
    9a88:	eb007773 	bl	2785c <operator delete(void*, unsigned int)>
    9a8c:	e3a03000 	mov	r3, #0
    9a90:	e594501c 	ldr	r5, [r4, #28]
    9a94:	e5843018 	str	r3, [r4, #24]
    9a98:	e1550003 	cmp	r5, r3
    9a9c:	0a000004 	beq	9ab4 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x88>
    9aa0:	e1a00005 	mov	r0, r5
    9aa4:	eb00213b 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
    9aa8:	e1a00005 	mov	r0, r5
    9aac:	e3a01014 	mov	r1, #20
    9ab0:	eb007769 	bl	2785c <operator delete(void*, unsigned int)>
    9ab4:	e3a03000 	mov	r3, #0
    9ab8:	e1a00004 	mov	r0, r4
    9abc:	e584301c 	str	r3, [r4, #28]
    9ac0:	eb0021a1 	bl	1214c <CUSBFunction::~CUSBFunction()>
    9ac4:	e1a00004 	mov	r0, r4
    9ac8:	e8bd8070 	pop	{r4, r5, r6, pc}
    9acc:	eb007319 	bl	26738 <CTimer::Get()>
    9ad0:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    9ad4:	eb0071a7 	bl	26178 <CTimer::CancelKernelTimer(unsigned int)>
    9ad8:	e3a03000 	mov	r3, #0
    9adc:	e584302c 	str	r3, [r4, #44]	; 0x2c
    9ae0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    9ae4:	e3530000 	cmp	r3, #0
    9ae8:	0affffd9 	beq	9a54 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
    9aec:	eb0051dd 	bl	1e268 <CDeviceNameService::Get()>
    9af0:	e3a03000 	mov	r3, #0
    9af4:	e5942030 	ldr	r2, [r4, #48]	; 0x30
    9af8:	e59f1014 	ldr	r1, [pc, #20]	; 9b14 <CUSBMIDIDevice::~CUSBMIDIDevice()+0xe8>
    9afc:	eb0051ff 	bl	1e300 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    9b00:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    9b04:	e59f000c 	ldr	r0, [pc, #12]	; 9b18 <CUSBMIDIDevice::~CUSBMIDIDevice()+0xec>
    9b08:	eb0078cb 	bl	27e3c <CNumberPool::FreeNumber(unsigned int)>
    9b0c:	eaffffd0 	b	9a54 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
    9b10:	0002c974 	.word	0x0002c974
    9b14:	0002c998 	.word	0x0002c998
    9b18:	00034b70 	.word	0x00034b70

00009b1c <CUSBMIDIDevice::~CUSBMIDIDevice()>:
    9b1c:	e92d4010 	push	{r4, lr}
    9b20:	e1a04000 	mov	r4, r0
    9b24:	ebffffc0 	bl	9a2c <CUSBMIDIDevice::~CUSBMIDIDevice()>
    9b28:	e1a00004 	mov	r0, r4
    9b2c:	e3a01034 	mov	r1, #52	; 0x34
    9b30:	eb007749 	bl	2785c <operator delete(void*, unsigned int)>
    9b34:	e1a00004 	mov	r0, r4
    9b38:	e8bd8010 	pop	{r4, pc}

00009b3c <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
    9b3c:	e92d4010 	push	{r4, lr}
    9b40:	e1a04000 	mov	r4, r0
    9b44:	eb002213 	bl	12398 <CUSBFunction::CUSBFunction(CUSBFunction*)>
    9b48:	e3a03000 	mov	r3, #0
    9b4c:	e59f2020 	ldr	r2, [pc, #32]	; 9b74 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x38>
    9b50:	e1a00004 	mov	r0, r4
    9b54:	e5843018 	str	r3, [r4, #24]
    9b58:	e5842000 	str	r2, [r4]
    9b5c:	e584301c 	str	r3, [r4, #28]
    9b60:	e5843020 	str	r3, [r4, #32]
    9b64:	e5843028 	str	r3, [r4, #40]	; 0x28
    9b68:	e584302c 	str	r3, [r4, #44]	; 0x2c
    9b6c:	e5843030 	str	r3, [r4, #48]	; 0x30
    9b70:	e8bd8010 	pop	{r4, pc}
    9b74:	0002c974 	.word	0x0002c974

00009b78 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
    9b78:	e5903020 	ldr	r3, [r0, #32]
    9b7c:	e92d4010 	push	{r4, lr}
    9b80:	e3530000 	cmp	r3, #0
    9b84:	1a000006 	bne	9ba4 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x2c>
    9b88:	e3510000 	cmp	r1, #0
    9b8c:	e5801020 	str	r1, [r0, #32]
    9b90:	18bd8010 	popne	{r4, pc}
    9b94:	e3a020ba 	mov	r2, #186	; 0xba
    9b98:	e59f1014 	ldr	r1, [pc, #20]	; 9bb4 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
    9b9c:	e59f0014 	ldr	r0, [pc, #20]	; 9bb8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x40>
    9ba0:	eb004ed6 	bl	1d700 <assertion_failed>
    9ba4:	e3a020b8 	mov	r2, #184	; 0xb8
    9ba8:	e59f1004 	ldr	r1, [pc, #4]	; 9bb4 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
    9bac:	e59f0008 	ldr	r0, [pc, #8]	; 9bbc <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x44>
    9bb0:	eb004ed2 	bl	1d700 <assertion_failed>
    9bb4:	0002c7d0 	.word	0x0002c7d0
    9bb8:	0002c7f4 	.word	0x0002c7f4
    9bbc:	0002c7dc 	.word	0x0002c7dc

00009bc0 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)>:
    9bc0:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
    9bc4:	e3510000 	cmp	r1, #0
    9bc8:	e28db014 	add	fp, sp, #20
    9bcc:	e24dd008 	sub	sp, sp, #8
    9bd0:	0a00001d 	beq	9c4c <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0x8c>
    9bd4:	e3520000 	cmp	r2, #0
    9bd8:	e1a04002 	mov	r4, r2
    9bdc:	0a00001e 	beq	9c5c <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0x9c>
    9be0:	e2126003 	ands	r6, r2, #3
    9be4:	1a000020 	bne	9c6c <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0xac>
    9be8:	e1a05000 	mov	r5, r0
    9bec:	e590001c 	ldr	r0, [r0, #28]
    9bf0:	e3500000 	cmp	r0, #0
    9bf4:	0a000012 	beq	9c44 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0x84>
    9bf8:	e2423001 	sub	r3, r2, #1
    9bfc:	e383301f 	orr	r3, r3, #31
    9c00:	e2833020 	add	r3, r3, #32
    9c04:	e3c33007 	bic	r3, r3, #7
    9c08:	e04dd003 	sub	sp, sp, r3
    9c0c:	e28d7027 	add	r7, sp, #39	; 0x27
    9c10:	e3c7701f 	bic	r7, r7, #31
    9c14:	e1a00007 	mov	r0, r7
    9c18:	eb00751b 	bl	2708c <memcpy>
    9c1c:	e1a00005 	mov	r0, r5
    9c20:	eb002251 	bl	1256c <CUSBFunction::GetHost() const>
    9c24:	e58d6000 	str	r6, [sp]
    9c28:	e1a02007 	mov	r2, r7
    9c2c:	e1a03004 	mov	r3, r4
    9c30:	e595101c 	ldr	r1, [r5, #28]
    9c34:	ebfffd5b 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
    9c38:	e0440000 	sub	r0, r4, r0
    9c3c:	e16f0f10 	clz	r0, r0
    9c40:	e1a002a0 	lsr	r0, r0, #5
    9c44:	e24bd014 	sub	sp, fp, #20
    9c48:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}
    9c4c:	e3a020bf 	mov	r2, #191	; 0xbf
    9c50:	e59f1024 	ldr	r1, [pc, #36]	; 9c7c <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0xbc>
    9c54:	e59f0024 	ldr	r0, [pc, #36]	; 9c80 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0xc0>
    9c58:	eb004ea8 	bl	1d700 <assertion_failed>
    9c5c:	e3a020c0 	mov	r2, #192	; 0xc0
    9c60:	e59f1014 	ldr	r1, [pc, #20]	; 9c7c <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0xbc>
    9c64:	e59f0018 	ldr	r0, [pc, #24]	; 9c84 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0xc4>
    9c68:	eb004ea4 	bl	1d700 <assertion_failed>
    9c6c:	e3a020c1 	mov	r2, #193	; 0xc1
    9c70:	e59f1004 	ldr	r1, [pc, #4]	; 9c7c <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0xbc>
    9c74:	e59f000c 	ldr	r0, [pc, #12]	; 9c88 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0xc8>
    9c78:	eb004ea0 	bl	1d700 <assertion_failed>
    9c7c:	0002c7d0 	.word	0x0002c7d0
    9c80:	0002c80c 	.word	0x0002c80c
    9c84:	0002c818 	.word	0x0002c818
    9c88:	0002c824 	.word	0x0002c824

00009c8c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)>:
    9c8c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c90:	e351000f 	cmp	r1, #15
    9c94:	e28db020 	add	fp, sp, #32
    9c98:	e24dd024 	sub	sp, sp, #36	; 0x24
    9c9c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    9ca0:	8a0000e4 	bhi	a038 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3ac>
    9ca4:	e3520000 	cmp	r2, #0
    9ca8:	0a0000e6 	beq	a048 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3bc>
    9cac:	e3530000 	cmp	r3, #0
    9cb0:	0a0000e8 	beq	a058 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3cc>
    9cb4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
    9cb8:	e590401c 	ldr	r4, [r0, #28]
    9cbc:	e3540000 	cmp	r4, #0
    9cc0:	0a0000d3 	beq	a014 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x388>
    9cc4:	e3a04000 	mov	r4, #0
    9cc8:	e1a06004 	mov	r6, r4
    9ccc:	e1a0e103 	lsl	lr, r3, #2
    9cd0:	e24ee001 	sub	lr, lr, #1
    9cd4:	e1a01201 	lsl	r1, r1, #4
    9cd8:	e38ee01f 	orr	lr, lr, #31
    9cdc:	e6ef7071 	uxtb	r7, r1
    9ce0:	e28ee020 	add	lr, lr, #32
    9ce4:	e3cee007 	bic	lr, lr, #7
    9ce8:	e243c001 	sub	ip, r3, #1
    9cec:	e3873005 	orr	r3, r7, #5
    9cf0:	e04dd00e 	sub	sp, sp, lr
    9cf4:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    9cf8:	e3873003 	orr	r3, r7, #3
    9cfc:	e28d0027 	add	r0, sp, #39	; 0x27
    9d00:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    9d04:	e3873002 	orr	r3, r7, #2
    9d08:	e3c0101f 	bic	r1, r0, #31
    9d0c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    9d10:	e3873004 	orr	r3, r7, #4
    9d14:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
    9d18:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    9d1c:	e4d25001 	ldrb	r5, [r2], #1
    9d20:	e35500ef 	cmp	r5, #239	; 0xef
    9d24:	8a000037 	bhi	9e08 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x17c>
    9d28:	e1a03001 	mov	r3, r1
    9d2c:	e59fe33c 	ldr	lr, [pc, #828]	; a070 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3e4>
    9d30:	e1a00245 	asr	r0, r5, #4
    9d34:	e08e0100 	add	r0, lr, r0, lsl #2
    9d38:	e5900034 	ldr	r0, [r0, #52]	; 0x34
    9d3c:	e187e225 	orr	lr, r7, r5, lsr #4
    9d40:	e2500001 	subs	r0, r0, #1
    9d44:	e4c3e002 	strb	lr, [r3], #2
    9d48:	e2844002 	add	r4, r4, #2
    9d4c:	e5c15001 	strb	r5, [r1, #1]
    9d50:	0a0000a8 	beq	9ff8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x36c>
    9d54:	e35c0000 	cmp	ip, #0
    9d58:	e24cc001 	sub	ip, ip, #1
    9d5c:	0a0000a7 	beq	a000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x374>
    9d60:	e4d2e001 	ldrb	lr, [r2], #1
    9d64:	e1a01002 	mov	r1, r2
    9d68:	e2400001 	sub	r0, r0, #1
    9d6c:	e2844001 	add	r4, r4, #1
    9d70:	e0822000 	add	r2, r2, r0
    9d74:	e0444001 	sub	r4, r4, r1
    9d78:	e1520001 	cmp	r2, r1
    9d7c:	e4c3e001 	strb	lr, [r3], #1
    9d80:	e081e004 	add	lr, r1, r4
    9d84:	0a000006 	beq	9da4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x118>
    9d88:	e25cc001 	subs	ip, ip, #1
    9d8c:	3a00009b 	bcc	a000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x374>
    9d90:	e4d1e001 	ldrb	lr, [r1], #1
    9d94:	e1520001 	cmp	r2, r1
    9d98:	e4c3e001 	strb	lr, [r3], #1
    9d9c:	e081e004 	add	lr, r1, r4
    9da0:	1afffff8 	bne	9d88 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xfc>
    9da4:	e31e0003 	tst	lr, #3
    9da8:	0a000031 	beq	9e74 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1e8>
    9dac:	e1a01003 	mov	r1, r3
    9db0:	e4c16001 	strb	r6, [r1], #1
    9db4:	e081400e 	add	r4, r1, lr
    9db8:	e0444003 	sub	r4, r4, r3
    9dbc:	e3140003 	tst	r4, #3
    9dc0:	1afffffa 	bne	9db0 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x124>
    9dc4:	e35c0000 	cmp	ip, #0
    9dc8:	e24cc001 	sub	ip, ip, #1
    9dcc:	1affffd2 	bne	9d1c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x90>
    9dd0:	e51b5028 	ldr	r5, [fp, #-40]	; 0xffffffd8
    9dd4:	e1a00005 	mov	r0, r5
    9dd8:	eb0021e3 	bl	1256c <CUSBFunction::GetHost() const>
    9ddc:	e3a03000 	mov	r3, #0
    9de0:	e595101c 	ldr	r1, [r5, #28]
    9de4:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
    9de8:	e58d3000 	str	r3, [sp]
    9dec:	e1a03004 	mov	r3, r4
    9df0:	ebfffcec 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
    9df4:	e0440000 	sub	r0, r4, r0
    9df8:	e16f0f10 	clz	r0, r0
    9dfc:	e1a002a0 	lsr	r0, r0, #5
    9e00:	e24bd020 	sub	sp, fp, #32
    9e04:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e08:	e24530f0 	sub	r3, r5, #240	; 0xf0
    9e0c:	e353000f 	cmp	r3, #15
    9e10:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9e14:	ea00006e 	b	9fd4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x348>
    9e18:	00009f00 	.word	0x00009f00
    9e1c:	00009ed4 	.word	0x00009ed4
    9e20:	00009e90 	.word	0x00009e90
    9e24:	00009ed4 	.word	0x00009ed4
    9e28:	00009fd4 	.word	0x00009fd4
    9e2c:	00009fd4 	.word	0x00009fd4
    9e30:	00009e58 	.word	0x00009e58
    9e34:	00009fd4 	.word	0x00009fd4
    9e38:	00009e58 	.word	0x00009e58
    9e3c:	00009fd4 	.word	0x00009fd4
    9e40:	00009e58 	.word	0x00009e58
    9e44:	00009e58 	.word	0x00009e58
    9e48:	00009e58 	.word	0x00009e58
    9e4c:	00009fd4 	.word	0x00009fd4
    9e50:	00009e58 	.word	0x00009e58
    9e54:	00009e58 	.word	0x00009e58
    9e58:	e1a03001 	mov	r3, r1
    9e5c:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
    9e60:	e284e002 	add	lr, r4, #2
    9e64:	e31e0003 	tst	lr, #3
    9e68:	e4c30002 	strb	r0, [r3], #2
    9e6c:	e5c15001 	strb	r5, [r1, #1]
    9e70:	1affffcd 	bne	9dac <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x120>
    9e74:	e35c0000 	cmp	ip, #0
    9e78:	e24cc001 	sub	ip, ip, #1
    9e7c:	0a000079 	beq	a068 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3dc>
    9e80:	e1a01003 	mov	r1, r3
    9e84:	e1a0400e 	mov	r4, lr
    9e88:	e4d25001 	ldrb	r5, [r2], #1
    9e8c:	eaffffa3 	b	9d20 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x94>
    9e90:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
    9e94:	e35c0000 	cmp	ip, #0
    9e98:	e5c13000 	strb	r3, [r1]
    9e9c:	e3e0300d 	mvn	r3, #13
    9ea0:	e5c13001 	strb	r3, [r1, #1]
    9ea4:	0a000055 	beq	a000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x374>
    9ea8:	e5d23000 	ldrb	r3, [r2]
    9eac:	e35c0001 	cmp	ip, #1
    9eb0:	e5c13002 	strb	r3, [r1, #2]
    9eb4:	e2844003 	add	r4, r4, #3
    9eb8:	e24cc002 	sub	ip, ip, #2
    9ebc:	e2813003 	add	r3, r1, #3
    9ec0:	0a00004e 	beq	a000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x374>
    9ec4:	e5d2e001 	ldrb	lr, [r2, #1]
    9ec8:	e3a00001 	mov	r0, #1
    9ecc:	e2822002 	add	r2, r2, #2
    9ed0:	eaffffa3 	b	9d64 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xd8>
    9ed4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
    9ed8:	e35c0000 	cmp	ip, #0
    9edc:	e5c13000 	strb	r3, [r1]
    9ee0:	e5c15001 	strb	r5, [r1, #1]
    9ee4:	0a000045 	beq	a000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x374>
    9ee8:	e4d23001 	ldrb	r3, [r2], #1
    9eec:	e24cc001 	sub	ip, ip, #1
    9ef0:	e5c13002 	strb	r3, [r1, #2]
    9ef4:	e284e003 	add	lr, r4, #3
    9ef8:	e2813003 	add	r3, r1, #3
    9efc:	eaffffa8 	b	9da4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x118>
    9f00:	e1a08001 	mov	r8, r1
    9f04:	e082900c 	add	r9, r2, ip
    9f08:	e51bc02c 	ldr	ip, [fp, #-44]	; 0xffffffd4
    9f0c:	e3a03000 	mov	r3, #0
    9f10:	e284a001 	add	sl, r4, #1
    9f14:	e4c8c001 	strb	ip, [r8], #1
    9f18:	ea00000c 	b	9f50 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2c4>
    9f1c:	e1520009 	cmp	r2, r9
    9f20:	0a000036 	beq	a000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x374>
    9f24:	e3500003 	cmp	r0, #3
    9f28:	e4d25001 	ldrb	r5, [r2], #1
    9f2c:	1a000004 	bne	9f44 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2b8>
    9f30:	e3a00000 	mov	r0, #0
    9f34:	e1a0100e 	mov	r1, lr
    9f38:	e5c8c001 	strb	ip, [r8, #1]
    9f3c:	e28a4002 	add	r4, sl, #2
    9f40:	e288e002 	add	lr, r8, #2
    9f44:	e1a03000 	mov	r3, r0
    9f48:	e1a0800e 	mov	r8, lr
    9f4c:	e1a0a004 	mov	sl, r4
    9f50:	e1a0e008 	mov	lr, r8
    9f54:	e35500f7 	cmp	r5, #247	; 0xf7
    9f58:	e4ce5001 	strb	r5, [lr], #1
    9f5c:	e28a4001 	add	r4, sl, #1
    9f60:	e0495002 	sub	r5, r9, r2
    9f64:	e2830001 	add	r0, r3, #1
    9f68:	1affffeb 	bne	9f1c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x290>
    9f6c:	e1a0c005 	mov	ip, r5
    9f70:	e2835005 	add	r5, r3, #5
    9f74:	e3500002 	cmp	r0, #2
    9f78:	e1870005 	orr	r0, r7, r5
    9f7c:	e5c10000 	strb	r0, [r1]
    9f80:	8a000026 	bhi	a020 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x394>
    9f84:	e2834002 	add	r4, r3, #2
    9f88:	e28e1001 	add	r1, lr, #1
    9f8c:	e5416001 	strb	r6, [r1, #-1]
    9f90:	e2811001 	add	r1, r1, #1
    9f94:	e0810003 	add	r0, r1, r3
    9f98:	e040000e 	sub	r0, r0, lr
    9f9c:	e3500002 	cmp	r0, #2
    9fa0:	9afffff9 	bls	9f8c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x300>
    9fa4:	e3540003 	cmp	r4, #3
    9fa8:	e2631002 	rsb	r1, r3, #2
    9fac:	e2634001 	rsb	r4, r3, #1
    9fb0:	83a01001 	movhi	r1, #1
    9fb4:	83a04000 	movhi	r4, #0
    9fb8:	e28aa002 	add	sl, sl, #2
    9fbc:	e35c0000 	cmp	ip, #0
    9fc0:	e084400a 	add	r4, r4, sl
    9fc4:	e08e1001 	add	r1, lr, r1
    9fc8:	e24cc001 	sub	ip, ip, #1
    9fcc:	1affff52 	bne	9d1c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x90>
    9fd0:	eaffff7e 	b	9dd0 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x144>
    9fd4:	eb0056c9 	bl	1fb00 <CLogger::Get()>
    9fd8:	e3a02002 	mov	r2, #2
    9fdc:	e59f3090 	ldr	r3, [pc, #144]	; a074 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3e8>
    9fe0:	e59f1090 	ldr	r1, [pc, #144]	; a078 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3ec>
    9fe4:	e58d5000 	str	r5, [sp]
    9fe8:	eb005606 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9fec:	e3a00000 	mov	r0, #0
    9ff0:	e24bd020 	sub	sp, fp, #32
    9ff4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ff8:	e1a0e004 	mov	lr, r4
    9ffc:	eaffff68 	b	9da4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x118>
    a000:	eb0056be 	bl	1fb00 <CLogger::Get()>
    a004:	e3a02002 	mov	r2, #2
    a008:	e59f306c 	ldr	r3, [pc, #108]	; a07c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3f0>
    a00c:	e59f1064 	ldr	r1, [pc, #100]	; a078 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3ec>
    a010:	eb0055fc 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a014:	e3a00000 	mov	r0, #0
    a018:	e24bd020 	sub	sp, fp, #32
    a01c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a020:	e35c0000 	cmp	ip, #0
    a024:	e24cc001 	sub	ip, ip, #1
    a028:	0affff68 	beq	9dd0 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x144>
    a02c:	e1a0100e 	mov	r1, lr
    a030:	e4d25001 	ldrb	r5, [r2], #1
    a034:	eaffff39 	b	9d20 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x94>
    a038:	e3a020d0 	mov	r2, #208	; 0xd0
    a03c:	e59f103c 	ldr	r1, [pc, #60]	; a080 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3f4>
    a040:	e59f003c 	ldr	r0, [pc, #60]	; a084 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3f8>
    a044:	eb004dad 	bl	1d700 <assertion_failed>
    a048:	e3a020d1 	mov	r2, #209	; 0xd1
    a04c:	e59f102c 	ldr	r1, [pc, #44]	; a080 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3f4>
    a050:	e59f0030 	ldr	r0, [pc, #48]	; a088 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3fc>
    a054:	eb004da9 	bl	1d700 <assertion_failed>
    a058:	e3a020d2 	mov	r2, #210	; 0xd2
    a05c:	e59f101c 	ldr	r1, [pc, #28]	; a080 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x3f4>
    a060:	e59f0024 	ldr	r0, [pc, #36]	; a08c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x400>
    a064:	eb004da5 	bl	1d700 <assertion_failed>
    a068:	e1a0400e 	mov	r4, lr
    a06c:	eaffff57 	b	9dd0 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x144>
    a070:	0002c96c 	.word	0x0002c96c
    a074:	0002c848 	.word	0x0002c848
    a078:	0002c9e0 	.word	0x0002c9e0
    a07c:	0002c86c 	.word	0x0002c86c
    a080:	0002c7d0 	.word	0x0002c7d0
    a084:	0002c838 	.word	0x0002c838
    a088:	0002c80c 	.word	0x0002c80c
    a08c:	0002c818 	.word	0x0002c818

0000a090 <CUSBMIDIDevice::StartRequest()>:
    a090:	e92d4070 	push	{r4, r5, r6, lr}
    a094:	e5903018 	ldr	r3, [r0, #24]
    a098:	e24dd008 	sub	sp, sp, #8
    a09c:	e3530000 	cmp	r3, #0
    a0a0:	0a00001f 	beq	a124 <CUSBMIDIDevice::StartRequest()+0x94>
    a0a4:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    a0a8:	e1a04000 	mov	r4, r0
    a0ac:	e3530000 	cmp	r3, #0
    a0b0:	0a00001f 	beq	a134 <CUSBMIDIDevice::StartRequest()+0xa4>
    a0b4:	e1d032b4 	ldrh	r3, [r0, #36]	; 0x24
    a0b8:	e3530000 	cmp	r3, #0
    a0bc:	0a000020 	beq	a144 <CUSBMIDIDevice::StartRequest()+0xb4>
    a0c0:	e3a0002c 	mov	r0, #44	; 0x2c
    a0c4:	eb0001f4 	bl	a89c <CUSBRequest::operator new(unsigned int)>
    a0c8:	e3a06000 	mov	r6, #0
    a0cc:	e1a05000 	mov	r5, r0
    a0d0:	e58d6000 	str	r6, [sp]
    a0d4:	e1d432b4 	ldrh	r3, [r4, #36]	; 0x24
    a0d8:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    a0dc:	e5941018 	ldr	r1, [r4, #24]
    a0e0:	eb00015c 	bl	a658 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    a0e4:	e1a03004 	mov	r3, r4
    a0e8:	e1a02006 	mov	r2, r6
    a0ec:	e59f1060 	ldr	r1, [pc, #96]	; a154 <CUSBMIDIDevice::StartRequest()+0xc4>
    a0f0:	e1a00005 	mov	r0, r5
    a0f4:	eb0001c9 	bl	a820 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    a0f8:	e1a00005 	mov	r0, r5
    a0fc:	eb0001e1 	bl	a888 <CUSBRequest::SetCompleteOnNAK()>
    a100:	e1a00004 	mov	r0, r4
    a104:	eb002118 	bl	1256c <CUSBFunction::GetHost() const>
    a108:	e1a01005 	mov	r1, r5
    a10c:	e1a02006 	mov	r2, r6
    a110:	e5903000 	ldr	r3, [r0]
    a114:	e593300c 	ldr	r3, [r3, #12]
    a118:	e28dd008 	add	sp, sp, #8
    a11c:	e8bd4070 	pop	{r4, r5, r6, lr}
    a120:	e12fff13 	bx	r3
    a124:	e59f202c 	ldr	r2, [pc, #44]	; a158 <CUSBMIDIDevice::StartRequest()+0xc8>
    a128:	e59f102c 	ldr	r1, [pc, #44]	; a15c <CUSBMIDIDevice::StartRequest()+0xcc>
    a12c:	e59f002c 	ldr	r0, [pc, #44]	; a160 <CUSBMIDIDevice::StartRequest()+0xd0>
    a130:	eb004d72 	bl	1d700 <assertion_failed>
    a134:	e59f2028 	ldr	r2, [pc, #40]	; a164 <CUSBMIDIDevice::StartRequest()+0xd4>
    a138:	e59f101c 	ldr	r1, [pc, #28]	; a15c <CUSBMIDIDevice::StartRequest()+0xcc>
    a13c:	e59f0024 	ldr	r0, [pc, #36]	; a168 <CUSBMIDIDevice::StartRequest()+0xd8>
    a140:	eb004d6e 	bl	1d700 <assertion_failed>
    a144:	e59f2020 	ldr	r2, [pc, #32]	; a16c <CUSBMIDIDevice::StartRequest()+0xdc>
    a148:	e59f100c 	ldr	r1, [pc, #12]	; a15c <CUSBMIDIDevice::StartRequest()+0xcc>
    a14c:	e59f001c 	ldr	r0, [pc, #28]	; a170 <CUSBMIDIDevice::StartRequest()+0xe0>
    a150:	eb004d6a 	bl	1d700 <assertion_failed>
    a154:	0000a368 	.word	0x0000a368
    a158:	0000015e 	.word	0x0000015e
    a15c:	0002c7d0 	.word	0x0002c7d0
    a160:	0002c884 	.word	0x0002c884
    a164:	0000015f 	.word	0x0000015f
    a168:	0002c898 	.word	0x0002c898
    a16c:	00000161 	.word	0x00000161
    a170:	0002c8b0 	.word	0x0002c8b0

0000a174 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
    a174:	e3520000 	cmp	r2, #0
    a178:	e92d4010 	push	{r4, lr}
    a17c:	0a000007 	beq	a1a0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
    a180:	e592302c 	ldr	r3, [r2, #44]	; 0x2c
    a184:	e1500003 	cmp	r0, r3
    a188:	1a000008 	bne	a1b0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
    a18c:	e8bd4010 	pop	{r4, lr}
    a190:	e3a03000 	mov	r3, #0
    a194:	e1a00002 	mov	r0, r2
    a198:	e582302c 	str	r3, [r2, #44]	; 0x2c
    a19c:	eaffffbb 	b	a090 <CUSBMIDIDevice::StartRequest()>
    a1a0:	e59f2018 	ldr	r2, [pc, #24]	; a1c0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
    a1a4:	e59f1018 	ldr	r1, [pc, #24]	; a1c4 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x50>
    a1a8:	e59f0018 	ldr	r0, [pc, #24]	; a1c8 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x54>
    a1ac:	eb004d53 	bl	1d700 <assertion_failed>
    a1b0:	e59f2014 	ldr	r2, [pc, #20]	; a1cc <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x58>
    a1b4:	e59f1008 	ldr	r1, [pc, #8]	; a1c4 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x50>
    a1b8:	e59f0010 	ldr	r0, [pc, #16]	; a1d0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x5c>
    a1bc:	eb004d4f 	bl	1d700 <assertion_failed>
    a1c0:	000001ab 	.word	0x000001ab
    a1c4:	0002c7d0 	.word	0x0002c7d0
    a1c8:	0002c8c4 	.word	0x0002c8c4
    a1cc:	000001a2 	.word	0x000001a2
    a1d0:	0002c8d0 	.word	0x0002c8d0

0000a1d4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
    a1d4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a1d8:	e2514000 	subs	r4, r1, #0
    a1dc:	e24dd00c 	sub	sp, sp, #12
    a1e0:	0a00004b 	beq	a314 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x140>
    a1e4:	e1a06000 	mov	r6, r0
    a1e8:	e1a00004 	mov	r0, r4
    a1ec:	eb00014c 	bl	a724 <CUSBRequest::GetStatus() const>
    a1f0:	e3500000 	cmp	r0, #0
    a1f4:	1a000012 	bne	a244 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x70>
    a1f8:	e1a00004 	mov	r0, r4
    a1fc:	eb000137 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
    a200:	e1a00004 	mov	r0, r4
    a204:	e3a0102c 	mov	r1, #44	; 0x2c
    a208:	eb0001b8 	bl	a8f0 <CUSBRequest::operator delete(void*, unsigned int)>
    a20c:	e596402c 	ldr	r4, [r6, #44]	; 0x2c
    a210:	e3540000 	cmp	r4, #0
    a214:	1a000042 	bne	a324 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x150>
    a218:	eb007146 	bl	26738 <CTimer::Get()>
    a21c:	e1a03004 	mov	r3, r4
    a220:	e3a01001 	mov	r1, #1
    a224:	e59f2118 	ldr	r2, [pc, #280]	; a344 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x170>
    a228:	e58d6000 	str	r6, [sp]
    a22c:	eb006f7f 	bl	26030 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    a230:	e3500000 	cmp	r0, #0
    a234:	e586002c 	str	r0, [r6, #44]	; 0x2c
    a238:	0a000031 	beq	a304 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x130>
    a23c:	e28dd00c 	add	sp, sp, #12
    a240:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a244:	e1a00004 	mov	r0, r4
    a248:	eb000137 	bl	a72c <CUSBRequest::GetResultLength() const>
    a24c:	e2109003 	ands	r9, r0, #3
    a250:	1affffe8 	bne	a1f8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x24>
    a254:	e5967028 	ldr	r7, [r6, #40]	; 0x28
    a258:	e3570000 	cmp	r7, #0
    a25c:	0a000034 	beq	a334 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x160>
    a260:	e1a00004 	mov	r0, r4
    a264:	eb000130 	bl	a72c <CUSBRequest::GetResultLength() const>
    a268:	e5965028 	ldr	r5, [r6, #40]	; 0x28
    a26c:	e0870000 	add	r0, r7, r0
    a270:	e1500005 	cmp	r0, r5
    a274:	9affffdf 	bls	a1f8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x24>
    a278:	e1e07005 	mvn	r7, r5
    a27c:	e0807007 	add	r7, r0, r7
    a280:	e2853005 	add	r3, r5, #5
    a284:	e3c77003 	bic	r7, r7, #3
    a288:	e59f80b8 	ldr	r8, [pc, #184]	; a348 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
    a28c:	e0877003 	add	r7, r7, r3
    a290:	e2855001 	add	r5, r5, #1
    a294:	e5550001 	ldrb	r0, [r5, #-1]
    a298:	e3500000 	cmp	r0, #0
    a29c:	0a00000a 	beq	a2cc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xf8>
    a2a0:	e5969020 	ldr	r9, [r6, #32]
    a2a4:	e3590000 	cmp	r9, #0
    a2a8:	03a09001 	moveq	r9, #1
    a2ac:	0a000006 	beq	a2cc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xf8>
    a2b0:	e200300f 	and	r3, r0, #15
    a2b4:	e0883103 	add	r3, r8, r3, lsl #2
    a2b8:	e1a01005 	mov	r1, r5
    a2bc:	e5932034 	ldr	r2, [r3, #52]	; 0x34
    a2c0:	e1a00220 	lsr	r0, r0, #4
    a2c4:	e12fff39 	blx	r9
    a2c8:	e3a09001 	mov	r9, #1
    a2cc:	e2855004 	add	r5, r5, #4
    a2d0:	e1550007 	cmp	r5, r7
    a2d4:	1affffee 	bne	a294 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xc0>
    a2d8:	e1a00004 	mov	r0, r4
    a2dc:	eb0000ff 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
    a2e0:	e1a00004 	mov	r0, r4
    a2e4:	e3a0102c 	mov	r1, #44	; 0x2c
    a2e8:	eb000180 	bl	a8f0 <CUSBRequest::operator delete(void*, unsigned int)>
    a2ec:	e3590000 	cmp	r9, #0
    a2f0:	0affffc5 	beq	a20c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x38>
    a2f4:	e1a00006 	mov	r0, r6
    a2f8:	e28dd00c 	add	sp, sp, #12
    a2fc:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
    a300:	eaffff62 	b	a090 <CUSBMIDIDevice::StartRequest()>
    a304:	e3a02f65 	mov	r2, #404	; 0x194
    a308:	e59f103c 	ldr	r1, [pc, #60]	; a34c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x178>
    a30c:	e59f003c 	ldr	r0, [pc, #60]	; a350 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x17c>
    a310:	eb004cfa 	bl	1d700 <assertion_failed>
    a314:	e59f2038 	ldr	r2, [pc, #56]	; a354 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x180>
    a318:	e59f102c 	ldr	r1, [pc, #44]	; a34c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x178>
    a31c:	e59f0034 	ldr	r0, [pc, #52]	; a358 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x184>
    a320:	eb004cf6 	bl	1d700 <assertion_failed>
    a324:	e59f2030 	ldr	r2, [pc, #48]	; a35c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x188>
    a328:	e59f101c 	ldr	r1, [pc, #28]	; a34c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x178>
    a32c:	e59f002c 	ldr	r0, [pc, #44]	; a360 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x18c>
    a330:	eb004cf2 	bl	1d700 <assertion_failed>
    a334:	e3a02f5d 	mov	r2, #372	; 0x174
    a338:	e59f100c 	ldr	r1, [pc, #12]	; a34c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x178>
    a33c:	e59f0020 	ldr	r0, [pc, #32]	; a364 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x190>
    a340:	eb004cee 	bl	1d700 <assertion_failed>
    a344:	0000a174 	.word	0x0000a174
    a348:	0002c96c 	.word	0x0002c96c
    a34c:	0002c7d0 	.word	0x0002c7d0
    a350:	0002c900 	.word	0x0002c900
    a354:	0000016d 	.word	0x0000016d
    a358:	0002c8e4 	.word	0x0002c8e4
    a35c:	00000192 	.word	0x00000192
    a360:	0002c8f0 	.word	0x0002c8f0
    a364:	0002c898 	.word	0x0002c898

0000a368 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
    a368:	e3520000 	cmp	r2, #0
    a36c:	0a000002 	beq	a37c <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
    a370:	e1a01000 	mov	r1, r0
    a374:	e1a00002 	mov	r0, r2
    a378:	eaffff95 	b	a1d4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
    a37c:	e92d4010 	push	{r4, lr}
    a380:	e59f2008 	ldr	r2, [pc, #8]	; a390 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
    a384:	e59f1008 	ldr	r1, [pc, #8]	; a394 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
    a388:	e59f0008 	ldr	r0, [pc, #8]	; a398 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x30>
    a38c:	eb004cdb 	bl	1d700 <assertion_failed>
    a390:	0000019b 	.word	0x0000019b
    a394:	0002c7d0 	.word	0x0002c7d0
    a398:	0002c8c4 	.word	0x0002c8c4

0000a39c <CUSBMIDIDevice::TimerHandler(unsigned int)>:
    a39c:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
    a3a0:	e1520001 	cmp	r2, r1
    a3a4:	1a000002 	bne	a3b4 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x18>
    a3a8:	e3a02000 	mov	r2, #0
    a3ac:	e580202c 	str	r2, [r0, #44]	; 0x2c
    a3b0:	eaffff36 	b	a090 <CUSBMIDIDevice::StartRequest()>
    a3b4:	e92d4010 	push	{r4, lr}
    a3b8:	e59f2008 	ldr	r2, [pc, #8]	; a3c8 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x2c>
    a3bc:	e59f1008 	ldr	r1, [pc, #8]	; a3cc <CUSBMIDIDevice::TimerHandler(unsigned int)+0x30>
    a3c0:	e59f0008 	ldr	r0, [pc, #8]	; a3d0 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x34>
    a3c4:	eb004ccd 	bl	1d700 <assertion_failed>
    a3c8:	000001a2 	.word	0x000001a2
    a3cc:	0002c7d0 	.word	0x0002c7d0
    a3d0:	0002c8d0 	.word	0x0002c8d0

0000a3d4 <CUSBMIDIDevice::Configure()>:
    a3d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a3d8:	e24dd014 	sub	sp, sp, #20
    a3dc:	e1a05000 	mov	r5, r0
    a3e0:	eb002040 	bl	124e8 <CUSBFunction::GetNumEndpoints() const>
    a3e4:	e3500000 	cmp	r0, #0
    a3e8:	e1a00005 	mov	r0, r5
    a3ec:	0a000051 	beq	a538 <CUSBMIDIDevice::Configure()+0x164>
    a3f0:	eb002048 	bl	12518 <CUSBFunction::GetDevice() const>
    a3f4:	eb001a29 	bl	10ca0 <CUSBDevice::GetDeviceDescriptor() const>
    a3f8:	e3500000 	cmp	r0, #0
    a3fc:	0a00006f 	beq	a5c0 <CUSBMIDIDevice::Configure()+0x1ec>
    a400:	e5d03008 	ldrb	r3, [r0, #8]
    a404:	e5d01009 	ldrb	r1, [r0, #9]
    a408:	e59f21e8 	ldr	r2, [pc, #488]	; a5f8 <CUSBMIDIDevice::Configure()+0x224>
    a40c:	e1833401 	orr	r3, r3, r1, lsl #8
    a410:	e1530002 	cmp	r3, r2
    a414:	05d0600a 	ldrbeq	r6, [r0, #10]
    a418:	05d0200b 	ldrbeq	r2, [r0, #11]
    a41c:	059f31d8 	ldreq	r3, [pc, #472]	; a5fc <CUSBMIDIDevice::Configure()+0x228>
    a420:	01866402 	orreq	r6, r6, r2, lsl #8
    a424:	00466003 	subeq	r6, r6, r3
    a428:	016f6f16 	clzeq	r6, r6
    a42c:	13a06000 	movne	r6, #0
    a430:	01a062a6 	lsreq	r6, r6, #5
    a434:	e3a01005 	mov	r1, #5
    a438:	e1a00005 	mov	r0, r5
    a43c:	eb002055 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
    a440:	e2504000 	subs	r4, r0, #0
    a444:	0a000040 	beq	a54c <CUSBMIDIDevice::Configure()+0x178>
    a448:	e5d42003 	ldrb	r2, [r4, #3]
    a44c:	e202203f 	and	r2, r2, #63	; 0x3f
    a450:	e3520002 	cmp	r2, #2
    a454:	1afffff6 	bne	a434 <CUSBMIDIDevice::Configure()+0x60>
    a458:	e3560000 	cmp	r6, #0
    a45c:	0a000011 	beq	a4a8 <CUSBMIDIDevice::Configure()+0xd4>
    a460:	e1d430d2 	ldrsb	r3, [r4, #2]
    a464:	e3530000 	cmp	r3, #0
    a468:	ba000018 	blt	a4d0 <CUSBMIDIDevice::Configure()+0xfc>
    a46c:	e595301c 	ldr	r3, [r5, #28]
    a470:	e1a00005 	mov	r0, r5
    a474:	e3530000 	cmp	r3, #0
    a478:	1a00002e 	bne	a538 <CUSBMIDIDevice::Configure()+0x164>
    a47c:	eb002025 	bl	12518 <CUSBFunction::GetDevice() const>
    a480:	e1a01000 	mov	r1, r0
    a484:	e3a00014 	mov	r0, #20
    a488:	e58d100c 	str	r1, [sp, #12]
    a48c:	eb0074e4 	bl	27824 <operator new(unsigned int)>
    a490:	e1a07000 	mov	r7, r0
    a494:	e1a02004 	mov	r2, r4
    a498:	e59d100c 	ldr	r1, [sp, #12]
    a49c:	eb001e5f 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
    a4a0:	e585701c 	str	r7, [r5, #28]
    a4a4:	eaffffe2 	b	a434 <CUSBMIDIDevice::Configure()+0x60>
    a4a8:	e3a01025 	mov	r1, #37	; 0x25
    a4ac:	e1a00005 	mov	r0, r5
    a4b0:	eb002038 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
    a4b4:	e3500000 	cmp	r0, #0
    a4b8:	0affffdd 	beq	a434 <CUSBMIDIDevice::Configure()+0x60>
    a4bc:	e5d43000 	ldrb	r3, [r4]
    a4c0:	e0843003 	add	r3, r4, r3
    a4c4:	e1500003 	cmp	r0, r3
    a4c8:	1affffd9 	bne	a434 <CUSBMIDIDevice::Configure()+0x60>
    a4cc:	eaffffe3 	b	a460 <CUSBMIDIDevice::Configure()+0x8c>
    a4d0:	e5953018 	ldr	r3, [r5, #24]
    a4d4:	e1a00005 	mov	r0, r5
    a4d8:	e3530000 	cmp	r3, #0
    a4dc:	1a000015 	bne	a538 <CUSBMIDIDevice::Configure()+0x164>
    a4e0:	eb00200c 	bl	12518 <CUSBFunction::GetDevice() const>
    a4e4:	e1a01000 	mov	r1, r0
    a4e8:	e3a00014 	mov	r0, #20
    a4ec:	e58d100c 	str	r1, [sp, #12]
    a4f0:	eb0074cb 	bl	27824 <operator new(unsigned int)>
    a4f4:	e1a07000 	mov	r7, r0
    a4f8:	e1a02004 	mov	r2, r4
    a4fc:	e59d100c 	ldr	r1, [sp, #12]
    a500:	eb001e46 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
    a504:	e5857018 	str	r7, [r5, #24]
    a508:	e5d40004 	ldrb	r0, [r4, #4]
    a50c:	e5d42005 	ldrb	r2, [r4, #5]
    a510:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    a514:	e1800402 	orr	r0, r0, r2, lsl #8
    a518:	e3c00003 	bic	r0, r0, #3
    a51c:	e6ff0070 	uxth	r0, r0
    a520:	e3530000 	cmp	r3, #0
    a524:	e1c502b4 	strh	r0, [r5, #36]	; 0x24
    a528:	1a000020 	bne	a5b0 <CUSBMIDIDevice::Configure()+0x1dc>
    a52c:	eb0074c2 	bl	2783c <operator new[](unsigned int)>
    a530:	e5850028 	str	r0, [r5, #40]	; 0x28
    a534:	eaffffbe 	b	a434 <CUSBMIDIDevice::Configure()+0x60>
    a538:	e59f10c0 	ldr	r1, [pc, #192]	; a600 <CUSBMIDIDevice::Configure()+0x22c>
    a53c:	eb002020 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
    a540:	e3a00000 	mov	r0, #0
    a544:	e28dd014 	add	sp, sp, #20
    a548:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a54c:	e5953018 	ldr	r3, [r5, #24]
    a550:	e1a00005 	mov	r0, r5
    a554:	e3530000 	cmp	r3, #0
    a558:	0afffff6 	beq	a538 <CUSBMIDIDevice::Configure()+0x164>
    a55c:	eb001f23 	bl	121f0 <CUSBFunction::Configure()>
    a560:	e3500000 	cmp	r0, #0
    a564:	0a000019 	beq	a5d0 <CUSBMIDIDevice::Configure()+0x1fc>
    a568:	e5954030 	ldr	r4, [r5, #48]	; 0x30
    a56c:	e3540000 	cmp	r4, #0
    a570:	1a00001c 	bne	a5e8 <CUSBMIDIDevice::Configure()+0x214>
    a574:	e3a01001 	mov	r1, #1
    a578:	e59f2080 	ldr	r2, [pc, #128]	; a600 <CUSBMIDIDevice::Configure()+0x22c>
    a57c:	e59f0080 	ldr	r0, [pc, #128]	; a604 <CUSBMIDIDevice::Configure()+0x230>
    a580:	eb0075f2 	bl	27d50 <CNumberPool::AllocateNumber(bool, char const*)>
    a584:	e5850030 	str	r0, [r5, #48]	; 0x30
    a588:	eb004f36 	bl	1e268 <CDeviceNameService::Get()>
    a58c:	e58d4000 	str	r4, [sp]
    a590:	e1a03005 	mov	r3, r5
    a594:	e5952030 	ldr	r2, [r5, #48]	; 0x30
    a598:	e59f1068 	ldr	r1, [pc, #104]	; a608 <CUSBMIDIDevice::Configure()+0x234>
    a59c:	eb004f3d 	bl	1e298 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    a5a0:	e1a00005 	mov	r0, r5
    a5a4:	e28dd014 	add	sp, sp, #20
    a5a8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    a5ac:	eafffeb7 	b	a090 <CUSBMIDIDevice::StartRequest()>
    a5b0:	e3a0208d 	mov	r2, #141	; 0x8d
    a5b4:	e59f1050 	ldr	r1, [pc, #80]	; a60c <CUSBMIDIDevice::Configure()+0x238>
    a5b8:	e59f0050 	ldr	r0, [pc, #80]	; a610 <CUSBMIDIDevice::Configure()+0x23c>
    a5bc:	eb004c4f 	bl	1d700 <assertion_failed>
    a5c0:	e3a02060 	mov	r2, #96	; 0x60
    a5c4:	e59f1040 	ldr	r1, [pc, #64]	; a60c <CUSBMIDIDevice::Configure()+0x238>
    a5c8:	e59f0044 	ldr	r0, [pc, #68]	; a614 <CUSBMIDIDevice::Configure()+0x240>
    a5cc:	eb004c4b 	bl	1d700 <assertion_failed>
    a5d0:	eb00554a 	bl	1fb00 <CLogger::Get()>
    a5d4:	e3a02001 	mov	r2, #1
    a5d8:	e59f3038 	ldr	r3, [pc, #56]	; a618 <CUSBMIDIDevice::Configure()+0x244>
    a5dc:	e59f101c 	ldr	r1, [pc, #28]	; a600 <CUSBMIDIDevice::Configure()+0x22c>
    a5e0:	eb005488 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a5e4:	eaffffd5 	b	a540 <CUSBMIDIDevice::Configure()+0x16c>
    a5e8:	e3a020ae 	mov	r2, #174	; 0xae
    a5ec:	e59f1018 	ldr	r1, [pc, #24]	; a60c <CUSBMIDIDevice::Configure()+0x238>
    a5f0:	e59f0024 	ldr	r0, [pc, #36]	; a61c <CUSBMIDIDevice::Configure()+0x248>
    a5f4:	eb004c41 	bl	1d700 <assertion_failed>
    a5f8:	00000582 	.word	0x00000582
    a5fc:	0000012a 	.word	0x0000012a
    a600:	0002c9e0 	.word	0x0002c9e0
    a604:	00034b70 	.word	0x00034b70
    a608:	0002c998 	.word	0x0002c998
    a60c:	0002c7d0 	.word	0x0002c7d0
    a610:	0002c924 	.word	0x0002c924
    a614:	0002c910 	.word	0x0002c910
    a618:	0002c93c 	.word	0x0002c93c
    a61c:	0002c954 	.word	0x0002c954

0000a620 <_GLOBAL__sub_I__ZN14CUSBMIDIDevice18s_DeviceNumberPoolE>:
    a620:	e92d4010 	push	{r4, lr}
    a624:	e59f4020 	ldr	r4, [pc, #32]	; a64c <_GLOBAL__sub_I__ZN14CUSBMIDIDevice18s_DeviceNumberPoolE+0x2c>
    a628:	e3a0203f 	mov	r2, #63	; 0x3f
    a62c:	e1a00004 	mov	r0, r4
    a630:	e3a01001 	mov	r1, #1
    a634:	eb0075b0 	bl	27cfc <CNumberPool::CNumberPool(unsigned int, unsigned int)>
    a638:	e1a00004 	mov	r0, r4
    a63c:	e8bd4010 	pop	{r4, lr}
    a640:	e59f2008 	ldr	r2, [pc, #8]	; a650 <_GLOBAL__sub_I__ZN14CUSBMIDIDevice18s_DeviceNumberPoolE+0x30>
    a644:	e59f1008 	ldr	r1, [pc, #8]	; a654 <_GLOBAL__sub_I__ZN14CUSBMIDIDevice18s_DeviceNumberPoolE+0x34>
    a648:	ea006c9a 	b	258b8 <__aeabi_atexit>
    a64c:	00034b70 	.word	0x00034b70
    a650:	00034c44 	.word	0x00034c44
    a654:	00027d4c 	.word	0x00027d4c

0000a658 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
    a658:	e92d4010 	push	{r4, lr}
    a65c:	e3a0e000 	mov	lr, #0
    a660:	e3a04009 	mov	r4, #9
    a664:	e151000e 	cmp	r1, lr
    a668:	e5801000 	str	r1, [r0]
    a66c:	e59d1008 	ldr	r1, [sp, #8]
    a670:	e1c020f8 	strd	r2, [r0, #8]
    a674:	e5801004 	str	r1, [r0, #4]
    a678:	e5c04018 	strb	r4, [r0, #24]
    a67c:	e580e010 	str	lr, [r0, #16]
    a680:	e580e014 	str	lr, [r0, #20]
    a684:	e580e01c 	str	lr, [r0, #28]
    a688:	e580e020 	str	lr, [r0, #32]
    a68c:	e580e024 	str	lr, [r0, #36]	; 0x24
    a690:	e5c0e028 	strb	lr, [r0, #40]	; 0x28
    a694:	0a00000a 	beq	a6c4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x6c>
    a698:	e2522000 	subs	r2, r2, #0
    a69c:	13a02001 	movne	r2, #1
    a6a0:	e3530000 	cmp	r3, #0
    a6a4:	11a03002 	movne	r3, r2
    a6a8:	03a03001 	moveq	r3, #1
    a6ac:	e3530000 	cmp	r3, #0
    a6b0:	18bd8010 	popne	{r4, pc}
    a6b4:	e3a02025 	mov	r2, #37	; 0x25
    a6b8:	e59f1014 	ldr	r1, [pc, #20]	; a6d4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x7c>
    a6bc:	e59f0014 	ldr	r0, [pc, #20]	; a6d8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x80>
    a6c0:	eb004c0e 	bl	1d700 <assertion_failed>
    a6c4:	e3a02024 	mov	r2, #36	; 0x24
    a6c8:	e59f1004 	ldr	r1, [pc, #4]	; a6d4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x7c>
    a6cc:	e59f0008 	ldr	r0, [pc, #8]	; a6dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x84>
    a6d0:	eb004c0a 	bl	1d700 <assertion_failed>
    a6d4:	0002c9e8 	.word	0x0002c9e8
    a6d8:	0002ca0c 	.word	0x0002ca0c
    a6dc:	0002c9f8 	.word	0x0002c9f8

0000a6e0 <CUSBRequest::~CUSBRequest()>:
    a6e0:	e12fff1e 	bx	lr

0000a6e4 <CUSBRequest::GetEndpoint() const>:
    a6e4:	e5900000 	ldr	r0, [r0]
    a6e8:	e3500000 	cmp	r0, #0
    a6ec:	112fff1e 	bxne	lr
    a6f0:	e3a02032 	mov	r2, #50	; 0x32
    a6f4:	e92d4010 	push	{r4, lr}
    a6f8:	e59f1004 	ldr	r1, [pc, #4]	; a704 <CUSBRequest::GetEndpoint() const+0x20>
    a6fc:	e59f0004 	ldr	r0, [pc, #4]	; a708 <CUSBRequest::GetEndpoint() const+0x24>
    a700:	eb004bfe 	bl	1d700 <assertion_failed>
    a704:	0002c9e8 	.word	0x0002c9e8
    a708:	0002c9f8 	.word	0x0002c9f8

0000a70c <CUSBRequest::SetStatus(int)>:
    a70c:	e5801010 	str	r1, [r0, #16]
    a710:	e12fff1e 	bx	lr

0000a714 <CUSBRequest::SetResultLen(unsigned int)>:
    a714:	e5801014 	str	r1, [r0, #20]
    a718:	e12fff1e 	bx	lr

0000a71c <CUSBRequest::SetUSBError(TUSBError)>:
    a71c:	e5c01018 	strb	r1, [r0, #24]
    a720:	e12fff1e 	bx	lr

0000a724 <CUSBRequest::GetStatus() const>:
    a724:	e5900010 	ldr	r0, [r0, #16]
    a728:	e12fff1e 	bx	lr

0000a72c <CUSBRequest::GetResultLength() const>:
    a72c:	e5903010 	ldr	r3, [r0, #16]
    a730:	e3530000 	cmp	r3, #0
    a734:	0a000001 	beq	a740 <CUSBRequest::GetResultLength() const+0x14>
    a738:	e5900014 	ldr	r0, [r0, #20]
    a73c:	e12fff1e 	bx	lr
    a740:	e3a0204c 	mov	r2, #76	; 0x4c
    a744:	e92d4010 	push	{r4, lr}
    a748:	e59f1004 	ldr	r1, [pc, #4]	; a754 <CUSBRequest::GetResultLength() const+0x28>
    a74c:	e59f0004 	ldr	r0, [pc, #4]	; a758 <CUSBRequest::GetResultLength() const+0x2c>
    a750:	eb004bea 	bl	1d700 <assertion_failed>
    a754:	0002c9e8 	.word	0x0002c9e8
    a758:	0002ca30 	.word	0x0002ca30

0000a75c <CUSBRequest::GetUSBError() const>:
    a75c:	e5903010 	ldr	r3, [r0, #16]
    a760:	e3530000 	cmp	r3, #0
    a764:	1a000001 	bne	a770 <CUSBRequest::GetUSBError() const+0x14>
    a768:	e5d00018 	ldrb	r0, [r0, #24]
    a76c:	e12fff1e 	bx	lr
    a770:	e3a02053 	mov	r2, #83	; 0x53
    a774:	e92d4010 	push	{r4, lr}
    a778:	e59f1004 	ldr	r1, [pc, #4]	; a784 <CUSBRequest::GetUSBError() const+0x28>
    a77c:	e59f0004 	ldr	r0, [pc, #4]	; a788 <CUSBRequest::GetUSBError() const+0x2c>
    a780:	eb004bde 	bl	1d700 <assertion_failed>
    a784:	0002c9e8 	.word	0x0002c9e8
    a788:	0002ca3c 	.word	0x0002ca3c

0000a78c <CUSBRequest::GetSetupData()>:
    a78c:	e92d4010 	push	{r4, lr}
    a790:	e1a04000 	mov	r4, r0
    a794:	e5900000 	ldr	r0, [r0]
    a798:	eb001e0b 	bl	11fcc <CUSBEndpoint::GetType() const>
    a79c:	e3500000 	cmp	r0, #0
    a7a0:	1a000006 	bne	a7c0 <CUSBRequest::GetSetupData()+0x34>
    a7a4:	e5940004 	ldr	r0, [r4, #4]
    a7a8:	e3500000 	cmp	r0, #0
    a7ac:	18bd8010 	popne	{r4, pc}
    a7b0:	e3a0205b 	mov	r2, #91	; 0x5b
    a7b4:	e59f1014 	ldr	r1, [pc, #20]	; a7d0 <CUSBRequest::GetSetupData()+0x44>
    a7b8:	e59f0014 	ldr	r0, [pc, #20]	; a7d4 <CUSBRequest::GetSetupData()+0x48>
    a7bc:	eb004bcf 	bl	1d700 <assertion_failed>
    a7c0:	e3a0205a 	mov	r2, #90	; 0x5a
    a7c4:	e59f1004 	ldr	r1, [pc, #4]	; a7d0 <CUSBRequest::GetSetupData()+0x44>
    a7c8:	e59f0008 	ldr	r0, [pc, #8]	; a7d8 <CUSBRequest::GetSetupData()+0x4c>
    a7cc:	eb004bcb 	bl	1d700 <assertion_failed>
    a7d0:	0002c9e8 	.word	0x0002c9e8
    a7d4:	0002ca78 	.word	0x0002ca78
    a7d8:	0002ca48 	.word	0x0002ca48

0000a7dc <CUSBRequest::GetBuffer()>:
    a7dc:	e5903008 	ldr	r3, [r0, #8]
    a7e0:	e3530000 	cmp	r3, #0
    a7e4:	0a000001 	beq	a7f0 <CUSBRequest::GetBuffer()+0x14>
    a7e8:	e1a00003 	mov	r0, r3
    a7ec:	e12fff1e 	bx	lr
    a7f0:	e590200c 	ldr	r2, [r0, #12]
    a7f4:	e3520000 	cmp	r2, #0
    a7f8:	0afffffa 	beq	a7e8 <CUSBRequest::GetBuffer()+0xc>
    a7fc:	e3a02062 	mov	r2, #98	; 0x62
    a800:	e92d4010 	push	{r4, lr}
    a804:	e59f1004 	ldr	r1, [pc, #4]	; a810 <CUSBRequest::GetBuffer()+0x34>
    a808:	e59f0004 	ldr	r0, [pc, #4]	; a814 <CUSBRequest::GetBuffer()+0x38>
    a80c:	eb004bbb 	bl	1d700 <assertion_failed>
    a810:	0002c9e8 	.word	0x0002c9e8
    a814:	0002ca0c 	.word	0x0002ca0c

0000a818 <CUSBRequest::GetBufLen() const>:
    a818:	e590000c 	ldr	r0, [r0, #12]
    a81c:	e12fff1e 	bx	lr

0000a820 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
    a820:	e3510000 	cmp	r1, #0
    a824:	e1c022f0 	strd	r2, [r0, #32]
    a828:	e580101c 	str	r1, [r0, #28]
    a82c:	112fff1e 	bxne	lr
    a830:	e3a02073 	mov	r2, #115	; 0x73
    a834:	e92d4010 	push	{r4, lr}
    a838:	e59f1004 	ldr	r1, [pc, #4]	; a844 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x24>
    a83c:	e59f0004 	ldr	r0, [pc, #4]	; a848 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x28>
    a840:	eb004bae 	bl	1d700 <assertion_failed>
    a844:	0002c9e8 	.word	0x0002c9e8
    a848:	0002ca8c 	.word	0x0002ca8c

0000a84c <CUSBRequest::CallCompletionRoutine()>:
    a84c:	e92d4010 	push	{r4, lr}
    a850:	e590e01c 	ldr	lr, [r0, #28]
    a854:	e35e0000 	cmp	lr, #0
    a858:	0a000004 	beq	a870 <CUSBRequest::CallCompletionRoutine()+0x24>
    a85c:	e1a0300e 	mov	r3, lr
    a860:	e8bd4010 	pop	{r4, lr}
    a864:	e5902024 	ldr	r2, [r0, #36]	; 0x24
    a868:	e5901020 	ldr	r1, [r0, #32]
    a86c:	e12fff13 	bx	r3
    a870:	e3a02078 	mov	r2, #120	; 0x78
    a874:	e59f1004 	ldr	r1, [pc, #4]	; a880 <CUSBRequest::CallCompletionRoutine()+0x34>
    a878:	e59f0004 	ldr	r0, [pc, #4]	; a884 <CUSBRequest::CallCompletionRoutine()+0x38>
    a87c:	eb004b9f 	bl	1d700 <assertion_failed>
    a880:	0002c9e8 	.word	0x0002c9e8
    a884:	0002ca8c 	.word	0x0002ca8c

0000a888 <CUSBRequest::SetCompleteOnNAK()>:
    a888:	e3a03001 	mov	r3, #1
    a88c:	e5c03028 	strb	r3, [r0, #40]	; 0x28
    a890:	e12fff1e 	bx	lr

0000a894 <CUSBRequest::IsCompleteOnNAK() const>:
    a894:	e5d00028 	ldrb	r0, [r0, #40]	; 0x28
    a898:	e12fff1e 	bx	lr

0000a89c <CUSBRequest::operator new(unsigned int)>:
    a89c:	e350002c 	cmp	r0, #44	; 0x2c
    a8a0:	e92d4010 	push	{r4, lr}
    a8a4:	1a000005 	bne	a8c0 <CUSBRequest::operator new(unsigned int)+0x24>
    a8a8:	e59f3030 	ldr	r3, [pc, #48]	; a8e0 <CUSBRequest::operator new(unsigned int)+0x44>
    a8ac:	e5930000 	ldr	r0, [r3]
    a8b0:	e3500000 	cmp	r0, #0
    a8b4:	0a000005 	beq	a8d0 <CUSBRequest::operator new(unsigned int)+0x34>
    a8b8:	e8bd4010 	pop	{r4, lr}
    a8bc:	ea004c91 	b	1db08 <CClassAllocator::Allocate()>
    a8c0:	e3a02087 	mov	r2, #135	; 0x87
    a8c4:	e59f1018 	ldr	r1, [pc, #24]	; a8e4 <CUSBRequest::operator new(unsigned int)+0x48>
    a8c8:	e59f0018 	ldr	r0, [pc, #24]	; a8e8 <CUSBRequest::operator new(unsigned int)+0x4c>
    a8cc:	eb004b8b 	bl	1d700 <assertion_failed>
    a8d0:	e3a02087 	mov	r2, #135	; 0x87
    a8d4:	e59f1008 	ldr	r1, [pc, #8]	; a8e4 <CUSBRequest::operator new(unsigned int)+0x48>
    a8d8:	e59f000c 	ldr	r0, [pc, #12]	; a8ec <CUSBRequest::operator new(unsigned int)+0x50>
    a8dc:	eb004b87 	bl	1d700 <assertion_failed>
    a8e0:	00034b80 	.word	0x00034b80
    a8e4:	0002c9e8 	.word	0x0002c9e8
    a8e8:	0002caa8 	.word	0x0002caa8
    a8ec:	0002cac8 	.word	0x0002cac8

0000a8f0 <CUSBRequest::operator delete(void*, unsigned int)>:
    a8f0:	e351002c 	cmp	r1, #44	; 0x2c
    a8f4:	e92d4010 	push	{r4, lr}
    a8f8:	1a000006 	bne	a918 <CUSBRequest::operator delete(void*, unsigned int)+0x28>
    a8fc:	e59f3034 	ldr	r3, [pc, #52]	; a938 <CUSBRequest::operator delete(void*, unsigned int)+0x48>
    a900:	e1a01000 	mov	r1, r0
    a904:	e5930000 	ldr	r0, [r3]
    a908:	e3500000 	cmp	r0, #0
    a90c:	0a000005 	beq	a928 <CUSBRequest::operator delete(void*, unsigned int)+0x38>
    a910:	e8bd4010 	pop	{r4, lr}
    a914:	ea004cb6 	b	1dbf4 <CClassAllocator::Free(void*)>
    a918:	e3a02087 	mov	r2, #135	; 0x87
    a91c:	e59f1018 	ldr	r1, [pc, #24]	; a93c <CUSBRequest::operator delete(void*, unsigned int)+0x4c>
    a920:	e59f0018 	ldr	r0, [pc, #24]	; a940 <CUSBRequest::operator delete(void*, unsigned int)+0x50>
    a924:	eb004b75 	bl	1d700 <assertion_failed>
    a928:	e3a02087 	mov	r2, #135	; 0x87
    a92c:	e59f1008 	ldr	r1, [pc, #8]	; a93c <CUSBRequest::operator delete(void*, unsigned int)+0x4c>
    a930:	e59f000c 	ldr	r0, [pc, #12]	; a944 <CUSBRequest::operator delete(void*, unsigned int)+0x54>
    a934:	eb004b71 	bl	1d700 <assertion_failed>
    a938:	00034b80 	.word	0x00034b80
    a93c:	0002c9e8 	.word	0x0002c9e8
    a940:	0002caa8 	.word	0x0002caa8
    a944:	0002cac8 	.word	0x0002cac8

0000a948 <CUSBRequest::InitAllocator(unsigned int)>:
    a948:	e92d4070 	push	{r4, r5, r6, lr}
    a94c:	e59f6040 	ldr	r6, [pc, #64]	; a994 <CUSBRequest::InitAllocator(unsigned int)+0x4c>
    a950:	e5963000 	ldr	r3, [r6]
    a954:	e3530000 	cmp	r3, #0
    a958:	1a000009 	bne	a984 <CUSBRequest::InitAllocator(unsigned int)+0x3c>
    a95c:	e1a04000 	mov	r4, r0
    a960:	e3a0001c 	mov	r0, #28
    a964:	eb0073ae 	bl	27824 <operator new(unsigned int)>
    a968:	e1a05000 	mov	r5, r0
    a96c:	e1a02004 	mov	r2, r4
    a970:	e3a0102c 	mov	r1, #44	; 0x2c
    a974:	e59f301c 	ldr	r3, [pc, #28]	; a998 <CUSBRequest::InitAllocator(unsigned int)+0x50>
    a978:	eb004c49 	bl	1daa4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    a97c:	e5865000 	str	r5, [r6]
    a980:	e8bd8070 	pop	{r4, r5, r6, pc}
    a984:	e3a02087 	mov	r2, #135	; 0x87
    a988:	e59f100c 	ldr	r1, [pc, #12]	; a99c <CUSBRequest::InitAllocator(unsigned int)+0x54>
    a98c:	e59f000c 	ldr	r0, [pc, #12]	; a9a0 <CUSBRequest::InitAllocator(unsigned int)+0x58>
    a990:	eb004b5a 	bl	1d700 <assertion_failed>
    a994:	00034b80 	.word	0x00034b80
    a998:	0002caf0 	.word	0x0002caf0
    a99c:	0002c9e8 	.word	0x0002c9e8
    a9a0:	0002cadc 	.word	0x0002cadc

0000a9a4 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
    a9a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a9a8:	e59f7054 	ldr	r7, [pc, #84]	; aa04 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    a9ac:	e24dd00c 	sub	sp, sp, #12
    a9b0:	e5973000 	ldr	r3, [r7]
    a9b4:	e3530000 	cmp	r3, #0
    a9b8:	1a00000d 	bne	a9f4 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    a9bc:	e1a05001 	mov	r5, r1
    a9c0:	e1a04000 	mov	r4, r0
    a9c4:	e3a0001c 	mov	r0, #28
    a9c8:	eb007395 	bl	27824 <operator new(unsigned int)>
    a9cc:	e59f1034 	ldr	r1, [pc, #52]	; aa08 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    a9d0:	e1a03005 	mov	r3, r5
    a9d4:	e58d1000 	str	r1, [sp]
    a9d8:	e1a02004 	mov	r2, r4
    a9dc:	e3a0102c 	mov	r1, #44	; 0x2c
    a9e0:	e1a06000 	mov	r6, r0
    a9e4:	eb004c3a 	bl	1dad4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    a9e8:	e5876000 	str	r6, [r7]
    a9ec:	e28dd00c 	add	sp, sp, #12
    a9f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a9f4:	e3a02087 	mov	r2, #135	; 0x87
    a9f8:	e59f100c 	ldr	r1, [pc, #12]	; aa0c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    a9fc:	e59f000c 	ldr	r0, [pc, #12]	; aa10 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    aa00:	eb004b3e 	bl	1d700 <assertion_failed>
    aa04:	00034b80 	.word	0x00034b80
    aa08:	0002caf0 	.word	0x0002caf0
    aa0c:	0002c9e8 	.word	0x0002c9e8
    aa10:	0002cadc 	.word	0x0002cadc

0000aa14 <CUSBStandardHub::~CUSBStandardHub()>:
    aa14:	e5903074 	ldr	r3, [r0, #116]	; 0x74
    aa18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    aa1c:	e59f4104 	ldr	r4, [pc, #260]	; ab28 <CUSBStandardHub::~CUSBStandardHub()+0x114>
    aa20:	e3530000 	cmp	r3, #0
    aa24:	e1a05000 	mov	r5, r0
    aa28:	e5804000 	str	r4, [r0]
    aa2c:	1a000034 	bne	ab04 <CUSBStandardHub::~CUSBStandardHub()+0xf0>
    aa30:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    aa34:	e3530000 	cmp	r3, #0
    aa38:	0a000014 	beq	aa90 <CUSBStandardHub::~CUSBStandardHub()+0x7c>
    aa3c:	e3a04000 	mov	r4, #0
    aa40:	e1a08004 	mov	r8, r4
    aa44:	e285702c 	add	r7, r5, #44	; 0x2c
    aa48:	e285604c 	add	r6, r5, #76	; 0x4c
    aa4c:	e4960004 	ldr	r0, [r6], #4
    aa50:	e2844001 	add	r4, r4, #1
    aa54:	e3500000 	cmp	r0, #0
    aa58:	0a000001 	beq	aa64 <CUSBStandardHub::~CUSBStandardHub()+0x50>
    aa5c:	e3a01004 	mov	r1, #4
    aa60:	eb00737d 	bl	2785c <operator delete(void*, unsigned int)>
    aa64:	e5970000 	ldr	r0, [r7]
    aa68:	e5068004 	str	r8, [r6, #-4]
    aa6c:	e3500000 	cmp	r0, #0
    aa70:	0a000002 	beq	aa80 <CUSBStandardHub::~CUSBStandardHub()+0x6c>
    aa74:	e5903000 	ldr	r3, [r0]
    aa78:	e5933004 	ldr	r3, [r3, #4]
    aa7c:	e12fff33 	blx	r3
    aa80:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    aa84:	e4878004 	str	r8, [r7], #4
    aa88:	e1530004 	cmp	r3, r4
    aa8c:	8affffee 	bhi	aa4c <CUSBStandardHub::~CUSBStandardHub()+0x38>
    aa90:	e3a03000 	mov	r3, #0
    aa94:	e5950020 	ldr	r0, [r5, #32]
    aa98:	e5853024 	str	r3, [r5, #36]	; 0x24
    aa9c:	e1500003 	cmp	r0, r3
    aaa0:	0a000000 	beq	aaa8 <CUSBStandardHub::~CUSBStandardHub()+0x94>
    aaa4:	eb00736b 	bl	27858 <operator delete[](void*)>
    aaa8:	e3a03000 	mov	r3, #0
    aaac:	e595401c 	ldr	r4, [r5, #28]
    aab0:	e5853020 	str	r3, [r5, #32]
    aab4:	e1540003 	cmp	r4, r3
    aab8:	0a000004 	beq	aad0 <CUSBStandardHub::~CUSBStandardHub()+0xbc>
    aabc:	e1a00004 	mov	r0, r4
    aac0:	eb001d34 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
    aac4:	e1a00004 	mov	r0, r4
    aac8:	e3a01014 	mov	r1, #20
    aacc:	eb007362 	bl	2785c <operator delete(void*, unsigned int)>
    aad0:	e3a03000 	mov	r3, #0
    aad4:	e5950018 	ldr	r0, [r5, #24]
    aad8:	e585301c 	str	r3, [r5, #28]
    aadc:	e1500003 	cmp	r0, r3
    aae0:	0a000001 	beq	aaec <CUSBStandardHub::~CUSBStandardHub()+0xd8>
    aae4:	e3a01009 	mov	r1, #9
    aae8:	eb00735b 	bl	2785c <operator delete(void*, unsigned int)>
    aaec:	e3a03000 	mov	r3, #0
    aaf0:	e1a00005 	mov	r0, r5
    aaf4:	e5853018 	str	r3, [r5, #24]
    aaf8:	eb001d93 	bl	1214c <CUSBFunction::~CUSBFunction()>
    aafc:	e1a00005 	mov	r0, r5
    ab00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ab04:	eb004dd7 	bl	1e268 <CDeviceNameService::Get()>
    ab08:	e2841024 	add	r1, r4, #36	; 0x24
    ab0c:	e3a03000 	mov	r3, #0
    ab10:	e5952074 	ldr	r2, [r5, #116]	; 0x74
    ab14:	eb004df9 	bl	1e300 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    ab18:	e5951074 	ldr	r1, [r5, #116]	; 0x74
    ab1c:	e59f0008 	ldr	r0, [pc, #8]	; ab2c <CUSBStandardHub::~CUSBStandardHub()+0x118>
    ab20:	eb0074c5 	bl	27e3c <CNumberPool::FreeNumber(unsigned int)>
    ab24:	eaffffc1 	b	aa30 <CUSBStandardHub::~CUSBStandardHub()+0x1c>
    ab28:	0002cec8 	.word	0x0002cec8
    ab2c:	00034b88 	.word	0x00034b88

0000ab30 <CUSBStandardHub::~CUSBStandardHub()>:
    ab30:	e92d4010 	push	{r4, lr}
    ab34:	e1a04000 	mov	r4, r0
    ab38:	ebffffb5 	bl	aa14 <CUSBStandardHub::~CUSBStandardHub()>
    ab3c:	e1a00004 	mov	r0, r4
    ab40:	e3a01078 	mov	r1, #120	; 0x78
    ab44:	eb007344 	bl	2785c <operator delete(void*, unsigned int)>
    ab48:	e1a00004 	mov	r0, r4
    ab4c:	e8bd8010 	pop	{r4, pc}

0000ab50 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
    ab50:	e92d4010 	push	{r4, lr}
    ab54:	e1a04000 	mov	r4, r0
    ab58:	eb001e0e 	bl	12398 <CUSBFunction::CUSBFunction(CUSBFunction*)>
    ab5c:	e3a03000 	mov	r3, #0
    ab60:	e59f1044 	ldr	r1, [pc, #68]	; abac <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x5c>
    ab64:	e1a02003 	mov	r2, r3
    ab68:	e5843018 	str	r3, [r4, #24]
    ab6c:	e5841000 	str	r1, [r4]
    ab70:	e584301c 	str	r3, [r4, #28]
    ab74:	e5843020 	str	r3, [r4, #32]
    ab78:	e5843024 	str	r3, [r4, #36]	; 0x24
    ab7c:	e5c43028 	strb	r3, [r4, #40]	; 0x28
    ab80:	e5843074 	str	r3, [r4, #116]	; 0x74
    ab84:	e284106c 	add	r1, r4, #108	; 0x6c
    ab88:	e284302c 	add	r3, r4, #44	; 0x2c
    ab8c:	e284004c 	add	r0, r4, #76	; 0x4c
    ab90:	e4832004 	str	r2, [r3], #4
    ab94:	e1530000 	cmp	r3, r0
    ab98:	e583201c 	str	r2, [r3, #28]
    ab9c:	e4c12001 	strb	r2, [r1], #1
    aba0:	1afffffa 	bne	ab90 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x40>
    aba4:	e1a00004 	mov	r0, r4
    aba8:	e8bd8010 	pop	{r4, pc}
    abac:	0002cec8 	.word	0x0002cec8

0000abb0 <CUSBStandardHub::DisablePort(unsigned int)>:
    abb0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    abb4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    abb8:	e24dd014 	sub	sp, sp, #20
    abbc:	e1530001 	cmp	r3, r1
    abc0:	9a000022 	bls	ac50 <CUSBStandardHub::DisablePort(unsigned int)+0xa0>
    abc4:	e1a05001 	mov	r5, r1
    abc8:	e1a04000 	mov	r4, r0
    abcc:	eb001e66 	bl	1256c <CUSBFunction::GetHost() const>
    abd0:	e3a06001 	mov	r6, #1
    abd4:	e1a07000 	mov	r7, r0
    abd8:	e1a00004 	mov	r0, r4
    abdc:	eb001e57 	bl	12540 <CUSBFunction::GetEndpoint0() const>
    abe0:	e3a08000 	mov	r8, #0
    abe4:	e0859006 	add	r9, r5, r6
    abe8:	e6ff3079 	uxth	r3, r9
    abec:	e1a01000 	mov	r1, r0
    abf0:	e58d3004 	str	r3, [sp, #4]
    abf4:	e1a00007 	mov	r0, r7
    abf8:	e1a03006 	mov	r3, r6
    abfc:	e3a02023 	mov	r2, #35	; 0x23
    ac00:	e58d800c 	str	r8, [sp, #12]
    ac04:	e58d8008 	str	r8, [sp, #8]
    ac08:	e58d6000 	str	r6, [sp]
    ac0c:	ebfff8ff 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    ac10:	e1500008 	cmp	r0, r8
    ac14:	a0844005 	addge	r4, r4, r5
    ac18:	a1a00006 	movge	r0, r6
    ac1c:	a5c4806c 	strbge	r8, [r4, #108]	; 0x6c
    ac20:	ba000001 	blt	ac2c <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
    ac24:	e28dd014 	add	sp, sp, #20
    ac28:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    ac2c:	eb0053b3 	bl	1fb00 <CLogger::Get()>
    ac30:	e1a02006 	mov	r2, r6
    ac34:	e59f3024 	ldr	r3, [pc, #36]	; ac60 <CUSBStandardHub::DisablePort(unsigned int)+0xb0>
    ac38:	e59f1024 	ldr	r1, [pc, #36]	; ac64 <CUSBStandardHub::DisablePort(unsigned int)+0xb4>
    ac3c:	e58d9000 	str	r9, [sp]
    ac40:	eb0052f0 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ac44:	e1a00008 	mov	r0, r8
    ac48:	e28dd014 	add	sp, sp, #20
    ac4c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    ac50:	e3a020db 	mov	r2, #219	; 0xdb
    ac54:	e59f100c 	ldr	r1, [pc, #12]	; ac68 <CUSBStandardHub::DisablePort(unsigned int)+0xb8>
    ac58:	e59f000c 	ldr	r0, [pc, #12]	; ac6c <CUSBStandardHub::DisablePort(unsigned int)+0xbc>
    ac5c:	eb004aa7 	bl	1d700 <assertion_failed>
    ac60:	0002cb28 	.word	0x0002cb28
    ac64:	0002cef4 	.word	0x0002cef4
    ac68:	0002cafc 	.word	0x0002cafc
    ac6c:	0002cb10 	.word	0x0002cb10

0000ac70 <CUSBStandardHub::RemoveDevice(unsigned int)>:
    ac70:	e92d4070 	push	{r4, r5, r6, lr}
    ac74:	e1a05000 	mov	r5, r0
    ac78:	e1a04001 	mov	r4, r1
    ac7c:	ebffffcb 	bl	abb0 <CUSBStandardHub::DisablePort(unsigned int)>
    ac80:	e2506000 	subs	r6, r0, #0
    ac84:	0a000008 	beq	acac <CUSBStandardHub::RemoveDevice(unsigned int)+0x3c>
    ac88:	e0854104 	add	r4, r5, r4, lsl #2
    ac8c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    ac90:	e3500000 	cmp	r0, #0
    ac94:	0a000002 	beq	aca4 <CUSBStandardHub::RemoveDevice(unsigned int)+0x34>
    ac98:	e5903000 	ldr	r3, [r0]
    ac9c:	e5933004 	ldr	r3, [r3, #4]
    aca0:	e12fff33 	blx	r3
    aca4:	e3a03000 	mov	r3, #0
    aca8:	e584302c 	str	r3, [r4, #44]	; 0x2c
    acac:	e1a00006 	mov	r0, r6
    acb0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000acb4 <CUSBStandardHub::StartStatusChangeRequest()>:
    acb4:	e92d4070 	push	{r4, r5, r6, lr}
    acb8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    acbc:	e24dd010 	sub	sp, sp, #16
    acc0:	e3530000 	cmp	r3, #0
    acc4:	0a000026 	beq	ad64 <CUSBStandardHub::StartStatusChangeRequest()+0xb0>
    acc8:	e5902020 	ldr	r2, [r0, #32]
    accc:	e2833008 	add	r3, r3, #8
    acd0:	e3520000 	cmp	r2, #0
    acd4:	e1a04000 	mov	r4, r0
    acd8:	e1a031a3 	lsr	r3, r3, #3
    acdc:	0a00001a 	beq	ad4c <CUSBStandardHub::StartStatusChangeRequest()+0x98>
    ace0:	e594201c 	ldr	r2, [r4, #28]
    ace4:	e3520000 	cmp	r2, #0
    ace8:	0a000021 	beq	ad74 <CUSBStandardHub::StartStatusChangeRequest()+0xc0>
    acec:	e3a0002c 	mov	r0, #44	; 0x2c
    acf0:	e58d300c 	str	r3, [sp, #12]
    acf4:	ebfffee8 	bl	a89c <CUSBRequest::operator new(unsigned int)>
    acf8:	e3a06000 	mov	r6, #0
    acfc:	e1a05000 	mov	r5, r0
    ad00:	e58d6000 	str	r6, [sp]
    ad04:	e59d300c 	ldr	r3, [sp, #12]
    ad08:	e5942020 	ldr	r2, [r4, #32]
    ad0c:	e594101c 	ldr	r1, [r4, #28]
    ad10:	ebfffe50 	bl	a658 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
    ad14:	e1a03004 	mov	r3, r4
    ad18:	e1a02006 	mov	r2, r6
    ad1c:	e1a00005 	mov	r0, r5
    ad20:	e59f105c 	ldr	r1, [pc, #92]	; ad84 <CUSBStandardHub::StartStatusChangeRequest()+0xd0>
    ad24:	ebfffebd 	bl	a820 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    ad28:	e1a00004 	mov	r0, r4
    ad2c:	eb001e0e 	bl	1256c <CUSBFunction::GetHost() const>
    ad30:	e1a01005 	mov	r1, r5
    ad34:	e1a02006 	mov	r2, r6
    ad38:	e5903000 	ldr	r3, [r0]
    ad3c:	e593300c 	ldr	r3, [r3, #12]
    ad40:	e28dd010 	add	sp, sp, #16
    ad44:	e8bd4070 	pop	{r4, r5, r6, lr}
    ad48:	e12fff13 	bx	r3
    ad4c:	e1a00003 	mov	r0, r3
    ad50:	e58d300c 	str	r3, [sp, #12]
    ad54:	eb0072b8 	bl	2783c <operator new[](unsigned int)>
    ad58:	e59d300c 	ldr	r3, [sp, #12]
    ad5c:	e5840020 	str	r0, [r4, #32]
    ad60:	eaffffde 	b	ace0 <CUSBStandardHub::StartStatusChangeRequest()+0x2c>
    ad64:	e59f201c 	ldr	r2, [pc, #28]	; ad88 <CUSBStandardHub::StartStatusChangeRequest()+0xd4>
    ad68:	e59f101c 	ldr	r1, [pc, #28]	; ad8c <CUSBStandardHub::StartStatusChangeRequest()+0xd8>
    ad6c:	e59f001c 	ldr	r0, [pc, #28]	; ad90 <CUSBStandardHub::StartStatusChangeRequest()+0xdc>
    ad70:	eb004a62 	bl	1d700 <assertion_failed>
    ad74:	e59f2018 	ldr	r2, [pc, #24]	; ad94 <CUSBStandardHub::StartStatusChangeRequest()+0xe0>
    ad78:	e59f100c 	ldr	r1, [pc, #12]	; ad8c <CUSBStandardHub::StartStatusChangeRequest()+0xd8>
    ad7c:	e59f0014 	ldr	r0, [pc, #20]	; ad98 <CUSBStandardHub::StartStatusChangeRequest()+0xe4>
    ad80:	eb004a5e 	bl	1d700 <assertion_failed>
    ad84:	0000ae44 	.word	0x0000ae44
    ad88:	000001e2 	.word	0x000001e2
    ad8c:	0002cafc 	.word	0x0002cafc
    ad90:	0002cb40 	.word	0x0002cb40
    ad94:	000001eb 	.word	0x000001eb
    ad98:	0002cb50 	.word	0x0002cb50

0000ad9c <CUSBStandardHub::CompletionRoutine(CUSBRequest*)>:
    ad9c:	e92d4070 	push	{r4, r5, r6, lr}
    ada0:	e2514000 	subs	r4, r1, #0
    ada4:	0a000016 	beq	ae04 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x68>
    ada8:	e1a05000 	mov	r5, r0
    adac:	e1a00004 	mov	r0, r4
    adb0:	ebfffe5b 	bl	a724 <CUSBRequest::GetStatus() const>
    adb4:	e3500000 	cmp	r0, #0
    adb8:	e1a00004 	mov	r0, r4
    adbc:	0a000007 	beq	ade0 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x44>
    adc0:	ebfffe59 	bl	a72c <CUSBRequest::GetResultLength() const>
    adc4:	e3500000 	cmp	r0, #0
    adc8:	0a000014 	beq	ae20 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x84>
    adcc:	e1a00005 	mov	r0, r5
    add0:	eb001de5 	bl	1256c <CUSBFunction::GetHost() const>
    add4:	e1a01005 	mov	r1, r5
    add8:	ebfff99c 	bl	9450 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)>
    addc:	ea000002 	b	adec <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x50>
    ade0:	ebfffe5d 	bl	a75c <CUSBRequest::GetUSBError() const>
    ade4:	e3500003 	cmp	r0, #3
    ade8:	0a000009 	beq	ae14 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x78>
    adec:	e1a00004 	mov	r0, r4
    adf0:	ebfffe3a 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
    adf4:	e1a00004 	mov	r0, r4
    adf8:	e8bd4070 	pop	{r4, r5, r6, lr}
    adfc:	e3a0102c 	mov	r1, #44	; 0x2c
    ae00:	eafffeba 	b	a8f0 <CUSBRequest::operator delete(void*, unsigned int)>
    ae04:	e59f2024 	ldr	r2, [pc, #36]	; ae30 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x94>
    ae08:	e59f1024 	ldr	r1, [pc, #36]	; ae34 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x98>
    ae0c:	e59f0024 	ldr	r0, [pc, #36]	; ae38 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x9c>
    ae10:	eb004a3a 	bl	1d700 <assertion_failed>
    ae14:	e1a00005 	mov	r0, r5
    ae18:	ebffffa5 	bl	acb4 <CUSBStandardHub::StartStatusChangeRequest()>
    ae1c:	eafffff2 	b	adec <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x50>
    ae20:	e59f2014 	ldr	r2, [pc, #20]	; ae3c <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0xa0>
    ae24:	e59f1008 	ldr	r1, [pc, #8]	; ae34 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x98>
    ae28:	e59f0010 	ldr	r0, [pc, #16]	; ae40 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0xa4>
    ae2c:	eb004a33 	bl	1d700 <assertion_failed>
    ae30:	000001f5 	.word	0x000001f5
    ae34:	0002cafc 	.word	0x0002cafc
    ae38:	0002c8e4 	.word	0x0002c8e4
    ae3c:	000001f9 	.word	0x000001f9
    ae40:	0002cb6c 	.word	0x0002cb6c

0000ae44 <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)>:
    ae44:	e3520000 	cmp	r2, #0
    ae48:	0a000002 	beq	ae58 <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)+0x14>
    ae4c:	e1a01000 	mov	r1, r0
    ae50:	e1a00002 	mov	r0, r2
    ae54:	eaffffd0 	b	ad9c <CUSBStandardHub::CompletionRoutine(CUSBRequest*)>
    ae58:	e92d4010 	push	{r4, lr}
    ae5c:	e59f2008 	ldr	r2, [pc, #8]	; ae6c <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)+0x28>
    ae60:	e59f1008 	ldr	r1, [pc, #8]	; ae70 <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
    ae64:	e59f0008 	ldr	r0, [pc, #8]	; ae74 <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)+0x30>
    ae68:	eb004a24 	bl	1d700 <assertion_failed>
    ae6c:	0000020b 	.word	0x0000020b
    ae70:	0002cafc 	.word	0x0002cafc
    ae74:	0002c8c4 	.word	0x0002c8c4

0000ae78 <CUSBStandardHub::HandlePortStatusChange()>:
    ae78:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae7c:	e5903020 	ldr	r3, [r0, #32]
    ae80:	e24dd01c 	sub	sp, sp, #28
    ae84:	e3530000 	cmp	r3, #0
    ae88:	0a0000a0 	beq	b110 <CUSBStandardHub::HandlePortStatusChange()+0x298>
    ae8c:	e5902024 	ldr	r2, [r0, #36]	; 0x24
    ae90:	e1a07000 	mov	r7, r0
    ae94:	e3520007 	cmp	r2, #7
    ae98:	e5d38000 	ldrb	r8, [r3]
    ae9c:	8a00006f 	bhi	b060 <CUSBStandardHub::HandlePortStatusChange()+0x1e8>
    aea0:	e3180001 	tst	r8, #1
    aea4:	1a000073 	bne	b078 <CUSBStandardHub::HandlePortStatusChange()+0x200>
    aea8:	e3520000 	cmp	r2, #0
    aeac:	0a000091 	beq	b0f8 <CUSBStandardHub::HandlePortStatusChange()+0x280>
    aeb0:	e3a04000 	mov	r4, #0
    aeb4:	e287604c 	add	r6, r7, #76	; 0x4c
    aeb8:	e1a0b004 	mov	fp, r4
    aebc:	ea000005 	b	aed8 <CUSBStandardHub::HandlePortStatusChange()+0x60>
    aec0:	e3150001 	tst	r5, #1
    aec4:	1a000049 	bne	aff0 <CUSBStandardHub::HandlePortStatusChange()+0x178>
    aec8:	e5972024 	ldr	r2, [r7, #36]	; 0x24
    aecc:	e1520004 	cmp	r2, r4
    aed0:	e2866004 	add	r6, r6, #4
    aed4:	9a000087 	bls	b0f8 <CUSBStandardHub::HandlePortStatusChange()+0x280>
    aed8:	e1a0a004 	mov	sl, r4
    aedc:	e2844001 	add	r4, r4, #1
    aee0:	e1a03458 	asr	r3, r8, r4
    aee4:	e3130001 	tst	r3, #1
    aee8:	0afffff7 	beq	aecc <CUSBStandardHub::HandlePortStatusChange()+0x54>
    aeec:	e1a00007 	mov	r0, r7
    aef0:	eb001d9d 	bl	1256c <CUSBFunction::GetHost() const>
    aef4:	e1a05000 	mov	r5, r0
    aef8:	e1a00007 	mov	r0, r7
    aefc:	eb001d8f 	bl	12540 <CUSBFunction::GetEndpoint0() const>
    af00:	e3a02004 	mov	r2, #4
    af04:	e5963000 	ldr	r3, [r6]
    af08:	e6ff9074 	uxth	r9, r4
    af0c:	e1a01000 	mov	r1, r0
    af10:	e58d200c 	str	r2, [sp, #12]
    af14:	e58d3008 	str	r3, [sp, #8]
    af18:	e1a00005 	mov	r0, r5
    af1c:	e3a03000 	mov	r3, #0
    af20:	e3a020a3 	mov	r2, #163	; 0xa3
    af24:	e58db000 	str	fp, [sp]
    af28:	e58d9004 	str	r9, [sp, #4]
    af2c:	ebfff837 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    af30:	e3500004 	cmp	r0, #4
    af34:	0a000005 	beq	af50 <CUSBStandardHub::HandlePortStatusChange()+0xd8>
    af38:	eb0052f0 	bl	1fb00 <CLogger::Get()>
    af3c:	e3a02000 	mov	r2, #0
    af40:	e59f3204 	ldr	r3, [pc, #516]	; b14c <CUSBStandardHub::HandlePortStatusChange()+0x2d4>
    af44:	e59f1204 	ldr	r1, [pc, #516]	; b150 <CUSBStandardHub::HandlePortStatusChange()+0x2d8>
    af48:	e58d4000 	str	r4, [sp]
    af4c:	eb00522d 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    af50:	e5963000 	ldr	r3, [r6]
    af54:	e5d35002 	ldrb	r5, [r3, #2]
    af58:	e5d33003 	ldrb	r3, [r3, #3]
    af5c:	e3150002 	tst	r5, #2
    af60:	e1855403 	orr	r5, r5, r3, lsl #8
    af64:	1a000050 	bne	b0ac <CUSBStandardHub::HandlePortStatusChange()+0x234>
    af68:	e3150004 	tst	r5, #4
    af6c:	1a000052 	bne	b0bc <CUSBStandardHub::HandlePortStatusChange()+0x244>
    af70:	e2153008 	ands	r3, r5, #8
    af74:	e58d3014 	str	r3, [sp, #20]
    af78:	1a000053 	bne	b0cc <CUSBStandardHub::HandlePortStatusChange()+0x254>
    af7c:	e3150010 	tst	r5, #16
    af80:	0affffce 	beq	aec0 <CUSBStandardHub::HandlePortStatusChange()+0x48>
    af84:	e1a00007 	mov	r0, r7
    af88:	eb001d77 	bl	1256c <CUSBFunction::GetHost() const>
    af8c:	e1a03000 	mov	r3, r0
    af90:	e1a00007 	mov	r0, r7
    af94:	e58d3014 	str	r3, [sp, #20]
    af98:	eb001d68 	bl	12540 <CUSBFunction::GetEndpoint0() const>
    af9c:	e3a02014 	mov	r2, #20
    afa0:	e59d3014 	ldr	r3, [sp, #20]
    afa4:	e1a01000 	mov	r1, r0
    afa8:	e1a00003 	mov	r0, r3
    afac:	e2153008 	ands	r3, r5, #8
    afb0:	e88d0204 	stm	sp, {r2, r9}
    afb4:	e58d300c 	str	r3, [sp, #12]
    afb8:	e58d3008 	str	r3, [sp, #8]
    afbc:	e3a02023 	mov	r2, #35	; 0x23
    afc0:	e3a03001 	mov	r3, #1
    afc4:	ebfff811 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    afc8:	e3500000 	cmp	r0, #0
    afcc:	aaffffbb 	bge	aec0 <CUSBStandardHub::HandlePortStatusChange()+0x48>
    afd0:	eb0052ca 	bl	1fb00 <CLogger::Get()>
    afd4:	e2152008 	ands	r2, r5, #8
    afd8:	e59f3174 	ldr	r3, [pc, #372]	; b154 <CUSBStandardHub::HandlePortStatusChange()+0x2dc>
    afdc:	e59f116c 	ldr	r1, [pc, #364]	; b150 <CUSBStandardHub::HandlePortStatusChange()+0x2d8>
    afe0:	e58d4000 	str	r4, [sp]
    afe4:	eb005207 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    afe8:	e3150001 	tst	r5, #1
    afec:	0affffb5 	beq	aec8 <CUSBStandardHub::HandlePortStatusChange()+0x50>
    aff0:	e1a00007 	mov	r0, r7
    aff4:	eb001d5c 	bl	1256c <CUSBFunction::GetHost() const>
    aff8:	e1a05000 	mov	r5, r0
    affc:	e1a00007 	mov	r0, r7
    b000:	eb001d4e 	bl	12540 <CUSBFunction::GetEndpoint0() const>
    b004:	e3a03010 	mov	r3, #16
    b008:	e1a01000 	mov	r1, r0
    b00c:	e88d0a08 	stm	sp, {r3, r9, fp}
    b010:	e1a00005 	mov	r0, r5
    b014:	e3a03001 	mov	r3, #1
    b018:	e3a02023 	mov	r2, #35	; 0x23
    b01c:	e58db00c 	str	fp, [sp, #12]
    b020:	ebfff7fa 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    b024:	e3500000 	cmp	r0, #0
    b028:	ba00002b 	blt	b0dc <CUSBStandardHub::HandlePortStatusChange()+0x264>
    b02c:	e5963000 	ldr	r3, [r6]
    b030:	e5d33000 	ldrb	r3, [r3]
    b034:	e3130001 	tst	r3, #1
    b038:	e5163020 	ldr	r3, [r6, #-32]	; 0xffffffe0
    b03c:	0a000014 	beq	b094 <CUSBStandardHub::HandlePortStatusChange()+0x21c>
    b040:	e3530000 	cmp	r3, #0
    b044:	1affff9f 	bne	aec8 <CUSBStandardHub::HandlePortStatusChange()+0x50>
    b048:	e5973000 	ldr	r3, [r7]
    b04c:	e1a00007 	mov	r0, r7
    b050:	e5933020 	ldr	r3, [r3, #32]
    b054:	e12fff33 	blx	r3
    b058:	e5972024 	ldr	r2, [r7, #36]	; 0x24
    b05c:	eaffff9a 	b	aecc <CUSBStandardHub::HandlePortStatusChange()+0x54>
    b060:	e352000f 	cmp	r2, #15
    b064:	8a000034 	bhi	b13c <CUSBStandardHub::HandlePortStatusChange()+0x2c4>
    b068:	e5d33001 	ldrb	r3, [r3, #1]
    b06c:	e3180001 	tst	r8, #1
    b070:	e1888403 	orr	r8, r8, r3, lsl #8
    b074:	0affff8d 	beq	aeb0 <CUSBStandardHub::HandlePortStatusChange()+0x38>
    b078:	eb0052a0 	bl	1fb00 <CLogger::Get()>
    b07c:	e3a02000 	mov	r2, #0
    b080:	e59f30d0 	ldr	r3, [pc, #208]	; b158 <CUSBStandardHub::HandlePortStatusChange()+0x2e0>
    b084:	e59f10c4 	ldr	r1, [pc, #196]	; b150 <CUSBStandardHub::HandlePortStatusChange()+0x2d8>
    b088:	eb0051de 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b08c:	e5972024 	ldr	r2, [r7, #36]	; 0x24
    b090:	eaffff84 	b	aea8 <CUSBStandardHub::HandlePortStatusChange()+0x30>
    b094:	e3530000 	cmp	r3, #0
    b098:	0affff8a 	beq	aec8 <CUSBStandardHub::HandlePortStatusChange()+0x50>
    b09c:	e1a0100a 	mov	r1, sl
    b0a0:	e1a00007 	mov	r0, r7
    b0a4:	ebfffef1 	bl	ac70 <CUSBStandardHub::RemoveDevice(unsigned int)>
    b0a8:	eaffff86 	b	aec8 <CUSBStandardHub::HandlePortStatusChange()+0x50>
    b0ac:	e59f20a8 	ldr	r2, [pc, #168]	; b15c <CUSBStandardHub::HandlePortStatusChange()+0x2e4>
    b0b0:	e59f10a8 	ldr	r1, [pc, #168]	; b160 <CUSBStandardHub::HandlePortStatusChange()+0x2e8>
    b0b4:	e59f00a8 	ldr	r0, [pc, #168]	; b164 <CUSBStandardHub::HandlePortStatusChange()+0x2ec>
    b0b8:	eb004990 	bl	1d700 <assertion_failed>
    b0bc:	e59f20a4 	ldr	r2, [pc, #164]	; b168 <CUSBStandardHub::HandlePortStatusChange()+0x2f0>
    b0c0:	e59f1098 	ldr	r1, [pc, #152]	; b160 <CUSBStandardHub::HandlePortStatusChange()+0x2e8>
    b0c4:	e59f00a0 	ldr	r0, [pc, #160]	; b16c <CUSBStandardHub::HandlePortStatusChange()+0x2f4>
    b0c8:	eb00498c 	bl	1d700 <assertion_failed>
    b0cc:	e3a02f8e 	mov	r2, #568	; 0x238
    b0d0:	e59f1088 	ldr	r1, [pc, #136]	; b160 <CUSBStandardHub::HandlePortStatusChange()+0x2e8>
    b0d4:	e59f0094 	ldr	r0, [pc, #148]	; b170 <CUSBStandardHub::HandlePortStatusChange()+0x2f8>
    b0d8:	eb004988 	bl	1d700 <assertion_failed>
    b0dc:	eb005287 	bl	1fb00 <CLogger::Get()>
    b0e0:	e3a02000 	mov	r2, #0
    b0e4:	e59f3088 	ldr	r3, [pc, #136]	; b174 <CUSBStandardHub::HandlePortStatusChange()+0x2fc>
    b0e8:	e59f1060 	ldr	r1, [pc, #96]	; b150 <CUSBStandardHub::HandlePortStatusChange()+0x2d8>
    b0ec:	e58d4000 	str	r4, [sp]
    b0f0:	eb0051c4 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b0f4:	eaffffcc 	b	b02c <CUSBStandardHub::HandlePortStatusChange()+0x1b4>
    b0f8:	e1a00007 	mov	r0, r7
    b0fc:	ebfffeec 	bl	acb4 <CUSBStandardHub::StartStatusChangeRequest()>
    b100:	e3500000 	cmp	r0, #0
    b104:	0a000005 	beq	b120 <CUSBStandardHub::HandlePortStatusChange()+0x2a8>
    b108:	e28dd01c 	add	sp, sp, #28
    b10c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b110:	e59f2060 	ldr	r2, [pc, #96]	; b178 <CUSBStandardHub::HandlePortStatusChange()+0x300>
    b114:	e59f1044 	ldr	r1, [pc, #68]	; b160 <CUSBStandardHub::HandlePortStatusChange()+0x2e8>
    b118:	e59f005c 	ldr	r0, [pc, #92]	; b17c <CUSBStandardHub::HandlePortStatusChange()+0x304>
    b11c:	eb004977 	bl	1d700 <assertion_failed>
    b120:	eb005276 	bl	1fb00 <CLogger::Get()>
    b124:	e3a02001 	mov	r2, #1
    b128:	e59f3050 	ldr	r3, [pc, #80]	; b180 <CUSBStandardHub::HandlePortStatusChange()+0x308>
    b12c:	e59f101c 	ldr	r1, [pc, #28]	; b150 <CUSBStandardHub::HandlePortStatusChange()+0x2d8>
    b130:	e28dd01c 	add	sp, sp, #28
    b134:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b138:	ea0051b2 	b	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b13c:	e59f2040 	ldr	r2, [pc, #64]	; b184 <CUSBStandardHub::HandlePortStatusChange()+0x30c>
    b140:	e59f1018 	ldr	r1, [pc, #24]	; b160 <CUSBStandardHub::HandlePortStatusChange()+0x2e8>
    b144:	e59f003c 	ldr	r0, [pc, #60]	; b188 <CUSBStandardHub::HandlePortStatusChange()+0x310>
    b148:	eb00496c 	bl	1d700 <assertion_failed>
    b14c:	0002cbd8 	.word	0x0002cbd8
    b150:	0002cef4 	.word	0x0002cef4
    b154:	0002cc80 	.word	0x0002cc80
    b158:	0002cbb8 	.word	0x0002cbb8
    b15c:	00000236 	.word	0x00000236
    b160:	0002cafc 	.word	0x0002cafc
    b164:	0002cbfc 	.word	0x0002cbfc
    b168:	00000237 	.word	0x00000237
    b16c:	0002cc24 	.word	0x0002cc24
    b170:	0002cc50 	.word	0x0002cc50
    b174:	0002cca4 	.word	0x0002cca4
    b178:	00000212 	.word	0x00000212
    b17c:	0002cb8c 	.word	0x0002cb8c
    b180:	0002ccd0 	.word	0x0002ccd0
    b184:	00000216 	.word	0x00000216
    b188:	0002cba8 	.word	0x0002cba8

0000b18c <CUSBStandardHub::Initialize()>:
    b18c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b190:	e24dd010 	sub	sp, sp, #16
    b194:	e1a04000 	mov	r4, r0
    b198:	eb001be7 	bl	1213c <CUSBFunction::Initialize()>
    b19c:	e2505000 	subs	r5, r0, #0
    b1a0:	0a00001d 	beq	b21c <CUSBStandardHub::Initialize()+0x90>
    b1a4:	e5946018 	ldr	r6, [r4, #24]
    b1a8:	e3560000 	cmp	r6, #0
    b1ac:	1a00003a 	bne	b29c <CUSBStandardHub::Initialize()+0x110>
    b1b0:	e3a00009 	mov	r0, #9
    b1b4:	eb00719a 	bl	27824 <operator new(unsigned int)>
    b1b8:	e1a03000 	mov	r3, r0
    b1bc:	e1a00004 	mov	r0, r4
    b1c0:	e5843018 	str	r3, [r4, #24]
    b1c4:	eb001ce8 	bl	1256c <CUSBFunction::GetHost() const>
    b1c8:	e1a07000 	mov	r7, r0
    b1cc:	e1a00004 	mov	r0, r4
    b1d0:	eb001cda 	bl	12540 <CUSBFunction::GetEndpoint0() const>
    b1d4:	e3a08009 	mov	r8, #9
    b1d8:	e3a0c0a0 	mov	ip, #160	; 0xa0
    b1dc:	e5942018 	ldr	r2, [r4, #24]
    b1e0:	e1a01000 	mov	r1, r0
    b1e4:	e1a03006 	mov	r3, r6
    b1e8:	e88d1104 	stm	sp, {r2, r8, ip}
    b1ec:	e58d600c 	str	r6, [sp, #12]
    b1f0:	e1a00007 	mov	r0, r7
    b1f4:	e3a02029 	mov	r2, #41	; 0x29
    b1f8:	ebfff7b6 	bl	90d8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    b1fc:	e1500008 	cmp	r0, r8
    b200:	e1a06000 	mov	r6, r0
    b204:	1a000007 	bne	b228 <CUSBStandardHub::Initialize()+0x9c>
    b208:	e5943018 	ldr	r3, [r4, #24]
    b20c:	e5d33002 	ldrb	r3, [r3, #2]
    b210:	e3530008 	cmp	r3, #8
    b214:	e5843024 	str	r3, [r4, #36]	; 0x24
    b218:	8a000012 	bhi	b268 <CUSBStandardHub::Initialize()+0xdc>
    b21c:	e1a00005 	mov	r0, r5
    b220:	e28dd010 	add	sp, sp, #16
    b224:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b228:	eb005234 	bl	1fb00 <CLogger::Get()>
    b22c:	e3a02001 	mov	r2, #1
    b230:	e59f3074 	ldr	r3, [pc, #116]	; b2ac <CUSBStandardHub::Initialize()+0x120>
    b234:	e59f1074 	ldr	r1, [pc, #116]	; b2b0 <CUSBStandardHub::Initialize()+0x124>
    b238:	eb005172 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b23c:	e5940018 	ldr	r0, [r4, #24]
    b240:	e3500000 	cmp	r0, #0
    b244:	0a000001 	beq	b250 <CUSBStandardHub::Initialize()+0xc4>
    b248:	e1a01008 	mov	r1, r8
    b24c:	eb007182 	bl	2785c <operator delete(void*, unsigned int)>
    b250:	e3a00000 	mov	r0, #0
    b254:	e1a05000 	mov	r5, r0
    b258:	e5840018 	str	r0, [r4, #24]
    b25c:	e1a00005 	mov	r0, r5
    b260:	e28dd010 	add	sp, sp, #16
    b264:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b268:	eb005224 	bl	1fb00 <CLogger::Get()>
    b26c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    b270:	e59f303c 	ldr	r3, [pc, #60]	; b2b4 <CUSBStandardHub::Initialize()+0x128>
    b274:	e58d2000 	str	r2, [sp]
    b278:	e59f1030 	ldr	r1, [pc, #48]	; b2b0 <CUSBStandardHub::Initialize()+0x124>
    b27c:	e3a02001 	mov	r2, #1
    b280:	eb005160 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b284:	e5940018 	ldr	r0, [r4, #24]
    b288:	e3500000 	cmp	r0, #0
    b28c:	0affffef 	beq	b250 <CUSBStandardHub::Initialize()+0xc4>
    b290:	e1a01006 	mov	r1, r6
    b294:	eb007170 	bl	2785c <operator delete(void*, unsigned int)>
    b298:	eaffffec 	b	b250 <CUSBStandardHub::Initialize()+0xc4>
    b29c:	e3a02062 	mov	r2, #98	; 0x62
    b2a0:	e59f1010 	ldr	r1, [pc, #16]	; b2b8 <CUSBStandardHub::Initialize()+0x12c>
    b2a4:	e59f0010 	ldr	r0, [pc, #16]	; b2bc <CUSBStandardHub::Initialize()+0x130>
    b2a8:	eb004914 	bl	1d700 <assertion_failed>
    b2ac:	0002ccf8 	.word	0x0002ccf8
    b2b0:	0002cef4 	.word	0x0002cef4
    b2b4:	0002cd14 	.word	0x0002cd14
    b2b8:	0002cafc 	.word	0x0002cafc
    b2bc:	0002cce8 	.word	0x0002cce8

0000b2c0 <CUSBStandardHub::EnumeratePorts()>:
    b2c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2c4:	ed2d8b02 	vpush	{d8}
    b2c8:	e24dd01c 	sub	sp, sp, #28
    b2cc:	e1a0b000 	mov	fp, r0
    b2d0:	eb001ca5 	bl	1256c <CUSBFunction::GetHost() const>
    b2d4:	e2504000 	subs	r4, r0, #0
    b2d8:	0a00013c 	beq	b7d0 <CUSBStandardHub::EnumeratePorts()+0x510>
    b2dc:	e1a0000b 	mov	r0, fp
    b2e0:	eb001c96 	bl	12540 <CUSBFunction::GetEndpoint0() const>
    b2e4:	e2505000 	subs	r5, r0, #0
    b2e8:	0a00013c 	beq	b7e0 <CUSBStandardHub::EnumeratePorts()+0x520>
    b2ec:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    b2f0:	e3530000 	cmp	r3, #0
    b2f4:	0a00013d 	beq	b7f0 <CUSBStandardHub::EnumeratePorts()+0x530>
    b2f8:	e5db6028 	ldrb	r6, [fp, #40]	; 0x28
    b2fc:	e3560000 	cmp	r6, #0
    b300:	0a0000cd 	beq	b63c <CUSBStandardHub::EnumeratePorts()+0x37c>
    b304:	e28b302c 	add	r3, fp, #44	; 0x2c
    b308:	e3a07000 	mov	r7, #0
    b30c:	e1a06003 	mov	r6, r3
    b310:	e58d3014 	str	r3, [sp, #20]
    b314:	e4960004 	ldr	r0, [r6], #4
    b318:	e3500000 	cmp	r0, #0
    b31c:	1a0000ac 	bne	b5d4 <CUSBStandardHub::EnumeratePorts()+0x314>
    b320:	e596001c 	ldr	r0, [r6, #28]
    b324:	e3500000 	cmp	r0, #0
    b328:	0a0000bb 	beq	b61c <CUSBStandardHub::EnumeratePorts()+0x35c>
    b32c:	e3a03004 	mov	r3, #4
    b330:	e58d300c 	str	r3, [sp, #12]
    b334:	e3a03000 	mov	r3, #0
    b338:	e2879001 	add	r9, r7, #1
    b33c:	e6ffa079 	uxth	sl, r9
    b340:	e58d0008 	str	r0, [sp, #8]
    b344:	e3a020a3 	mov	r2, #163	; 0xa3
    b348:	e1a01005 	mov	r1, r5
    b34c:	e1a00004 	mov	r0, r4
    b350:	e88d0408 	stm	sp, {r3, sl}
    b354:	ebfff72d 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    b358:	e3500004 	cmp	r0, #4
    b35c:	e1a08000 	mov	r8, r0
    b360:	1a0000a2 	bne	b5f0 <CUSBStandardHub::EnumeratePorts()+0x330>
    b364:	e596301c 	ldr	r3, [r6, #28]
    b368:	e5d32001 	ldrb	r2, [r3, #1]
    b36c:	e5d33000 	ldrb	r3, [r3]
    b370:	e3120001 	tst	r2, #1
    b374:	e1833402 	orr	r3, r3, r2, lsl #8
    b378:	0a0000e5 	beq	b714 <CUSBStandardHub::EnumeratePorts()+0x454>
    b37c:	e3130001 	tst	r3, #1
    b380:	0a000034 	beq	b458 <CUSBStandardHub::EnumeratePorts()+0x198>
    b384:	e3a03000 	mov	r3, #0
    b388:	e3a02023 	mov	r2, #35	; 0x23
    b38c:	e58d300c 	str	r3, [sp, #12]
    b390:	e58d3008 	str	r3, [sp, #8]
    b394:	e1a01005 	mov	r1, r5
    b398:	e3a03003 	mov	r3, #3
    b39c:	e1a00004 	mov	r0, r4
    b3a0:	e88d0500 	stm	sp, {r8, sl}
    b3a4:	ebfff719 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    b3a8:	e3500000 	cmp	r0, #0
    b3ac:	ba0000cd 	blt	b6e8 <CUSBStandardHub::EnumeratePorts()+0x428>
    b3b0:	eb006ce0 	bl	26738 <CTimer::Get()>
    b3b4:	e3a00064 	mov	r0, #100	; 0x64
    b3b8:	eb006ca9 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
    b3bc:	e3a03000 	mov	r3, #0
    b3c0:	e58d800c 	str	r8, [sp, #12]
    b3c4:	e596201c 	ldr	r2, [r6, #28]
    b3c8:	e1a01005 	mov	r1, r5
    b3cc:	e58d2008 	str	r2, [sp, #8]
    b3d0:	e1a00004 	mov	r0, r4
    b3d4:	e3a020a3 	mov	r2, #163	; 0xa3
    b3d8:	e58da004 	str	sl, [sp, #4]
    b3dc:	e58d3000 	str	r3, [sp]
    b3e0:	ebfff70a 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    b3e4:	e3500004 	cmp	r0, #4
    b3e8:	1a000145 	bne	b904 <CUSBStandardHub::EnumeratePorts()+0x644>
    b3ec:	e596201c 	ldr	r2, [r6, #28]
    b3f0:	e5d23000 	ldrb	r3, [r2]
    b3f4:	e5d22001 	ldrb	r2, [r2, #1]
    b3f8:	e3130002 	tst	r3, #2
    b3fc:	e1833402 	orr	r3, r3, r2, lsl #8
    b400:	0a0000e7 	beq	b7a4 <CUSBStandardHub::EnumeratePorts()+0x4e4>
    b404:	e2132008 	ands	r2, r3, #8
    b408:	1a00013f 	bne	b90c <CUSBStandardHub::EnumeratePorts()+0x64c>
    b40c:	e3130c02 	tst	r3, #512	; 0x200
    b410:	11a0a002 	movne	sl, r2
    b414:	0a000084 	beq	b62c <CUSBStandardHub::EnumeratePorts()+0x36c>
    b418:	e5163004 	ldr	r3, [r6, #-4]
    b41c:	e3530000 	cmp	r3, #0
    b420:	1a0000f6 	bne	b800 <CUSBStandardHub::EnumeratePorts()+0x540>
    b424:	e3a00058 	mov	r0, #88	; 0x58
    b428:	eb0070fd 	bl	27824 <operator new(unsigned int)>
    b42c:	e1a08000 	mov	r8, r0
    b430:	e1a0200a 	mov	r2, sl
    b434:	e1a0300b 	mov	r3, fp
    b438:	e1a01004 	mov	r1, r4
    b43c:	e58d7000 	str	r7, [sp]
    b440:	eb0014ec 	bl	107f8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
    b444:	e1a00008 	mov	r0, r8
    b448:	e5068004 	str	r8, [r6, #-4]
    b44c:	eb0016d6 	bl	10fac <CUSBDevice::Initialize()>
    b450:	e3500000 	cmp	r0, #0
    b454:	0a000096 	beq	b6b4 <CUSBStandardHub::EnumeratePorts()+0x3f4>
    b458:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    b45c:	e1a07009 	mov	r7, r9
    b460:	e1530009 	cmp	r3, r9
    b464:	8affffaa 	bhi	b314 <CUSBStandardHub::EnumeratePorts()+0x54>
    b468:	e3530000 	cmp	r3, #0
    b46c:	0a000027 	beq	b510 <CUSBStandardHub::EnumeratePorts()+0x250>
    b470:	e3e0806a 	mvn	r8, #106	; 0x6a
    b474:	e048800b 	sub	r8, r8, fp
    b478:	ee084a10 	vmov	s16, r4
    b47c:	e28b606c 	add	r6, fp, #108	; 0x6c
    b480:	e1a0400b 	mov	r4, fp
    b484:	e59fa4d4 	ldr	sl, [pc, #1236]	; b960 <CUSBStandardHub::EnumeratePorts()+0x6a0>
    b488:	e1a0b008 	mov	fp, r8
    b48c:	e59f94d0 	ldr	r9, [pc, #1232]	; b964 <CUSBStandardHub::EnumeratePorts()+0x6a4>
    b490:	e59d8014 	ldr	r8, [sp, #20]
    b494:	ea000011 	b	b4e0 <CUSBStandardHub::EnumeratePorts()+0x220>
    b498:	e3a02001 	mov	r2, #1
    b49c:	e5903000 	ldr	r3, [r0]
    b4a0:	e5c62000 	strb	r2, [r6]
    b4a4:	e593300c 	ldr	r3, [r3, #12]
    b4a8:	e12fff33 	blx	r3
    b4ac:	e3500000 	cmp	r0, #0
    b4b0:	e08b7006 	add	r7, fp, r6
    b4b4:	0a00009a 	beq	b724 <CUSBStandardHub::EnumeratePorts()+0x464>
    b4b8:	eb005190 	bl	1fb00 <CLogger::Get()>
    b4bc:	e1a0300a 	mov	r3, sl
    b4c0:	e3a02004 	mov	r2, #4
    b4c4:	e1a01009 	mov	r1, r9
    b4c8:	e58d7000 	str	r7, [sp]
    b4cc:	eb0050cd 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b4d0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b4d4:	e1570003 	cmp	r7, r3
    b4d8:	e2866001 	add	r6, r6, #1
    b4dc:	2a000009 	bcs	b508 <CUSBStandardHub::EnumeratePorts()+0x248>
    b4e0:	e4980004 	ldr	r0, [r8], #4
    b4e4:	e3500000 	cmp	r0, #0
    b4e8:	0a000002 	beq	b4f8 <CUSBStandardHub::EnumeratePorts()+0x238>
    b4ec:	e5d62000 	ldrb	r2, [r6]
    b4f0:	e3520000 	cmp	r2, #0
    b4f4:	0affffe7 	beq	b498 <CUSBStandardHub::EnumeratePorts()+0x1d8>
    b4f8:	e08b7006 	add	r7, fp, r6
    b4fc:	e1570003 	cmp	r7, r3
    b500:	e2866001 	add	r6, r6, #1
    b504:	3afffff5 	bcc	b4e0 <CUSBStandardHub::EnumeratePorts()+0x220>
    b508:	e1a0b004 	mov	fp, r4
    b50c:	ee184a10 	vmov	r4, s16
    b510:	e3a00004 	mov	r0, #4
    b514:	eb0070c2 	bl	27824 <operator new(unsigned int)>
    b518:	e3a06000 	mov	r6, #0
    b51c:	e3a07004 	mov	r7, #4
    b520:	e58d0008 	str	r0, [sp, #8]
    b524:	e1a08000 	mov	r8, r0
    b528:	e1a03006 	mov	r3, r6
    b52c:	e3a020a0 	mov	r2, #160	; 0xa0
    b530:	e1a01005 	mov	r1, r5
    b534:	e1a00004 	mov	r0, r4
    b538:	e58d700c 	str	r7, [sp, #12]
    b53c:	e58d6004 	str	r6, [sp, #4]
    b540:	e58d6000 	str	r6, [sp]
    b544:	ebfff6b1 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    b548:	e1500007 	cmp	r0, r7
    b54c:	e1a09000 	mov	r9, r0
    b550:	1a0000ae 	bne	b810 <CUSBStandardHub::EnumeratePorts()+0x550>
    b554:	e5d83000 	ldrb	r3, [r8]
    b558:	e3130002 	tst	r3, #2
    b55c:	0a0000b4 	beq	b834 <CUSBStandardHub::EnumeratePorts()+0x574>
    b560:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    b564:	e3530000 	cmp	r3, #0
    b568:	13a07001 	movne	r7, #1
    b56c:	13a09008 	movne	r9, #8
    b570:	0a00000d 	beq	b5ac <CUSBStandardHub::EnumeratePorts()+0x2ec>
    b574:	e6ff3077 	uxth	r3, r7
    b578:	e3a02023 	mov	r2, #35	; 0x23
    b57c:	e58d3004 	str	r3, [sp, #4]
    b580:	e1a01005 	mov	r1, r5
    b584:	e3a03001 	mov	r3, #1
    b588:	e1a00004 	mov	r0, r4
    b58c:	e58d600c 	str	r6, [sp, #12]
    b590:	e58d6008 	str	r6, [sp, #8]
    b594:	e58d9000 	str	r9, [sp]
    b598:	ebfff69c 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    b59c:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
    b5a0:	e1570002 	cmp	r7, r2
    b5a4:	e2877001 	add	r7, r7, #1
    b5a8:	3afffff1 	bcc	b574 <CUSBStandardHub::EnumeratePorts()+0x2b4>
    b5ac:	eb005153 	bl	1fb00 <CLogger::Get()>
    b5b0:	e3a02001 	mov	r2, #1
    b5b4:	e59f33ac 	ldr	r3, [pc, #940]	; b968 <CUSBStandardHub::EnumeratePorts()+0x6a8>
    b5b8:	e59f13a4 	ldr	r1, [pc, #932]	; b964 <CUSBStandardHub::EnumeratePorts()+0x6a4>
    b5bc:	eb005091 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b5c0:	e1a00008 	mov	r0, r8
    b5c4:	e3a01004 	mov	r1, #4
    b5c8:	eb0070a3 	bl	2785c <operator delete(void*, unsigned int)>
    b5cc:	e3a06000 	mov	r6, #0
    b5d0:	ea000033 	b	b6a4 <CUSBStandardHub::EnumeratePorts()+0x3e4>
    b5d4:	eb0014df 	bl	10958 <CUSBDevice::ReScanDevices()>
    b5d8:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    b5dc:	e2879001 	add	r9, r7, #1
    b5e0:	e1530009 	cmp	r3, r9
    b5e4:	e1a07009 	mov	r7, r9
    b5e8:	8affff49 	bhi	b314 <CUSBStandardHub::EnumeratePorts()+0x54>
    b5ec:	eaffff9d 	b	b468 <CUSBStandardHub::EnumeratePorts()+0x1a8>
    b5f0:	eb005142 	bl	1fb00 <CLogger::Get()>
    b5f4:	e59f3370 	ldr	r3, [pc, #880]	; b96c <CUSBStandardHub::EnumeratePorts()+0x6ac>
    b5f8:	e3a02001 	mov	r2, #1
    b5fc:	e59f1360 	ldr	r1, [pc, #864]	; b964 <CUSBStandardHub::EnumeratePorts()+0x6a4>
    b600:	e58d9000 	str	r9, [sp]
    b604:	eb00507f 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b608:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    b60c:	e1a07009 	mov	r7, r9
    b610:	e1530009 	cmp	r3, r9
    b614:	8affff3e 	bhi	b314 <CUSBStandardHub::EnumeratePorts()+0x54>
    b618:	eaffff92 	b	b468 <CUSBStandardHub::EnumeratePorts()+0x1a8>
    b61c:	e3a00004 	mov	r0, #4
    b620:	eb00707f 	bl	27824 <operator new(unsigned int)>
    b624:	e586001c 	str	r0, [r6, #28]
    b628:	eaffff3f 	b	b32c <CUSBStandardHub::EnumeratePorts()+0x6c>
    b62c:	e3130b01 	tst	r3, #1024	; 0x400
    b630:	13a0a002 	movne	sl, #2
    b634:	03a0a001 	moveq	sl, #1
    b638:	eaffff76 	b	b418 <CUSBStandardHub::EnumeratePorts()+0x158>
    b63c:	e1a08006 	mov	r8, r6
    b640:	e3a09008 	mov	r9, #8
    b644:	e1a07006 	mov	r7, r6
    b648:	ea000002 	b	b658 <CUSBStandardHub::EnumeratePorts()+0x398>
    b64c:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    b650:	e1530007 	cmp	r3, r7
    b654:	9a000042 	bls	b764 <CUSBStandardHub::EnumeratePorts()+0x4a4>
    b658:	e2877001 	add	r7, r7, #1
    b65c:	e6ff3077 	uxth	r3, r7
    b660:	e58d3004 	str	r3, [sp, #4]
    b664:	e3a02023 	mov	r2, #35	; 0x23
    b668:	e3a03003 	mov	r3, #3
    b66c:	e1a01005 	mov	r1, r5
    b670:	e1a00004 	mov	r0, r4
    b674:	e58d800c 	str	r8, [sp, #12]
    b678:	e58d8008 	str	r8, [sp, #8]
    b67c:	e58d9000 	str	r9, [sp]
    b680:	ebfff662 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    b684:	e3500000 	cmp	r0, #0
    b688:	aaffffef 	bge	b64c <CUSBStandardHub::EnumeratePorts()+0x38c>
    b68c:	eb00511b 	bl	1fb00 <CLogger::Get()>
    b690:	e3a02001 	mov	r2, #1
    b694:	e59f32d4 	ldr	r3, [pc, #724]	; b970 <CUSBStandardHub::EnumeratePorts()+0x6b0>
    b698:	e59f12c4 	ldr	r1, [pc, #708]	; b964 <CUSBStandardHub::EnumeratePorts()+0x6a4>
    b69c:	e58d7000 	str	r7, [sp]
    b6a0:	eb005058 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b6a4:	e1a00006 	mov	r0, r6
    b6a8:	e28dd01c 	add	sp, sp, #28
    b6ac:	ecbd8b02 	vpop	{d8}
    b6b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6b4:	e5160004 	ldr	r0, [r6, #-4]
    b6b8:	e3500000 	cmp	r0, #0
    b6bc:	0a000002 	beq	b6cc <CUSBStandardHub::EnumeratePorts()+0x40c>
    b6c0:	e5903000 	ldr	r3, [r0]
    b6c4:	e5933004 	ldr	r3, [r3, #4]
    b6c8:	e12fff33 	blx	r3
    b6cc:	e3a03000 	mov	r3, #0
    b6d0:	e5063004 	str	r3, [r6, #-4]
    b6d4:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    b6d8:	e1a07009 	mov	r7, r9
    b6dc:	e1530009 	cmp	r3, r9
    b6e0:	8affff0b 	bhi	b314 <CUSBStandardHub::EnumeratePorts()+0x54>
    b6e4:	eaffff5f 	b	b468 <CUSBStandardHub::EnumeratePorts()+0x1a8>
    b6e8:	eb005104 	bl	1fb00 <CLogger::Get()>
    b6ec:	e59f3280 	ldr	r3, [pc, #640]	; b974 <CUSBStandardHub::EnumeratePorts()+0x6b4>
    b6f0:	e3a02001 	mov	r2, #1
    b6f4:	e59f1268 	ldr	r1, [pc, #616]	; b964 <CUSBStandardHub::EnumeratePorts()+0x6a4>
    b6f8:	e58d9000 	str	r9, [sp]
    b6fc:	eb005041 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b700:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    b704:	e1a07009 	mov	r7, r9
    b708:	e1530009 	cmp	r3, r9
    b70c:	8affff00 	bhi	b314 <CUSBStandardHub::EnumeratePorts()+0x54>
    b710:	eaffff54 	b	b468 <CUSBStandardHub::EnumeratePorts()+0x1a8>
    b714:	e59f225c 	ldr	r2, [pc, #604]	; b978 <CUSBStandardHub::EnumeratePorts()+0x6b8>
    b718:	e59f125c 	ldr	r1, [pc, #604]	; b97c <CUSBStandardHub::EnumeratePorts()+0x6bc>
    b71c:	e59f025c 	ldr	r0, [pc, #604]	; b980 <CUSBStandardHub::EnumeratePorts()+0x6c0>
    b720:	eb0047f6 	bl	1d700 <assertion_failed>
    b724:	eb0050f5 	bl	1fb00 <CLogger::Get()>
    b728:	e3a02002 	mov	r2, #2
    b72c:	e1a01009 	mov	r1, r9
    b730:	e59f324c 	ldr	r3, [pc, #588]	; b984 <CUSBStandardHub::EnumeratePorts()+0x6c4>
    b734:	e58d7000 	str	r7, [sp]
    b738:	eb005032 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b73c:	e5180004 	ldr	r0, [r8, #-4]
    b740:	e3500000 	cmp	r0, #0
    b744:	0a000002 	beq	b754 <CUSBStandardHub::EnumeratePorts()+0x494>
    b748:	e5903000 	ldr	r3, [r0]
    b74c:	e5933004 	ldr	r3, [r3, #4]
    b750:	e12fff33 	blx	r3
    b754:	e3a03000 	mov	r3, #0
    b758:	e5083004 	str	r3, [r8, #-4]
    b75c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b760:	eaffff5b 	b	b4d4 <CUSBStandardHub::EnumeratePorts()+0x214>
    b764:	e3a03001 	mov	r3, #1
    b768:	e5cb3028 	strb	r3, [fp, #40]	; 0x28
    b76c:	eb004ea5 	bl	1f208 <CKernelOptions::Get()>
    b770:	e3500000 	cmp	r0, #0
    b774:	0a000002 	beq	b784 <CUSBStandardHub::EnumeratePorts()+0x4c4>
    b778:	eb004e95 	bl	1f1d4 <CKernelOptions::GetUSBPowerDelay() const>
    b77c:	e2506000 	subs	r6, r0, #0
    b780:	1a000000 	bne	b788 <CUSBStandardHub::EnumeratePorts()+0x4c8>
    b784:	e59f61fc 	ldr	r6, [pc, #508]	; b988 <CUSBStandardHub::EnumeratePorts()+0x6c8>
    b788:	eb006bea 	bl	26738 <CTimer::Get()>
    b78c:	e1a00006 	mov	r0, r6
    b790:	eb006bb3 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
    b794:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    b798:	e3530000 	cmp	r3, #0
    b79c:	1afffed8 	bne	b304 <CUSBStandardHub::EnumeratePorts()+0x44>
    b7a0:	eaffff5a 	b	b510 <CUSBStandardHub::EnumeratePorts()+0x250>
    b7a4:	eb0050d5 	bl	1fb00 <CLogger::Get()>
    b7a8:	e59f31dc 	ldr	r3, [pc, #476]	; b98c <CUSBStandardHub::EnumeratePorts()+0x6cc>
    b7ac:	e3a02001 	mov	r2, #1
    b7b0:	e59f11ac 	ldr	r1, [pc, #428]	; b964 <CUSBStandardHub::EnumeratePorts()+0x6a4>
    b7b4:	e58d9000 	str	r9, [sp]
    b7b8:	eb005012 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b7bc:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    b7c0:	e1a07009 	mov	r7, r9
    b7c4:	e1530009 	cmp	r3, r9
    b7c8:	8afffed1 	bhi	b314 <CUSBStandardHub::EnumeratePorts()+0x54>
    b7cc:	eaffff25 	b	b468 <CUSBStandardHub::EnumeratePorts()+0x1a8>
    b7d0:	e3a020f7 	mov	r2, #247	; 0xf7
    b7d4:	e59f11a0 	ldr	r1, [pc, #416]	; b97c <CUSBStandardHub::EnumeratePorts()+0x6bc>
    b7d8:	e59f01b0 	ldr	r0, [pc, #432]	; b990 <CUSBStandardHub::EnumeratePorts()+0x6d0>
    b7dc:	eb0047c7 	bl	1d700 <assertion_failed>
    b7e0:	e3a020fa 	mov	r2, #250	; 0xfa
    b7e4:	e59f1190 	ldr	r1, [pc, #400]	; b97c <CUSBStandardHub::EnumeratePorts()+0x6bc>
    b7e8:	e59f01a4 	ldr	r0, [pc, #420]	; b994 <CUSBStandardHub::EnumeratePorts()+0x6d4>
    b7ec:	eb0047c3 	bl	1d700 <assertion_failed>
    b7f0:	e3a020fc 	mov	r2, #252	; 0xfc
    b7f4:	e59f1180 	ldr	r1, [pc, #384]	; b97c <CUSBStandardHub::EnumeratePorts()+0x6bc>
    b7f8:	e59f0198 	ldr	r0, [pc, #408]	; b998 <CUSBStandardHub::EnumeratePorts()+0x6d8>
    b7fc:	eb0047bf 	bl	1d700 <assertion_failed>
    b800:	e59f2194 	ldr	r2, [pc, #404]	; b99c <CUSBStandardHub::EnumeratePorts()+0x6dc>
    b804:	e59f1170 	ldr	r1, [pc, #368]	; b97c <CUSBStandardHub::EnumeratePorts()+0x6bc>
    b808:	e59f0190 	ldr	r0, [pc, #400]	; b9a0 <CUSBStandardHub::EnumeratePorts()+0x6e0>
    b80c:	eb0047bb 	bl	1d700 <assertion_failed>
    b810:	eb0050ba 	bl	1fb00 <CLogger::Get()>
    b814:	e3a02001 	mov	r2, #1
    b818:	e59f3184 	ldr	r3, [pc, #388]	; b9a4 <CUSBStandardHub::EnumeratePorts()+0x6e4>
    b81c:	e59f1140 	ldr	r1, [pc, #320]	; b964 <CUSBStandardHub::EnumeratePorts()+0x6a4>
    b820:	eb004ff8 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b824:	e1a01007 	mov	r1, r7
    b828:	e1a00008 	mov	r0, r8
    b82c:	eb00700a 	bl	2785c <operator delete(void*, unsigned int)>
    b830:	eaffff9b 	b	b6a4 <CUSBStandardHub::EnumeratePorts()+0x3e4>
    b834:	e1a00008 	mov	r0, r8
    b838:	e1a01009 	mov	r1, r9
    b83c:	eb007006 	bl	2785c <operator delete(void*, unsigned int)>
    b840:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    b844:	e3530000 	cmp	r3, #0
    b848:	0a000042 	beq	b958 <CUSBStandardHub::EnumeratePorts()+0x698>
    b84c:	e3a07001 	mov	r7, #1
    b850:	e58d9014 	str	r9, [sp, #20]
    b854:	e1a06007 	mov	r6, r7
    b858:	e28b904c 	add	r9, fp, #76	; 0x4c
    b85c:	ea000004 	b	b874 <CUSBStandardHub::EnumeratePorts()+0x5b4>
    b860:	e59b3024 	ldr	r3, [fp, #36]	; 0x24
    b864:	e2872001 	add	r2, r7, #1
    b868:	e1530007 	cmp	r3, r7
    b86c:	9affff8c 	bls	b6a4 <CUSBStandardHub::EnumeratePorts()+0x3e4>
    b870:	e1a07002 	mov	r7, r2
    b874:	e3a08000 	mov	r8, #0
    b878:	e4992004 	ldr	r2, [r9], #4
    b87c:	e59d3014 	ldr	r3, [sp, #20]
    b880:	e6ffa077 	uxth	sl, r7
    b884:	e58d300c 	str	r3, [sp, #12]
    b888:	e58d2008 	str	r2, [sp, #8]
    b88c:	e1a03008 	mov	r3, r8
    b890:	e3a020a3 	mov	r2, #163	; 0xa3
    b894:	e1a01005 	mov	r1, r5
    b898:	e1a00004 	mov	r0, r4
    b89c:	e58d8000 	str	r8, [sp]
    b8a0:	e58da004 	str	sl, [sp, #4]
    b8a4:	ebfff5d9 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    b8a8:	e3500004 	cmp	r0, #4
    b8ac:	1affffeb 	bne	b860 <CUSBStandardHub::EnumeratePorts()+0x5a0>
    b8b0:	e5193004 	ldr	r3, [r9, #-4]
    b8b4:	e5d33000 	ldrb	r3, [r3]
    b8b8:	e3130008 	tst	r3, #8
    b8bc:	0affffe7 	beq	b860 <CUSBStandardHub::EnumeratePorts()+0x5a0>
    b8c0:	e3a03008 	mov	r3, #8
    b8c4:	e1a01005 	mov	r1, r5
    b8c8:	e3a02023 	mov	r2, #35	; 0x23
    b8cc:	e88d0408 	stm	sp, {r3, sl}
    b8d0:	e1a00004 	mov	r0, r4
    b8d4:	e3a03001 	mov	r3, #1
    b8d8:	e58d800c 	str	r8, [sp, #12]
    b8dc:	e58d8008 	str	r8, [sp, #8]
    b8e0:	ebfff5ca 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    b8e4:	eb005085 	bl	1fb00 <CLogger::Get()>
    b8e8:	e3a02001 	mov	r2, #1
    b8ec:	e59f30b4 	ldr	r3, [pc, #180]	; b9a8 <CUSBStandardHub::EnumeratePorts()+0x6e8>
    b8f0:	e59f106c 	ldr	r1, [pc, #108]	; b964 <CUSBStandardHub::EnumeratePorts()+0x6a4>
    b8f4:	e58d7000 	str	r7, [sp]
    b8f8:	e1a06008 	mov	r6, r8
    b8fc:	eb004fc1 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b900:	eaffffd6 	b	b860 <CUSBStandardHub::EnumeratePorts()+0x5a0>
    b904:	e3a06000 	mov	r6, #0
    b908:	eaffff65 	b	b6a4 <CUSBStandardHub::EnumeratePorts()+0x3e4>
    b90c:	e3a02000 	mov	r2, #0
    b910:	e3a03008 	mov	r3, #8
    b914:	e1a01005 	mov	r1, r5
    b918:	e58d200c 	str	r2, [sp, #12]
    b91c:	e58d2008 	str	r2, [sp, #8]
    b920:	e58d3000 	str	r3, [sp]
    b924:	e3a02023 	mov	r2, #35	; 0x23
    b928:	e3a03001 	mov	r3, #1
    b92c:	e1a00004 	mov	r0, r4
    b930:	e58da004 	str	sl, [sp, #4]
    b934:	ebfff5b5 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    b938:	eb005070 	bl	1fb00 <CLogger::Get()>
    b93c:	e3a02001 	mov	r2, #1
    b940:	e59f3060 	ldr	r3, [pc, #96]	; b9a8 <CUSBStandardHub::EnumeratePorts()+0x6e8>
    b944:	e59f1018 	ldr	r1, [pc, #24]	; b964 <CUSBStandardHub::EnumeratePorts()+0x6a4>
    b948:	e58d9000 	str	r9, [sp]
    b94c:	eb004fad 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b950:	e3a06000 	mov	r6, #0
    b954:	eaffff52 	b	b6a4 <CUSBStandardHub::EnumeratePorts()+0x3e4>
    b958:	e3a06001 	mov	r6, #1
    b95c:	eaffff50 	b	b6a4 <CUSBStandardHub::EnumeratePorts()+0x3e4>
    b960:	0002ce40 	.word	0x0002ce40
    b964:	0002cef4 	.word	0x0002cef4
    b968:	0002ce74 	.word	0x0002ce74
    b96c:	0002cd5c 	.word	0x0002cd5c
    b970:	0002cd44 	.word	0x0002cd44
    b974:	0002cdb0 	.word	0x0002cdb0
    b978:	00000139 	.word	0x00000139
    b97c:	0002cafc 	.word	0x0002cafc
    b980:	0002cd7c 	.word	0x0002cd7c
    b984:	0002ce1c 	.word	0x0002ce1c
    b988:	000001fe 	.word	0x000001fe
    b98c:	0002cdc8 	.word	0x0002cdc8
    b990:	0002cd28 	.word	0x0002cd28
    b994:	0002cd34 	.word	0x0002cd34
    b998:	0002cb40 	.word	0x0002cb40
    b99c:	00000176 	.word	0x00000176
    b9a0:	0002ce04 	.word	0x0002ce04
    b9a4:	0002ce5c 	.word	0x0002ce5c
    b9a8:	0002cde0 	.word	0x0002cde0

0000b9ac <CUSBStandardHub::ReScanDevices()>:
    b9ac:	eafffe43 	b	b2c0 <CUSBStandardHub::EnumeratePorts()>

0000b9b0 <CUSBStandardHub::Configure()>:
    b9b0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b9b4:	e24dd014 	sub	sp, sp, #20
    b9b8:	e1a04000 	mov	r4, r0
    b9bc:	eb001ac9 	bl	124e8 <CUSBFunction::GetNumEndpoints() const>
    b9c0:	e3500001 	cmp	r0, #1
    b9c4:	1a00000c 	bne	b9fc <CUSBStandardHub::Configure()+0x4c>
    b9c8:	e1a05000 	mov	r5, r0
    b9cc:	e3a01005 	mov	r1, #5
    b9d0:	e1a00004 	mov	r0, r4
    b9d4:	eb001aef 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
    b9d8:	e2506000 	subs	r6, r0, #0
    b9dc:	0a000006 	beq	b9fc <CUSBStandardHub::Configure()+0x4c>
    b9e0:	e1d630d2 	ldrsb	r3, [r6, #2]
    b9e4:	e3530000 	cmp	r3, #0
    b9e8:	aa000003 	bge	b9fc <CUSBStandardHub::Configure()+0x4c>
    b9ec:	e5d63003 	ldrb	r3, [r6, #3]
    b9f0:	e203303f 	and	r3, r3, #63	; 0x3f
    b9f4:	e3530003 	cmp	r3, #3
    b9f8:	0a000006 	beq	ba18 <CUSBStandardHub::Configure()+0x68>
    b9fc:	e1a00004 	mov	r0, r4
    ba00:	e59f10fc 	ldr	r1, [pc, #252]	; bb04 <CUSBStandardHub::Configure()+0x154>
    ba04:	eb001aee 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
    ba08:	e3a06000 	mov	r6, #0
    ba0c:	e1a00006 	mov	r0, r6
    ba10:	e28dd014 	add	sp, sp, #20
    ba14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ba18:	e1a00004 	mov	r0, r4
    ba1c:	eb001abd 	bl	12518 <CUSBFunction::GetDevice() const>
    ba20:	e1a01000 	mov	r1, r0
    ba24:	e3a00014 	mov	r0, #20
    ba28:	e58d100c 	str	r1, [sp, #12]
    ba2c:	eb006f7c 	bl	27824 <operator new(unsigned int)>
    ba30:	e1a07000 	mov	r7, r0
    ba34:	e1a02006 	mov	r2, r6
    ba38:	e59d100c 	ldr	r1, [sp, #12]
    ba3c:	eb0018f7 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
    ba40:	e1a00004 	mov	r0, r4
    ba44:	e584701c 	str	r7, [r4, #28]
    ba48:	eb0019e8 	bl	121f0 <CUSBFunction::Configure()>
    ba4c:	e2506000 	subs	r6, r0, #0
    ba50:	0a000025 	beq	baec <CUSBStandardHub::Configure()+0x13c>
    ba54:	e1a01005 	mov	r1, r5
    ba58:	e59f20a4 	ldr	r2, [pc, #164]	; bb04 <CUSBStandardHub::Configure()+0x154>
    ba5c:	e59f00a4 	ldr	r0, [pc, #164]	; bb08 <CUSBStandardHub::Configure()+0x158>
    ba60:	eb0070ba 	bl	27d50 <CNumberPool::AllocateNumber(bool, char const*)>
    ba64:	e5840074 	str	r0, [r4, #116]	; 0x74
    ba68:	eb0049fe 	bl	1e268 <CDeviceNameService::Get()>
    ba6c:	e3a02000 	mov	r2, #0
    ba70:	e58d2000 	str	r2, [sp]
    ba74:	e1a03004 	mov	r3, r4
    ba78:	e5942074 	ldr	r2, [r4, #116]	; 0x74
    ba7c:	e59f1088 	ldr	r1, [pc, #136]	; bb0c <CUSBStandardHub::Configure()+0x15c>
    ba80:	eb004a04 	bl	1e298 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    ba84:	e1a00004 	mov	r0, r4
    ba88:	ebfffe0c 	bl	b2c0 <CUSBStandardHub::EnumeratePorts()>
    ba8c:	e2506000 	subs	r6, r0, #0
    ba90:	0a00000f 	beq	bad4 <CUSBStandardHub::Configure()+0x124>
    ba94:	e1a00004 	mov	r0, r4
    ba98:	eb001ab3 	bl	1256c <CUSBFunction::GetHost() const>
    ba9c:	ebfff5da 	bl	920c <CUSBHostController::IsPlugAndPlay()>
    baa0:	e3500000 	cmp	r0, #0
    baa4:	0affffd8 	beq	ba0c <CUSBStandardHub::Configure()+0x5c>
    baa8:	e1a00004 	mov	r0, r4
    baac:	ebfffc80 	bl	acb4 <CUSBStandardHub::StartStatusChangeRequest()>
    bab0:	e2504000 	subs	r4, r0, #0
    bab4:	1affffd4 	bne	ba0c <CUSBStandardHub::Configure()+0x5c>
    bab8:	eb005010 	bl	1fb00 <CLogger::Get()>
    babc:	e1a02005 	mov	r2, r5
    bac0:	e59f3048 	ldr	r3, [pc, #72]	; bb10 <CUSBStandardHub::Configure()+0x160>
    bac4:	e59f1038 	ldr	r1, [pc, #56]	; bb04 <CUSBStandardHub::Configure()+0x154>
    bac8:	e1a06004 	mov	r6, r4
    bacc:	eb004f4d 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bad0:	eaffffcd 	b	ba0c <CUSBStandardHub::Configure()+0x5c>
    bad4:	eb005009 	bl	1fb00 <CLogger::Get()>
    bad8:	e1a02005 	mov	r2, r5
    badc:	e59f3030 	ldr	r3, [pc, #48]	; bb14 <CUSBStandardHub::Configure()+0x164>
    bae0:	e59f101c 	ldr	r1, [pc, #28]	; bb04 <CUSBStandardHub::Configure()+0x154>
    bae4:	eb004f47 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bae8:	eaffffc7 	b	ba0c <CUSBStandardHub::Configure()+0x5c>
    baec:	eb005003 	bl	1fb00 <CLogger::Get()>
    baf0:	e1a02005 	mov	r2, r5
    baf4:	e59f301c 	ldr	r3, [pc, #28]	; bb18 <CUSBStandardHub::Configure()+0x168>
    baf8:	e59f1004 	ldr	r1, [pc, #4]	; bb04 <CUSBStandardHub::Configure()+0x154>
    bafc:	eb004f41 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bb00:	eaffffc1 	b	ba0c <CUSBStandardHub::Configure()+0x5c>
    bb04:	0002cef4 	.word	0x0002cef4
    bb08:	00034b88 	.word	0x00034b88
    bb0c:	0002ceec 	.word	0x0002ceec
    bb10:	0002cea8 	.word	0x0002cea8
    bb14:	0002ce90 	.word	0x0002ce90
    bb18:	0002c93c 	.word	0x0002c93c

0000bb1c <_GLOBAL__sub_I__ZN15CUSBStandardHub18s_DeviceNumberPoolE>:
    bb1c:	e92d4010 	push	{r4, lr}
    bb20:	e59f4020 	ldr	r4, [pc, #32]	; bb48 <_GLOBAL__sub_I__ZN15CUSBStandardHub18s_DeviceNumberPoolE+0x2c>
    bb24:	e3a0203f 	mov	r2, #63	; 0x3f
    bb28:	e1a00004 	mov	r0, r4
    bb2c:	e3a01001 	mov	r1, #1
    bb30:	eb007071 	bl	27cfc <CNumberPool::CNumberPool(unsigned int, unsigned int)>
    bb34:	e1a00004 	mov	r0, r4
    bb38:	e8bd4010 	pop	{r4, lr}
    bb3c:	e59f2008 	ldr	r2, [pc, #8]	; bb4c <_GLOBAL__sub_I__ZN15CUSBStandardHub18s_DeviceNumberPoolE+0x30>
    bb40:	e59f1008 	ldr	r1, [pc, #8]	; bb50 <_GLOBAL__sub_I__ZN15CUSBStandardHub18s_DeviceNumberPoolE+0x34>
    bb44:	ea00675b 	b	258b8 <__aeabi_atexit>
    bb48:	00034b88 	.word	0x00034b88
    bb4c:	00034c44 	.word	0x00034c44
    bb50:	00027d4c 	.word	0x00027d4c

0000bb54 <CDWHCIDevice::CancelDeviceTransactions(CUSBDevice*)>:
    bb54:	e2800024 	add	r0, r0, #36	; 0x24
    bb58:	ea000f29 	b	f804 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)>

0000bb5c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    bb5c:	e3520000 	cmp	r2, #0
    bb60:	e92d4010 	push	{r4, lr}
    bb64:	0a000005 	beq	bb80 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x24>
    bb68:	e351000f 	cmp	r1, #15
    bb6c:	8a000007 	bhi	bb90 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x34>
    bb70:	e3a03000 	mov	r3, #0
    bb74:	e0821001 	add	r1, r2, r1
    bb78:	e5c13070 	strb	r3, [r1, #112]	; 0x70
    bb7c:	e8bd8010 	pop	{r4, pc}
    bb80:	e59f2018 	ldr	r2, [pc, #24]	; bba0 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x44>
    bb84:	e59f1018 	ldr	r1, [pc, #24]	; bba4 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    bb88:	e59f0018 	ldr	r0, [pc, #24]	; bba8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x4c>
    bb8c:	eb0046db 	bl	1d700 <assertion_failed>
    bb90:	e3a02e2d 	mov	r2, #720	; 0x2d0
    bb94:	e59f1008 	ldr	r1, [pc, #8]	; bba4 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    bb98:	e59f000c 	ldr	r0, [pc, #12]	; bbac <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    bb9c:	eb0046d7 	bl	1d700 <assertion_failed>
    bba0:	000002cd 	.word	0x000002cd
    bba4:	0002cefc 	.word	0x0002cefc
    bba8:	0002c8c4 	.word	0x0002c8c4
    bbac:	0002cf0c 	.word	0x0002cf0c

0000bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>:
    bbb0:	e92d4030 	push	{r4, r5, lr}
    bbb4:	e24dd01c 	sub	sp, sp, #28
    bbb8:	e1a05000 	mov	r5, r0
    bbbc:	e28d000c 	add	r0, sp, #12
    bbc0:	eb000d3a 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bbc4:	e3a03000 	mov	r3, #0
    bbc8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bbcc:	eb004fcb 	bl	1fb00 <CLogger::Get()>
    bbd0:	e1a04000 	mov	r4, r0
    bbd4:	e28d000c 	add	r0, sp, #12
    bbd8:	eb000d3d 	bl	f0d4 <CDWHCIRegister::Read()>
    bbdc:	e3a02004 	mov	r2, #4
    bbe0:	e88d0021 	stm	sp, {r0, r5}
    bbe4:	e59f3018 	ldr	r3, [pc, #24]	; bc04 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]+0x54>
    bbe8:	e1a00004 	mov	r0, r4
    bbec:	e59f1014 	ldr	r1, [pc, #20]	; bc08 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]+0x58>
    bbf0:	eb004f04 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bbf4:	e28d000c 	add	r0, sp, #12
    bbf8:	eb000d34 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    bbfc:	e28dd01c 	add	sp, sp, #28
    bc00:	e8bd8030 	pop	{r4, r5, pc}
    bc04:	0002cf2c 	.word	0x0002cf2c
    bc08:	0002d478 	.word	0x0002d478

0000bc0c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)>:
    bc0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bc10:	e1a04000 	mov	r4, r0
    bc14:	e3a05000 	mov	r5, #0
    bc18:	e1a06002 	mov	r6, r2
    bc1c:	e1a07001 	mov	r7, r1
    bc20:	e3a08001 	mov	r8, #1
    bc24:	e1a01003 	mov	r1, r3
    bc28:	ebfff4cc 	bl	8f60 <CUSBHostController::CUSBHostController(bool)>
    bc2c:	e59f30b0 	ldr	r3, [pc, #176]	; bce4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xd8>
    bc30:	e5847010 	str	r7, [r4, #16]
    bc34:	e5843000 	str	r3, [r4]
    bc38:	e5846014 	str	r6, [r4, #20]
    bc3c:	e5845018 	str	r5, [r4, #24]
    bc40:	e584501c 	str	r5, [r4, #28]
    bc44:	e5848020 	str	r8, [r4, #32]
    bc48:	e2840024 	add	r0, r4, #36	; 0x24
    bc4c:	eb000e94 	bl	f6a4 <CDWHCITransactionQueue::CDWHCITransactionQueue()>
    bc50:	e1a01004 	mov	r1, r4
    bc54:	e584806c 	str	r8, [r4, #108]	; 0x6c
    bc58:	e5845080 	str	r5, [r4, #128]	; 0x80
    bc5c:	e5845084 	str	r5, [r4, #132]	; 0x84
    bc60:	e2840088 	add	r0, r4, #136	; 0x88
    bc64:	eb000e20 	bl	f4ec <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    bc68:	e5943010 	ldr	r3, [r4, #16]
    bc6c:	e5c45094 	strb	r5, [r4, #148]	; 0x94
    bc70:	e1530005 	cmp	r3, r5
    bc74:	e5c45095 	strb	r5, [r4, #149]	; 0x95
    bc78:	0a000011 	beq	bcc4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xb8>
    bc7c:	e5943014 	ldr	r3, [r4, #20]
    bc80:	e3530000 	cmp	r3, #0
    bc84:	11a02005 	movne	r2, r5
    bc88:	12843028 	addne	r3, r4, #40	; 0x28
    bc8c:	12841068 	addne	r1, r4, #104	; 0x68
    bc90:	0a00000f 	beq	bcd4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xc8>
    bc94:	e5a32004 	str	r2, [r3, #4]!
    bc98:	e1530001 	cmp	r3, r1
    bc9c:	1afffffc 	bne	bc94 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0x88>
    bca0:	e3a03000 	mov	r3, #0
    bca4:	e1a01003 	mov	r1, r3
    bca8:	e0842003 	add	r2, r4, r3
    bcac:	e2833001 	add	r3, r3, #1
    bcb0:	e3530010 	cmp	r3, #16
    bcb4:	e5c21070 	strb	r1, [r2, #112]	; 0x70
    bcb8:	1afffffa 	bne	bca8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0x9c>
    bcbc:	e1a00004 	mov	r0, r4
    bcc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bcc4:	e3a0204b 	mov	r2, #75	; 0x4b
    bcc8:	e59f1018 	ldr	r1, [pc, #24]	; bce8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xdc>
    bccc:	e59f0018 	ldr	r0, [pc, #24]	; bcec <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xe0>
    bcd0:	eb00468a 	bl	1d700 <assertion_failed>
    bcd4:	e3a0204c 	mov	r2, #76	; 0x4c
    bcd8:	e59f1008 	ldr	r1, [pc, #8]	; bce8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xdc>
    bcdc:	e59f000c 	ldr	r0, [pc, #12]	; bcf0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xe4>
    bce0:	eb004686 	bl	1d700 <assertion_failed>
    bce4:	0002d488 	.word	0x0002d488
    bce8:	0002cefc 	.word	0x0002cefc
    bcec:	0002cf38 	.word	0x0002cf38
    bcf0:	0002cf50 	.word	0x0002cf50

0000bcf4 <CDWHCIDevice::DeviceConnected()>:
    bcf4:	e92d4010 	push	{r4, lr}
    bcf8:	e24dd010 	sub	sp, sp, #16
    bcfc:	e59f1024 	ldr	r1, [pc, #36]	; bd28 <CDWHCIDevice::DeviceConnected()+0x34>
    bd00:	e28d0004 	add	r0, sp, #4
    bd04:	eb000ce9 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bd08:	e28d0004 	add	r0, sp, #4
    bd0c:	eb000cf0 	bl	f0d4 <CDWHCIRegister::Read()>
    bd10:	e1a04000 	mov	r4, r0
    bd14:	e28d0004 	add	r0, sp, #4
    bd18:	eb000cec 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    bd1c:	e2040001 	and	r0, r4, #1
    bd20:	e28dd010 	add	sp, sp, #16
    bd24:	e8bd8010 	pop	{r4, pc}
    bd28:	20980440 	.word	0x20980440

0000bd2c <CDWHCIDevice::GetPortSpeed()>:
    bd2c:	e92d4010 	push	{r4, lr}
    bd30:	e24dd010 	sub	sp, sp, #16
    bd34:	e59f1038 	ldr	r1, [pc, #56]	; bd74 <CDWHCIDevice::GetPortSpeed()+0x48>
    bd38:	e28d0004 	add	r0, sp, #4
    bd3c:	eb000cdb 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bd40:	e28d0004 	add	r0, sp, #4
    bd44:	eb000ce2 	bl	f0d4 <CDWHCIRegister::Read()>
    bd48:	e1a008a0 	lsr	r0, r0, #17
    bd4c:	e2000003 	and	r0, r0, #3
    bd50:	e3500003 	cmp	r0, #3
    bd54:	03a04004 	moveq	r4, #4
    bd58:	12600002 	rsbne	r0, r0, #2
    bd5c:	16ef4070 	uxtbne	r4, r0
    bd60:	e28d0004 	add	r0, sp, #4
    bd64:	eb000cd9 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    bd68:	e1a00004 	mov	r0, r4
    bd6c:	e28dd010 	add	sp, sp, #16
    bd70:	e8bd8010 	pop	{r4, pc}
    bd74:	20980440 	.word	0x20980440

0000bd78 <CDWHCIDevice::OvercurrentDetected()>:
    bd78:	e92d4010 	push	{r4, lr}
    bd7c:	e24dd010 	sub	sp, sp, #16
    bd80:	e59f1028 	ldr	r1, [pc, #40]	; bdb0 <CDWHCIDevice::OvercurrentDetected()+0x38>
    bd84:	e28d0004 	add	r0, sp, #4
    bd88:	eb000cc8 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bd8c:	e28d0004 	add	r0, sp, #4
    bd90:	eb000ccf 	bl	f0d4 <CDWHCIRegister::Read()>
    bd94:	e1a04000 	mov	r4, r0
    bd98:	e28d0004 	add	r0, sp, #4
    bd9c:	eb000ccb 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    bda0:	e1a00224 	lsr	r0, r4, #4
    bda4:	e2000001 	and	r0, r0, #1
    bda8:	e28dd010 	add	sp, sp, #16
    bdac:	e8bd8010 	pop	{r4, pc}
    bdb0:	20980440 	.word	0x20980440

0000bdb4 <CDWHCIDevice::DisableRootPort(bool)>:
    bdb4:	e3a03000 	mov	r3, #0
    bdb8:	e92d4030 	push	{r4, r5, lr}
    bdbc:	e1a05001 	mov	r5, r1
    bdc0:	e24dd014 	sub	sp, sp, #20
    bdc4:	e5c03094 	strb	r3, [r0, #148]	; 0x94
    bdc8:	e59f1054 	ldr	r1, [pc, #84]	; be24 <CDWHCIDevice::DisableRootPort(bool)+0x70>
    bdcc:	e1a04000 	mov	r4, r0
    bdd0:	e28d0004 	add	r0, sp, #4
    bdd4:	eb000cb5 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bdd8:	e28d0004 	add	r0, sp, #4
    bddc:	eb000cbc 	bl	f0d4 <CDWHCIRegister::Read()>
    bde0:	e3e01004 	mvn	r1, #4
    bde4:	e28d0004 	add	r0, sp, #4
    bde8:	eb000ced 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    bdec:	e3550000 	cmp	r5, #0
    bdf0:	1a000007 	bne	be14 <CDWHCIDevice::DisableRootPort(bool)+0x60>
    bdf4:	e28d0004 	add	r0, sp, #4
    bdf8:	eb000cbc 	bl	f0f0 <CDWHCIRegister::Write()>
    bdfc:	e2840024 	add	r0, r4, #36	; 0x24
    be00:	eb000e2e 	bl	f6c0 <CDWHCITransactionQueue::Flush()>
    be04:	e28d0004 	add	r0, sp, #4
    be08:	eb000cb0 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    be0c:	e28dd014 	add	sp, sp, #20
    be10:	e8bd8030 	pop	{r4, r5, pc}
    be14:	e3e01a01 	mvn	r1, #4096	; 0x1000
    be18:	e28d0004 	add	r0, sp, #4
    be1c:	eb000ce0 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    be20:	eafffff3 	b	bdf4 <CDWHCIDevice::DisableRootPort(bool)+0x40>
    be24:	20980440 	.word	0x20980440

0000be28 <CDWHCIDevice::PowerOn()>:
    be28:	e3a01000 	mov	r1, #0
    be2c:	e92d4030 	push	{r4, r5, lr}
    be30:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    be34:	e28d000c 	add	r0, sp, #12
    be38:	e1a05001 	mov	r5, r1
    be3c:	eb004650 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    be40:	e3a03014 	mov	r3, #20
    be44:	e3a0c003 	mov	ip, #3
    be48:	e59f1040 	ldr	r1, [pc, #64]	; be90 <CDWHCIDevice::PowerOn()+0x68>
    be4c:	e28d000c 	add	r0, sp, #12
    be50:	e58d5000 	str	r5, [sp]
    be54:	e08d2003 	add	r2, sp, r3
    be58:	e58dc020 	str	ip, [sp, #32]
    be5c:	e58dc024 	str	ip, [sp, #36]	; 0x24
    be60:	eb004653 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    be64:	e2504000 	subs	r4, r0, #0
    be68:	0a000003 	beq	be7c <CDWHCIDevice::PowerOn()+0x54>
    be6c:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
    be70:	e3100002 	tst	r0, #2
    be74:	11a04005 	movne	r4, r5
    be78:	02004001 	andeq	r4, r0, #1
    be7c:	e28d000c 	add	r0, sp, #12
    be80:	eb004646 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
    be84:	e1a00004 	mov	r0, r4
    be88:	e28dd02c 	add	sp, sp, #44	; 0x2c
    be8c:	e8bd8030 	pop	{r4, r5, pc}
    be90:	00028001 	.word	0x00028001

0000be94 <CDWHCIDevice::EnableGlobalInterrupts()>:
    be94:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    be98:	e24dd014 	sub	sp, sp, #20
    be9c:	e59f1030 	ldr	r1, [pc, #48]	; bed4 <CDWHCIDevice::EnableGlobalInterrupts()+0x40>
    bea0:	e28d0004 	add	r0, sp, #4
    bea4:	eb000c81 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bea8:	e28d0004 	add	r0, sp, #4
    beac:	eb000c88 	bl	f0d4 <CDWHCIRegister::Read()>
    beb0:	e3a01001 	mov	r1, #1
    beb4:	e28d0004 	add	r0, sp, #4
    beb8:	eb000cc7 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    bebc:	e28d0004 	add	r0, sp, #4
    bec0:	eb000c8a 	bl	f0f0 <CDWHCIRegister::Write()>
    bec4:	e28d0004 	add	r0, sp, #4
    bec8:	eb000c80 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    becc:	e28dd014 	add	sp, sp, #20
    bed0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    bed4:	20980008 	.word	0x20980008

0000bed8 <CDWHCIDevice::EnableCommonInterrupts()>:
    bed8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    bedc:	e24dd014 	sub	sp, sp, #20
    bee0:	e59f1024 	ldr	r1, [pc, #36]	; bf0c <CDWHCIDevice::EnableCommonInterrupts()+0x34>
    bee4:	e28d0004 	add	r0, sp, #4
    bee8:	eb000c70 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    beec:	e28d0004 	add	r0, sp, #4
    bef0:	eb000cf8 	bl	f2d8 <CDWHCIRegister::SetAll()>
    bef4:	e28d0004 	add	r0, sp, #4
    bef8:	eb000c7c 	bl	f0f0 <CDWHCIRegister::Write()>
    befc:	e28d0004 	add	r0, sp, #4
    bf00:	eb000c72 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    bf04:	e28dd014 	add	sp, sp, #20
    bf08:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    bf0c:	20980014 	.word	0x20980014

0000bf10 <CDWHCIDevice::EnableHostInterrupts()>:
    bf10:	e92d4010 	push	{r4, lr}
    bf14:	e1a04000 	mov	r4, r0
    bf18:	e24dd010 	sub	sp, sp, #16
    bf1c:	e3a02000 	mov	r2, #0
    bf20:	e59f105c 	ldr	r1, [pc, #92]	; bf84 <CDWHCIDevice::EnableHostInterrupts()+0x74>
    bf24:	e28d0004 	add	r0, sp, #4
    bf28:	eb000c64 	bl	f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bf2c:	e28d0004 	add	r0, sp, #4
    bf30:	eb000c6e 	bl	f0f0 <CDWHCIRegister::Write()>
    bf34:	e1a00004 	mov	r0, r4
    bf38:	ebffffe6 	bl	bed8 <CDWHCIDevice::EnableCommonInterrupts()>
    bf3c:	e28d0004 	add	r0, sp, #4
    bf40:	eb000c63 	bl	f0d4 <CDWHCIRegister::Read()>
    bf44:	e59f103c 	ldr	r1, [pc, #60]	; bf88 <CDWHCIDevice::EnableHostInterrupts()+0x78>
    bf48:	e28d0004 	add	r0, sp, #4
    bf4c:	eb000ca2 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    bf50:	ebfff4ad 	bl	920c <CUSBHostController::IsPlugAndPlay()>
    bf54:	e3500000 	cmp	r0, #0
    bf58:	1a000005 	bne	bf74 <CDWHCIDevice::EnableHostInterrupts()+0x64>
    bf5c:	e28d0004 	add	r0, sp, #4
    bf60:	eb000c62 	bl	f0f0 <CDWHCIRegister::Write()>
    bf64:	e28d0004 	add	r0, sp, #4
    bf68:	eb000c58 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    bf6c:	e28dd010 	add	sp, sp, #16
    bf70:	e8bd8010 	pop	{r4, pc}
    bf74:	e3a01421 	mov	r1, #553648128	; 0x21000000
    bf78:	e28d0004 	add	r0, sp, #4
    bf7c:	eb000c96 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    bf80:	eafffff5 	b	bf5c <CDWHCIDevice::EnableHostInterrupts()+0x4c>
    bf84:	20980018 	.word	0x20980018
    bf88:	02000008 	.word	0x02000008

0000bf8c <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    bf8c:	e92d4030 	push	{r4, r5, lr}
    bf90:	e1a04000 	mov	r4, r0
    bf94:	e24dd014 	sub	sp, sp, #20
    bf98:	e1a05001 	mov	r5, r1
    bf9c:	e28d0004 	add	r0, sp, #4
    bfa0:	e59f1064 	ldr	r1, [pc, #100]	; c00c <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x80>
    bfa4:	eb000c41 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bfa8:	e594006c 	ldr	r0, [r4, #108]	; 0x6c
    bfac:	e3500000 	cmp	r0, #0
    bfb0:	1a00000e 	bne	bff0 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x64>
    bfb4:	e28d0004 	add	r0, sp, #4
    bfb8:	eb000c45 	bl	f0d4 <CDWHCIRegister::Read()>
    bfbc:	e3a01001 	mov	r1, #1
    bfc0:	e28d0004 	add	r0, sp, #4
    bfc4:	e1a01511 	lsl	r1, r1, r5
    bfc8:	eb000c83 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    bfcc:	e28d0004 	add	r0, sp, #4
    bfd0:	eb000c46 	bl	f0f0 <CDWHCIRegister::Write()>
    bfd4:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    bfd8:	e3530000 	cmp	r3, #0
    bfdc:	1a000005 	bne	bff8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x6c>
    bfe0:	e28d0004 	add	r0, sp, #4
    bfe4:	eb000c39 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    bfe8:	e28dd014 	add	sp, sp, #20
    bfec:	e8bd8030 	pop	{r4, r5, pc}
    bff0:	eb0071ab 	bl	286a4 <EnterCritical>
    bff4:	eaffffee 	b	bfb4 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x28>
    bff8:	eb0071d3 	bl	2874c <LeaveCritical>
    bffc:	e28d0004 	add	r0, sp, #4
    c000:	eb000c32 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c004:	e28dd014 	add	sp, sp, #20
    c008:	e8bd8030 	pop	{r4, r5, pc}
    c00c:	20980418 	.word	0x20980418

0000c010 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    c010:	e92d4030 	push	{r4, r5, lr}
    c014:	e1a04000 	mov	r4, r0
    c018:	e24dd014 	sub	sp, sp, #20
    c01c:	e1a05001 	mov	r5, r1
    c020:	e28d0004 	add	r0, sp, #4
    c024:	e59f1064 	ldr	r1, [pc, #100]	; c090 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x80>
    c028:	eb000c20 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c02c:	e594006c 	ldr	r0, [r4, #108]	; 0x6c
    c030:	e3500000 	cmp	r0, #0
    c034:	1a00000e 	bne	c074 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x64>
    c038:	e28d0004 	add	r0, sp, #4
    c03c:	eb000c24 	bl	f0d4 <CDWHCIRegister::Read()>
    c040:	e3a01001 	mov	r1, #1
    c044:	e28d0004 	add	r0, sp, #4
    c048:	e1e01511 	mvn	r1, r1, lsl r5
    c04c:	eb000c54 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    c050:	e28d0004 	add	r0, sp, #4
    c054:	eb000c25 	bl	f0f0 <CDWHCIRegister::Write()>
    c058:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    c05c:	e3530000 	cmp	r3, #0
    c060:	1a000005 	bne	c07c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x6c>
    c064:	e28d0004 	add	r0, sp, #4
    c068:	eb000c18 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c06c:	e28dd014 	add	sp, sp, #20
    c070:	e8bd8030 	pop	{r4, r5, pc}
    c074:	eb00718a 	bl	286a4 <EnterCritical>
    c078:	eaffffee 	b	c038 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x28>
    c07c:	eb0071b2 	bl	2874c <LeaveCritical>
    c080:	e28d0004 	add	r0, sp, #4
    c084:	eb000c11 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c088:	e28dd014 	add	sp, sp, #20
    c08c:	e8bd8030 	pop	{r4, r5, pc}
    c090:	20980418 	.word	0x20980418

0000c094 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>:
    c094:	e92d4030 	push	{r4, r5, lr}
    c098:	e2514000 	subs	r4, r1, #0
    c09c:	e24dd01c 	sub	sp, sp, #28
    c0a0:	0a00001a 	beq	c110 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x7c>
    c0a4:	e1a05000 	mov	r5, r0
    c0a8:	e1a00004 	mov	r0, r4
    c0ac:	eb00113e 	bl	105ac <CDWHCITransferStageData::GetFrameScheduler() const>
    c0b0:	e2503000 	subs	r3, r0, #0
    c0b4:	0a000008 	beq	c0dc <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x48>
    c0b8:	e5933000 	ldr	r3, [r3]
    c0bc:	e5933014 	ldr	r3, [r3, #20]
    c0c0:	e12fff33 	blx	r3
    c0c4:	e1a02000 	mov	r2, r0
    c0c8:	e1a01004 	mov	r1, r4
    c0cc:	e2850024 	add	r0, r5, #36	; 0x24
    c0d0:	eb000e28 	bl	f978 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>
    c0d4:	e28dd01c 	add	sp, sp, #28
    c0d8:	e8bd8030 	pop	{r4, r5, pc}
    c0dc:	e59f103c 	ldr	r1, [pc, #60]	; c120 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x8c>
    c0e0:	e28d000c 	add	r0, sp, #12
    c0e4:	eb000bf1 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c0e8:	e28d000c 	add	r0, sp, #12
    c0ec:	eb000bf8 	bl	f0d4 <CDWHCIRegister::Read()>
    c0f0:	e2802001 	add	r2, r0, #1
    c0f4:	e1a02902 	lsl	r2, r2, #18
    c0f8:	e1a02922 	lsr	r2, r2, #18
    c0fc:	e28d000c 	add	r0, sp, #12
    c100:	e58d2004 	str	r2, [sp, #4]
    c104:	eb000bf1 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c108:	e59d2004 	ldr	r2, [sp, #4]
    c10c:	eaffffed 	b	c0c8 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x34>
    c110:	e59f200c 	ldr	r2, [pc, #12]	; c124 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x90>
    c114:	e59f100c 	ldr	r1, [pc, #12]	; c128 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x94>
    c118:	e59f000c 	ldr	r0, [pc, #12]	; c12c <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x98>
    c11c:	eb004577 	bl	1d700 <assertion_failed>
    c120:	20980408 	.word	0x20980408
    c124:	00000319 	.word	0x00000319
    c128:	0002cefc 	.word	0x0002cefc
    c12c:	0002d898 	.word	0x0002d898

0000c130 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    c130:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c134:	e2515000 	subs	r5, r1, #0
    c138:	e24dd008 	sub	sp, sp, #8
    c13c:	0a000030 	beq	c204 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xd4>
    c140:	e1a07000 	mov	r7, r0
    c144:	e3a00054 	mov	r0, #84	; 0x54
    c148:	e1a06002 	mov	r6, r2
    c14c:	e1a08003 	mov	r8, r3
    c150:	eb001117 	bl	105b4 <CDWHCITransferStageData::operator new(unsigned int)>
    c154:	e1a04000 	mov	r4, r0
    c158:	e59d3020 	ldr	r3, [sp, #32]
    c15c:	e3a01010 	mov	r1, #16
    c160:	e1a02005 	mov	r2, r5
    c164:	e58d3004 	str	r3, [sp, #4]
    c168:	e58d8000 	str	r8, [sp]
    c16c:	e1a03006 	mov	r3, r6
    c170:	eb000f49 	bl	fe9c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    c174:	e1a00004 	mov	r0, r4
    c178:	eb001070 	bl	10340 <CDWHCITransferStageData::IsSplit() const>
    c17c:	e2501000 	subs	r1, r0, #0
    c180:	e1a00004 	mov	r0, r4
    c184:	0a000014 	beq	c1dc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xac>
    c188:	eb000f2e 	bl	fe48 <CDWHCITransferStageData::BeginSplitCycle()>
    c18c:	e2505000 	subs	r5, r0, #0
    c190:	0a000013 	beq	c1e4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    c194:	e3a01001 	mov	r1, #1
    c198:	e1a00004 	mov	r0, r4
    c19c:	eb000f21 	bl	fe28 <CDWHCITransferStageData::SetState(unsigned int)>
    c1a0:	e3a01000 	mov	r1, #0
    c1a4:	e1a00004 	mov	r0, r4
    c1a8:	eb000f12 	bl	fdf8 <CDWHCITransferStageData::SetSplitComplete(bool)>
    c1ac:	e1a00004 	mov	r0, r4
    c1b0:	eb0010fd 	bl	105ac <CDWHCITransferStageData::GetFrameScheduler() const>
    c1b4:	e5903000 	ldr	r3, [r0]
    c1b8:	e5933008 	ldr	r3, [r3, #8]
    c1bc:	e12fff33 	blx	r3
    c1c0:	e3a05001 	mov	r5, #1
    c1c4:	e1a00007 	mov	r0, r7
    c1c8:	e1a01004 	mov	r1, r4
    c1cc:	ebffffb0 	bl	c094 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>
    c1d0:	e1a00005 	mov	r0, r5
    c1d4:	e28dd008 	add	sp, sp, #8
    c1d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c1dc:	eb000f11 	bl	fe28 <CDWHCITransferStageData::SetState(unsigned int)>
    c1e0:	eafffff6 	b	c1c0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x90>
    c1e4:	e1a00004 	mov	r0, r4
    c1e8:	eb000e87 	bl	fc0c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    c1ec:	e1a00004 	mov	r0, r4
    c1f0:	e3a01054 	mov	r1, #84	; 0x54
    c1f4:	eb001104 	bl	1060c <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    c1f8:	e1a00005 	mov	r0, r5
    c1fc:	e28dd008 	add	sp, sp, #8
    c200:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c204:	e3a02fb6 	mov	r2, #728	; 0x2d8
    c208:	e59f1004 	ldr	r1, [pc, #4]	; c214 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xe4>
    c20c:	e59f0004 	ldr	r0, [pc, #4]	; c218 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xe8>
    c210:	eb00453a 	bl	1d700 <assertion_failed>
    c214:	0002cefc 	.word	0x0002cefc
    c218:	0002c8e4 	.word	0x0002c8e4

0000c21c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    c21c:	e5d03095 	ldrb	r3, [r0, #149]	; 0x95
    c220:	e21330ff 	ands	r3, r3, #255	; 0xff
    c224:	1a000020 	bne	c2ac <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x90>
    c228:	e92d4070 	push	{r4, r5, r6, lr}
    c22c:	e1a04001 	mov	r4, r1
    c230:	e24dd008 	sub	sp, sp, #8
    c234:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    c238:	e3510000 	cmp	r1, #0
    c23c:	0a00001c 	beq	c2b4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x98>
    c240:	e1a06000 	mov	r6, r0
    c244:	e1a00001 	mov	r0, r1
    c248:	e1a05002 	mov	r5, r2
    c24c:	ebfff924 	bl	a6e4 <CUSBRequest::GetEndpoint() const>
    c250:	eb00175d 	bl	11fcc <CUSBEndpoint::GetType() const>
    c254:	e3500001 	cmp	r0, #1
    c258:	1a000019 	bne	c2c4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xa8>
    c25c:	e1a00004 	mov	r0, r4
    c260:	ebfff96c 	bl	a818 <CUSBRequest::GetBufLen() const>
    c264:	e3500000 	cmp	r0, #0
    c268:	0a00001e 	beq	c2e8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xcc>
    c26c:	e3a01000 	mov	r1, #0
    c270:	e1a00004 	mov	r0, r4
    c274:	ebfff924 	bl	a70c <CUSBRequest::SetStatus(int)>
    c278:	e1a00004 	mov	r0, r4
    c27c:	ebfff918 	bl	a6e4 <CUSBRequest::GetEndpoint() const>
    c280:	eb001753 	bl	11fd4 <CUSBEndpoint::IsDirectionIn() const>
    c284:	e1a01004 	mov	r1, r4
    c288:	e1a02000 	mov	r2, r0
    c28c:	e3a03000 	mov	r3, #0
    c290:	e1a00006 	mov	r0, r6
    c294:	e58d5000 	str	r5, [sp]
    c298:	ebffffa4 	bl	c130 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    c29c:	e3a03000 	mov	r3, #0
    c2a0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    c2a4:	e28dd008 	add	sp, sp, #8
    c2a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c2ac:	e3a00000 	mov	r0, #0
    c2b0:	e12fff1e 	bx	lr
    c2b4:	e59f203c 	ldr	r2, [pc, #60]	; c2f8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    c2b8:	e59f103c 	ldr	r1, [pc, #60]	; c2fc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    c2bc:	e59f003c 	ldr	r0, [pc, #60]	; c300 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe4>
    c2c0:	eb00450e 	bl	1d700 <assertion_failed>
    c2c4:	e1a00004 	mov	r0, r4
    c2c8:	ebfff905 	bl	a6e4 <CUSBRequest::GetEndpoint() const>
    c2cc:	eb00173e 	bl	11fcc <CUSBEndpoint::GetType() const>
    c2d0:	e3500002 	cmp	r0, #2
    c2d4:	0affffe0 	beq	c25c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x40>
    c2d8:	e59f2024 	ldr	r2, [pc, #36]	; c304 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe8>
    c2dc:	e59f1018 	ldr	r1, [pc, #24]	; c2fc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    c2e0:	e59f0020 	ldr	r0, [pc, #32]	; c308 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xec>
    c2e4:	eb004505 	bl	1d700 <assertion_failed>
    c2e8:	e3a02f49 	mov	r2, #292	; 0x124
    c2ec:	e59f1008 	ldr	r1, [pc, #8]	; c2fc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    c2f0:	e59f0014 	ldr	r0, [pc, #20]	; c30c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xf0>
    c2f4:	eb004501 	bl	1d700 <assertion_failed>
    c2f8:	00000121 	.word	0x00000121
    c2fc:	0002cefc 	.word	0x0002cefc
    c300:	0002c8e4 	.word	0x0002c8e4
    c304:	00000122 	.word	0x00000122
    c308:	0002cf78 	.word	0x0002cf78
    c30c:	0002cf60 	.word	0x0002cf60

0000c310 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)>:
    c310:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c314:	e2515000 	subs	r5, r1, #0
    c318:	e24dd01c 	sub	sp, sp, #28
    c31c:	0a000044 	beq	c434 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x124>
    c320:	e1a06000 	mov	r6, r0
    c324:	e1a00005 	mov	r0, r5
    c328:	eb001089 	bl	10554 <CDWHCITransferStageData::GetURB() const>
    c32c:	e3500000 	cmp	r0, #0
    c330:	0a000043 	beq	c444 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x134>
    c334:	ebfff8ea 	bl	a6e4 <CUSBRequest::GetEndpoint() const>
    c338:	eb00172d 	bl	11ff4 <CUSBEndpoint::GetInterval() const>
    c33c:	e59f1130 	ldr	r1, [pc, #304]	; c474 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x164>
    c340:	e1a04000 	mov	r4, r0
    c344:	e1a0000d 	mov	r0, sp
    c348:	eb000b58 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c34c:	e1a0000d 	mov	r0, sp
    c350:	eb000b5f 	bl	f0d4 <CDWHCIRegister::Read()>
    c354:	e6ff4074 	uxth	r4, r4
    c358:	e3100806 	tst	r0, #393216	; 0x60000
    c35c:	01a04184 	lsleq	r4, r4, #3
    c360:	e59f3110 	ldr	r3, [pc, #272]	; c478 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x168>
    c364:	06ff4074 	uxtheq	r4, r4
    c368:	e1540003 	cmp	r4, r3
    c36c:	2a000038 	bcs	c454 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x144>
    c370:	e1a00005 	mov	r0, r5
    c374:	eb000ff1 	bl	10340 <CDWHCITransferStageData::IsSplit() const>
    c378:	e2507000 	subs	r7, r0, #0
    c37c:	0a000017 	beq	c3e0 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0xd0>
    c380:	e1a00005 	mov	r0, r5
    c384:	eb001088 	bl	105ac <CDWHCITransferStageData::GetFrameScheduler() const>
    c388:	e2507000 	subs	r7, r0, #0
    c38c:	0a000034 	beq	c464 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x154>
    c390:	e5973000 	ldr	r3, [r7]
    c394:	e1a01004 	mov	r1, r4
    c398:	e5933018 	ldr	r3, [r3, #24]
    c39c:	e12fff33 	blx	r3
    c3a0:	e5973000 	ldr	r3, [r7]
    c3a4:	e1a00007 	mov	r0, r7
    c3a8:	e5933014 	ldr	r3, [r3, #20]
    c3ac:	e12fff33 	blx	r3
    c3b0:	e3a01001 	mov	r1, #1
    c3b4:	e1a04000 	mov	r4, r0
    c3b8:	e1a00005 	mov	r0, r5
    c3bc:	eb000e99 	bl	fe28 <CDWHCITransferStageData::SetState(unsigned int)>
    c3c0:	e1a00005 	mov	r0, r5
    c3c4:	e3a01000 	mov	r1, #0
    c3c8:	eb000e8a 	bl	fdf8 <CDWHCITransferStageData::SetSplitComplete(bool)>
    c3cc:	e5973000 	ldr	r3, [r7]
    c3d0:	e1a00007 	mov	r0, r7
    c3d4:	e5933008 	ldr	r3, [r3, #8]
    c3d8:	e12fff33 	blx	r3
    c3dc:	ea00000c 	b	c414 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x104>
    c3e0:	e59f1094 	ldr	r1, [pc, #148]	; c47c <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x16c>
    c3e4:	e28d000c 	add	r0, sp, #12
    c3e8:	eb000b30 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c3ec:	e28d000c 	add	r0, sp, #12
    c3f0:	eb000b37 	bl	f0d4 <CDWHCIRegister::Read()>
    c3f4:	e1a01007 	mov	r1, r7
    c3f8:	e0844000 	add	r4, r4, r0
    c3fc:	e1a00005 	mov	r0, r5
    c400:	eb000e88 	bl	fe28 <CDWHCITransferStageData::SetState(unsigned int)>
    c404:	e1a04904 	lsl	r4, r4, #18
    c408:	e28d000c 	add	r0, sp, #12
    c40c:	e1a04924 	lsr	r4, r4, #18
    c410:	eb000b2e 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c414:	e1a02004 	mov	r2, r4
    c418:	e1a01005 	mov	r1, r5
    c41c:	e2860024 	add	r0, r6, #36	; 0x24
    c420:	eb000d54 	bl	f978 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>
    c424:	e1a0000d 	mov	r0, sp
    c428:	eb000b28 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c42c:	e28dd01c 	add	sp, sp, #28
    c430:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c434:	e3a02fcb 	mov	r2, #812	; 0x32c
    c438:	e59f1040 	ldr	r1, [pc, #64]	; c480 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x170>
    c43c:	e59f0040 	ldr	r0, [pc, #64]	; c484 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x174>
    c440:	eb0044ae 	bl	1d700 <assertion_failed>
    c444:	e59f203c 	ldr	r2, [pc, #60]	; c488 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x178>
    c448:	e59f1030 	ldr	r1, [pc, #48]	; c480 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x170>
    c44c:	e59f0038 	ldr	r0, [pc, #56]	; c48c <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x17c>
    c450:	eb0044aa 	bl	1d700 <assertion_failed>
    c454:	e59f2034 	ldr	r2, [pc, #52]	; c490 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x180>
    c458:	e59f1020 	ldr	r1, [pc, #32]	; c480 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x170>
    c45c:	e59f0030 	ldr	r0, [pc, #48]	; c494 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x184>
    c460:	eb0044a6 	bl	1d700 <assertion_failed>
    c464:	e59f202c 	ldr	r2, [pc, #44]	; c498 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x188>
    c468:	e59f1010 	ldr	r1, [pc, #16]	; c480 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x170>
    c46c:	e59f0028 	ldr	r0, [pc, #40]	; c49c <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x18c>
    c470:	eb0044a2 	bl	1d700 <assertion_failed>
    c474:	20980440 	.word	0x20980440
    c478:	00001fff 	.word	0x00001fff
    c47c:	20980408 	.word	0x20980408
    c480:	0002cefc 	.word	0x0002cefc
    c484:	0002d898 	.word	0x0002d898
    c488:	0000032e 	.word	0x0000032e
    c48c:	0002c8e4 	.word	0x0002c8e4
    c490:	00000336 	.word	0x00000336
    c494:	0002cfec 	.word	0x0002cfec
    c498:	0000033d 	.word	0x0000033d
    c49c:	0002d018 	.word	0x0002d018

0000c4a0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    c4a0:	e92d4070 	push	{r4, r5, r6, lr}
    c4a4:	e2514000 	subs	r4, r1, #0
    c4a8:	e24dd048 	sub	sp, sp, #72	; 0x48
    c4ac:	0a0000e0 	beq	c834 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x394>
    c4b0:	e1a06000 	mov	r6, r0
    c4b4:	e1a00004 	mov	r0, r4
    c4b8:	eb000e64 	bl	fe50 <CDWHCITransferStageData::GetChannelNumber() const>
    c4bc:	e5963018 	ldr	r3, [r6, #24]
    c4c0:	e1a05000 	mov	r5, r0
    c4c4:	e1530000 	cmp	r3, r0
    c4c8:	9a0000dd 	bls	c844 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a4>
    c4cc:	e3a01001 	mov	r1, #1
    c4d0:	e1a00004 	mov	r0, r4
    c4d4:	eb000e57 	bl	fe38 <CDWHCITransferStageData::SetSubState(unsigned int)>
    c4d8:	e59f1374 	ldr	r1, [pc, #884]	; c854 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
    c4dc:	e1a0000d 	mov	r0, sp
    c4e0:	e0811285 	add	r1, r1, r5, lsl #5
    c4e4:	eb000af1 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c4e8:	e1a0000d 	mov	r0, sp
    c4ec:	eb000b79 	bl	f2d8 <CDWHCIRegister::SetAll()>
    c4f0:	e1a0000d 	mov	r0, sp
    c4f4:	eb000afd 	bl	f0f0 <CDWHCIRegister::Write()>
    c4f8:	e59f1358 	ldr	r1, [pc, #856]	; c858 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b8>
    c4fc:	e1a05285 	lsl	r5, r5, #5
    c500:	e3a02000 	mov	r2, #0
    c504:	e0851001 	add	r1, r5, r1
    c508:	e28d000c 	add	r0, sp, #12
    c50c:	eb000aeb 	bl	f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    c510:	e1a00004 	mov	r0, r4
    c514:	eb000f85 	bl	10330 <CDWHCITransferStageData::GetBytesToTransfer() const>
    c518:	e3c014ff 	bic	r1, r0, #-16777216	; 0xff000000
    c51c:	e3c1173e 	bic	r1, r1, #16252928	; 0xf80000
    c520:	e28d000c 	add	r0, sp, #12
    c524:	eb000b2c 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c528:	e1a00004 	mov	r0, r4
    c52c:	eb000f81 	bl	10338 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    c530:	e1a01000 	mov	r1, r0
    c534:	e59f3320 	ldr	r3, [pc, #800]	; c85c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3bc>
    c538:	e28d000c 	add	r0, sp, #12
    c53c:	e0031981 	and	r1, r3, r1, lsl #19
    c540:	eb000b25 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c544:	e1a00004 	mov	r0, r4
    c548:	eb000f4e 	bl	10288 <CDWHCITransferStageData::GetPID() const>
    c54c:	e1a01000 	mov	r1, r0
    c550:	e28d000c 	add	r0, sp, #12
    c554:	e1a01e81 	lsl	r1, r1, #29
    c558:	eb000b1f 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c55c:	e28d000c 	add	r0, sp, #12
    c560:	eb000ae2 	bl	f0f0 <CDWHCIRegister::Write()>
    c564:	e1a00004 	mov	r0, r4
    c568:	eb000f65 	bl	10304 <CDWHCITransferStageData::GetDMAAddress() const>
    c56c:	e59f12ec 	ldr	r1, [pc, #748]	; c860 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c0>
    c570:	e3c00103 	bic	r0, r0, #-1073741824	; 0xc0000000
    c574:	e3802101 	orr	r2, r0, #1073741824	; 0x40000000
    c578:	e0851001 	add	r1, r5, r1
    c57c:	e28d0018 	add	r0, sp, #24
    c580:	eb000ace 	bl	f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    c584:	e28d0018 	add	r0, sp, #24
    c588:	eb000ad8 	bl	f0f0 <CDWHCIRegister::Write()>
    c58c:	e1a00004 	mov	r0, r4
    c590:	eb000f5b 	bl	10304 <CDWHCITransferStageData::GetDMAAddress() const>
    c594:	e1a06000 	mov	r6, r0
    c598:	e1a00004 	mov	r0, r4
    c59c:	eb000f63 	bl	10330 <CDWHCITransferStageData::GetBytesToTransfer() const>
    c5a0:	e1a01000 	mov	r1, r0
    c5a4:	e1a00006 	mov	r0, r6
    c5a8:	eb00707d 	bl	287a4 <CleanAndInvalidateDataCacheRange>
    c5ac:	e59f12b0 	ldr	r1, [pc, #688]	; c864 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>
    c5b0:	e3a02000 	mov	r2, #0
    c5b4:	e0851001 	add	r1, r5, r1
    c5b8:	e28d0024 	add	r0, sp, #36	; 0x24
    c5bc:	eb000abf 	bl	f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    c5c0:	e1a00004 	mov	r0, r4
    c5c4:	eb000f5d 	bl	10340 <CDWHCITransferStageData::IsSplit() const>
    c5c8:	e3500000 	cmp	r0, #0
    c5cc:	1a00007b 	bne	c7c0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x320>
    c5d0:	e28d0024 	add	r0, sp, #36	; 0x24
    c5d4:	eb000ac5 	bl	f0f0 <CDWHCIRegister::Write()>
    c5d8:	e59f1288 	ldr	r1, [pc, #648]	; c868 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    c5dc:	e28d0030 	add	r0, sp, #48	; 0x30
    c5e0:	e0851001 	add	r1, r5, r1
    c5e4:	eb000ab1 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c5e8:	e28d0030 	add	r0, sp, #48	; 0x30
    c5ec:	eb000ab8 	bl	f0d4 <CDWHCIRegister::Read()>
    c5f0:	e59f1274 	ldr	r1, [pc, #628]	; c86c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    c5f4:	e28d0030 	add	r0, sp, #48	; 0x30
    c5f8:	eb000ae9 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    c5fc:	e1a00004 	mov	r0, r4
    c600:	eb000f1c 	bl	10278 <CDWHCITransferStageData::GetMaxPacketSize() const>
    c604:	e1a01a80 	lsl	r1, r0, #21
    c608:	e1a01aa1 	lsr	r1, r1, #21
    c60c:	e28d0030 	add	r0, sp, #48	; 0x30
    c610:	eb000af1 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c614:	e3e01603 	mvn	r1, #3145728	; 0x300000
    c618:	e28d0030 	add	r0, sp, #48	; 0x30
    c61c:	eb000ae0 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    c620:	e3a01601 	mov	r1, #1048576	; 0x100000
    c624:	e28d0030 	add	r0, sp, #48	; 0x30
    c628:	eb000aeb 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c62c:	e1a00004 	mov	r0, r4
    c630:	eb000f2f 	bl	102f4 <CDWHCITransferStageData::IsDirectionIn() const>
    c634:	e3500000 	cmp	r0, #0
    c638:	1a000051 	bne	c784 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2e4>
    c63c:	e3e01902 	mvn	r1, #32768	; 0x8000
    c640:	e28d0030 	add	r0, sp, #48	; 0x30
    c644:	eb000ad6 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    c648:	e1a00004 	mov	r0, r4
    c64c:	eb000f0b 	bl	10280 <CDWHCITransferStageData::GetSpeed() const>
    c650:	e3500000 	cmp	r0, #0
    c654:	1a000051 	bne	c7a0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x300>
    c658:	e3a01802 	mov	r1, #131072	; 0x20000
    c65c:	e28d0030 	add	r0, sp, #48	; 0x30
    c660:	eb000add 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c664:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    c668:	e28d0030 	add	r0, sp, #48	; 0x30
    c66c:	eb000acc 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    c670:	e1a00004 	mov	r0, r4
    c674:	eb000ecf 	bl	101b8 <CDWHCITransferStageData::GetDeviceAddress() const>
    c678:	e1a01000 	mov	r1, r0
    c67c:	e28d0030 	add	r0, sp, #48	; 0x30
    c680:	e1a01b01 	lsl	r1, r1, #22
    c684:	eb000ad4 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c688:	e3e01703 	mvn	r1, #786432	; 0xc0000
    c68c:	e28d0030 	add	r0, sp, #48	; 0x30
    c690:	eb000ac3 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    c694:	e1a00004 	mov	r0, r4
    c698:	eb000ed2 	bl	101e8 <CDWHCITransferStageData::GetEndpointType() const>
    c69c:	e1a01000 	mov	r1, r0
    c6a0:	e28d0030 	add	r0, sp, #48	; 0x30
    c6a4:	e1a01901 	lsl	r1, r1, #18
    c6a8:	eb000acb 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c6ac:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    c6b0:	e28d0030 	add	r0, sp, #48	; 0x30
    c6b4:	eb000aba 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    c6b8:	e1a00004 	mov	r0, r4
    c6bc:	eb000ee1 	bl	10248 <CDWHCITransferStageData::GetEndpointNumber() const>
    c6c0:	e1a01000 	mov	r1, r0
    c6c4:	e28d0030 	add	r0, sp, #48	; 0x30
    c6c8:	e1a01581 	lsl	r1, r1, #11
    c6cc:	eb000ac2 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c6d0:	e1a00004 	mov	r0, r4
    c6d4:	eb000fb4 	bl	105ac <CDWHCITransferStageData::GetFrameScheduler() const>
    c6d8:	e2503000 	subs	r3, r0, #0
    c6dc:	0a000007 	beq	c700 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x260>
    c6e0:	e5933000 	ldr	r3, [r3]
    c6e4:	e593301c 	ldr	r3, [r3, #28]
    c6e8:	e12fff33 	blx	r3
    c6ec:	e3500000 	cmp	r0, #0
    c6f0:	0a00002e 	beq	c7b0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x310>
    c6f4:	e3a01202 	mov	r1, #536870912	; 0x20000000
    c6f8:	e28d0030 	add	r0, sp, #48	; 0x30
    c6fc:	eb000ab6 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c700:	e59f1168 	ldr	r1, [pc, #360]	; c870 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    c704:	e28d003c 	add	r0, sp, #60	; 0x3c
    c708:	e0851001 	add	r1, r5, r1
    c70c:	eb000a67 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c710:	e1a00004 	mov	r0, r4
    c714:	eb000f44 	bl	1042c <CDWHCITransferStageData::GetStatusMask() const>
    c718:	e1a01000 	mov	r1, r0
    c71c:	e28d003c 	add	r0, sp, #60	; 0x3c
    c720:	eb000a8c 	bl	f158 <CDWHCIRegister::Set(unsigned int)>
    c724:	e28d003c 	add	r0, sp, #60	; 0x3c
    c728:	eb000a70 	bl	f0f0 <CDWHCIRegister::Write()>
    c72c:	e28d0030 	add	r0, sp, #48	; 0x30
    c730:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    c734:	eb000aa8 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c738:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    c73c:	e28d0030 	add	r0, sp, #48	; 0x30
    c740:	eb000a97 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    c744:	e28d0030 	add	r0, sp, #48	; 0x30
    c748:	eb000a68 	bl	f0f0 <CDWHCIRegister::Write()>
    c74c:	e28d003c 	add	r0, sp, #60	; 0x3c
    c750:	eb000a5e 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c754:	e28d0030 	add	r0, sp, #48	; 0x30
    c758:	eb000a5c 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c75c:	e28d0024 	add	r0, sp, #36	; 0x24
    c760:	eb000a5a 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c764:	e28d0018 	add	r0, sp, #24
    c768:	eb000a58 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c76c:	e28d000c 	add	r0, sp, #12
    c770:	eb000a56 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c774:	e1a0000d 	mov	r0, sp
    c778:	eb000a54 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c77c:	e28dd048 	add	sp, sp, #72	; 0x48
    c780:	e8bd8070 	pop	{r4, r5, r6, pc}
    c784:	e3a01902 	mov	r1, #32768	; 0x8000
    c788:	e28d0030 	add	r0, sp, #48	; 0x30
    c78c:	eb000a92 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c790:	e1a00004 	mov	r0, r4
    c794:	eb000eb9 	bl	10280 <CDWHCITransferStageData::GetSpeed() const>
    c798:	e3500000 	cmp	r0, #0
    c79c:	0affffad 	beq	c658 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1b8>
    c7a0:	e3e01802 	mvn	r1, #131072	; 0x20000
    c7a4:	e28d0030 	add	r0, sp, #48	; 0x30
    c7a8:	eb000a7d 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    c7ac:	eaffffac 	b	c664 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1c4>
    c7b0:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    c7b4:	e28d0030 	add	r0, sp, #48	; 0x30
    c7b8:	eb000a79 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    c7bc:	eaffffcf 	b	c700 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x260>
    c7c0:	e1a00004 	mov	r0, r4
    c7c4:	eb000f01 	bl	103d0 <CDWHCITransferStageData::GetHubPortAddress() const>
    c7c8:	e1a01000 	mov	r1, r0
    c7cc:	e28d0024 	add	r0, sp, #36	; 0x24
    c7d0:	eb000a81 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c7d4:	e1a00004 	mov	r0, r4
    c7d8:	eb000ee7 	bl	1037c <CDWHCITransferStageData::GetHubAddress() const>
    c7dc:	e1a01000 	mov	r1, r0
    c7e0:	e28d0024 	add	r0, sp, #36	; 0x24
    c7e4:	e1a01381 	lsl	r1, r1, #7
    c7e8:	eb000a7b 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c7ec:	e1a00004 	mov	r0, r4
    c7f0:	eb000f0b 	bl	10424 <CDWHCITransferStageData::GetSplitPosition() const>
    c7f4:	e1a01000 	mov	r1, r0
    c7f8:	e28d0024 	add	r0, sp, #36	; 0x24
    c7fc:	e1a01701 	lsl	r1, r1, #14
    c800:	eb000a75 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c804:	e1a00004 	mov	r0, r4
    c808:	eb000ece 	bl	10348 <CDWHCITransferStageData::IsSplitComplete() const>
    c80c:	e3500000 	cmp	r0, #0
    c810:	1a000003 	bne	c824 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x384>
    c814:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    c818:	e28d0024 	add	r0, sp, #36	; 0x24
    c81c:	eb000a6e 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c820:	eaffff6a 	b	c5d0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x130>
    c824:	e3a01801 	mov	r1, #65536	; 0x10000
    c828:	e28d0024 	add	r0, sp, #36	; 0x24
    c82c:	eb000a6a 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c830:	eafffff7 	b	c814 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x374>
    c834:	e3a02e37 	mov	r2, #880	; 0x370
    c838:	e59f1034 	ldr	r1, [pc, #52]	; c874 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d4>
    c83c:	e59f0034 	ldr	r0, [pc, #52]	; c878 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d8>
    c840:	eb0043ae 	bl	1d700 <assertion_failed>
    c844:	e59f2030 	ldr	r2, [pc, #48]	; c87c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3dc>
    c848:	e59f1024 	ldr	r1, [pc, #36]	; c874 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d4>
    c84c:	e59f002c 	ldr	r0, [pc, #44]	; c880 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e0>
    c850:	eb0043aa 	bl	1d700 <assertion_failed>
    c854:	20980508 	.word	0x20980508
    c858:	20980510 	.word	0x20980510
    c85c:	1ff80000 	.word	0x1ff80000
    c860:	20980514 	.word	0x20980514
    c864:	20980504 	.word	0x20980504
    c868:	20980500 	.word	0x20980500
    c86c:	fffff800 	.word	0xfffff800
    c870:	2098050c 	.word	0x2098050c
    c874:	0002cefc 	.word	0x0002cefc
    c878:	0002d898 	.word	0x0002d898
    c87c:	00000372 	.word	0x00000372
    c880:	0002d030 	.word	0x0002d030

0000c884 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    c884:	e92d4070 	push	{r4, r5, r6, lr}
    c888:	e2514000 	subs	r4, r1, #0
    c88c:	e24dd018 	sub	sp, sp, #24
    c890:	0a000032 	beq	c960 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xdc>
    c894:	e1a06000 	mov	r6, r0
    c898:	e1a00004 	mov	r0, r4
    c89c:	eb000d6b 	bl	fe50 <CDWHCITransferStageData::GetChannelNumber() const>
    c8a0:	e5963018 	ldr	r3, [r6, #24]
    c8a4:	e1530000 	cmp	r3, r0
    c8a8:	9a000030 	bls	c970 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xec>
    c8ac:	e59f10cc 	ldr	r1, [pc, #204]	; c980 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xfc>
    c8b0:	e0801001 	add	r1, r0, r1
    c8b4:	e1a05281 	lsl	r5, r1, #5
    c8b8:	e1a01005 	mov	r1, r5
    c8bc:	e1a0000d 	mov	r0, sp
    c8c0:	eb0009fa 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c8c4:	e1a0000d 	mov	r0, sp
    c8c8:	eb000a01 	bl	f0d4 <CDWHCIRegister::Read()>
    c8cc:	e1a0000d 	mov	r0, sp
    c8d0:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    c8d4:	eb000a23 	bl	f168 <CDWHCIRegister::IsSet(unsigned int) const>
    c8d8:	e3500000 	cmp	r0, #0
    c8dc:	1a000006 	bne	c8fc <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x78>
    c8e0:	e1a01004 	mov	r1, r4
    c8e4:	e1a00006 	mov	r0, r6
    c8e8:	ebfffeec 	bl	c4a0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    c8ec:	e1a0000d 	mov	r0, sp
    c8f0:	eb0009f6 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c8f4:	e28dd018 	add	sp, sp, #24
    c8f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c8fc:	e1a00004 	mov	r0, r4
    c900:	e3a01000 	mov	r1, #0
    c904:	eb000d4b 	bl	fe38 <CDWHCITransferStageData::SetSubState(unsigned int)>
    c908:	e1a0000d 	mov	r0, sp
    c90c:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    c910:	eb000a23 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    c914:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    c918:	e1a0000d 	mov	r0, sp
    c91c:	eb000a2e 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    c920:	e1a0000d 	mov	r0, sp
    c924:	eb0009f1 	bl	f0f0 <CDWHCIRegister::Write()>
    c928:	e285100c 	add	r1, r5, #12
    c92c:	e28d000c 	add	r0, sp, #12
    c930:	eb0009de 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c934:	e3a01002 	mov	r1, #2
    c938:	e28d000c 	add	r0, sp, #12
    c93c:	eb000a05 	bl	f158 <CDWHCIRegister::Set(unsigned int)>
    c940:	e28d000c 	add	r0, sp, #12
    c944:	eb0009e9 	bl	f0f0 <CDWHCIRegister::Write()>
    c948:	e28d000c 	add	r0, sp, #12
    c94c:	eb0009df 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c950:	e1a0000d 	mov	r0, sp
    c954:	eb0009dd 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    c958:	e28dd018 	add	sp, sp, #24
    c95c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c960:	e59f201c 	ldr	r2, [pc, #28]	; c984 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x100>
    c964:	e59f101c 	ldr	r1, [pc, #28]	; c988 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    c968:	e59f001c 	ldr	r0, [pc, #28]	; c98c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x108>
    c96c:	eb004363 	bl	1d700 <assertion_failed>
    c970:	e59f2018 	ldr	r2, [pc, #24]	; c990 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    c974:	e59f100c 	ldr	r1, [pc, #12]	; c988 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    c978:	e59f0014 	ldr	r0, [pc, #20]	; c994 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x110>
    c97c:	eb00435f 	bl	1d700 <assertion_failed>
    c980:	0104c028 	.word	0x0104c028
    c984:	00000355 	.word	0x00000355
    c988:	0002cefc 	.word	0x0002cefc
    c98c:	0002d898 	.word	0x0002d898
    c990:	00000357 	.word	0x00000357
    c994:	0002d030 	.word	0x0002d030

0000c998 <CDWHCIDevice::AllocateChannel()>:
    c998:	e92d4070 	push	{r4, r5, r6, lr}
    c99c:	e1a05000 	mov	r5, r0
    c9a0:	e5900020 	ldr	r0, [r0, #32]
    c9a4:	e3500000 	cmp	r0, #0
    c9a8:	1a000014 	bne	ca00 <CDWHCIDevice::AllocateChannel()+0x68>
    c9ac:	e5951018 	ldr	r1, [r5, #24]
    c9b0:	e3510000 	cmp	r1, #0
    c9b4:	0a00000e 	beq	c9f4 <CDWHCIDevice::AllocateChannel()+0x5c>
    c9b8:	e595401c 	ldr	r4, [r5, #28]
    c9bc:	e2144001 	ands	r4, r4, #1
    c9c0:	0a000022 	beq	ca50 <CDWHCIDevice::AllocateChannel()+0xb8>
    c9c4:	e3a04000 	mov	r4, #0
    c9c8:	e3a03001 	mov	r3, #1
    c9cc:	ea000002 	b	c9dc <CDWHCIDevice::AllocateChannel()+0x44>
    c9d0:	e595201c 	ldr	r2, [r5, #28]
    c9d4:	e1120003 	tst	r2, r3
    c9d8:	0a000012 	beq	ca28 <CDWHCIDevice::AllocateChannel()+0x90>
    c9dc:	e2844001 	add	r4, r4, #1
    c9e0:	e1540001 	cmp	r4, r1
    c9e4:	e1a03083 	lsl	r3, r3, #1
    c9e8:	3afffff8 	bcc	c9d0 <CDWHCIDevice::AllocateChannel()+0x38>
    c9ec:	e3500000 	cmp	r0, #0
    c9f0:	1a000014 	bne	ca48 <CDWHCIDevice::AllocateChannel()+0xb0>
    c9f4:	e3a04010 	mov	r4, #16
    c9f8:	e1a00004 	mov	r0, r4
    c9fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    ca00:	eb006f27 	bl	286a4 <EnterCritical>
    ca04:	e5951018 	ldr	r1, [r5, #24]
    ca08:	e3510000 	cmp	r1, #0
    ca0c:	05950020 	ldreq	r0, [r5, #32]
    ca10:	0afffff5 	beq	c9ec <CDWHCIDevice::AllocateChannel()+0x54>
    ca14:	e595401c 	ldr	r4, [r5, #28]
    ca18:	e5950020 	ldr	r0, [r5, #32]
    ca1c:	e2144001 	ands	r4, r4, #1
    ca20:	1affffe7 	bne	c9c4 <CDWHCIDevice::AllocateChannel()+0x2c>
    ca24:	e3a03001 	mov	r3, #1
    ca28:	e595201c 	ldr	r2, [r5, #28]
    ca2c:	e3500000 	cmp	r0, #0
    ca30:	e1823003 	orr	r3, r2, r3
    ca34:	e585301c 	str	r3, [r5, #28]
    ca38:	0affffee 	beq	c9f8 <CDWHCIDevice::AllocateChannel()+0x60>
    ca3c:	eb006f42 	bl	2874c <LeaveCritical>
    ca40:	e1a00004 	mov	r0, r4
    ca44:	e8bd8070 	pop	{r4, r5, r6, pc}
    ca48:	eb006f3f 	bl	2874c <LeaveCritical>
    ca4c:	eaffffe8 	b	c9f4 <CDWHCIDevice::AllocateChannel()+0x5c>
    ca50:	e595301c 	ldr	r3, [r5, #28]
    ca54:	e3833001 	orr	r3, r3, #1
    ca58:	e585301c 	str	r3, [r5, #28]
    ca5c:	eaffffe5 	b	c9f8 <CDWHCIDevice::AllocateChannel()+0x60>

0000ca60 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]>:
    ca60:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ca64:	e24dd010 	sub	sp, sp, #16
    ca68:	e1a06000 	mov	r6, r0
    ca6c:	e59f10bc 	ldr	r1, [pc, #188]	; cb30 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xd0>
    ca70:	e28d0004 	add	r0, sp, #4
    ca74:	eb00098d 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ca78:	e28d0004 	add	r0, sp, #4
    ca7c:	eb000994 	bl	f0d4 <CDWHCIRegister::Read()>
    ca80:	e59fa0ac 	ldr	sl, [pc, #172]	; cb34 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xd4>
    ca84:	e59f90ac 	ldr	r9, [pc, #172]	; cb38 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xd8>
    ca88:	e6ff7070 	uxth	r7, r0
    ca8c:	e2868024 	add	r8, r6, #36	; 0x24
    ca90:	ea00000d 	b	cacc <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0x6c>
    ca94:	e1a01005 	mov	r1, r5
    ca98:	e1a00004 	mov	r0, r4
    ca9c:	eb000c6b 	bl	fc50 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>
    caa0:	e0863105 	add	r3, r6, r5, lsl #2
    caa4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
    caa8:	e3520000 	cmp	r2, #0
    caac:	1a000017 	bne	cb10 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xb0>
    cab0:	e1a01005 	mov	r1, r5
    cab4:	e1a00006 	mov	r0, r6
    cab8:	e583402c 	str	r4, [r3, #44]	; 0x2c
    cabc:	ebfffd32 	bl	bf8c <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    cac0:	e1a01004 	mov	r1, r4
    cac4:	e1a00006 	mov	r0, r6
    cac8:	ebffff6d 	bl	c884 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    cacc:	e1a01007 	mov	r1, r7
    cad0:	e1a00008 	mov	r0, r8
    cad4:	eb000c01 	bl	fae0 <CDWHCITransactionQueue::Dequeue(unsigned short)>
    cad8:	e2504000 	subs	r4, r0, #0
    cadc:	0a00000f 	beq	cb20 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xc0>
    cae0:	e1a00006 	mov	r0, r6
    cae4:	ebffffab 	bl	c998 <CDWHCIDevice::AllocateChannel()>
    cae8:	e5963018 	ldr	r3, [r6, #24]
    caec:	e1a05000 	mov	r5, r0
    caf0:	e1500003 	cmp	r0, r3
    caf4:	3affffe6 	bcc	ca94 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0x34>
    caf8:	eb004c00 	bl	1fb00 <CLogger::Get()>
    cafc:	e1a0300a 	mov	r3, sl
    cb00:	e3a02000 	mov	r2, #0
    cb04:	e1a01009 	mov	r1, r9
    cb08:	eb004b3e 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cb0c:	eaffffe0 	b	ca94 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0x34>
    cb10:	e3a02e52 	mov	r2, #1312	; 0x520
    cb14:	e59f1020 	ldr	r1, [pc, #32]	; cb3c <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xdc>
    cb18:	e59f0020 	ldr	r0, [pc, #32]	; cb40 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xe0>
    cb1c:	eb0042f7 	bl	1d700 <assertion_failed>
    cb20:	e28d0004 	add	r0, sp, #4
    cb24:	eb000969 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    cb28:	e28dd010 	add	sp, sp, #16
    cb2c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    cb30:	20980408 	.word	0x20980408
    cb34:	0002d048 	.word	0x0002d048
    cb38:	0002d478 	.word	0x0002d478
    cb3c:	0002cefc 	.word	0x0002cefc
    cb40:	0002d06c 	.word	0x0002d06c

0000cb44 <CDWHCIDevice::SOFInterruptHandler()>:
    cb44:	e5d03095 	ldrb	r3, [r0, #149]	; 0x95
    cb48:	e3530000 	cmp	r3, #0
    cb4c:	112fff1e 	bxne	lr
    cb50:	eaffffc2 	b	ca60 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]>

0000cb54 <CDWHCIDevice::FreeChannel(unsigned int)>:
    cb54:	e5903018 	ldr	r3, [r0, #24]
    cb58:	e92d4070 	push	{r4, r5, r6, lr}
    cb5c:	e1530001 	cmp	r3, r1
    cb60:	9a000012 	bls	cbb0 <CDWHCIDevice::FreeChannel(unsigned int)+0x5c>
    cb64:	e3a05001 	mov	r5, #1
    cb68:	e1a04000 	mov	r4, r0
    cb6c:	e5900020 	ldr	r0, [r0, #32]
    cb70:	e1a05115 	lsl	r5, r5, r1
    cb74:	e3500000 	cmp	r0, #0
    cb78:	1a00000a 	bne	cba8 <CDWHCIDevice::FreeChannel(unsigned int)+0x54>
    cb7c:	e594301c 	ldr	r3, [r4, #28]
    cb80:	e1130005 	tst	r3, r5
    cb84:	0a00000d 	beq	cbc0 <CDWHCIDevice::FreeChannel(unsigned int)+0x6c>
    cb88:	e594101c 	ldr	r1, [r4, #28]
    cb8c:	e5943020 	ldr	r3, [r4, #32]
    cb90:	e1c11005 	bic	r1, r1, r5
    cb94:	e3530000 	cmp	r3, #0
    cb98:	e584101c 	str	r1, [r4, #28]
    cb9c:	08bd8070 	popeq	{r4, r5, r6, pc}
    cba0:	e8bd4070 	pop	{r4, r5, r6, lr}
    cba4:	ea006ee8 	b	2874c <LeaveCritical>
    cba8:	eb006ebd 	bl	286a4 <EnterCritical>
    cbac:	eafffff2 	b	cb7c <CDWHCIDevice::FreeChannel(unsigned int)+0x28>
    cbb0:	e59f2018 	ldr	r2, [pc, #24]	; cbd0 <CDWHCIDevice::FreeChannel(unsigned int)+0x7c>
    cbb4:	e59f1018 	ldr	r1, [pc, #24]	; cbd4 <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    cbb8:	e59f0018 	ldr	r0, [pc, #24]	; cbd8 <CDWHCIDevice::FreeChannel(unsigned int)+0x84>
    cbbc:	eb0042cf 	bl	1d700 <assertion_failed>
    cbc0:	e59f2014 	ldr	r2, [pc, #20]	; cbdc <CDWHCIDevice::FreeChannel(unsigned int)+0x88>
    cbc4:	e59f1008 	ldr	r1, [pc, #8]	; cbd4 <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    cbc8:	e59f0010 	ldr	r0, [pc, #16]	; cbe0 <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    cbcc:	eb0042cb 	bl	1d700 <assertion_failed>
    cbd0:	000005d7 	.word	0x000005d7
    cbd4:	0002cefc 	.word	0x0002cefc
    cbd8:	0002d030 	.word	0x0002d030
    cbdc:	000005dc 	.word	0x000005dc
    cbe0:	0002d088 	.word	0x0002d088

0000cbe4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>:
    cbe4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbe8:	e0809101 	add	r9, r0, r1, lsl #2
    cbec:	e599402c 	ldr	r4, [r9, #44]	; 0x2c
    cbf0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    cbf4:	e3540000 	cmp	r4, #0
    cbf8:	0a0000d9 	beq	cf64 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x380>
    cbfc:	e1a05000 	mov	r5, r0
    cc00:	e1a00004 	mov	r0, r4
    cc04:	e1a06001 	mov	r6, r1
    cc08:	eb000e51 	bl	10554 <CDWHCITransferStageData::GetURB() const>
    cc0c:	e2508000 	subs	r8, r0, #0
    cc10:	0a0000d7 	beq	cf74 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x390>
    cc14:	e5d51094 	ldrb	r1, [r5, #148]	; 0x94
    cc18:	e21170ff 	ands	r7, r1, #255	; 0xff
    cc1c:	0a000046 	beq	cd3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x158>
    cc20:	e1a00004 	mov	r0, r4
    cc24:	eb000c85 	bl	fe40 <CDWHCITransferStageData::GetSubState() const>
    cc28:	e3500000 	cmp	r0, #0
    cc2c:	0a00003d 	beq	cd28 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    cc30:	e3500001 	cmp	r0, #1
    cc34:	1a000145 	bne	d150 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x56c>
    cc38:	e1a00004 	mov	r0, r4
    cc3c:	eb000db0 	bl	10304 <CDWHCITransferStageData::GetDMAAddress() const>
    cc40:	e1a07000 	mov	r7, r0
    cc44:	e1a00004 	mov	r0, r4
    cc48:	eb000db8 	bl	10330 <CDWHCITransferStageData::GetBytesToTransfer() const>
    cc4c:	e1a01000 	mov	r1, r0
    cc50:	e1a00007 	mov	r0, r7
    cc54:	eb006ed2 	bl	287a4 <CleanAndInvalidateDataCacheRange>
    cc58:	e59f1500 	ldr	r1, [pc, #1280]	; d160 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x57c>
    cc5c:	e28d0010 	add	r0, sp, #16
    cc60:	e0811286 	add	r1, r1, r6, lsl #5
    cc64:	eb000911 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    cc68:	e28d0010 	add	r0, sp, #16
    cc6c:	eb000918 	bl	f0d4 <CDWHCIRegister::Read()>
    cc70:	e59f14ec 	ldr	r1, [pc, #1260]	; d164 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x580>
    cc74:	e1a03286 	lsl	r3, r6, #5
    cc78:	e0831001 	add	r1, r3, r1
    cc7c:	e28d001c 	add	r0, sp, #28
    cc80:	eb00090a 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    cc84:	e28d001c 	add	r0, sp, #28
    cc88:	eb000911 	bl	f0d4 <CDWHCIRegister::Read()>
    cc8c:	e3500002 	cmp	r0, #2
    cc90:	0a0000a6 	beq	cf30 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x34c>
    cc94:	e1a00004 	mov	r0, r4
    cc98:	eb000c6e 	bl	fe58 <CDWHCITransferStageData::IsPeriodic() const>
    cc9c:	e3500000 	cmp	r0, #0
    cca0:	1a0000da 	bne	d010 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x42c>
    cca4:	e28d001c 	add	r0, sp, #28
    cca8:	eb000909 	bl	f0d4 <CDWHCIRegister::Read()>
    ccac:	e1a01000 	mov	r1, r0
    ccb0:	e28d0010 	add	r0, sp, #16
    ccb4:	e58d100c 	str	r1, [sp, #12]
    ccb8:	eb00091a 	bl	f128 <CDWHCIRegister::Get() const>
    ccbc:	e1a07000 	mov	r7, r0
    ccc0:	e28d0010 	add	r0, sp, #16
    ccc4:	eb000917 	bl	f128 <CDWHCIRegister::Get() const>
    ccc8:	e59f2498 	ldr	r2, [pc, #1176]	; d168 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x584>
    cccc:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    ccd0:	e00229a7 	and	r2, r2, r7, lsr #19
    ccd4:	e59d100c 	ldr	r1, [sp, #12]
    ccd8:	e3c3373e 	bic	r3, r3, #16252928	; 0xf80000
    ccdc:	e1a00004 	mov	r0, r4
    cce0:	eb000bdc 	bl	fc58 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    cce4:	e28d001c 	add	r0, sp, #28
    cce8:	eb0008f8 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    ccec:	e28d0010 	add	r0, sp, #16
    ccf0:	eb0008f6 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    ccf4:	e1a00004 	mov	r0, r4
    ccf8:	eb000c4c 	bl	fe30 <CDWHCITransferStageData::GetState() const>
    ccfc:	e3500001 	cmp	r0, #1
    cd00:	e1a07000 	mov	r7, r0
    cd04:	0a000073 	beq	ced8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2f4>
    cd08:	e3500002 	cmp	r0, #2
    cd0c:	0a000045 	beq	ce28 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x244>
    cd10:	e3500000 	cmp	r0, #0
    cd14:	0a00001e 	beq	cd94 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1b0>
    cd18:	e59f244c 	ldr	r2, [pc, #1100]	; d16c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x588>
    cd1c:	e59f144c 	ldr	r1, [pc, #1100]	; d170 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x58c>
    cd20:	e59f044c 	ldr	r0, [pc, #1100]	; d174 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x590>
    cd24:	eb004275 	bl	1d700 <assertion_failed>
    cd28:	e1a01004 	mov	r1, r4
    cd2c:	e1a00005 	mov	r0, r5
    cd30:	ebfffdda 	bl	c4a0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    cd34:	e28dd02c 	add	sp, sp, #44	; 0x2c
    cd38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd3c:	e1a01006 	mov	r1, r6
    cd40:	e1a00005 	mov	r0, r5
    cd44:	ebfffcb1 	bl	c010 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    cd48:	e1a01007 	mov	r1, r7
    cd4c:	e1a00008 	mov	r0, r8
    cd50:	ebfff66d 	bl	a70c <CUSBRequest::SetStatus(int)>
    cd54:	e3a01008 	mov	r1, #8
    cd58:	e1a00008 	mov	r0, r8
    cd5c:	ebfff66e 	bl	a71c <CUSBRequest::SetUSBError(TUSBError)>
    cd60:	e1a00004 	mov	r0, r4
    cd64:	eb000ba8 	bl	fc0c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    cd68:	e1a00004 	mov	r0, r4
    cd6c:	e3a01054 	mov	r1, #84	; 0x54
    cd70:	eb000e25 	bl	1060c <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    cd74:	e589702c 	str	r7, [r9, #44]	; 0x2c
    cd78:	e1a01006 	mov	r1, r6
    cd7c:	e1a00005 	mov	r0, r5
    cd80:	ebffff73 	bl	cb54 <CDWHCIDevice::FreeChannel(unsigned int)>
    cd84:	e1a00008 	mov	r0, r8
    cd88:	ebfff6af 	bl	a84c <CUSBRequest::CallCompletionRoutine()>
    cd8c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    cd90:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd94:	e1a00004 	mov	r0, r4
    cd98:	eb000db0 	bl	10460 <CDWHCITransferStageData::GetTransactionStatus() const>
    cd9c:	e59fb3d4 	ldr	fp, [pc, #980]	; d178 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x594>
    cda0:	e1a0a000 	mov	sl, r0
    cda4:	e00bb000 	and	fp, fp, r0
    cda8:	e35b0000 	cmp	fp, #0
    cdac:	1a000094 	bne	d004 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x420>
    cdb0:	e3100050 	tst	r0, #80	; 0x50
    cdb4:	0a000003 	beq	cdc8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1e4>
    cdb8:	e1a00004 	mov	r0, r4
    cdbc:	eb000c25 	bl	fe58 <CDWHCITransferStageData::IsPeriodic() const>
    cdc0:	e3500000 	cmp	r0, #0
    cdc4:	1a0000bc 	bne	d0bc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4d8>
    cdc8:	e1a00004 	mov	r0, r4
    cdcc:	eb000d4a 	bl	102fc <CDWHCITransferStageData::IsStatusStage() const>
    cdd0:	e3500000 	cmp	r0, #0
    cdd4:	0a0000b2 	beq	d0a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4c0>
    cdd8:	e3a01001 	mov	r1, #1
    cddc:	e1a00008 	mov	r0, r8
    cde0:	ebfff649 	bl	a70c <CUSBRequest::SetStatus(int)>
    cde4:	e1a01006 	mov	r1, r6
    cde8:	e1a00005 	mov	r0, r5
    cdec:	ebfffc87 	bl	c010 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    cdf0:	e1a00004 	mov	r0, r4
    cdf4:	eb000b84 	bl	fc0c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    cdf8:	e1a00004 	mov	r0, r4
    cdfc:	e3a01054 	mov	r1, #84	; 0x54
    ce00:	eb000e01 	bl	1060c <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ce04:	e3a03000 	mov	r3, #0
    ce08:	e1a01006 	mov	r1, r6
    ce0c:	e1a00005 	mov	r0, r5
    ce10:	e589302c 	str	r3, [r9, #44]	; 0x2c
    ce14:	ebffff4e 	bl	cb54 <CDWHCIDevice::FreeChannel(unsigned int)>
    ce18:	e1a00008 	mov	r0, r8
    ce1c:	ebfff68a 	bl	a84c <CUSBRequest::CallCompletionRoutine()>
    ce20:	e28dd02c 	add	sp, sp, #44	; 0x2c
    ce24:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce28:	e1a00004 	mov	r0, r4
    ce2c:	eb000d8b 	bl	10460 <CDWHCITransferStageData::GetTransactionStatus() const>
    ce30:	e59fa340 	ldr	sl, [pc, #832]	; d178 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x594>
    ce34:	e1a07000 	mov	r7, r0
    ce38:	e00aa000 	and	sl, sl, r0
    ce3c:	e35a0000 	cmp	sl, #0
    ce40:	1a00006a 	bne	cff0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x40c>
    ce44:	e1a00004 	mov	r0, r4
    ce48:	eb000dd7 	bl	105ac <CDWHCITransferStageData::GetFrameScheduler() const>
    ce4c:	e5903000 	ldr	r3, [r0]
    ce50:	e1a01007 	mov	r1, r7
    ce54:	e5933010 	ldr	r3, [r3, #16]
    ce58:	e12fff33 	blx	r3
    ce5c:	e1a00004 	mov	r0, r4
    ce60:	eb000dd1 	bl	105ac <CDWHCITransferStageData::GetFrameScheduler() const>
    ce64:	e5903000 	ldr	r3, [r0]
    ce68:	e593300c 	ldr	r3, [r3, #12]
    ce6c:	e12fff33 	blx	r3
    ce70:	e3500000 	cmp	r0, #0
    ce74:	1a000088 	bne	d09c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4b8>
    ce78:	e1a00004 	mov	r0, r4
    ce7c:	eb000d9b 	bl	104f0 <CDWHCITransferStageData::IsStageComplete() const>
    ce80:	e2507000 	subs	r7, r0, #0
    ce84:	1a00006a 	bne	d034 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x450>
    ce88:	e1a00004 	mov	r0, r4
    ce8c:	eb000bed 	bl	fe48 <CDWHCITransferStageData::BeginSplitCycle()>
    ce90:	e250a000 	subs	sl, r0, #0
    ce94:	1a000071 	bne	d060 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x47c>
    ce98:	e1a0100a 	mov	r1, sl
    ce9c:	e1a00008 	mov	r0, r8
    cea0:	ebfff619 	bl	a70c <CUSBRequest::SetStatus(int)>
    cea4:	e3a01006 	mov	r1, #6
    cea8:	e1a00008 	mov	r0, r8
    ceac:	ebfff61a 	bl	a71c <CUSBRequest::SetUSBError(TUSBError)>
    ceb0:	e1a01006 	mov	r1, r6
    ceb4:	e1a00005 	mov	r0, r5
    ceb8:	ebfffc54 	bl	c010 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    cebc:	e1a00004 	mov	r0, r4
    cec0:	eb000b51 	bl	fc0c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    cec4:	e1a00004 	mov	r0, r4
    cec8:	e3a01054 	mov	r1, #84	; 0x54
    cecc:	eb000dce 	bl	1060c <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ced0:	e589a02c 	str	sl, [r9, #44]	; 0x2c
    ced4:	eaffffa7 	b	cd78 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x194>
    ced8:	e1a00004 	mov	r0, r4
    cedc:	eb000d5f 	bl	10460 <CDWHCITransferStageData::GetTransactionStatus() const>
    cee0:	e59fb294 	ldr	fp, [pc, #660]	; d17c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x598>
    cee4:	e1a0a000 	mov	sl, r0
    cee8:	e00bb000 	and	fp, fp, r0
    ceec:	e35b0000 	cmp	fp, #0
    cef0:	0a000023 	beq	cf84 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3a0>
    cef4:	eb004b01 	bl	1fb00 <CLogger::Get()>
    cef8:	e1a02007 	mov	r2, r7
    cefc:	e59f327c 	ldr	r3, [pc, #636]	; d180 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x59c>
    cf00:	e58da000 	str	sl, [sp]
    cf04:	e59f1278 	ldr	r1, [pc, #632]	; d184 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5a0>
    cf08:	eb004a3e 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cf0c:	e3a01000 	mov	r1, #0
    cf10:	e1a00008 	mov	r0, r8
    cf14:	ebfff5fc 	bl	a70c <CUSBRequest::SetStatus(int)>
    cf18:	e1a00004 	mov	r0, r4
    cf1c:	eb000d5a 	bl	1048c <CDWHCITransferStageData::GetUSBError() const>
    cf20:	e1a01000 	mov	r1, r0
    cf24:	e1a00008 	mov	r0, r8
    cf28:	ebfff5fb 	bl	a71c <CUSBRequest::SetUSBError(TUSBError)>
    cf2c:	eaffffac 	b	cde4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x200>
    cf30:	e3a03000 	mov	r3, #0
    cf34:	e1a01006 	mov	r1, r6
    cf38:	e589302c 	str	r3, [r9, #44]	; 0x2c
    cf3c:	e1a00005 	mov	r0, r5
    cf40:	ebffff03 	bl	cb54 <CDWHCIDevice::FreeChannel(unsigned int)>
    cf44:	e1a01004 	mov	r1, r4
    cf48:	e1a00005 	mov	r0, r5
    cf4c:	ebfffc50 	bl	c094 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>
    cf50:	e28d001c 	add	r0, sp, #28
    cf54:	eb00085d 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    cf58:	e28d0010 	add	r0, sp, #16
    cf5c:	eb00085b 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    cf60:	eaffff73 	b	cd34 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x150>
    cf64:	e59f221c 	ldr	r2, [pc, #540]	; d188 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5a4>
    cf68:	e59f1200 	ldr	r1, [pc, #512]	; d170 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x58c>
    cf6c:	e59f0218 	ldr	r0, [pc, #536]	; d18c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5a8>
    cf70:	eb0041e2 	bl	1d700 <assertion_failed>
    cf74:	e59f2214 	ldr	r2, [pc, #532]	; d190 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5ac>
    cf78:	e59f11f0 	ldr	r1, [pc, #496]	; d170 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x58c>
    cf7c:	e59f0210 	ldr	r0, [pc, #528]	; d194 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5b0>
    cf80:	eb0041de 	bl	1d700 <assertion_failed>
    cf84:	e1a00004 	mov	r0, r4
    cf88:	eb000d87 	bl	105ac <CDWHCITransferStageData::GetFrameScheduler() const>
    cf8c:	e5903000 	ldr	r3, [r0]
    cf90:	e1a0100a 	mov	r1, sl
    cf94:	e5933010 	ldr	r3, [r3, #16]
    cf98:	e12fff33 	blx	r3
    cf9c:	e3a01002 	mov	r1, #2
    cfa0:	e1a00004 	mov	r0, r4
    cfa4:	eb000b9f 	bl	fe28 <CDWHCITransferStageData::SetState(unsigned int)>
    cfa8:	e1a01007 	mov	r1, r7
    cfac:	e1a00004 	mov	r0, r4
    cfb0:	eb000b90 	bl	fdf8 <CDWHCITransferStageData::SetSplitComplete(bool)>
    cfb4:	e1a00004 	mov	r0, r4
    cfb8:	eb000d7b 	bl	105ac <CDWHCITransferStageData::GetFrameScheduler() const>
    cfbc:	e5903000 	ldr	r3, [r0]
    cfc0:	e593300c 	ldr	r3, [r3, #12]
    cfc4:	e12fff33 	blx	r3
    cfc8:	e3500000 	cmp	r0, #0
    cfcc:	1589b02c 	strne	fp, [r9, #44]	; 0x2c
    cfd0:	0affffa8 	beq	ce78 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x294>
    cfd4:	e1a01006 	mov	r1, r6
    cfd8:	e1a00005 	mov	r0, r5
    cfdc:	ebfffedc 	bl	cb54 <CDWHCIDevice::FreeChannel(unsigned int)>
    cfe0:	e1a01004 	mov	r1, r4
    cfe4:	e1a00005 	mov	r0, r5
    cfe8:	ebfffc29 	bl	c094 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>
    cfec:	eaffff50 	b	cd34 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x150>
    cff0:	eb004ac2 	bl	1fb00 <CLogger::Get()>
    cff4:	e58d7000 	str	r7, [sp]
    cff8:	e3a02001 	mov	r2, #1
    cffc:	e59f317c 	ldr	r3, [pc, #380]	; d180 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x59c>
    d000:	eaffffbf 	b	cf04 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x320>
    d004:	eb004abd 	bl	1fb00 <CLogger::Get()>
    d008:	e58da000 	str	sl, [sp]
    d00c:	eafffff9 	b	cff8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x414>
    d010:	e28d0010 	add	r0, sp, #16
    d014:	eb000843 	bl	f128 <CDWHCIRegister::Get() const>
    d018:	e2200206 	eor	r0, r0, #1610612736	; 0x60000000
    d01c:	e3100206 	tst	r0, #1610612736	; 0x60000000
    d020:	1affff1f 	bne	cca4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0xc0>
    d024:	e59f216c 	ldr	r2, [pc, #364]	; d198 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5b4>
    d028:	e59f1140 	ldr	r1, [pc, #320]	; d170 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x58c>
    d02c:	e59f0168 	ldr	r0, [pc, #360]	; d19c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5b8>
    d030:	eb0041b2 	bl	1d700 <assertion_failed>
    d034:	e1a01006 	mov	r1, r6
    d038:	e1a00005 	mov	r0, r5
    d03c:	ebfffbf3 	bl	c010 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    d040:	e1a00004 	mov	r0, r4
    d044:	eb000cac 	bl	102fc <CDWHCITransferStageData::IsStatusStage() const>
    d048:	e3500000 	cmp	r0, #0
    d04c:	0a000025 	beq	d0e8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x504>
    d050:	e3a01001 	mov	r1, #1
    d054:	e1a00008 	mov	r0, r8
    d058:	ebfff5ab 	bl	a70c <CUSBRequest::SetStatus(int)>
    d05c:	eaffff63 	b	cdf0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x20c>
    d060:	e1a00004 	mov	r0, r4
    d064:	eb000b7b 	bl	fe58 <CDWHCITransferStageData::IsPeriodic() const>
    d068:	e250a000 	subs	sl, r0, #0
    d06c:	1a00002b 	bne	d120 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x53c>
    d070:	e3a01001 	mov	r1, #1
    d074:	e1a00004 	mov	r0, r4
    d078:	eb000b6a 	bl	fe28 <CDWHCITransferStageData::SetState(unsigned int)>
    d07c:	e1a0100a 	mov	r1, sl
    d080:	e1a00004 	mov	r0, r4
    d084:	eb000b5b 	bl	fdf8 <CDWHCITransferStageData::SetSplitComplete(bool)>
    d088:	e1a00004 	mov	r0, r4
    d08c:	eb000d46 	bl	105ac <CDWHCITransferStageData::GetFrameScheduler() const>
    d090:	e5903000 	ldr	r3, [r0]
    d094:	e5933008 	ldr	r3, [r3, #8]
    d098:	e12fff33 	blx	r3
    d09c:	e589a02c 	str	sl, [r9, #44]	; 0x2c
    d0a0:	eaffffcb 	b	cfd4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3f0>
    d0a4:	e1a00004 	mov	r0, r4
    d0a8:	eb000d14 	bl	10500 <CDWHCITransferStageData::GetResultLen() const>
    d0ac:	e1a01000 	mov	r1, r0
    d0b0:	e1a00008 	mov	r0, r8
    d0b4:	ebfff596 	bl	a714 <CUSBRequest::SetResultLen(unsigned int)>
    d0b8:	eaffff46 	b	cdd8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1f4>
    d0bc:	e1a00004 	mov	r0, r4
    d0c0:	eb000d13 	bl	10514 <CDWHCITransferStageData::IsTimeout() const>
    d0c4:	e3500000 	cmp	r0, #0
    d0c8:	0a00000c 	beq	d100 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x51c>
    d0cc:	e1a0100b 	mov	r1, fp
    d0d0:	e1a00008 	mov	r0, r8
    d0d4:	ebfff58c 	bl	a70c <CUSBRequest::SetStatus(int)>
    d0d8:	e3a01007 	mov	r1, #7
    d0dc:	e1a00008 	mov	r0, r8
    d0e0:	ebfff58d 	bl	a71c <CUSBRequest::SetUSBError(TUSBError)>
    d0e4:	eaffff3e 	b	cde4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x200>
    d0e8:	e1a00004 	mov	r0, r4
    d0ec:	eb000d03 	bl	10500 <CDWHCITransferStageData::GetResultLen() const>
    d0f0:	e1a01000 	mov	r1, r0
    d0f4:	e1a00008 	mov	r0, r8
    d0f8:	ebfff585 	bl	a714 <CUSBRequest::SetResultLen(unsigned int)>
    d0fc:	eaffffd3 	b	d050 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x46c>
    d100:	e1a01006 	mov	r1, r6
    d104:	e589002c 	str	r0, [r9, #44]	; 0x2c
    d108:	e1a00005 	mov	r0, r5
    d10c:	ebfffe90 	bl	cb54 <CDWHCIDevice::FreeChannel(unsigned int)>
    d110:	e1a01004 	mov	r1, r4
    d114:	e1a00005 	mov	r0, r5
    d118:	ebfffc7c 	bl	c310 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)>
    d11c:	eaffff04 	b	cd34 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x150>
    d120:	e1a00004 	mov	r0, r4
    d124:	eb000cfa 	bl	10514 <CDWHCITransferStageData::IsTimeout() const>
    d128:	e3500000 	cmp	r0, #0
    d12c:	0afffff3 	beq	d100 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x51c>
    d130:	e1a01006 	mov	r1, r6
    d134:	e1a00005 	mov	r0, r5
    d138:	ebfffbb4 	bl	c010 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    d13c:	e1a01007 	mov	r1, r7
    d140:	e1a00008 	mov	r0, r8
    d144:	ebfff570 	bl	a70c <CUSBRequest::SetStatus(int)>
    d148:	e3a01007 	mov	r1, #7
    d14c:	eaffff01 	b	cd58 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x174>
    d150:	e59f2048 	ldr	r2, [pc, #72]	; d1a0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5bc>
    d154:	e59f1014 	ldr	r1, [pc, #20]	; d170 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x58c>
    d158:	e59f0014 	ldr	r0, [pc, #20]	; d174 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x590>
    d15c:	eb004167 	bl	1d700 <assertion_failed>
    d160:	20980510 	.word	0x20980510
    d164:	20980508 	.word	0x20980508
    d168:	000003ff 	.word	0x000003ff
    d16c:	00000505 	.word	0x00000505
    d170:	0002cefc 	.word	0x0002cefc
    d174:	0002dbb4 	.word	0x0002dbb4
    d178:	0000078c 	.word	0x0000078c
    d17c:	000007dc 	.word	0x000007dc
    d180:	0002d124 	.word	0x0002d124
    d184:	0002d478 	.word	0x0002d478
    d188:	000003e3 	.word	0x000003e3
    d18c:	0002d898 	.word	0x0002d898
    d190:	000003e5 	.word	0x000003e5
    d194:	0002c8e4 	.word	0x0002c8e4
    d198:	00000414 	.word	0x00000414
    d19c:	0002d0ac 	.word	0x0002d0ac
    d1a0:	0000041e 	.word	0x0000041e

0000d1a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    d1a4:	e5d03095 	ldrb	r3, [r0, #149]	; 0x95
    d1a8:	e3530000 	cmp	r3, #0
    d1ac:	112fff1e 	bxne	lr
    d1b0:	eafffe8b 	b	cbe4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>

0000d1b4 <CDWHCIDevice::InterruptHandler()>:
    d1b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d1b8:	e3a04000 	mov	r4, #0
    d1bc:	e1a05000 	mov	r5, r0
    d1c0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    d1c4:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    d1c8:	e59f119c 	ldr	r1, [pc, #412]	; d36c <CDWHCIDevice::InterruptHandler()+0x1b8>
    d1cc:	e28d0004 	add	r0, sp, #4
    d1d0:	eb0007b6 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    d1d4:	e28d0004 	add	r0, sp, #4
    d1d8:	eb0007bd 	bl	f0d4 <CDWHCIRegister::Read()>
    d1dc:	e28d0004 	add	r0, sp, #4
    d1e0:	eb0007d0 	bl	f128 <CDWHCIRegister::Get() const>
    d1e4:	e3100402 	tst	r0, #33554432	; 0x2000000
    d1e8:	1a000013 	bne	d23c <CDWHCIDevice::InterruptHandler()+0x88>
    d1ec:	e28d0004 	add	r0, sp, #4
    d1f0:	eb0007cc 	bl	f128 <CDWHCIRegister::Get() const>
    d1f4:	e3100008 	tst	r0, #8
    d1f8:	0a000004 	beq	d210 <CDWHCIDevice::InterruptHandler()+0x5c>
    d1fc:	e5d53095 	ldrb	r3, [r5, #149]	; 0x95
    d200:	e3530000 	cmp	r3, #0
    d204:	1a000001 	bne	d210 <CDWHCIDevice::InterruptHandler()+0x5c>
    d208:	e1a00005 	mov	r0, r5
    d20c:	ebfffe13 	bl	ca60 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]>
    d210:	ebffeffd 	bl	920c <CUSBHostController::IsPlugAndPlay()>
    d214:	e3500000 	cmp	r0, #0
    d218:	1a00002f 	bne	d2dc <CDWHCIDevice::InterruptHandler()+0x128>
    d21c:	e28d0004 	add	r0, sp, #4
    d220:	eb0007b2 	bl	f0f0 <CDWHCIRegister::Write()>
    d224:	e3a03000 	mov	r3, #0
    d228:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    d22c:	e28d0004 	add	r0, sp, #4
    d230:	eb0007a6 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    d234:	e28dd02c 	add	sp, sp, #44	; 0x2c
    d238:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d23c:	e59f112c 	ldr	r1, [pc, #300]	; d370 <CDWHCIDevice::InterruptHandler()+0x1bc>
    d240:	e28d0010 	add	r0, sp, #16
    d244:	eb000799 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    d248:	e28d0010 	add	r0, sp, #16
    d24c:	eb0007a0 	bl	f0d4 <CDWHCIRegister::Read()>
    d250:	e28d0010 	add	r0, sp, #16
    d254:	eb0007a5 	bl	f0f0 <CDWHCIRegister::Write()>
    d258:	e5953018 	ldr	r3, [r5, #24]
    d25c:	e1530004 	cmp	r3, r4
    d260:	0a00001a 	beq	d2d0 <CDWHCIDevice::InterruptHandler()+0x11c>
    d264:	e3a06001 	mov	r6, #1
    d268:	e59f7104 	ldr	r7, [pc, #260]	; d374 <CDWHCIDevice::InterruptHandler()+0x1c0>
    d26c:	ea000004 	b	d284 <CDWHCIDevice::InterruptHandler()+0xd0>
    d270:	e5953018 	ldr	r3, [r5, #24]
    d274:	e2844001 	add	r4, r4, #1
    d278:	e1530004 	cmp	r3, r4
    d27c:	e1a06086 	lsl	r6, r6, #1
    d280:	9a000012 	bls	d2d0 <CDWHCIDevice::InterruptHandler()+0x11c>
    d284:	e28d0010 	add	r0, sp, #16
    d288:	eb0007a6 	bl	f128 <CDWHCIRegister::Get() const>
    d28c:	e1100006 	tst	r0, r6
    d290:	0afffff6 	beq	d270 <CDWHCIDevice::InterruptHandler()+0xbc>
    d294:	e3a02000 	mov	r2, #0
    d298:	e0871284 	add	r1, r7, r4, lsl #5
    d29c:	e28d001c 	add	r0, sp, #28
    d2a0:	eb000786 	bl	f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    d2a4:	e28d001c 	add	r0, sp, #28
    d2a8:	eb000790 	bl	f0f0 <CDWHCIRegister::Write()>
    d2ac:	e5d53095 	ldrb	r3, [r5, #149]	; 0x95
    d2b0:	e3530000 	cmp	r3, #0
    d2b4:	1a000002 	bne	d2c4 <CDWHCIDevice::InterruptHandler()+0x110>
    d2b8:	e1a01004 	mov	r1, r4
    d2bc:	e1a00005 	mov	r0, r5
    d2c0:	ebfffe47 	bl	cbe4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>
    d2c4:	e28d001c 	add	r0, sp, #28
    d2c8:	eb000780 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    d2cc:	eaffffe7 	b	d270 <CDWHCIDevice::InterruptHandler()+0xbc>
    d2d0:	e28d0010 	add	r0, sp, #16
    d2d4:	eb00077d 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    d2d8:	eaffffc3 	b	d1ec <CDWHCIDevice::InterruptHandler()+0x38>
    d2dc:	e28d0004 	add	r0, sp, #4
    d2e0:	eb000790 	bl	f128 <CDWHCIRegister::Get() const>
    d2e4:	e3100401 	tst	r0, #16777216	; 0x1000000
    d2e8:	1a000007 	bne	d30c <CDWHCIDevice::InterruptHandler()+0x158>
    d2ec:	e28d0004 	add	r0, sp, #4
    d2f0:	eb00078c 	bl	f128 <CDWHCIRegister::Get() const>
    d2f4:	e3100202 	tst	r0, #536870912	; 0x20000000
    d2f8:	0affffc7 	beq	d21c <CDWHCIDevice::InterruptHandler()+0x68>
    d2fc:	e1a00005 	mov	r0, r5
    d300:	e2851088 	add	r1, r5, #136	; 0x88
    d304:	ebfff01c 	bl	937c <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>
    d308:	eaffffc3 	b	d21c <CDWHCIDevice::InterruptHandler()+0x68>
    d30c:	e59f1064 	ldr	r1, [pc, #100]	; d378 <CDWHCIDevice::InterruptHandler()+0x1c4>
    d310:	e28d001c 	add	r0, sp, #28
    d314:	eb000765 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    d318:	e28d001c 	add	r0, sp, #28
    d31c:	eb00076c 	bl	f0d4 <CDWHCIRegister::Read()>
    d320:	e28d001c 	add	r0, sp, #28
    d324:	eb00077f 	bl	f128 <CDWHCIRegister::Get() const>
    d328:	e3100002 	tst	r0, #2
    d32c:	1a00000a 	bne	d35c <CDWHCIDevice::InterruptHandler()+0x1a8>
    d330:	e28d001c 	add	r0, sp, #28
    d334:	e3e01004 	mvn	r1, #4
    d338:	eb000799 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    d33c:	e3a0102a 	mov	r1, #42	; 0x2a
    d340:	e28d001c 	add	r0, sp, #28
    d344:	eb0007a4 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    d348:	e28d001c 	add	r0, sp, #28
    d34c:	eb000767 	bl	f0f0 <CDWHCIRegister::Write()>
    d350:	e28d001c 	add	r0, sp, #28
    d354:	eb00075d 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    d358:	eaffffe3 	b	d2ec <CDWHCIDevice::InterruptHandler()+0x138>
    d35c:	e1a00005 	mov	r0, r5
    d360:	e2851088 	add	r1, r5, #136	; 0x88
    d364:	ebfff004 	bl	937c <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>
    d368:	eafffff0 	b	d330 <CDWHCIDevice::InterruptHandler()+0x17c>
    d36c:	20980014 	.word	0x20980014
    d370:	20980414 	.word	0x20980414
    d374:	2098050c 	.word	0x2098050c
    d378:	20980440 	.word	0x20980440

0000d37c <CDWHCIDevice::InterruptStub(void*)>:
    d37c:	e3500000 	cmp	r0, #0
    d380:	0a000000 	beq	d388 <CDWHCIDevice::InterruptStub(void*)+0xc>
    d384:	eaffff8a 	b	d1b4 <CDWHCIDevice::InterruptHandler()>
    d388:	e92d4010 	push	{r4, lr}
    d38c:	e59f2008 	ldr	r2, [pc, #8]	; d39c <CDWHCIDevice::InterruptStub(void*)+0x20>
    d390:	e59f1008 	ldr	r1, [pc, #8]	; d3a0 <CDWHCIDevice::InterruptStub(void*)+0x24>
    d394:	e59f0008 	ldr	r0, [pc, #8]	; d3a4 <CDWHCIDevice::InterruptStub(void*)+0x28>
    d398:	eb0040d8 	bl	1d700 <assertion_failed>
    d39c:	00000578 	.word	0x00000578
    d3a0:	0002cefc 	.word	0x0002cefc
    d3a4:	0002c8c4 	.word	0x0002c8c4

0000d3a8 <CDWHCIDevice::AllocateWaitBlock()>:
    d3a8:	e92d4070 	push	{r4, r5, r6, lr}
    d3ac:	e1a05000 	mov	r5, r0
    d3b0:	e5900084 	ldr	r0, [r0, #132]	; 0x84
    d3b4:	e3500000 	cmp	r0, #0
    d3b8:	1a000014 	bne	d410 <CDWHCIDevice::AllocateWaitBlock()+0x68>
    d3bc:	e3a04000 	mov	r4, #0
    d3c0:	e3a03001 	mov	r3, #1
    d3c4:	e5952080 	ldr	r2, [r5, #128]	; 0x80
    d3c8:	e1120003 	tst	r2, r3
    d3cc:	0a000007 	beq	d3f0 <CDWHCIDevice::AllocateWaitBlock()+0x48>
    d3d0:	e2844001 	add	r4, r4, #1
    d3d4:	e3540010 	cmp	r4, #16
    d3d8:	e1a03083 	lsl	r3, r3, #1
    d3dc:	1afffff8 	bne	d3c4 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    d3e0:	e3500000 	cmp	r0, #0
    d3e4:	1a000006 	bne	d404 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    d3e8:	e1a00004 	mov	r0, r4
    d3ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    d3f0:	e5952080 	ldr	r2, [r5, #128]	; 0x80
    d3f4:	e3500000 	cmp	r0, #0
    d3f8:	e1823003 	orr	r3, r2, r3
    d3fc:	e5853080 	str	r3, [r5, #128]	; 0x80
    d400:	0afffff8 	beq	d3e8 <CDWHCIDevice::AllocateWaitBlock()+0x40>
    d404:	eb006cd0 	bl	2874c <LeaveCritical>
    d408:	e1a00004 	mov	r0, r4
    d40c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d410:	eb006ca3 	bl	286a4 <EnterCritical>
    d414:	e5950084 	ldr	r0, [r5, #132]	; 0x84
    d418:	eaffffe7 	b	d3bc <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000d41c <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    d41c:	e351000f 	cmp	r1, #15
    d420:	e92d4070 	push	{r4, r5, r6, lr}
    d424:	8a000012 	bhi	d474 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x58>
    d428:	e3a05001 	mov	r5, #1
    d42c:	e1a04000 	mov	r4, r0
    d430:	e5900084 	ldr	r0, [r0, #132]	; 0x84
    d434:	e1a05115 	lsl	r5, r5, r1
    d438:	e3500000 	cmp	r0, #0
    d43c:	1a00000a 	bne	d46c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x50>
    d440:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    d444:	e1130005 	tst	r3, r5
    d448:	0a00000d 	beq	d484 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x68>
    d44c:	e5941080 	ldr	r1, [r4, #128]	; 0x80
    d450:	e5943084 	ldr	r3, [r4, #132]	; 0x84
    d454:	e1c11005 	bic	r1, r1, r5
    d458:	e3530000 	cmp	r3, #0
    d45c:	e5841080 	str	r1, [r4, #128]	; 0x80
    d460:	08bd8070 	popeq	{r4, r5, r6, pc}
    d464:	e8bd4070 	pop	{r4, r5, r6, lr}
    d468:	ea006cb7 	b	2874c <LeaveCritical>
    d46c:	eb006c8c 	bl	286a4 <EnterCritical>
    d470:	eafffff2 	b	d440 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x24>
    d474:	e59f2018 	ldr	r2, [pc, #24]	; d494 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x78>
    d478:	e59f1018 	ldr	r1, [pc, #24]	; d498 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    d47c:	e59f0018 	ldr	r0, [pc, #24]	; d49c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x80>
    d480:	eb00409e 	bl	1d700 <assertion_failed>
    d484:	e59f2014 	ldr	r2, [pc, #20]	; d4a0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x84>
    d488:	e59f1008 	ldr	r1, [pc, #8]	; d498 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    d48c:	e59f0010 	ldr	r0, [pc, #16]	; d4a4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    d490:	eb00409a 	bl	1d700 <assertion_failed>
    d494:	000005fc 	.word	0x000005fc
    d498:	0002cefc 	.word	0x0002cefc
    d49c:	0002cf0c 	.word	0x0002cf0c
    d4a0:	00000601 	.word	0x00000601
    d4a4:	0002d148 	.word	0x0002d148

0000d4a8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    d4a8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    d4ac:	e24dd00c 	sub	sp, sp, #12
    d4b0:	e1a08001 	mov	r8, r1
    d4b4:	e1a05002 	mov	r5, r2
    d4b8:	e1a09003 	mov	r9, r3
    d4bc:	e1a07000 	mov	r7, r0
    d4c0:	ebffffb8 	bl	d3a8 <CDWHCIDevice::AllocateWaitBlock()>
    d4c4:	e350000f 	cmp	r0, #15
    d4c8:	8a000023 	bhi	d55c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    d4cc:	e3580000 	cmp	r8, #0
    d4d0:	0a00002c 	beq	d588 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xe0>
    d4d4:	e1a04000 	mov	r4, r0
    d4d8:	e1a03007 	mov	r3, r7
    d4dc:	e1a02000 	mov	r2, r0
    d4e0:	e59f10c0 	ldr	r1, [pc, #192]	; d5a8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x100>
    d4e4:	e1a00008 	mov	r0, r8
    d4e8:	e0876004 	add	r6, r7, r4
    d4ec:	ebfff4cb 	bl	a820 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    d4f0:	e5d63070 	ldrb	r3, [r6, #112]	; 0x70
    d4f4:	e3530000 	cmp	r3, #0
    d4f8:	1a000026 	bne	d598 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    d4fc:	e3a01001 	mov	r1, #1
    d500:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    d504:	e1a02005 	mov	r2, r5
    d508:	e58d3000 	str	r3, [sp]
    d50c:	e1a00007 	mov	r0, r7
    d510:	e5c61070 	strb	r1, [r6, #112]	; 0x70
    d514:	e1a03009 	mov	r3, r9
    d518:	e1a01008 	mov	r1, r8
    d51c:	ebfffb03 	bl	c130 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    d520:	e2505000 	subs	r5, r0, #0
    d524:	0a000010 	beq	d56c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xc4>
    d528:	e5d63070 	ldrb	r3, [r6, #112]	; 0x70
    d52c:	e3530000 	cmp	r3, #0
    d530:	1afffffc 	bne	d528 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x80>
    d534:	e1a01004 	mov	r1, r4
    d538:	e1a00007 	mov	r0, r7
    d53c:	ebffffb6 	bl	d41c <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    d540:	e1a00008 	mov	r0, r8
    d544:	ebfff476 	bl	a724 <CUSBRequest::GetStatus() const>
    d548:	e2505000 	subs	r5, r0, #0
    d54c:	13a05001 	movne	r5, #1
    d550:	e1a00005 	mov	r0, r5
    d554:	e28dd00c 	add	sp, sp, #12
    d558:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    d55c:	e3a05000 	mov	r5, #0
    d560:	e1a00005 	mov	r0, r5
    d564:	e28dd00c 	add	sp, sp, #12
    d568:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    d56c:	e1a00007 	mov	r0, r7
    d570:	e1a01004 	mov	r1, r4
    d574:	e5c65070 	strb	r5, [r6, #112]	; 0x70
    d578:	ebffffa7 	bl	d41c <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    d57c:	e1a00005 	mov	r0, r5
    d580:	e28dd00c 	add	sp, sp, #12
    d584:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    d588:	e59f201c 	ldr	r2, [pc, #28]	; d5ac <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    d58c:	e59f101c 	ldr	r1, [pc, #28]	; d5b0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    d590:	e59f001c 	ldr	r0, [pc, #28]	; d5b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    d594:	eb004059 	bl	1d700 <assertion_failed>
    d598:	e59f2018 	ldr	r2, [pc, #24]	; d5b8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x110>
    d59c:	e59f100c 	ldr	r1, [pc, #12]	; d5b0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    d5a0:	e59f0014 	ldr	r0, [pc, #20]	; d5bc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x114>
    d5a4:	eb004055 	bl	1d700 <assertion_failed>
    d5a8:	0000bb5c 	.word	0x0000bb5c
    d5ac:	000002b2 	.word	0x000002b2
    d5b0:	0002cefc 	.word	0x0002cefc
    d5b4:	0002c8e4 	.word	0x0002c8e4
    d5b8:	000002b5 	.word	0x000002b5
    d5bc:	0002d170 	.word	0x0002d170

0000d5c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    d5c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d5c4:	e5d0c095 	ldrb	ip, [r0, #149]	; 0x95
    d5c8:	e1a04001 	mov	r4, r1
    d5cc:	e21c10ff 	ands	r1, ip, #255	; 0xff
    d5d0:	e24dd00c 	sub	sp, sp, #12
    d5d4:	1a000022 	bne	d664 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    d5d8:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
    d5dc:	e3540000 	cmp	r4, #0
    d5e0:	0a000070 	beq	d7a8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1e8>
    d5e4:	e1a06000 	mov	r6, r0
    d5e8:	e1a00004 	mov	r0, r4
    d5ec:	e1a05002 	mov	r5, r2
    d5f0:	ebfff445 	bl	a70c <CUSBRequest::SetStatus(int)>
    d5f4:	e1a00004 	mov	r0, r4
    d5f8:	ebfff439 	bl	a6e4 <CUSBRequest::GetEndpoint() const>
    d5fc:	eb001272 	bl	11fcc <CUSBEndpoint::GetType() const>
    d600:	e3500000 	cmp	r0, #0
    d604:	1a000019 	bne	d670 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xb0>
    d608:	e3550000 	cmp	r5, #0
    d60c:	1a000069 	bne	d7b8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1f8>
    d610:	e1a00004 	mov	r0, r4
    d614:	ebfff45c 	bl	a78c <CUSBRequest::GetSetupData()>
    d618:	e3500000 	cmp	r0, #0
    d61c:	0a000069 	beq	d7c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x208>
    d620:	e1d030d0 	ldrsb	r3, [r0]
    d624:	e1a00004 	mov	r0, r4
    d628:	e3530000 	cmp	r3, #0
    d62c:	ba000028 	blt	d6d4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x114>
    d630:	ebfff478 	bl	a818 <CUSBRequest::GetBufLen() const>
    d634:	e2507000 	subs	r7, r0, #0
    d638:	1a000041 	bne	d744 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x184>
    d63c:	e1a03007 	mov	r3, r7
    d640:	e1a02007 	mov	r2, r7
    d644:	e1a01004 	mov	r1, r4
    d648:	e1a00006 	mov	r0, r6
    d64c:	e58d7000 	str	r7, [sp]
    d650:	ebffff94 	bl	d4a8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    d654:	e3500000 	cmp	r0, #0
    d658:	13a03001 	movne	r3, #1
    d65c:	158d7000 	strne	r7, [sp]
    d660:	1a000049 	bne	d78c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1cc>
    d664:	e3a00000 	mov	r0, #0
    d668:	e28dd00c 	add	sp, sp, #12
    d66c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d670:	e1a00004 	mov	r0, r4
    d674:	ebfff41a 	bl	a6e4 <CUSBRequest::GetEndpoint() const>
    d678:	eb001253 	bl	11fcc <CUSBEndpoint::GetType() const>
    d67c:	e3500001 	cmp	r0, #1
    d680:	1a000054 	bne	d7d8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x218>
    d684:	e1a00004 	mov	r0, r4
    d688:	ebfff462 	bl	a818 <CUSBRequest::GetBufLen() const>
    d68c:	e3500000 	cmp	r0, #0
    d690:	0a000059 	beq	d7fc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x23c>
    d694:	e1a00004 	mov	r0, r4
    d698:	ebfff411 	bl	a6e4 <CUSBRequest::GetEndpoint() const>
    d69c:	eb00124c 	bl	11fd4 <CUSBEndpoint::IsDirectionIn() const>
    d6a0:	e1a01004 	mov	r1, r4
    d6a4:	e1a02000 	mov	r2, r0
    d6a8:	e3a03000 	mov	r3, #0
    d6ac:	e1a00006 	mov	r0, r6
    d6b0:	e58d5000 	str	r5, [sp]
    d6b4:	ebffff7b 	bl	d4a8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    d6b8:	e3500000 	cmp	r0, #0
    d6bc:	0affffe8 	beq	d664 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    d6c0:	e3a03000 	mov	r3, #0
    d6c4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    d6c8:	e3a00001 	mov	r0, #1
    d6cc:	e28dd00c 	add	sp, sp, #12
    d6d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d6d4:	ebfff44f 	bl	a818 <CUSBRequest::GetBufLen() const>
    d6d8:	e3500000 	cmp	r0, #0
    d6dc:	0a00004a 	beq	d80c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24c>
    d6e0:	e1a03005 	mov	r3, r5
    d6e4:	e1a02005 	mov	r2, r5
    d6e8:	e1a01004 	mov	r1, r4
    d6ec:	e1a00006 	mov	r0, r6
    d6f0:	e58d5000 	str	r5, [sp]
    d6f4:	ebffff6b 	bl	d4a8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    d6f8:	e3500000 	cmp	r0, #0
    d6fc:	0affffd8 	beq	d664 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    d700:	e1a03005 	mov	r3, r5
    d704:	e3a02001 	mov	r2, #1
    d708:	e1a01004 	mov	r1, r4
    d70c:	e1a00006 	mov	r0, r6
    d710:	e58d5000 	str	r5, [sp]
    d714:	ebffff63 	bl	d4a8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    d718:	e3500000 	cmp	r0, #0
    d71c:	0affffd0 	beq	d664 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    d720:	e1a02005 	mov	r2, r5
    d724:	e1a01004 	mov	r1, r4
    d728:	e1a00006 	mov	r0, r6
    d72c:	e3a03001 	mov	r3, #1
    d730:	e58d5000 	str	r5, [sp]
    d734:	ebffff5b 	bl	d4a8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    d738:	e3500000 	cmp	r0, #0
    d73c:	1affffdf 	bne	d6c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x100>
    d740:	eaffffc7 	b	d664 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    d744:	e1a03005 	mov	r3, r5
    d748:	e1a02005 	mov	r2, r5
    d74c:	e1a01004 	mov	r1, r4
    d750:	e1a00006 	mov	r0, r6
    d754:	e58d5000 	str	r5, [sp]
    d758:	ebffff52 	bl	d4a8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    d75c:	e3500000 	cmp	r0, #0
    d760:	0affffbf 	beq	d664 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    d764:	e1a03005 	mov	r3, r5
    d768:	e1a02005 	mov	r2, r5
    d76c:	e1a01004 	mov	r1, r4
    d770:	e1a00006 	mov	r0, r6
    d774:	e58d5000 	str	r5, [sp]
    d778:	ebffff4a 	bl	d4a8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    d77c:	e3500000 	cmp	r0, #0
    d780:	0affffb7 	beq	d664 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    d784:	e3a03001 	mov	r3, #1
    d788:	e58d5000 	str	r5, [sp]
    d78c:	e1a01004 	mov	r1, r4
    d790:	e1a00006 	mov	r0, r6
    d794:	e1a02003 	mov	r2, r3
    d798:	ebffff42 	bl	d4a8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    d79c:	e3500000 	cmp	r0, #0
    d7a0:	1affffc6 	bne	d6c0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x100>
    d7a4:	eaffffae 	b	d664 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    d7a8:	e3a020dc 	mov	r2, #220	; 0xdc
    d7ac:	e59f1068 	ldr	r1, [pc, #104]	; d81c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    d7b0:	e59f0068 	ldr	r0, [pc, #104]	; d820 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x260>
    d7b4:	eb003fd1 	bl	1d700 <assertion_failed>
    d7b8:	e3a020e2 	mov	r2, #226	; 0xe2
    d7bc:	e59f1058 	ldr	r1, [pc, #88]	; d81c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    d7c0:	e59f005c 	ldr	r0, [pc, #92]	; d824 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x264>
    d7c4:	eb003fcd 	bl	1d700 <assertion_failed>
    d7c8:	e3a020e5 	mov	r2, #229	; 0xe5
    d7cc:	e59f1048 	ldr	r1, [pc, #72]	; d81c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    d7d0:	e59f0050 	ldr	r0, [pc, #80]	; d828 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x268>
    d7d4:	eb003fc9 	bl	1d700 <assertion_failed>
    d7d8:	e1a00004 	mov	r0, r4
    d7dc:	ebfff3c0 	bl	a6e4 <CUSBRequest::GetEndpoint() const>
    d7e0:	eb0011f9 	bl	11fcc <CUSBEndpoint::GetType() const>
    d7e4:	e3500002 	cmp	r0, #2
    d7e8:	0affffa5 	beq	d684 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xc4>
    d7ec:	e59f2038 	ldr	r2, [pc, #56]	; d82c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    d7f0:	e59f1024 	ldr	r1, [pc, #36]	; d81c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    d7f4:	e59f0034 	ldr	r0, [pc, #52]	; d830 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x270>
    d7f8:	eb003fc0 	bl	1d700 <assertion_failed>
    d7fc:	e59f2030 	ldr	r2, [pc, #48]	; d834 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x274>
    d800:	e59f1014 	ldr	r1, [pc, #20]	; d81c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    d804:	e59f002c 	ldr	r0, [pc, #44]	; d838 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x278>
    d808:	eb003fbc 	bl	1d700 <assertion_failed>
    d80c:	e3a020e9 	mov	r2, #233	; 0xe9
    d810:	e59f1004 	ldr	r1, [pc, #4]	; d81c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    d814:	e59f001c 	ldr	r0, [pc, #28]	; d838 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x278>
    d818:	eb003fb8 	bl	1d700 <assertion_failed>
    d81c:	0002cefc 	.word	0x0002cefc
    d820:	0002c8e4 	.word	0x0002c8e4
    d824:	0002d188 	.word	0x0002d188
    d828:	0002d1a8 	.word	0x0002d1a8
    d82c:	00000109 	.word	0x00000109
    d830:	0002cf78 	.word	0x0002cf78
    d834:	0000010b 	.word	0x0000010b
    d838:	0002cf60 	.word	0x0002cf60

0000d83c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    d83c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d840:	e2515000 	subs	r5, r1, #0
    d844:	e59d4020 	ldr	r4, [sp, #32]
    d848:	0a00001e 	beq	d8c8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x8c>
    d84c:	e3520000 	cmp	r2, #0
    d850:	e1a06002 	mov	r6, r2
    d854:	0a00001f 	beq	d8d8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x9c>
    d858:	e3540000 	cmp	r4, #0
    d85c:	0a000021 	beq	d8e8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xac>
    d860:	e1a07000 	mov	r7, r0
    d864:	e1a08003 	mov	r8, r3
    d868:	e2239001 	eor	r9, r3, #1
    d86c:	ea000003 	b	d880 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x44>
    d870:	e3a00001 	mov	r0, #1
    d874:	eb00637a 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
    d878:	e2544001 	subs	r4, r4, #1
    d87c:	0a00000f 	beq	d8c0 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x84>
    d880:	e1a00005 	mov	r0, r5
    d884:	eb000612 	bl	f0d4 <CDWHCIRegister::Read()>
    d888:	e1160000 	tst	r6, r0
    d88c:	11a0c009 	movne	ip, r9
    d890:	01a0c008 	moveq	ip, r8
    d894:	e35c0000 	cmp	ip, #0
    d898:	0a000006 	beq	d8b8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x7c>
    d89c:	e5973014 	ldr	r3, [r7, #20]
    d8a0:	e3530000 	cmp	r3, #0
    d8a4:	1afffff1 	bne	d870 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x34>
    d8a8:	e59f2048 	ldr	r2, [pc, #72]	; d8f8 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xbc>
    d8ac:	e59f1048 	ldr	r1, [pc, #72]	; d8fc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    d8b0:	e59f0048 	ldr	r0, [pc, #72]	; d900 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    d8b4:	eb003f91 	bl	1d700 <assertion_failed>
    d8b8:	e3a00001 	mov	r0, #1
    d8bc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d8c0:	e1a00004 	mov	r0, r4
    d8c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d8c8:	e59f2034 	ldr	r2, [pc, #52]	; d904 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc8>
    d8cc:	e59f1028 	ldr	r1, [pc, #40]	; d8fc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    d8d0:	e59f0030 	ldr	r0, [pc, #48]	; d908 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xcc>
    d8d4:	eb003f89 	bl	1d700 <assertion_failed>
    d8d8:	e59f202c 	ldr	r2, [pc, #44]	; d90c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd0>
    d8dc:	e59f1018 	ldr	r1, [pc, #24]	; d8fc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    d8e0:	e59f0028 	ldr	r0, [pc, #40]	; d910 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd4>
    d8e4:	eb003f85 	bl	1d700 <assertion_failed>
    d8e8:	e59f2024 	ldr	r2, [pc, #36]	; d914 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd8>
    d8ec:	e59f1008 	ldr	r1, [pc, #8]	; d8fc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    d8f0:	e59f0020 	ldr	r0, [pc, #32]	; d918 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xdc>
    d8f4:	eb003f81 	bl	1d700 <assertion_failed>
    d8f8:	00000612 	.word	0x00000612
    d8fc:	0002cefc 	.word	0x0002cefc
    d900:	0002cf50 	.word	0x0002cf50
    d904:	0000060c 	.word	0x0000060c
    d908:	0002d1b4 	.word	0x0002d1b4
    d90c:	0000060d 	.word	0x0000060d
    d910:	0002d1c4 	.word	0x0002d1c4
    d914:	0000060e 	.word	0x0000060e
    d918:	0002d1d0 	.word	0x0002d1d0

0000d91c <CDWHCIDevice::EnableRootPort()>:
    d91c:	e92d4030 	push	{r4, r5, lr}
    d920:	e24dd01c 	sub	sp, sp, #28
    d924:	e1a04000 	mov	r4, r0
    d928:	eb004636 	bl	1f208 <CKernelOptions::Get()>
    d92c:	e3500000 	cmp	r0, #0
    d930:	0a00002c 	beq	d9e8 <CDWHCIDevice::EnableRootPort()+0xcc>
    d934:	eb004626 	bl	1f1d4 <CKernelOptions::GetUSBPowerDelay() const>
    d938:	e2505000 	subs	r5, r0, #0
    d93c:	0a000029 	beq	d9e8 <CDWHCIDevice::EnableRootPort()+0xcc>
    d940:	e59f10a8 	ldr	r1, [pc, #168]	; d9f0 <CDWHCIDevice::EnableRootPort()+0xd4>
    d944:	e28d000c 	add	r0, sp, #12
    d948:	eb0005d8 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    d94c:	e3a03001 	mov	r3, #1
    d950:	e1a00004 	mov	r0, r4
    d954:	e1a02003 	mov	r2, r3
    d958:	e58d5000 	str	r5, [sp]
    d95c:	e28d100c 	add	r1, sp, #12
    d960:	ebffffb5 	bl	d83c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    d964:	e2504000 	subs	r4, r0, #0
    d968:	0a000019 	beq	d9d4 <CDWHCIDevice::EnableRootPort()+0xb8>
    d96c:	e3a00064 	mov	r0, #100	; 0x64
    d970:	eb00633b 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
    d974:	e28d000c 	add	r0, sp, #12
    d978:	eb0005d5 	bl	f0d4 <CDWHCIRegister::Read()>
    d97c:	e3e0102e 	mvn	r1, #46	; 0x2e
    d980:	e28d000c 	add	r0, sp, #12
    d984:	eb000606 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    d988:	e3a01c01 	mov	r1, #256	; 0x100
    d98c:	e28d000c 	add	r0, sp, #12
    d990:	eb000611 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    d994:	e28d000c 	add	r0, sp, #12
    d998:	eb0005d4 	bl	f0f0 <CDWHCIRegister::Write()>
    d99c:	e3a00032 	mov	r0, #50	; 0x32
    d9a0:	eb00632f 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
    d9a4:	e28d000c 	add	r0, sp, #12
    d9a8:	eb0005c9 	bl	f0d4 <CDWHCIRegister::Read()>
    d9ac:	e3e0102e 	mvn	r1, #46	; 0x2e
    d9b0:	e28d000c 	add	r0, sp, #12
    d9b4:	eb0005fa 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    d9b8:	e3e01c01 	mvn	r1, #256	; 0x100
    d9bc:	e28d000c 	add	r0, sp, #12
    d9c0:	eb0005f7 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    d9c4:	e28d000c 	add	r0, sp, #12
    d9c8:	eb0005c8 	bl	f0f0 <CDWHCIRegister::Write()>
    d9cc:	e3a00014 	mov	r0, #20
    d9d0:	eb006323 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
    d9d4:	e28d000c 	add	r0, sp, #12
    d9d8:	eb0005bc 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    d9dc:	e1a00004 	mov	r0, r4
    d9e0:	e28dd01c 	add	sp, sp, #28
    d9e4:	e8bd8030 	pop	{r4, r5, pc}
    d9e8:	e59f5004 	ldr	r5, [pc, #4]	; d9f4 <CDWHCIDevice::EnableRootPort()+0xd8>
    d9ec:	eaffffd3 	b	d940 <CDWHCIDevice::EnableRootPort()+0x24>
    d9f0:	20980440 	.word	0x20980440
    d9f4:	000001fe 	.word	0x000001fe

0000d9f8 <CDWHCIDevice::Reset()>:
    d9f8:	e92d4030 	push	{r4, r5, lr}
    d9fc:	e1a04000 	mov	r4, r0
    da00:	e3a05064 	mov	r5, #100	; 0x64
    da04:	e24dd01c 	sub	sp, sp, #28
    da08:	e3a02000 	mov	r2, #0
    da0c:	e59f1080 	ldr	r1, [pc, #128]	; da94 <CDWHCIDevice::Reset()+0x9c>
    da10:	e28d000c 	add	r0, sp, #12
    da14:	eb0005a9 	bl	f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    da18:	e1a00004 	mov	r0, r4
    da1c:	e3a03001 	mov	r3, #1
    da20:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    da24:	e28d100c 	add	r1, sp, #12
    da28:	e58d5000 	str	r5, [sp]
    da2c:	ebffff82 	bl	d83c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    da30:	e3500000 	cmp	r0, #0
    da34:	1a000005 	bne	da50 <CDWHCIDevice::Reset()+0x58>
    da38:	e3a04000 	mov	r4, #0
    da3c:	e28d000c 	add	r0, sp, #12
    da40:	eb0005a2 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    da44:	e1a00004 	mov	r0, r4
    da48:	e28dd01c 	add	sp, sp, #28
    da4c:	e8bd8030 	pop	{r4, r5, pc}
    da50:	e3a01001 	mov	r1, #1
    da54:	e28d000c 	add	r0, sp, #12
    da58:	eb0005df 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    da5c:	e28d000c 	add	r0, sp, #12
    da60:	eb0005a2 	bl	f0f0 <CDWHCIRegister::Write()>
    da64:	e3a0300a 	mov	r3, #10
    da68:	e1a00004 	mov	r0, r4
    da6c:	e58d3000 	str	r3, [sp]
    da70:	e3a02001 	mov	r2, #1
    da74:	e3a03000 	mov	r3, #0
    da78:	e28d100c 	add	r1, sp, #12
    da7c:	ebffff6e 	bl	d83c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    da80:	e2504000 	subs	r4, r0, #0
    da84:	0affffeb 	beq	da38 <CDWHCIDevice::Reset()+0x40>
    da88:	e1a00005 	mov	r0, r5
    da8c:	eb0062f4 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
    da90:	eaffffe9 	b	da3c <CDWHCIDevice::Reset()+0x44>
    da94:	20980010 	.word	0x20980010

0000da98 <CDWHCIDevice::InitCore()>:
    da98:	e92d4030 	push	{r4, r5, lr}
    da9c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    daa0:	e59f1234 	ldr	r1, [pc, #564]	; dcdc <CDWHCIDevice::InitCore()+0x244>
    daa4:	e1a04000 	mov	r4, r0
    daa8:	e28d0004 	add	r0, sp, #4
    daac:	eb00057f 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    dab0:	e28d0004 	add	r0, sp, #4
    dab4:	eb000586 	bl	f0d4 <CDWHCIRegister::Read()>
    dab8:	eb0045d2 	bl	1f208 <CKernelOptions::Get()>
    dabc:	eb0045c6 	bl	1f1dc <CKernelOptions::GetUSBFullSpeed() const>
    dac0:	e3500000 	cmp	r0, #0
    dac4:	1a000074 	bne	dc9c <CDWHCIDevice::InitCore()+0x204>
    dac8:	e3e01601 	mvn	r1, #1048576	; 0x100000
    dacc:	e28d0004 	add	r0, sp, #4
    dad0:	eb0005b3 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    dad4:	e3e01501 	mvn	r1, #4194304	; 0x400000
    dad8:	e28d0004 	add	r0, sp, #4
    dadc:	eb0005b0 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    dae0:	e28d0004 	add	r0, sp, #4
    dae4:	eb000581 	bl	f0f0 <CDWHCIRegister::Write()>
    dae8:	e1a00004 	mov	r0, r4
    daec:	ebffffc1 	bl	d9f8 <CDWHCIDevice::Reset()>
    daf0:	e2505000 	subs	r5, r0, #0
    daf4:	0a000062 	beq	dc84 <CDWHCIDevice::InitCore()+0x1ec>
    daf8:	e28d0004 	add	r0, sp, #4
    dafc:	eb000574 	bl	f0d4 <CDWHCIRegister::Read()>
    db00:	e3e01010 	mvn	r1, #16
    db04:	e28d0004 	add	r0, sp, #4
    db08:	eb0005a5 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    db0c:	e3e01008 	mvn	r1, #8
    db10:	e28d0004 	add	r0, sp, #4
    db14:	eb0005a2 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    db18:	e28d0004 	add	r0, sp, #4
    db1c:	eb000573 	bl	f0f0 <CDWHCIRegister::Write()>
    db20:	e59f11b8 	ldr	r1, [pc, #440]	; dce0 <CDWHCIDevice::InitCore()+0x248>
    db24:	e28d0010 	add	r0, sp, #16
    db28:	eb000560 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    db2c:	e28d0010 	add	r0, sp, #16
    db30:	eb000567 	bl	f0d4 <CDWHCIRegister::Read()>
    db34:	e28d0010 	add	r0, sp, #16
    db38:	eb00057a 	bl	f128 <CDWHCIRegister::Get() const>
    db3c:	e1a001a0 	lsr	r0, r0, #3
    db40:	e2000003 	and	r0, r0, #3
    db44:	e3500002 	cmp	r0, #2
    db48:	1a00005b 	bne	dcbc <CDWHCIDevice::InitCore()+0x224>
    db4c:	e28d0004 	add	r0, sp, #4
    db50:	eb00055f 	bl	f0d4 <CDWHCIRegister::Read()>
    db54:	e28d0010 	add	r0, sp, #16
    db58:	eb000572 	bl	f128 <CDWHCIRegister::Get() const>
    db5c:	e1a00320 	lsr	r0, r0, #6
    db60:	e2000003 	and	r0, r0, #3
    db64:	e3500002 	cmp	r0, #2
    db68:	0a000038 	beq	dc50 <CDWHCIDevice::InitCore()+0x1b8>
    db6c:	e3e01802 	mvn	r1, #131072	; 0x20000
    db70:	e28d0004 	add	r0, sp, #4
    db74:	eb00058a 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    db78:	e3e01702 	mvn	r1, #524288	; 0x80000
    db7c:	e28d0004 	add	r0, sp, #4
    db80:	eb000587 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    db84:	e28d0004 	add	r0, sp, #4
    db88:	eb000558 	bl	f0f0 <CDWHCIRegister::Write()>
    db8c:	e5943018 	ldr	r3, [r4, #24]
    db90:	e3530000 	cmp	r3, #0
    db94:	1a00004c 	bne	dccc <CDWHCIDevice::InitCore()+0x234>
    db98:	e28d0010 	add	r0, sp, #16
    db9c:	eb000561 	bl	f128 <CDWHCIRegister::Get() const>
    dba0:	e1a00720 	lsr	r0, r0, #14
    dba4:	e200000f 	and	r0, r0, #15
    dba8:	e2403003 	sub	r3, r0, #3
    dbac:	e353000c 	cmp	r3, #12
    dbb0:	e2800001 	add	r0, r0, #1
    dbb4:	e5840018 	str	r0, [r4, #24]
    dbb8:	8a00003b 	bhi	dcac <CDWHCIDevice::InitCore()+0x214>
    dbbc:	e59f1120 	ldr	r1, [pc, #288]	; dce4 <CDWHCIDevice::InitCore()+0x24c>
    dbc0:	e28d001c 	add	r0, sp, #28
    dbc4:	eb000539 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    dbc8:	e28d001c 	add	r0, sp, #28
    dbcc:	eb000540 	bl	f0d4 <CDWHCIRegister::Read()>
    dbd0:	e3a01020 	mov	r1, #32
    dbd4:	e28d001c 	add	r0, sp, #28
    dbd8:	eb00057f 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    dbdc:	e3a01010 	mov	r1, #16
    dbe0:	e28d001c 	add	r0, sp, #28
    dbe4:	eb00057c 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    dbe8:	e3e01006 	mvn	r1, #6
    dbec:	e28d001c 	add	r0, sp, #28
    dbf0:	eb00056b 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    dbf4:	e28d001c 	add	r0, sp, #28
    dbf8:	eb00053c 	bl	f0f0 <CDWHCIRegister::Write()>
    dbfc:	e28d0004 	add	r0, sp, #4
    dc00:	eb000533 	bl	f0d4 <CDWHCIRegister::Read()>
    dc04:	e3e01c02 	mvn	r1, #512	; 0x200
    dc08:	e28d0004 	add	r0, sp, #4
    dc0c:	eb000564 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    dc10:	e3e01c01 	mvn	r1, #256	; 0x100
    dc14:	e28d0004 	add	r0, sp, #4
    dc18:	eb000561 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    dc1c:	e28d0004 	add	r0, sp, #4
    dc20:	eb000532 	bl	f0f0 <CDWHCIRegister::Write()>
    dc24:	e1a00004 	mov	r0, r4
    dc28:	ebfff8aa 	bl	bed8 <CDWHCIDevice::EnableCommonInterrupts()>
    dc2c:	e28d001c 	add	r0, sp, #28
    dc30:	eb000526 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    dc34:	e28d0010 	add	r0, sp, #16
    dc38:	eb000524 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    dc3c:	e28d0004 	add	r0, sp, #4
    dc40:	eb000522 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    dc44:	e1a00005 	mov	r0, r5
    dc48:	e28dd02c 	add	sp, sp, #44	; 0x2c
    dc4c:	e8bd8030 	pop	{r4, r5, pc}
    dc50:	e28d0010 	add	r0, sp, #16
    dc54:	eb000533 	bl	f128 <CDWHCIRegister::Get() const>
    dc58:	e1a00420 	lsr	r0, r0, #8
    dc5c:	e2000003 	and	r0, r0, #3
    dc60:	e3500001 	cmp	r0, #1
    dc64:	1affffc0 	bne	db6c <CDWHCIDevice::InitCore()+0xd4>
    dc68:	e28d0004 	add	r0, sp, #4
    dc6c:	e3a01802 	mov	r1, #131072	; 0x20000
    dc70:	eb000559 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    dc74:	e3a01702 	mov	r1, #524288	; 0x80000
    dc78:	e28d0004 	add	r0, sp, #4
    dc7c:	eb000556 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    dc80:	eaffffbf 	b	db84 <CDWHCIDevice::InitCore()+0xec>
    dc84:	eb00479d 	bl	1fb00 <CLogger::Get()>
    dc88:	e3a02001 	mov	r2, #1
    dc8c:	e59f3054 	ldr	r3, [pc, #84]	; dce8 <CDWHCIDevice::InitCore()+0x250>
    dc90:	e59f1054 	ldr	r1, [pc, #84]	; dcec <CDWHCIDevice::InitCore()+0x254>
    dc94:	eb0046db 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    dc98:	eaffffe7 	b	dc3c <CDWHCIDevice::InitCore()+0x1a4>
    dc9c:	e3a01040 	mov	r1, #64	; 0x40
    dca0:	e28d0004 	add	r0, sp, #4
    dca4:	eb00054c 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    dca8:	eaffff86 	b	dac8 <CDWHCIDevice::InitCore()+0x30>
    dcac:	e59f203c 	ldr	r2, [pc, #60]	; dcf0 <CDWHCIDevice::InitCore()+0x258>
    dcb0:	e59f103c 	ldr	r1, [pc, #60]	; dcf4 <CDWHCIDevice::InitCore()+0x25c>
    dcb4:	e59f003c 	ldr	r0, [pc, #60]	; dcf8 <CDWHCIDevice::InitCore()+0x260>
    dcb8:	eb003e90 	bl	1d700 <assertion_failed>
    dcbc:	e3a02f65 	mov	r2, #404	; 0x194
    dcc0:	e59f102c 	ldr	r1, [pc, #44]	; dcf4 <CDWHCIDevice::InitCore()+0x25c>
    dcc4:	e59f0030 	ldr	r0, [pc, #48]	; dcfc <CDWHCIDevice::InitCore()+0x264>
    dcc8:	eb003e8c 	bl	1d700 <assertion_failed>
    dccc:	e3a02f69 	mov	r2, #420	; 0x1a4
    dcd0:	e59f101c 	ldr	r1, [pc, #28]	; dcf4 <CDWHCIDevice::InitCore()+0x25c>
    dcd4:	e59f0024 	ldr	r0, [pc, #36]	; dd00 <CDWHCIDevice::InitCore()+0x268>
    dcd8:	eb003e88 	bl	1d700 <assertion_failed>
    dcdc:	2098000c 	.word	0x2098000c
    dce0:	20980048 	.word	0x20980048
    dce4:	20980008 	.word	0x20980008
    dce8:	0002d1e0 	.word	0x0002d1e0
    dcec:	0002d478 	.word	0x0002d478
    dcf0:	000001a6 	.word	0x000001a6
    dcf4:	0002cefc 	.word	0x0002cefc
    dcf8:	0002d23c 	.word	0x0002d23c
    dcfc:	0002d1f0 	.word	0x0002d1f0
    dd00:	0002d228 	.word	0x0002d228

0000dd04 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    dd04:	e92d4030 	push	{r4, r5, lr}
    dd08:	e1a05001 	mov	r5, r1
    dd0c:	e24dd01c 	sub	sp, sp, #28
    dd10:	e3a02000 	mov	r2, #0
    dd14:	e1a04000 	mov	r4, r0
    dd18:	e59f106c 	ldr	r1, [pc, #108]	; dd8c <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x88>
    dd1c:	e28d000c 	add	r0, sp, #12
    dd20:	eb0004e6 	bl	f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    dd24:	e3a01020 	mov	r1, #32
    dd28:	e28d000c 	add	r0, sp, #12
    dd2c:	eb00052a 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    dd30:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    dd34:	e28d000c 	add	r0, sp, #12
    dd38:	eb000519 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    dd3c:	e1a01305 	lsl	r1, r5, #6
    dd40:	e28d000c 	add	r0, sp, #12
    dd44:	eb000524 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    dd48:	e28d000c 	add	r0, sp, #12
    dd4c:	eb0004e7 	bl	f0f0 <CDWHCIRegister::Write()>
    dd50:	e3a0300a 	mov	r3, #10
    dd54:	e1a00004 	mov	r0, r4
    dd58:	e58d3000 	str	r3, [sp]
    dd5c:	e3a02020 	mov	r2, #32
    dd60:	e3a03000 	mov	r3, #0
    dd64:	e28d100c 	add	r1, sp, #12
    dd68:	ebfffeb3 	bl	d83c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    dd6c:	e3500000 	cmp	r0, #0
    dd70:	0a000001 	beq	dd7c <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x78>
    dd74:	e3a00001 	mov	r0, #1
    dd78:	eb006240 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
    dd7c:	e28d000c 	add	r0, sp, #12
    dd80:	eb0004d2 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    dd84:	e28dd01c 	add	sp, sp, #28
    dd88:	e8bd8030 	pop	{r4, r5, pc}
    dd8c:	20980010 	.word	0x20980010

0000dd90 <CDWHCIDevice::FlushRxFIFO()>:
    dd90:	e92d4010 	push	{r4, lr}
    dd94:	e24dd018 	sub	sp, sp, #24
    dd98:	e3a02000 	mov	r2, #0
    dd9c:	e1a04000 	mov	r4, r0
    dda0:	e59f1054 	ldr	r1, [pc, #84]	; ddfc <CDWHCIDevice::FlushRxFIFO()+0x6c>
    dda4:	e28d000c 	add	r0, sp, #12
    dda8:	eb0004c4 	bl	f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    ddac:	e3a01010 	mov	r1, #16
    ddb0:	e28d000c 	add	r0, sp, #12
    ddb4:	eb000508 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    ddb8:	e28d000c 	add	r0, sp, #12
    ddbc:	eb0004cb 	bl	f0f0 <CDWHCIRegister::Write()>
    ddc0:	e3a0300a 	mov	r3, #10
    ddc4:	e1a00004 	mov	r0, r4
    ddc8:	e58d3000 	str	r3, [sp]
    ddcc:	e3a02010 	mov	r2, #16
    ddd0:	e3a03000 	mov	r3, #0
    ddd4:	e28d100c 	add	r1, sp, #12
    ddd8:	ebfffe97 	bl	d83c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    dddc:	e3500000 	cmp	r0, #0
    dde0:	0a000001 	beq	ddec <CDWHCIDevice::FlushRxFIFO()+0x5c>
    dde4:	e3a00001 	mov	r0, #1
    dde8:	eb006224 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
    ddec:	e28d000c 	add	r0, sp, #12
    ddf0:	eb0004b6 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    ddf4:	e28dd018 	add	sp, sp, #24
    ddf8:	e8bd8010 	pop	{r4, pc}
    ddfc:	20980010 	.word	0x20980010

0000de00 <CDWHCIDevice::InitHost()>:
    de00:	e92d4030 	push	{r4, r5, lr}
    de04:	e24dd064 	sub	sp, sp, #100	; 0x64
    de08:	e3a02000 	mov	r2, #0
    de0c:	e59f11d4 	ldr	r1, [pc, #468]	; dfe8 <CDWHCIDevice::InitHost()+0x1e8>
    de10:	e1a04000 	mov	r4, r0
    de14:	e1a0000d 	mov	r0, sp
    de18:	eb0004a8 	bl	f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    de1c:	e1a0000d 	mov	r0, sp
    de20:	eb0004b2 	bl	f0f0 <CDWHCIRegister::Write()>
    de24:	e59f11c0 	ldr	r1, [pc, #448]	; dfec <CDWHCIDevice::InitHost()+0x1ec>
    de28:	e28d000c 	add	r0, sp, #12
    de2c:	eb00049f 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    de30:	e28d000c 	add	r0, sp, #12
    de34:	eb0004a6 	bl	f0d4 <CDWHCIRegister::Read()>
    de38:	e3e01003 	mvn	r1, #3
    de3c:	e28d000c 	add	r0, sp, #12
    de40:	eb0004d7 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    de44:	e59f11a4 	ldr	r1, [pc, #420]	; dff0 <CDWHCIDevice::InitHost()+0x1f0>
    de48:	e28d0018 	add	r0, sp, #24
    de4c:	eb000497 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    de50:	e59f119c 	ldr	r1, [pc, #412]	; dff4 <CDWHCIDevice::InitHost()+0x1f4>
    de54:	e28d0024 	add	r0, sp, #36	; 0x24
    de58:	eb000494 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    de5c:	e28d0018 	add	r0, sp, #24
    de60:	eb00049b 	bl	f0d4 <CDWHCIRegister::Read()>
    de64:	e1a00320 	lsr	r0, r0, #6
    de68:	e2000003 	and	r0, r0, #3
    de6c:	e3500002 	cmp	r0, #2
    de70:	0a000048 	beq	df98 <CDWHCIDevice::InitHost()+0x198>
    de74:	e3a01000 	mov	r1, #0
    de78:	e28d000c 	add	r0, sp, #12
    de7c:	eb0004d6 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    de80:	e28d000c 	add	r0, sp, #12
    de84:	eb000499 	bl	f0f0 <CDWHCIRegister::Write()>
    de88:	e3a02b01 	mov	r2, #1024	; 0x400
    de8c:	e59f1164 	ldr	r1, [pc, #356]	; dff8 <CDWHCIDevice::InitHost()+0x1f8>
    de90:	e28d0030 	add	r0, sp, #48	; 0x30
    de94:	eb000489 	bl	f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    de98:	e28d0030 	add	r0, sp, #48	; 0x30
    de9c:	eb000493 	bl	f0f0 <CDWHCIRegister::Write()>
    dea0:	e3a02000 	mov	r2, #0
    dea4:	e59f1150 	ldr	r1, [pc, #336]	; dffc <CDWHCIDevice::InitHost()+0x1fc>
    dea8:	e28d003c 	add	r0, sp, #60	; 0x3c
    deac:	eb000483 	bl	f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    deb0:	e3a01b01 	mov	r1, #1024	; 0x400
    deb4:	e28d003c 	add	r0, sp, #60	; 0x3c
    deb8:	eb0004c7 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    debc:	e3a01301 	mov	r1, #67108864	; 0x4000000
    dec0:	e28d003c 	add	r0, sp, #60	; 0x3c
    dec4:	eb0004c4 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    dec8:	e28d003c 	add	r0, sp, #60	; 0x3c
    decc:	eb000487 	bl	f0f0 <CDWHCIRegister::Write()>
    ded0:	e3a02000 	mov	r2, #0
    ded4:	e59f1124 	ldr	r1, [pc, #292]	; e000 <CDWHCIDevice::InitHost()+0x200>
    ded8:	e28d0048 	add	r0, sp, #72	; 0x48
    dedc:	eb000477 	bl	f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    dee0:	e3a01b02 	mov	r1, #2048	; 0x800
    dee4:	e28d0048 	add	r0, sp, #72	; 0x48
    dee8:	eb0004bb 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    deec:	e3a01301 	mov	r1, #67108864	; 0x4000000
    def0:	e28d0048 	add	r0, sp, #72	; 0x48
    def4:	eb0004b8 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    def8:	e28d0048 	add	r0, sp, #72	; 0x48
    defc:	eb00047b 	bl	f0f0 <CDWHCIRegister::Write()>
    df00:	e3a01010 	mov	r1, #16
    df04:	e1a00004 	mov	r0, r4
    df08:	ebffff7d 	bl	dd04 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    df0c:	e1a00004 	mov	r0, r4
    df10:	ebffff9e 	bl	dd90 <CDWHCIDevice::FlushRxFIFO()>
    df14:	e59f10e8 	ldr	r1, [pc, #232]	; e004 <CDWHCIDevice::InitHost()+0x204>
    df18:	e28d0054 	add	r0, sp, #84	; 0x54
    df1c:	eb000463 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    df20:	e28d0054 	add	r0, sp, #84	; 0x54
    df24:	eb00046a 	bl	f0d4 <CDWHCIRegister::Read()>
    df28:	e3e0102e 	mvn	r1, #46	; 0x2e
    df2c:	e28d0054 	add	r0, sp, #84	; 0x54
    df30:	eb00049b 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    df34:	e28d0054 	add	r0, sp, #84	; 0x54
    df38:	eb00047a 	bl	f128 <CDWHCIRegister::Get() const>
    df3c:	e3100a01 	tst	r0, #4096	; 0x1000
    df40:	0a000022 	beq	dfd0 <CDWHCIDevice::InitHost()+0x1d0>
    df44:	e1a00004 	mov	r0, r4
    df48:	ebfff7f0 	bl	bf10 <CDWHCIDevice::EnableHostInterrupts()>
    df4c:	e28d0054 	add	r0, sp, #84	; 0x54
    df50:	eb00045e 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    df54:	e28d0048 	add	r0, sp, #72	; 0x48
    df58:	eb00045c 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    df5c:	e28d003c 	add	r0, sp, #60	; 0x3c
    df60:	eb00045a 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    df64:	e28d0030 	add	r0, sp, #48	; 0x30
    df68:	eb000458 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    df6c:	e28d0024 	add	r0, sp, #36	; 0x24
    df70:	eb000456 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    df74:	e28d0018 	add	r0, sp, #24
    df78:	eb000454 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    df7c:	e28d000c 	add	r0, sp, #12
    df80:	eb000452 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    df84:	e1a0000d 	mov	r0, sp
    df88:	eb000450 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    df8c:	e3a00001 	mov	r0, #1
    df90:	e28dd064 	add	sp, sp, #100	; 0x64
    df94:	e8bd8030 	pop	{r4, r5, pc}
    df98:	e28d0018 	add	r0, sp, #24
    df9c:	eb000461 	bl	f128 <CDWHCIRegister::Get() const>
    dfa0:	e1a00420 	lsr	r0, r0, #8
    dfa4:	e2005003 	and	r5, r0, #3
    dfa8:	e3550001 	cmp	r5, #1
    dfac:	1affffb0 	bne	de74 <CDWHCIDevice::InitHost()+0x74>
    dfb0:	e28d0024 	add	r0, sp, #36	; 0x24
    dfb4:	eb000446 	bl	f0d4 <CDWHCIRegister::Read()>
    dfb8:	e3100802 	tst	r0, #131072	; 0x20000
    dfbc:	0affffac 	beq	de74 <CDWHCIDevice::InitHost()+0x74>
    dfc0:	e1a01005 	mov	r1, r5
    dfc4:	e28d000c 	add	r0, sp, #12
    dfc8:	eb000483 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    dfcc:	eaffffab 	b	de80 <CDWHCIDevice::InitHost()+0x80>
    dfd0:	e28d0054 	add	r0, sp, #84	; 0x54
    dfd4:	e3a01a01 	mov	r1, #4096	; 0x1000
    dfd8:	eb00047f 	bl	f1dc <CDWHCIRegister::Or(unsigned int)>
    dfdc:	e28d0054 	add	r0, sp, #84	; 0x54
    dfe0:	eb000442 	bl	f0f0 <CDWHCIRegister::Write()>
    dfe4:	eaffffd6 	b	df44 <CDWHCIDevice::InitHost()+0x144>
    dfe8:	20980e00 	.word	0x20980e00
    dfec:	20980400 	.word	0x20980400
    dff0:	20980048 	.word	0x20980048
    dff4:	2098000c 	.word	0x2098000c
    dff8:	20980024 	.word	0x20980024
    dffc:	20980028 	.word	0x20980028
    e000:	20980100 	.word	0x20980100
    e004:	20980440 	.word	0x20980440

0000e008 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    e008:	e92d4030 	push	{r4, r5, lr}
    e00c:	e24dd01c 	sub	sp, sp, #28
    e010:	e1a05001 	mov	r5, r1
    e014:	e28d000c 	add	r0, sp, #12
    e018:	e1a01002 	mov	r1, r2
    e01c:	eb000423 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    e020:	e3a03000 	mov	r3, #0
    e024:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e028:	eb0046b4 	bl	1fb00 <CLogger::Get()>
    e02c:	e1a04000 	mov	r4, r0
    e030:	e28d000c 	add	r0, sp, #12
    e034:	eb000426 	bl	f0d4 <CDWHCIRegister::Read()>
    e038:	e3a02004 	mov	r2, #4
    e03c:	e88d0021 	stm	sp, {r0, r5}
    e040:	e59f3018 	ldr	r3, [pc, #24]	; e060 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x58>
    e044:	e1a00004 	mov	r0, r4
    e048:	e59f1014 	ldr	r1, [pc, #20]	; e064 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    e04c:	eb0045ed 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e050:	e28d000c 	add	r0, sp, #12
    e054:	eb00041d 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    e058:	e28dd01c 	add	sp, sp, #28
    e05c:	e8bd8030 	pop	{r4, r5, pc}
    e060:	0002cf2c 	.word	0x0002cf2c
    e064:	0002d478 	.word	0x0002d478

0000e068 <CDWHCIDevice::DumpStatus(unsigned int)>:
    e068:	e92d4070 	push	{r4, r5, r6, lr}
    e06c:	e1a05001 	mov	r5, r1
    e070:	e59f0104 	ldr	r0, [pc, #260]	; e17c <CDWHCIDevice::DumpStatus(unsigned int)+0x114>
    e074:	e59f1104 	ldr	r1, [pc, #260]	; e180 <CDWHCIDevice::DumpStatus(unsigned int)+0x118>
    e078:	ebfff6cc 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e07c:	e59f1100 	ldr	r1, [pc, #256]	; e184 <CDWHCIDevice::DumpStatus(unsigned int)+0x11c>
    e080:	e59f0100 	ldr	r0, [pc, #256]	; e188 <CDWHCIDevice::DumpStatus(unsigned int)+0x120>
    e084:	ebfff6c9 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e088:	e59f10fc 	ldr	r1, [pc, #252]	; e18c <CDWHCIDevice::DumpStatus(unsigned int)+0x124>
    e08c:	e59f00fc 	ldr	r0, [pc, #252]	; e190 <CDWHCIDevice::DumpStatus(unsigned int)+0x128>
    e090:	ebfff6c6 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e094:	e59f10f8 	ldr	r1, [pc, #248]	; e194 <CDWHCIDevice::DumpStatus(unsigned int)+0x12c>
    e098:	e59f00f8 	ldr	r0, [pc, #248]	; e198 <CDWHCIDevice::DumpStatus(unsigned int)+0x130>
    e09c:	ebfff6c3 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e0a0:	e59f10f4 	ldr	r1, [pc, #244]	; e19c <CDWHCIDevice::DumpStatus(unsigned int)+0x134>
    e0a4:	e59f00f4 	ldr	r0, [pc, #244]	; e1a0 <CDWHCIDevice::DumpStatus(unsigned int)+0x138>
    e0a8:	ebfff6c0 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e0ac:	e59f10f0 	ldr	r1, [pc, #240]	; e1a4 <CDWHCIDevice::DumpStatus(unsigned int)+0x13c>
    e0b0:	e59f00f0 	ldr	r0, [pc, #240]	; e1a8 <CDWHCIDevice::DumpStatus(unsigned int)+0x140>
    e0b4:	ebfff6bd 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e0b8:	e59f10ec 	ldr	r1, [pc, #236]	; e1ac <CDWHCIDevice::DumpStatus(unsigned int)+0x144>
    e0bc:	e59f00ec 	ldr	r0, [pc, #236]	; e1b0 <CDWHCIDevice::DumpStatus(unsigned int)+0x148>
    e0c0:	ebfff6ba 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e0c4:	e59f10e8 	ldr	r1, [pc, #232]	; e1b4 <CDWHCIDevice::DumpStatus(unsigned int)+0x14c>
    e0c8:	e59f00e8 	ldr	r0, [pc, #232]	; e1b8 <CDWHCIDevice::DumpStatus(unsigned int)+0x150>
    e0cc:	ebfff6b7 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e0d0:	e59f10e4 	ldr	r1, [pc, #228]	; e1bc <CDWHCIDevice::DumpStatus(unsigned int)+0x154>
    e0d4:	e59f00e4 	ldr	r0, [pc, #228]	; e1c0 <CDWHCIDevice::DumpStatus(unsigned int)+0x158>
    e0d8:	ebfff6b4 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e0dc:	e59f10e0 	ldr	r1, [pc, #224]	; e1c4 <CDWHCIDevice::DumpStatus(unsigned int)+0x15c>
    e0e0:	e59f00e0 	ldr	r0, [pc, #224]	; e1c8 <CDWHCIDevice::DumpStatus(unsigned int)+0x160>
    e0e4:	ebfff6b1 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e0e8:	e59f10dc 	ldr	r1, [pc, #220]	; e1cc <CDWHCIDevice::DumpStatus(unsigned int)+0x164>
    e0ec:	e59f00dc 	ldr	r0, [pc, #220]	; e1d0 <CDWHCIDevice::DumpStatus(unsigned int)+0x168>
    e0f0:	ebfff6ae 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e0f4:	e59f40d8 	ldr	r4, [pc, #216]	; e1d4 <CDWHCIDevice::DumpStatus(unsigned int)+0x16c>
    e0f8:	e59f10d8 	ldr	r1, [pc, #216]	; e1d8 <CDWHCIDevice::DumpStatus(unsigned int)+0x170>
    e0fc:	e59f00d8 	ldr	r0, [pc, #216]	; e1dc <CDWHCIDevice::DumpStatus(unsigned int)+0x174>
    e100:	ebfff6aa 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e104:	e59f10d4 	ldr	r1, [pc, #212]	; e1e0 <CDWHCIDevice::DumpStatus(unsigned int)+0x178>
    e108:	e59f00d4 	ldr	r0, [pc, #212]	; e1e4 <CDWHCIDevice::DumpStatus(unsigned int)+0x17c>
    e10c:	ebfff6a7 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e110:	e0854004 	add	r4, r5, r4
    e114:	e59f10cc 	ldr	r1, [pc, #204]	; e1e8 <CDWHCIDevice::DumpStatus(unsigned int)+0x180>
    e118:	e59f00cc 	ldr	r0, [pc, #204]	; e1ec <CDWHCIDevice::DumpStatus(unsigned int)+0x184>
    e11c:	e1a04284 	lsl	r4, r4, #5
    e120:	ebfff6a2 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e124:	e59f10c4 	ldr	r1, [pc, #196]	; e1f0 <CDWHCIDevice::DumpStatus(unsigned int)+0x188>
    e128:	e59f00c4 	ldr	r0, [pc, #196]	; e1f4 <CDWHCIDevice::DumpStatus(unsigned int)+0x18c>
    e12c:	ebfff69f 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e130:	e1a01004 	mov	r1, r4
    e134:	e59f00bc 	ldr	r0, [pc, #188]	; e1f8 <CDWHCIDevice::DumpStatus(unsigned int)+0x190>
    e138:	ebfff69c 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e13c:	e2841004 	add	r1, r4, #4
    e140:	e59f00b4 	ldr	r0, [pc, #180]	; e1fc <CDWHCIDevice::DumpStatus(unsigned int)+0x194>
    e144:	ebfff699 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e148:	e2841008 	add	r1, r4, #8
    e14c:	e59f00ac 	ldr	r0, [pc, #172]	; e200 <CDWHCIDevice::DumpStatus(unsigned int)+0x198>
    e150:	ebfff696 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e154:	e284100c 	add	r1, r4, #12
    e158:	e59f00a4 	ldr	r0, [pc, #164]	; e204 <CDWHCIDevice::DumpStatus(unsigned int)+0x19c>
    e15c:	ebfff693 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e160:	e2841010 	add	r1, r4, #16
    e164:	e59f009c 	ldr	r0, [pc, #156]	; e208 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a0>
    e168:	ebfff690 	bl	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e16c:	e2841014 	add	r1, r4, #20
    e170:	e59f0094 	ldr	r0, [pc, #148]	; e20c <CDWHCIDevice::DumpStatus(unsigned int)+0x1a4>
    e174:	e8bd4070 	pop	{r4, r5, r6, lr}
    e178:	eafff68c 	b	bbb0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.0]>
    e17c:	0002d274 	.word	0x0002d274
    e180:	20980000 	.word	0x20980000
    e184:	20980008 	.word	0x20980008
    e188:	0002d280 	.word	0x0002d280
    e18c:	2098000c 	.word	0x2098000c
    e190:	0002d288 	.word	0x0002d288
    e194:	20980010 	.word	0x20980010
    e198:	0002d290 	.word	0x0002d290
    e19c:	20980014 	.word	0x20980014
    e1a0:	0002d298 	.word	0x0002d298
    e1a4:	20980018 	.word	0x20980018
    e1a8:	0002d2a4 	.word	0x0002d2a4
    e1ac:	20980024 	.word	0x20980024
    e1b0:	0002d2b0 	.word	0x0002d2b0
    e1b4:	20980028 	.word	0x20980028
    e1b8:	0002d2bc 	.word	0x0002d2bc
    e1bc:	2098002c 	.word	0x2098002c
    e1c0:	0002d2d0 	.word	0x0002d2d0
    e1c4:	20980100 	.word	0x20980100
    e1c8:	0002d2e0 	.word	0x0002d2e0
    e1cc:	20980400 	.word	0x20980400
    e1d0:	0002d2f8 	.word	0x0002d2f8
    e1d4:	0104c028 	.word	0x0104c028
    e1d8:	20980410 	.word	0x20980410
    e1dc:	0002d304 	.word	0x0002d304
    e1e0:	20980414 	.word	0x20980414
    e1e4:	0002d31c 	.word	0x0002d31c
    e1e8:	20980418 	.word	0x20980418
    e1ec:	0002d330 	.word	0x0002d330
    e1f0:	20980440 	.word	0x20980440
    e1f4:	0002d348 	.word	0x0002d348
    e1f8:	0002d354 	.word	0x0002d354
    e1fc:	0002d36c 	.word	0x0002d36c
    e200:	0002d384 	.word	0x0002d384
    e204:	0002d398 	.word	0x0002d398
    e208:	0002d3b0 	.word	0x0002d3b0
    e20c:	0002d3c8 	.word	0x0002d3c8

0000e210 <CDWHCIDevice::~CDWHCIDevice()>:
    e210:	e3a03001 	mov	r3, #1
    e214:	e92d4030 	push	{r4, r5, lr}
    e218:	e5901014 	ldr	r1, [r0, #20]
    e21c:	e59f20c4 	ldr	r2, [pc, #196]	; e2e8 <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    e220:	e3510000 	cmp	r1, #0
    e224:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    e228:	e5802000 	str	r2, [r0]
    e22c:	e5c03095 	strb	r3, [r0, #149]	; 0x95
    e230:	0a000024 	beq	e2c8 <CDWHCIDevice::~CDWHCIDevice()+0xb8>
    e234:	e1a04000 	mov	r4, r0
    e238:	e3a000c8 	mov	r0, #200	; 0xc8
    e23c:	eb006108 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
    e240:	e5940010 	ldr	r0, [r4, #16]
    e244:	e3500000 	cmp	r0, #0
    e248:	0a000022 	beq	e2d8 <CDWHCIDevice::~CDWHCIDevice()+0xc8>
    e24c:	e3a05000 	mov	r5, #0
    e250:	e3a01009 	mov	r1, #9
    e254:	eb006a44 	bl	28b6c <CInterruptSystem::DisconnectIRQ(unsigned int)>
    e258:	e1a00004 	mov	r0, r4
    e25c:	ebfffde5 	bl	d9f8 <CDWHCIDevice::Reset()>
    e260:	e1a01005 	mov	r1, r5
    e264:	e28d000c 	add	r0, sp, #12
    e268:	eb003d45 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    e26c:	e3a03014 	mov	r3, #20
    e270:	e3a01003 	mov	r1, #3
    e274:	e3a0c002 	mov	ip, #2
    e278:	e08d2003 	add	r2, sp, r3
    e27c:	e58d1020 	str	r1, [sp, #32]
    e280:	e28d000c 	add	r0, sp, #12
    e284:	e59f1060 	ldr	r1, [pc, #96]	; e2ec <CDWHCIDevice::~CDWHCIDevice()+0xdc>
    e288:	e58d5000 	str	r5, [sp]
    e28c:	e58dc024 	str	ip, [sp, #36]	; 0x24
    e290:	eb003d47 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    e294:	e5845010 	str	r5, [r4, #16]
    e298:	e5845014 	str	r5, [r4, #20]
    e29c:	e28d000c 	add	r0, sp, #12
    e2a0:	eb003d3e 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
    e2a4:	e2840088 	add	r0, r4, #136	; 0x88
    e2a8:	eb000430 	bl	f370 <CDWHCIRootPort::~CDWHCIRootPort()>
    e2ac:	e2840024 	add	r0, r4, #36	; 0x24
    e2b0:	eb00054c 	bl	f7e8 <CDWHCITransactionQueue::~CDWHCITransactionQueue()>
    e2b4:	e1a00004 	mov	r0, r4
    e2b8:	ebffeb39 	bl	8fa4 <CUSBHostController::~CUSBHostController()>
    e2bc:	e1a00004 	mov	r0, r4
    e2c0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    e2c4:	e8bd8030 	pop	{r4, r5, pc}
    e2c8:	e3a0205d 	mov	r2, #93	; 0x5d
    e2cc:	e59f101c 	ldr	r1, [pc, #28]	; e2f0 <CDWHCIDevice::~CDWHCIDevice()+0xe0>
    e2d0:	e59f001c 	ldr	r0, [pc, #28]	; e2f4 <CDWHCIDevice::~CDWHCIDevice()+0xe4>
    e2d4:	eb003d09 	bl	1d700 <assertion_failed>
    e2d8:	e3a02060 	mov	r2, #96	; 0x60
    e2dc:	e59f100c 	ldr	r1, [pc, #12]	; e2f0 <CDWHCIDevice::~CDWHCIDevice()+0xe0>
    e2e0:	e59f0010 	ldr	r0, [pc, #16]	; e2f8 <CDWHCIDevice::~CDWHCIDevice()+0xe8>
    e2e4:	eb003d05 	bl	1d700 <assertion_failed>
    e2e8:	0002d488 	.word	0x0002d488
    e2ec:	00028001 	.word	0x00028001
    e2f0:	0002cefc 	.word	0x0002cefc
    e2f4:	0002cf50 	.word	0x0002cf50
    e2f8:	0002cf38 	.word	0x0002cf38

0000e2fc <CDWHCIDevice::~CDWHCIDevice()>:
    e2fc:	e92d4010 	push	{r4, lr}
    e300:	e1a04000 	mov	r4, r0
    e304:	ebffffc1 	bl	e210 <CDWHCIDevice::~CDWHCIDevice()>
    e308:	e1a00004 	mov	r0, r4
    e30c:	e3a01098 	mov	r1, #152	; 0x98
    e310:	eb006551 	bl	2785c <operator delete(void*, unsigned int)>
    e314:	e1a00004 	mov	r0, r4
    e318:	e8bd8010 	pop	{r4, pc}

0000e31c <CDWHCIDevice::ReScanDevices()>:
    e31c:	e92d4010 	push	{r4, lr}
    e320:	e3a03000 	mov	r3, #0
    e324:	e1a04000 	mov	r4, r0
    e328:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    e32c:	e5d03094 	ldrb	r3, [r0, #148]	; 0x94
    e330:	e3530000 	cmp	r3, #0
    e334:	1a000016 	bne	e394 <CDWHCIDevice::ReScanDevices()+0x78>
    e338:	ebfffd77 	bl	d91c <CDWHCIDevice::EnableRootPort()>
    e33c:	e3500000 	cmp	r0, #0
    e340:	1a000007 	bne	e364 <CDWHCIDevice::ReScanDevices()+0x48>
    e344:	eb0045ed 	bl	1fb00 <CLogger::Get()>
    e348:	e3a02002 	mov	r2, #2
    e34c:	e59f304c 	ldr	r3, [pc, #76]	; e3a0 <CDWHCIDevice::ReScanDevices()+0x84>
    e350:	e59f104c 	ldr	r1, [pc, #76]	; e3a4 <CDWHCIDevice::ReScanDevices()+0x88>
    e354:	eb00452b 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e358:	e3a03000 	mov	r3, #0
    e35c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    e360:	e8bd8010 	pop	{r4, pc}
    e364:	e3a03001 	mov	r3, #1
    e368:	e2840088 	add	r0, r4, #136	; 0x88
    e36c:	e5c43094 	strb	r3, [r4, #148]	; 0x94
    e370:	eb00046c 	bl	f528 <CDWHCIRootPort::Initialize()>
    e374:	e3500000 	cmp	r0, #0
    e378:	1afffff6 	bne	e358 <CDWHCIDevice::ReScanDevices()+0x3c>
    e37c:	eb0045df 	bl	1fb00 <CLogger::Get()>
    e380:	e3a02002 	mov	r2, #2
    e384:	e59f301c 	ldr	r3, [pc, #28]	; e3a8 <CDWHCIDevice::ReScanDevices()+0x8c>
    e388:	e59f1014 	ldr	r1, [pc, #20]	; e3a4 <CDWHCIDevice::ReScanDevices()+0x88>
    e38c:	eb00451d 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e390:	eafffff0 	b	e358 <CDWHCIDevice::ReScanDevices()+0x3c>
    e394:	e2800088 	add	r0, r0, #136	; 0x88
    e398:	eb000428 	bl	f440 <CDWHCIRootPort::ReScanDevices()>
    e39c:	eaffffed 	b	e358 <CDWHCIDevice::ReScanDevices()+0x3c>
    e3a0:	0002d3fc 	.word	0x0002d3fc
    e3a4:	0002d478 	.word	0x0002d478
    e3a8:	0002d3e0 	.word	0x0002d3e0

0000e3ac <CDWHCIDevice::Initialize(bool)>:
    e3ac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e3b0:	e1a04000 	mov	r4, r0
    e3b4:	e24dd024 	sub	sp, sp, #36	; 0x24
    e3b8:	e1a06001 	mov	r6, r1
    e3bc:	e3a00020 	mov	r0, #32
    e3c0:	e3a01001 	mov	r1, #1
    e3c4:	ebfff176 	bl	a9a4 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    e3c8:	e3a01001 	mov	r1, #1
    e3cc:	e3a00010 	mov	r0, #16
    e3d0:	eb0008bc 	bl	106c8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    e3d4:	e3a01001 	mov	r1, #1
    e3d8:	e3a00010 	mov	r0, #16
    e3dc:	eb000164 	bl	e974 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    e3e0:	e3a01001 	mov	r1, #1
    e3e4:	e3a00010 	mov	r0, #16
    e3e8:	eb000314 	bl	f040 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    e3ec:	e3a01001 	mov	r1, #1
    e3f0:	e3a00010 	mov	r0, #16
    e3f4:	eb0001fb 	bl	ebe8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    e3f8:	e3a07000 	mov	r7, #0
    e3fc:	ee077f9a 	mcr	15, 0, r7, cr7, cr10, {4}
    e400:	e5943010 	ldr	r3, [r4, #16]
    e404:	e1530007 	cmp	r3, r7
    e408:	0a000052 	beq	e558 <CDWHCIDevice::Initialize(bool)+0x1ac>
    e40c:	e5943014 	ldr	r3, [r4, #20]
    e410:	e3530000 	cmp	r3, #0
    e414:	0a000053 	beq	e568 <CDWHCIDevice::Initialize(bool)+0x1bc>
    e418:	e59f1180 	ldr	r1, [pc, #384]	; e5a0 <CDWHCIDevice::Initialize(bool)+0x1f4>
    e41c:	e28d0008 	add	r0, sp, #8
    e420:	eb000322 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    e424:	e28d0008 	add	r0, sp, #8
    e428:	eb000329 	bl	f0d4 <CDWHCIRegister::Read()>
    e42c:	e59f3170 	ldr	r3, [pc, #368]	; e5a4 <CDWHCIDevice::Initialize(bool)+0x1f8>
    e430:	e1500003 	cmp	r0, r3
    e434:	1a00002a 	bne	e4e4 <CDWHCIDevice::Initialize(bool)+0x138>
    e438:	e1a00004 	mov	r0, r4
    e43c:	ebfff679 	bl	be28 <CDWHCIDevice::PowerOn()>
    e440:	e2505000 	subs	r5, r0, #0
    e444:	0a00003d 	beq	e540 <CDWHCIDevice::Initialize(bool)+0x194>
    e448:	e59f1158 	ldr	r1, [pc, #344]	; e5a8 <CDWHCIDevice::Initialize(bool)+0x1fc>
    e44c:	e28d0014 	add	r0, sp, #20
    e450:	eb000316 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    e454:	e28d0014 	add	r0, sp, #20
    e458:	eb00031d 	bl	f0d4 <CDWHCIRegister::Read()>
    e45c:	e3e01001 	mvn	r1, #1
    e460:	e28d0014 	add	r0, sp, #20
    e464:	eb00034e 	bl	f1a4 <CDWHCIRegister::And(unsigned int)>
    e468:	e28d0014 	add	r0, sp, #20
    e46c:	eb00031f 	bl	f0f0 <CDWHCIRegister::Write()>
    e470:	e5940010 	ldr	r0, [r4, #16]
    e474:	e3500000 	cmp	r0, #0
    e478:	0a000044 	beq	e590 <CDWHCIDevice::Initialize(bool)+0x1e4>
    e47c:	e1a03004 	mov	r3, r4
    e480:	e3a01009 	mov	r1, #9
    e484:	e59f2120 	ldr	r2, [pc, #288]	; e5ac <CDWHCIDevice::Initialize(bool)+0x200>
    e488:	eb006983 	bl	28a9c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    e48c:	e1a00004 	mov	r0, r4
    e490:	ebfffd80 	bl	da98 <CDWHCIDevice::InitCore()>
    e494:	e2505000 	subs	r5, r0, #0
    e498:	0a000022 	beq	e528 <CDWHCIDevice::Initialize(bool)+0x17c>
    e49c:	e1a00004 	mov	r0, r4
    e4a0:	ebfff67b 	bl	be94 <CDWHCIDevice::EnableGlobalInterrupts()>
    e4a4:	e1a00004 	mov	r0, r4
    e4a8:	ebfffe54 	bl	de00 <CDWHCIDevice::InitHost()>
    e4ac:	e2505000 	subs	r5, r0, #0
    e4b0:	0a000030 	beq	e578 <CDWHCIDevice::Initialize(bool)+0x1cc>
    e4b4:	ee077fba 	mcr	15, 0, r7, cr7, cr10, {5}
    e4b8:	ebffeb53 	bl	920c <CUSBHostController::IsPlugAndPlay()>
    e4bc:	e2200001 	eor	r0, r0, #1
    e4c0:	e1862000 	orr	r2, r6, r0
    e4c4:	e21260ff 	ands	r6, r2, #255	; 0xff
    e4c8:	0a000002 	beq	e4d8 <CDWHCIDevice::Initialize(bool)+0x12c>
    e4cc:	e1a00004 	mov	r0, r4
    e4d0:	ebffff91 	bl	e31c <CDWHCIDevice::ReScanDevices()>
    e4d4:	e1a05006 	mov	r5, r6
    e4d8:	e28d0014 	add	r0, sp, #20
    e4dc:	eb0002fb 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    e4e0:	ea00000b 	b	e514 <CDWHCIDevice::Initialize(bool)+0x168>
    e4e4:	eb004585 	bl	1fb00 <CLogger::Get()>
    e4e8:	e1a04000 	mov	r4, r0
    e4ec:	e28d0008 	add	r0, sp, #8
    e4f0:	eb00030c 	bl	f128 <CDWHCIRegister::Get() const>
    e4f4:	e1a02000 	mov	r2, r0
    e4f8:	e59f30b0 	ldr	r3, [pc, #176]	; e5b0 <CDWHCIDevice::Initialize(bool)+0x204>
    e4fc:	e58d2000 	str	r2, [sp]
    e500:	e1a00004 	mov	r0, r4
    e504:	e3a02001 	mov	r2, #1
    e508:	e59f10a4 	ldr	r1, [pc, #164]	; e5b4 <CDWHCIDevice::Initialize(bool)+0x208>
    e50c:	e1a05007 	mov	r5, r7
    e510:	eb0044bc 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e514:	e28d0008 	add	r0, sp, #8
    e518:	eb0002ec 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    e51c:	e1a00005 	mov	r0, r5
    e520:	e28dd024 	add	sp, sp, #36	; 0x24
    e524:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e528:	eb004574 	bl	1fb00 <CLogger::Get()>
    e52c:	e3a02001 	mov	r2, #1
    e530:	e59f3080 	ldr	r3, [pc, #128]	; e5b8 <CDWHCIDevice::Initialize(bool)+0x20c>
    e534:	e59f1078 	ldr	r1, [pc, #120]	; e5b4 <CDWHCIDevice::Initialize(bool)+0x208>
    e538:	eb0044b2 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e53c:	eaffffe5 	b	e4d8 <CDWHCIDevice::Initialize(bool)+0x12c>
    e540:	eb00456e 	bl	1fb00 <CLogger::Get()>
    e544:	e3a02001 	mov	r2, #1
    e548:	e59f306c 	ldr	r3, [pc, #108]	; e5bc <CDWHCIDevice::Initialize(bool)+0x210>
    e54c:	e59f1060 	ldr	r1, [pc, #96]	; e5b4 <CDWHCIDevice::Initialize(bool)+0x208>
    e550:	eb0044ac 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e554:	eaffffee 	b	e514 <CDWHCIDevice::Initialize(bool)+0x168>
    e558:	e3a02083 	mov	r2, #131	; 0x83
    e55c:	e59f105c 	ldr	r1, [pc, #92]	; e5c0 <CDWHCIDevice::Initialize(bool)+0x214>
    e560:	e59f005c 	ldr	r0, [pc, #92]	; e5c4 <CDWHCIDevice::Initialize(bool)+0x218>
    e564:	eb003c65 	bl	1d700 <assertion_failed>
    e568:	e3a02084 	mov	r2, #132	; 0x84
    e56c:	e59f104c 	ldr	r1, [pc, #76]	; e5c0 <CDWHCIDevice::Initialize(bool)+0x214>
    e570:	e59f0050 	ldr	r0, [pc, #80]	; e5c8 <CDWHCIDevice::Initialize(bool)+0x21c>
    e574:	eb003c61 	bl	1d700 <assertion_failed>
    e578:	eb004560 	bl	1fb00 <CLogger::Get()>
    e57c:	e3a02001 	mov	r2, #1
    e580:	e59f3044 	ldr	r3, [pc, #68]	; e5cc <CDWHCIDevice::Initialize(bool)+0x220>
    e584:	e59f1028 	ldr	r1, [pc, #40]	; e5b4 <CDWHCIDevice::Initialize(bool)+0x208>
    e588:	eb00449e 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e58c:	eaffffd1 	b	e4d8 <CDWHCIDevice::Initialize(bool)+0x12c>
    e590:	e3a02099 	mov	r2, #153	; 0x99
    e594:	e59f1024 	ldr	r1, [pc, #36]	; e5c0 <CDWHCIDevice::Initialize(bool)+0x214>
    e598:	e59f0024 	ldr	r0, [pc, #36]	; e5c4 <CDWHCIDevice::Initialize(bool)+0x218>
    e59c:	eb003c57 	bl	1d700 <assertion_failed>
    e5a0:	20980040 	.word	0x20980040
    e5a4:	4f54280a 	.word	0x4f54280a
    e5a8:	20980008 	.word	0x20980008
    e5ac:	0000d37c 	.word	0x0000d37c
    e5b0:	0002d420 	.word	0x0002d420
    e5b4:	0002d478 	.word	0x0002d478
    e5b8:	0002d448 	.word	0x0002d448
    e5bc:	0002d438 	.word	0x0002d438
    e5c0:	0002cefc 	.word	0x0002cefc
    e5c4:	0002cf38 	.word	0x0002cf38
    e5c8:	0002cf50 	.word	0x0002cf50
    e5cc:	0002d460 	.word	0x0002d460

0000e5d0 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    e5d0:	e12fff1e 	bx	lr

0000e5d4 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    e5d4:	e5903008 	ldr	r3, [r0, #8]
    e5d8:	e3530005 	cmp	r3, #5
    e5dc:	13a03001 	movne	r3, #1
    e5e0:	11c031b0 	strhne	r3, [r0, #16]
    e5e4:	e3a03000 	mov	r3, #0
    e5e8:	e5803008 	str	r3, [r0, #8]
    e5ec:	e12fff1e 	bx	lr

0000e5f0 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    e5f0:	e3a00000 	mov	r0, #0
    e5f4:	e12fff1e 	bx	lr

0000e5f8 <CDWHCIFrameSchedulerNonPeriodic::PeriodicDelay(unsigned short)>:
    e5f8:	e3a020b3 	mov	r2, #179	; 0xb3
    e5fc:	e92d4010 	push	{r4, lr}
    e600:	e59f1004 	ldr	r1, [pc, #4]	; e60c <CDWHCIFrameSchedulerNonPeriodic::PeriodicDelay(unsigned short)+0x14>
    e604:	e59f0004 	ldr	r0, [pc, #4]	; e610 <CDWHCIFrameSchedulerNonPeriodic::PeriodicDelay(unsigned short)+0x18>
    e608:	eb003c3c 	bl	1d700 <assertion_failed>
    e60c:	0002d49c 	.word	0x0002d49c
    e610:	0002dbb4 	.word	0x0002dbb4

0000e614 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
    e614:	e3a02002 	mov	r2, #2
    e618:	e5903008 	ldr	r3, [r0, #8]
    e61c:	e1c021b0 	strh	r2, [r0, #16]
    e620:	e3530003 	cmp	r3, #3
    e624:	8a000007 	bhi	e648 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x34>
    e628:	e3530001 	cmp	r3, #1
    e62c:	8a00000b 	bhi	e660 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x4c>
    e630:	03a01003 	moveq	r1, #3
    e634:	05802008 	streq	r2, [r0, #8]
    e638:	0580100c 	streq	r1, [r0, #12]
    e63c:	1a00000a 	bne	e66c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x58>
    e640:	e1a00003 	mov	r0, r3
    e644:	e12fff1e 	bx	lr
    e648:	e2433004 	sub	r3, r3, #4
    e64c:	e3530001 	cmp	r3, #1
    e650:	8a000005 	bhi	e66c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x58>
    e654:	e3a03000 	mov	r3, #0
    e658:	e1a00003 	mov	r0, r3
    e65c:	e12fff1e 	bx	lr
    e660:	e3a03001 	mov	r3, #1
    e664:	e1c031b0 	strh	r3, [r0, #16]
    e668:	eafffff4 	b	e640 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x2c>
    e66c:	e3a0205f 	mov	r2, #95	; 0x5f
    e670:	e92d4010 	push	{r4, lr}
    e674:	e59f1004 	ldr	r1, [pc, #4]	; e680 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x6c>
    e678:	e59f0004 	ldr	r0, [pc, #4]	; e684 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x70>
    e67c:	eb003c1f 	bl	1d700 <assertion_failed>
    e680:	0002d49c 	.word	0x0002d49c
    e684:	0002dbb4 	.word	0x0002dbb4

0000e688 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
    e688:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    e68c:	e5903008 	ldr	r3, [r0, #8]
    e690:	e24dd014 	sub	sp, sp, #20
    e694:	e3530000 	cmp	r3, #0
    e698:	0a000014 	beq	e6f0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x68>
    e69c:	e2433002 	sub	r3, r3, #2
    e6a0:	e3530001 	cmp	r3, #1
    e6a4:	8a000027 	bhi	e748 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xc0>
    e6a8:	e3110001 	tst	r1, #1
    e6ac:	13a03004 	movne	r3, #4
    e6b0:	15803008 	strne	r3, [r0, #8]
    e6b4:	1a00000b 	bne	e6e8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    e6b8:	e3110060 	tst	r1, #96	; 0x60
    e6bc:	1a000013 	bne	e710 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x88>
    e6c0:	e3110010 	tst	r1, #16
    e6c4:	0a000023 	beq	e758 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xd0>
    e6c8:	e590300c 	ldr	r3, [r0, #12]
    e6cc:	e3530000 	cmp	r3, #0
    e6d0:	e2433001 	sub	r3, r3, #1
    e6d4:	e580300c 	str	r3, [r0, #12]
    e6d8:	1a000016 	bne	e738 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb0>
    e6dc:	e3a03005 	mov	r3, #5
    e6e0:	e1c031b0 	strh	r3, [r0, #16]
    e6e4:	e5803008 	str	r3, [r0, #8]
    e6e8:	e28dd014 	add	sp, sp, #20
    e6ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e6f0:	e3110020 	tst	r1, #32
    e6f4:	13a03001 	movne	r3, #1
    e6f8:	15803008 	strne	r3, [r0, #8]
    e6fc:	1afffff9 	bne	e6e8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    e700:	e3a0206b 	mov	r2, #107	; 0x6b
    e704:	e59f107c 	ldr	r1, [pc, #124]	; e788 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
    e708:	e59f007c 	ldr	r0, [pc, #124]	; e78c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
    e70c:	eb003bfb 	bl	1d700 <assertion_failed>
    e710:	e590300c 	ldr	r3, [r0, #12]
    e714:	e3530000 	cmp	r3, #0
    e718:	e2433001 	sub	r3, r3, #1
    e71c:	e580300c 	str	r3, [r0, #12]
    e720:	1a000004 	bne	e738 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb0>
    e724:	e3a02001 	mov	r2, #1
    e728:	e3a03005 	mov	r3, #5
    e72c:	e1c021b0 	strh	r2, [r0, #16]
    e730:	e5803008 	str	r3, [r0, #8]
    e734:	eaffffeb 	b	e6e8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    e738:	e3a03003 	mov	r3, #3
    e73c:	e5803008 	str	r3, [r0, #8]
    e740:	e28dd014 	add	sp, sp, #20
    e744:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e748:	e3a0209b 	mov	r2, #155	; 0x9b
    e74c:	e59f1034 	ldr	r1, [pc, #52]	; e788 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
    e750:	e59f0038 	ldr	r0, [pc, #56]	; e790 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x108>
    e754:	eb003be9 	bl	1d700 <assertion_failed>
    e758:	e58d100c 	str	r1, [sp, #12]
    e75c:	eb0044e7 	bl	1fb00 <CLogger::Get()>
    e760:	e59d100c 	ldr	r1, [sp, #12]
    e764:	e3a02001 	mov	r2, #1
    e768:	e58d1000 	str	r1, [sp]
    e76c:	e59f3020 	ldr	r3, [pc, #32]	; e794 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x10c>
    e770:	e59f1020 	ldr	r1, [pc, #32]	; e798 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x110>
    e774:	eb004423 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e778:	e3a02096 	mov	r2, #150	; 0x96
    e77c:	e59f1004 	ldr	r1, [pc, #4]	; e788 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
    e780:	e59f0008 	ldr	r0, [pc, #8]	; e790 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x108>
    e784:	eb003bdd 	bl	1d700 <assertion_failed>
    e788:	0002d49c 	.word	0x0002d49c
    e78c:	0002d4b4 	.word	0x0002d4b4
    e790:	0002dbb4 	.word	0x0002dbb4
    e794:	0002d4d8 	.word	0x0002d4d8
    e798:	0002d4ec 	.word	0x0002d4ec

0000e79c <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()>:
    e79c:	e92d4030 	push	{r4, r5, lr}
    e7a0:	e1a05000 	mov	r5, r0
    e7a4:	e24dd014 	sub	sp, sp, #20
    e7a8:	e59f1048 	ldr	r1, [pc, #72]	; e7f8 <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()+0x5c>
    e7ac:	e28d0004 	add	r0, sp, #4
    e7b0:	eb00023e 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    e7b4:	e28d0004 	add	r0, sp, #4
    e7b8:	eb000245 	bl	f0d4 <CDWHCIRegister::Read()>
    e7bc:	e1d541b0 	ldrh	r4, [r5, #16]
    e7c0:	e3540007 	cmp	r4, #7
    e7c4:	8a000007 	bhi	e7e8 <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()+0x4c>
    e7c8:	e6ff5070 	uxth	r5, r0
    e7cc:	e28d0004 	add	r0, sp, #4
    e7d0:	eb00023e 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    e7d4:	e0840005 	add	r0, r4, r5
    e7d8:	e1a00900 	lsl	r0, r0, #18
    e7dc:	e1a00920 	lsr	r0, r0, #18
    e7e0:	e28dd014 	add	sp, sp, #20
    e7e4:	e8bd8030 	pop	{r4, r5, pc}
    e7e8:	e3a020ad 	mov	r2, #173	; 0xad
    e7ec:	e59f1008 	ldr	r1, [pc, #8]	; e7fc <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()+0x60>
    e7f0:	e59f0008 	ldr	r0, [pc, #8]	; e800 <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()+0x64>
    e7f4:	eb003bc1 	bl	1d700 <assertion_failed>
    e7f8:	20980408 	.word	0x20980408
    e7fc:	0002d49c 	.word	0x0002d49c
    e800:	0002d4f4 	.word	0x0002d4f4

0000e804 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
    e804:	e59f303c 	ldr	r3, [pc, #60]	; e848 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x44>
    e808:	e92d4010 	push	{r4, lr}
    e80c:	e5803000 	str	r3, [r0]
    e810:	e1a04000 	mov	r4, r0
    e814:	eb005fc7 	bl	26738 <CTimer::Get()>
    e818:	e3a02006 	mov	r2, #6
    e81c:	e3a03008 	mov	r3, #8
    e820:	e3500000 	cmp	r0, #0
    e824:	e9840005 	stmib	r4, {r0, r2}
    e828:	e1c431b0 	strh	r3, [r4, #16]
    e82c:	0a000001 	beq	e838 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x34>
    e830:	e1a00004 	mov	r0, r4
    e834:	e8bd8010 	pop	{r4, pc}
    e838:	e3a0202e 	mov	r2, #46	; 0x2e
    e83c:	e59f1008 	ldr	r1, [pc, #8]	; e84c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x48>
    e840:	e59f0008 	ldr	r0, [pc, #8]	; e850 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x4c>
    e844:	eb003bad 	bl	1d700 <assertion_failed>
    e848:	0002d564 	.word	0x0002d564
    e84c:	0002d49c 	.word	0x0002d49c
    e850:	0002cf50 	.word	0x0002cf50

0000e854 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
    e854:	e3500014 	cmp	r0, #20
    e858:	e92d4010 	push	{r4, lr}
    e85c:	1a000005 	bne	e878 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x24>
    e860:	e59f3030 	ldr	r3, [pc, #48]	; e898 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x44>
    e864:	e5930000 	ldr	r0, [r3]
    e868:	e3500000 	cmp	r0, #0
    e86c:	0a000005 	beq	e888 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x34>
    e870:	e8bd4010 	pop	{r4, lr}
    e874:	ea003ca3 	b	1db08 <CClassAllocator::Allocate()>
    e878:	e3a020bd 	mov	r2, #189	; 0xbd
    e87c:	e59f1018 	ldr	r1, [pc, #24]	; e89c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    e880:	e59f0018 	ldr	r0, [pc, #24]	; e8a0 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x4c>
    e884:	eb003b9d 	bl	1d700 <assertion_failed>
    e888:	e3a020bd 	mov	r2, #189	; 0xbd
    e88c:	e59f1008 	ldr	r1, [pc, #8]	; e89c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    e890:	e59f000c 	ldr	r0, [pc, #12]	; e8a4 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
    e894:	eb003b99 	bl	1d700 <assertion_failed>
    e898:	00034b98 	.word	0x00034b98
    e89c:	0002d49c 	.word	0x0002d49c
    e8a0:	0002d508 	.word	0x0002d508
    e8a4:	0002cac8 	.word	0x0002cac8

0000e8a8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
    e8a8:	e3510014 	cmp	r1, #20
    e8ac:	e92d4010 	push	{r4, lr}
    e8b0:	1a000006 	bne	e8d0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x28>
    e8b4:	e59f3034 	ldr	r3, [pc, #52]	; e8f0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x48>
    e8b8:	e1a01000 	mov	r1, r0
    e8bc:	e5930000 	ldr	r0, [r3]
    e8c0:	e3500000 	cmp	r0, #0
    e8c4:	0a000005 	beq	e8e0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x38>
    e8c8:	e8bd4010 	pop	{r4, lr}
    e8cc:	ea003cc8 	b	1dbf4 <CClassAllocator::Free(void*)>
    e8d0:	e3a020bd 	mov	r2, #189	; 0xbd
    e8d4:	e59f1018 	ldr	r1, [pc, #24]	; e8f4 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x4c>
    e8d8:	e59f0018 	ldr	r0, [pc, #24]	; e8f8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x50>
    e8dc:	eb003b87 	bl	1d700 <assertion_failed>
    e8e0:	e3a020bd 	mov	r2, #189	; 0xbd
    e8e4:	e59f1008 	ldr	r1, [pc, #8]	; e8f4 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x4c>
    e8e8:	e59f000c 	ldr	r0, [pc, #12]	; e8fc <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x54>
    e8ec:	eb003b83 	bl	1d700 <assertion_failed>
    e8f0:	00034b98 	.word	0x00034b98
    e8f4:	0002d49c 	.word	0x0002d49c
    e8f8:	0002d508 	.word	0x0002d508
    e8fc:	0002cac8 	.word	0x0002cac8

0000e900 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    e900:	e92d4010 	push	{r4, lr}
    e904:	e1a04000 	mov	r4, r0
    e908:	e3a01014 	mov	r1, #20
    e90c:	ebffffe5 	bl	e8a8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
    e910:	e1a00004 	mov	r0, r4
    e914:	e8bd8010 	pop	{r4, pc}

0000e918 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
    e918:	e92d4070 	push	{r4, r5, r6, lr}
    e91c:	e59f6040 	ldr	r6, [pc, #64]	; e964 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x4c>
    e920:	e5963000 	ldr	r3, [r6]
    e924:	e3530000 	cmp	r3, #0
    e928:	1a000009 	bne	e954 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x3c>
    e92c:	e1a04000 	mov	r4, r0
    e930:	e3a0001c 	mov	r0, #28
    e934:	eb0063ba 	bl	27824 <operator new(unsigned int)>
    e938:	e1a05000 	mov	r5, r0
    e93c:	e1a02004 	mov	r2, r4
    e940:	e3a01014 	mov	r1, #20
    e944:	e59f301c 	ldr	r3, [pc, #28]	; e968 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x50>
    e948:	eb003c55 	bl	1daa4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    e94c:	e5865000 	str	r5, [r6]
    e950:	e8bd8070 	pop	{r4, r5, r6, pc}
    e954:	e3a020bd 	mov	r2, #189	; 0xbd
    e958:	e59f100c 	ldr	r1, [pc, #12]	; e96c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x54>
    e95c:	e59f000c 	ldr	r0, [pc, #12]	; e970 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x58>
    e960:	eb003b66 	bl	1d700 <assertion_failed>
    e964:	00034b98 	.word	0x00034b98
    e968:	0002d53c 	.word	0x0002d53c
    e96c:	0002d49c 	.word	0x0002d49c
    e970:	0002cadc 	.word	0x0002cadc

0000e974 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    e974:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e978:	e59f7054 	ldr	r7, [pc, #84]	; e9d4 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    e97c:	e24dd00c 	sub	sp, sp, #12
    e980:	e5973000 	ldr	r3, [r7]
    e984:	e3530000 	cmp	r3, #0
    e988:	1a00000d 	bne	e9c4 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    e98c:	e1a05001 	mov	r5, r1
    e990:	e1a04000 	mov	r4, r0
    e994:	e3a0001c 	mov	r0, #28
    e998:	eb0063a1 	bl	27824 <operator new(unsigned int)>
    e99c:	e59f1034 	ldr	r1, [pc, #52]	; e9d8 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    e9a0:	e1a03005 	mov	r3, r5
    e9a4:	e58d1000 	str	r1, [sp]
    e9a8:	e1a02004 	mov	r2, r4
    e9ac:	e3a01014 	mov	r1, #20
    e9b0:	e1a06000 	mov	r6, r0
    e9b4:	eb003c46 	bl	1dad4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    e9b8:	e5876000 	str	r6, [r7]
    e9bc:	e28dd00c 	add	sp, sp, #12
    e9c0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    e9c4:	e3a020bd 	mov	r2, #189	; 0xbd
    e9c8:	e59f100c 	ldr	r1, [pc, #12]	; e9dc <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    e9cc:	e59f000c 	ldr	r0, [pc, #12]	; e9e0 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    e9d0:	eb003b4a 	bl	1d700 <assertion_failed>
    e9d4:	00034b98 	.word	0x00034b98
    e9d8:	0002d53c 	.word	0x0002d53c
    e9dc:	0002d49c 	.word	0x0002d49c
    e9e0:	0002cadc 	.word	0x0002cadc

0000e9e4 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    e9e4:	e12fff1e 	bx	lr

0000e9e8 <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
    e9e8:	e1d000b6 	ldrh	r0, [r0, #6]
    e9ec:	e2000001 	and	r0, r0, #1
    e9f0:	e12fff1e 	bx	lr

0000e9f4 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
    e9f4:	e3a02026 	mov	r2, #38	; 0x26
    e9f8:	e92d4010 	push	{r4, lr}
    e9fc:	e59f1004 	ldr	r1, [pc, #4]	; ea08 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x14>
    ea00:	e59f0004 	ldr	r0, [pc, #4]	; ea0c <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x18>
    ea04:	eb003b3d 	bl	1d700 <assertion_failed>
    ea08:	0002d584 	.word	0x0002d584
    ea0c:	0002dbb4 	.word	0x0002dbb4

0000ea10 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
    ea10:	e3a0202b 	mov	r2, #43	; 0x2b
    ea14:	e92d4010 	push	{r4, lr}
    ea18:	e59f1004 	ldr	r1, [pc, #4]	; ea24 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x14>
    ea1c:	e59f0004 	ldr	r0, [pc, #4]	; ea28 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x18>
    ea20:	eb003b36 	bl	1d700 <assertion_failed>
    ea24:	0002d584 	.word	0x0002d584
    ea28:	0002dbb4 	.word	0x0002dbb4

0000ea2c <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
    ea2c:	e3a02031 	mov	r2, #49	; 0x31
    ea30:	e92d4010 	push	{r4, lr}
    ea34:	e59f1004 	ldr	r1, [pc, #4]	; ea40 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x14>
    ea38:	e59f0004 	ldr	r0, [pc, #4]	; ea44 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x18>
    ea3c:	eb003b2f 	bl	1d700 <assertion_failed>
    ea40:	0002d584 	.word	0x0002d584
    ea44:	0002dbb4 	.word	0x0002dbb4

0000ea48 <CDWHCIFrameSchedulerNoSplit::PeriodicDelay(unsigned short)>:
    ea48:	e3a02050 	mov	r2, #80	; 0x50
    ea4c:	e92d4010 	push	{r4, lr}
    ea50:	e59f1004 	ldr	r1, [pc, #4]	; ea5c <CDWHCIFrameSchedulerNoSplit::PeriodicDelay(unsigned short)+0x14>
    ea54:	e59f0004 	ldr	r0, [pc, #4]	; ea60 <CDWHCIFrameSchedulerNoSplit::PeriodicDelay(unsigned short)+0x18>
    ea58:	eb003b28 	bl	1d700 <assertion_failed>
    ea5c:	0002d584 	.word	0x0002d584
    ea60:	0002dbb4 	.word	0x0002dbb4

0000ea64 <CDWHCIFrameSchedulerNoSplit::GetFrameNumber()>:
    ea64:	e92d4030 	push	{r4, r5, lr}
    ea68:	e24dd014 	sub	sp, sp, #20
    ea6c:	e59f1034 	ldr	r1, [pc, #52]	; eaa8 <CDWHCIFrameSchedulerNoSplit::GetFrameNumber()+0x44>
    ea70:	e1a05000 	mov	r5, r0
    ea74:	e28d0004 	add	r0, sp, #4
    ea78:	eb00018c 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ea7c:	e28d0004 	add	r0, sp, #4
    ea80:	eb000193 	bl	f0d4 <CDWHCIRegister::Read()>
    ea84:	e2804001 	add	r4, r0, #1
    ea88:	e1a04904 	lsl	r4, r4, #18
    ea8c:	e1a04924 	lsr	r4, r4, #18
    ea90:	e1c540b6 	strh	r4, [r5, #6]
    ea94:	e28d0004 	add	r0, sp, #4
    ea98:	eb00018c 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    ea9c:	e1a00004 	mov	r0, r4
    eaa0:	e28dd014 	add	sp, sp, #20
    eaa4:	e8bd8030 	pop	{r4, r5, pc}
    eaa8:	20980408 	.word	0x20980408

0000eaac <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
    eaac:	e3a02901 	mov	r2, #16384	; 0x4000
    eab0:	e59fc00c 	ldr	ip, [pc, #12]	; eac4 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
    eab4:	e5c01004 	strb	r1, [r0, #4]
    eab8:	e580c000 	str	ip, [r0]
    eabc:	e1c020b6 	strh	r2, [r0, #6]
    eac0:	e12fff1e 	bx	lr
    eac4:	0002d5f4 	.word	0x0002d5f4

0000eac8 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
    eac8:	e3500008 	cmp	r0, #8
    eacc:	e92d4010 	push	{r4, lr}
    ead0:	1a000005 	bne	eaec <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x24>
    ead4:	e59f3030 	ldr	r3, [pc, #48]	; eb0c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x44>
    ead8:	e5930000 	ldr	r0, [r3]
    eadc:	e3500000 	cmp	r0, #0
    eae0:	0a000005 	beq	eafc <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x34>
    eae4:	e8bd4010 	pop	{r4, lr}
    eae8:	ea003c06 	b	1db08 <CClassAllocator::Allocate()>
    eaec:	e3a0205a 	mov	r2, #90	; 0x5a
    eaf0:	e59f1018 	ldr	r1, [pc, #24]	; eb10 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    eaf4:	e59f0018 	ldr	r0, [pc, #24]	; eb14 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x4c>
    eaf8:	eb003b00 	bl	1d700 <assertion_failed>
    eafc:	e3a0205a 	mov	r2, #90	; 0x5a
    eb00:	e59f1008 	ldr	r1, [pc, #8]	; eb10 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    eb04:	e59f000c 	ldr	r0, [pc, #12]	; eb18 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
    eb08:	eb003afc 	bl	1d700 <assertion_failed>
    eb0c:	00034b9c 	.word	0x00034b9c
    eb10:	0002d584 	.word	0x0002d584
    eb14:	0002d5a0 	.word	0x0002d5a0
    eb18:	0002cac8 	.word	0x0002cac8

0000eb1c <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
    eb1c:	e3510008 	cmp	r1, #8
    eb20:	e92d4010 	push	{r4, lr}
    eb24:	1a000006 	bne	eb44 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x28>
    eb28:	e59f3034 	ldr	r3, [pc, #52]	; eb64 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x48>
    eb2c:	e1a01000 	mov	r1, r0
    eb30:	e5930000 	ldr	r0, [r3]
    eb34:	e3500000 	cmp	r0, #0
    eb38:	0a000005 	beq	eb54 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x38>
    eb3c:	e8bd4010 	pop	{r4, lr}
    eb40:	ea003c2b 	b	1dbf4 <CClassAllocator::Free(void*)>
    eb44:	e3a0205a 	mov	r2, #90	; 0x5a
    eb48:	e59f1018 	ldr	r1, [pc, #24]	; eb68 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x4c>
    eb4c:	e59f0018 	ldr	r0, [pc, #24]	; eb6c <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x50>
    eb50:	eb003aea 	bl	1d700 <assertion_failed>
    eb54:	e3a0205a 	mov	r2, #90	; 0x5a
    eb58:	e59f1008 	ldr	r1, [pc, #8]	; eb68 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x4c>
    eb5c:	e59f000c 	ldr	r0, [pc, #12]	; eb70 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x54>
    eb60:	eb003ae6 	bl	1d700 <assertion_failed>
    eb64:	00034b9c 	.word	0x00034b9c
    eb68:	0002d584 	.word	0x0002d584
    eb6c:	0002d5a0 	.word	0x0002d5a0
    eb70:	0002cac8 	.word	0x0002cac8

0000eb74 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    eb74:	e92d4010 	push	{r4, lr}
    eb78:	e1a04000 	mov	r4, r0
    eb7c:	e3a01008 	mov	r1, #8
    eb80:	ebffffe5 	bl	eb1c <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
    eb84:	e1a00004 	mov	r0, r4
    eb88:	e8bd8010 	pop	{r4, pc}

0000eb8c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
    eb8c:	e92d4070 	push	{r4, r5, r6, lr}
    eb90:	e59f6040 	ldr	r6, [pc, #64]	; ebd8 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x4c>
    eb94:	e5963000 	ldr	r3, [r6]
    eb98:	e3530000 	cmp	r3, #0
    eb9c:	1a000009 	bne	ebc8 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x3c>
    eba0:	e1a04000 	mov	r4, r0
    eba4:	e3a0001c 	mov	r0, #28
    eba8:	eb00631d 	bl	27824 <operator new(unsigned int)>
    ebac:	e1a05000 	mov	r5, r0
    ebb0:	e1a02004 	mov	r2, r4
    ebb4:	e3a01008 	mov	r1, #8
    ebb8:	e59f301c 	ldr	r3, [pc, #28]	; ebdc <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x50>
    ebbc:	eb003bb8 	bl	1daa4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    ebc0:	e5865000 	str	r5, [r6]
    ebc4:	e8bd8070 	pop	{r4, r5, r6, pc}
    ebc8:	e3a0205a 	mov	r2, #90	; 0x5a
    ebcc:	e59f100c 	ldr	r1, [pc, #12]	; ebe0 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x54>
    ebd0:	e59f000c 	ldr	r0, [pc, #12]	; ebe4 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x58>
    ebd4:	eb003ac9 	bl	1d700 <assertion_failed>
    ebd8:	00034b9c 	.word	0x00034b9c
    ebdc:	0002d5d0 	.word	0x0002d5d0
    ebe0:	0002d584 	.word	0x0002d584
    ebe4:	0002cadc 	.word	0x0002cadc

0000ebe8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
    ebe8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    ebec:	e59f7054 	ldr	r7, [pc, #84]	; ec48 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    ebf0:	e24dd00c 	sub	sp, sp, #12
    ebf4:	e5973000 	ldr	r3, [r7]
    ebf8:	e3530000 	cmp	r3, #0
    ebfc:	1a00000d 	bne	ec38 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    ec00:	e1a05001 	mov	r5, r1
    ec04:	e1a04000 	mov	r4, r0
    ec08:	e3a0001c 	mov	r0, #28
    ec0c:	eb006304 	bl	27824 <operator new(unsigned int)>
    ec10:	e59f1034 	ldr	r1, [pc, #52]	; ec4c <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    ec14:	e1a03005 	mov	r3, r5
    ec18:	e58d1000 	str	r1, [sp]
    ec1c:	e1a02004 	mov	r2, r4
    ec20:	e3a01008 	mov	r1, #8
    ec24:	e1a06000 	mov	r6, r0
    ec28:	eb003ba9 	bl	1dad4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    ec2c:	e5876000 	str	r6, [r7]
    ec30:	e28dd00c 	add	sp, sp, #12
    ec34:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ec38:	e3a0205a 	mov	r2, #90	; 0x5a
    ec3c:	e59f100c 	ldr	r1, [pc, #12]	; ec50 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    ec40:	e59f000c 	ldr	r0, [pc, #12]	; ec54 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    ec44:	eb003aad 	bl	1d700 <assertion_failed>
    ec48:	00034b9c 	.word	0x00034b9c
    ec4c:	0002d5d0 	.word	0x0002d5d0
    ec50:	0002d584 	.word	0x0002d584
    ec54:	0002cadc 	.word	0x0002cadc

0000ec58 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    ec58:	e12fff1e 	bx	lr

0000ec5c <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
    ec5c:	e5903008 	ldr	r3, [r0, #8]
    ec60:	e2433005 	sub	r3, r3, #5
    ec64:	e3530001 	cmp	r3, #1
    ec68:	83a03001 	movhi	r3, #1
    ec6c:	81c031b0 	strhhi	r3, [r0, #16]
    ec70:	e3a03000 	mov	r3, #0
    ec74:	e5803008 	str	r3, [r0, #8]
    ec78:	e12fff1e 	bx	lr

0000ec7c <CDWHCIFrameSchedulerPeriodic::PeriodicDelay(unsigned short)>:
    ec7c:	e3a02006 	mov	r2, #6
    ec80:	e3a03901 	mov	r3, #16384	; 0x4000
    ec84:	e1c011b0 	strh	r1, [r0, #16]
    ec88:	e5802008 	str	r2, [r0, #8]
    ec8c:	e1c031b2 	strh	r3, [r0, #18]
    ec90:	e12fff1e 	bx	lr

0000ec94 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
    ec94:	e1d001b2 	ldrh	r0, [r0, #18]
    ec98:	e2000001 	and	r0, r0, #1
    ec9c:	e12fff1e 	bx	lr

0000eca0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
    eca0:	e5903008 	ldr	r3, [r0, #8]
    eca4:	e3530003 	cmp	r3, #3
    eca8:	0a000016 	beq	ed08 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x68>
    ecac:	e92d4010 	push	{r4, lr}
    ecb0:	8a00000e 	bhi	ecf0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x50>
    ecb4:	e3530001 	cmp	r3, #1
    ecb8:	1a00001a 	bne	ed28 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x88>
    ecbc:	e3a01002 	mov	r1, #2
    ecc0:	e1d021b2 	ldrh	r2, [r0, #18]
    ecc4:	e5801008 	str	r1, [r0, #8]
    ecc8:	e3520901 	cmp	r2, #16384	; 0x4000
    eccc:	0a000011 	beq	ed18 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x78>
    ecd0:	e2022007 	and	r2, r2, #7
    ecd4:	e3520005 	cmp	r2, #5
    ecd8:	13a02003 	movne	r2, #3
    ecdc:	03a02002 	moveq	r2, #2
    ece0:	e1c011b0 	strh	r1, [r0, #16]
    ece4:	e580200c 	str	r2, [r0, #12]
    ece8:	e1a00003 	mov	r0, r3
    ecec:	e8bd8010 	pop	{r4, pc}
    ecf0:	e2433004 	sub	r3, r3, #4
    ecf4:	e3530001 	cmp	r3, #1
    ecf8:	8a00000a 	bhi	ed28 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x88>
    ecfc:	e3a03000 	mov	r3, #0
    ed00:	e1a00003 	mov	r0, r3
    ed04:	e8bd8010 	pop	{r4, pc}
    ed08:	e3a03001 	mov	r3, #1
    ed0c:	e1c031b0 	strh	r3, [r0, #16]
    ed10:	e1a00003 	mov	r0, r3
    ed14:	e12fff1e 	bx	lr
    ed18:	e3a02054 	mov	r2, #84	; 0x54
    ed1c:	e59f1014 	ldr	r1, [pc, #20]	; ed38 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x98>
    ed20:	e59f0014 	ldr	r0, [pc, #20]	; ed3c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x9c>
    ed24:	eb003a75 	bl	1d700 <assertion_failed>
    ed28:	e3a0206e 	mov	r2, #110	; 0x6e
    ed2c:	e59f1004 	ldr	r1, [pc, #4]	; ed38 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x98>
    ed30:	e59f0008 	ldr	r0, [pc, #8]	; ed40 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xa0>
    ed34:	eb003a71 	bl	1d700 <assertion_failed>
    ed38:	0002d614 	.word	0x0002d614
    ed3c:	0002d62c 	.word	0x0002d62c
    ed40:	0002dbb4 	.word	0x0002dbb4

0000ed44 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
    ed44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ed48:	e5903008 	ldr	r3, [r0, #8]
    ed4c:	e24dd014 	sub	sp, sp, #20
    ed50:	e3530000 	cmp	r3, #0
    ed54:	0a00000f 	beq	ed98 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    ed58:	e2433002 	sub	r3, r3, #2
    ed5c:	e3530001 	cmp	r3, #1
    ed60:	8a000020 	bhi	ede8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xa4>
    ed64:	e3110001 	tst	r1, #1
    ed68:	13a03004 	movne	r3, #4
    ed6c:	15803008 	strne	r3, [r0, #8]
    ed70:	1a000006 	bne	ed90 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x4c>
    ed74:	e3110060 	tst	r1, #96	; 0x60
    ed78:	1a00000e 	bne	edb8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x74>
    ed7c:	e3110010 	tst	r1, #16
    ed80:	0a00001c 	beq	edf8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xb4>
    ed84:	e3a03005 	mov	r3, #5
    ed88:	e1c031b0 	strh	r3, [r0, #16]
    ed8c:	e5803008 	str	r3, [r0, #8]
    ed90:	e28dd014 	add	sp, sp, #20
    ed94:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ed98:	e3110020 	tst	r1, #32
    ed9c:	13a03001 	movne	r3, #1
    eda0:	15803008 	strne	r3, [r0, #8]
    eda4:	1afffff9 	bne	ed90 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x4c>
    eda8:	e3a0207a 	mov	r2, #122	; 0x7a
    edac:	e59f1074 	ldr	r1, [pc, #116]	; ee28 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xe4>
    edb0:	e59f0074 	ldr	r0, [pc, #116]	; ee2c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xe8>
    edb4:	eb003a51 	bl	1d700 <assertion_failed>
    edb8:	e590300c 	ldr	r3, [r0, #12]
    edbc:	e3530000 	cmp	r3, #0
    edc0:	e2433001 	sub	r3, r3, #1
    edc4:	e580300c 	str	r3, [r0, #12]
    edc8:	03a02005 	moveq	r2, #5
    edcc:	03a03003 	moveq	r3, #3
    edd0:	13a03003 	movne	r3, #3
    edd4:	05802008 	streq	r2, [r0, #8]
    edd8:	01c031b0 	strheq	r3, [r0, #16]
    eddc:	15803008 	strne	r3, [r0, #8]
    ede0:	e28dd014 	add	sp, sp, #20
    ede4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ede8:	e3a020a6 	mov	r2, #166	; 0xa6
    edec:	e59f1034 	ldr	r1, [pc, #52]	; ee28 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xe4>
    edf0:	e59f0038 	ldr	r0, [pc, #56]	; ee30 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xec>
    edf4:	eb003a41 	bl	1d700 <assertion_failed>
    edf8:	e58d100c 	str	r1, [sp, #12]
    edfc:	eb00433f 	bl	1fb00 <CLogger::Get()>
    ee00:	e59d100c 	ldr	r1, [sp, #12]
    ee04:	e3a02001 	mov	r2, #1
    ee08:	e58d1000 	str	r1, [sp]
    ee0c:	e59f3020 	ldr	r3, [pc, #32]	; ee34 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf0>
    ee10:	e59f1020 	ldr	r1, [pc, #32]	; ee38 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    ee14:	eb00427b 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ee18:	e3a020a1 	mov	r2, #161	; 0xa1
    ee1c:	e59f1004 	ldr	r1, [pc, #4]	; ee28 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xe4>
    ee20:	e59f0008 	ldr	r0, [pc, #8]	; ee30 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xec>
    ee24:	eb003a35 	bl	1d700 <assertion_failed>
    ee28:	0002d614 	.word	0x0002d614
    ee2c:	0002d4b4 	.word	0x0002d4b4
    ee30:	0002dbb4 	.word	0x0002dbb4
    ee34:	0002d4d8 	.word	0x0002d4d8
    ee38:	0002d4ec 	.word	0x0002d4ec

0000ee3c <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()>:
    ee3c:	e92d4030 	push	{r4, r5, lr}
    ee40:	e1a04000 	mov	r4, r0
    ee44:	e24dd014 	sub	sp, sp, #20
    ee48:	e59f1070 	ldr	r1, [pc, #112]	; eec0 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()+0x84>
    ee4c:	e28d0004 	add	r0, sp, #4
    ee50:	eb000096 	bl	f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ee54:	e28d0004 	add	r0, sp, #4
    ee58:	eb00009d 	bl	f0d4 <CDWHCIRegister::Read()>
    ee5c:	e1d431b0 	ldrh	r3, [r4, #16]
    ee60:	e3530901 	cmp	r3, #16384	; 0x4000
    ee64:	0a000011 	beq	eeb0 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()+0x74>
    ee68:	e6ff0070 	uxth	r0, r0
    ee6c:	e0833000 	add	r3, r3, r0
    ee70:	e5942008 	ldr	r2, [r4, #8]
    ee74:	e1a05903 	lsl	r5, r3, #18
    ee78:	e1a05925 	lsr	r5, r5, #18
    ee7c:	e3520000 	cmp	r2, #0
    ee80:	e1c451b2 	strh	r5, [r4, #18]
    ee84:	e6ff3073 	uxth	r3, r3
    ee88:	1a000003 	bne	ee9c <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()+0x60>
    ee8c:	e2033007 	and	r3, r3, #7
    ee90:	e3530006 	cmp	r3, #6
    ee94:	02855001 	addeq	r5, r5, #1
    ee98:	01c451b2 	strheq	r5, [r4, #18]
    ee9c:	e28d0004 	add	r0, sp, #4
    eea0:	eb00008a 	bl	f0d0 <CDWHCIRegister::~CDWHCIRegister()>
    eea4:	e1a00005 	mov	r0, r5
    eea8:	e28dd014 	add	sp, sp, #20
    eeac:	e8bd8030 	pop	{r4, r5, pc}
    eeb0:	e3a020c7 	mov	r2, #199	; 0xc7
    eeb4:	e59f1008 	ldr	r1, [pc, #8]	; eec4 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()+0x88>
    eeb8:	e59f0008 	ldr	r0, [pc, #8]	; eec8 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()+0x8c>
    eebc:	eb003a0f 	bl	1d700 <assertion_failed>
    eec0:	20980408 	.word	0x20980408
    eec4:	0002d614 	.word	0x0002d614
    eec8:	0002d64c 	.word	0x0002d64c

0000eecc <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
    eecc:	e59f303c 	ldr	r3, [pc, #60]	; ef10 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x44>
    eed0:	e92d4010 	push	{r4, lr}
    eed4:	e5803000 	str	r3, [r0]
    eed8:	e1a04000 	mov	r4, r0
    eedc:	eb005e15 	bl	26738 <CTimer::Get()>
    eee0:	e3a02007 	mov	r2, #7
    eee4:	e59f3028 	ldr	r3, [pc, #40]	; ef14 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x48>
    eee8:	e3500000 	cmp	r0, #0
    eeec:	e9840005 	stmib	r4, {r0, r2}
    eef0:	e5843010 	str	r3, [r4, #16]
    eef4:	0a000001 	beq	ef00 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x34>
    eef8:	e1a00004 	mov	r0, r4
    eefc:	e8bd8010 	pop	{r4, pc}
    ef00:	e3a02034 	mov	r2, #52	; 0x34
    ef04:	e59f100c 	ldr	r1, [pc, #12]	; ef18 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x4c>
    ef08:	e59f000c 	ldr	r0, [pc, #12]	; ef1c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x50>
    ef0c:	eb0039fb 	bl	1d700 <assertion_failed>
    ef10:	0002d6c4 	.word	0x0002d6c4
    ef14:	40004000 	.word	0x40004000
    ef18:	0002d614 	.word	0x0002d614
    ef1c:	0002cf50 	.word	0x0002cf50

0000ef20 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
    ef20:	e3500014 	cmp	r0, #20
    ef24:	e92d4010 	push	{r4, lr}
    ef28:	1a000005 	bne	ef44 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x24>
    ef2c:	e59f3030 	ldr	r3, [pc, #48]	; ef64 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x44>
    ef30:	e5930000 	ldr	r0, [r3]
    ef34:	e3500000 	cmp	r0, #0
    ef38:	0a000005 	beq	ef54 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x34>
    ef3c:	e8bd4010 	pop	{r4, lr}
    ef40:	ea003af0 	b	1db08 <CClassAllocator::Allocate()>
    ef44:	e3a020e2 	mov	r2, #226	; 0xe2
    ef48:	e59f1018 	ldr	r1, [pc, #24]	; ef68 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    ef4c:	e59f0018 	ldr	r0, [pc, #24]	; ef6c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x4c>
    ef50:	eb0039ea 	bl	1d700 <assertion_failed>
    ef54:	e3a020e2 	mov	r2, #226	; 0xe2
    ef58:	e59f1008 	ldr	r1, [pc, #8]	; ef68 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    ef5c:	e59f000c 	ldr	r0, [pc, #12]	; ef70 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
    ef60:	eb0039e6 	bl	1d700 <assertion_failed>
    ef64:	00034ba0 	.word	0x00034ba0
    ef68:	0002d614 	.word	0x0002d614
    ef6c:	0002d66c 	.word	0x0002d66c
    ef70:	0002cac8 	.word	0x0002cac8

0000ef74 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
    ef74:	e3510014 	cmp	r1, #20
    ef78:	e92d4010 	push	{r4, lr}
    ef7c:	1a000006 	bne	ef9c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x28>
    ef80:	e59f3034 	ldr	r3, [pc, #52]	; efbc <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x48>
    ef84:	e1a01000 	mov	r1, r0
    ef88:	e5930000 	ldr	r0, [r3]
    ef8c:	e3500000 	cmp	r0, #0
    ef90:	0a000005 	beq	efac <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x38>
    ef94:	e8bd4010 	pop	{r4, lr}
    ef98:	ea003b15 	b	1dbf4 <CClassAllocator::Free(void*)>
    ef9c:	e3a020e2 	mov	r2, #226	; 0xe2
    efa0:	e59f1018 	ldr	r1, [pc, #24]	; efc0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x4c>
    efa4:	e59f0018 	ldr	r0, [pc, #24]	; efc4 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x50>
    efa8:	eb0039d4 	bl	1d700 <assertion_failed>
    efac:	e3a020e2 	mov	r2, #226	; 0xe2
    efb0:	e59f1008 	ldr	r1, [pc, #8]	; efc0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x4c>
    efb4:	e59f000c 	ldr	r0, [pc, #12]	; efc8 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x54>
    efb8:	eb0039d0 	bl	1d700 <assertion_failed>
    efbc:	00034ba0 	.word	0x00034ba0
    efc0:	0002d614 	.word	0x0002d614
    efc4:	0002d66c 	.word	0x0002d66c
    efc8:	0002cac8 	.word	0x0002cac8

0000efcc <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    efcc:	e92d4010 	push	{r4, lr}
    efd0:	e1a04000 	mov	r4, r0
    efd4:	e3a01014 	mov	r1, #20
    efd8:	ebffffe5 	bl	ef74 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
    efdc:	e1a00004 	mov	r0, r4
    efe0:	e8bd8010 	pop	{r4, pc}

0000efe4 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
    efe4:	e92d4070 	push	{r4, r5, r6, lr}
    efe8:	e59f6040 	ldr	r6, [pc, #64]	; f030 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x4c>
    efec:	e5963000 	ldr	r3, [r6]
    eff0:	e3530000 	cmp	r3, #0
    eff4:	1a000009 	bne	f020 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x3c>
    eff8:	e1a04000 	mov	r4, r0
    effc:	e3a0001c 	mov	r0, #28
    f000:	eb006207 	bl	27824 <operator new(unsigned int)>
    f004:	e1a05000 	mov	r5, r0
    f008:	e1a02004 	mov	r2, r4
    f00c:	e3a01014 	mov	r1, #20
    f010:	e59f301c 	ldr	r3, [pc, #28]	; f034 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x50>
    f014:	eb003aa2 	bl	1daa4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    f018:	e5865000 	str	r5, [r6]
    f01c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f020:	e3a020e2 	mov	r2, #226	; 0xe2
    f024:	e59f100c 	ldr	r1, [pc, #12]	; f038 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x54>
    f028:	e59f000c 	ldr	r0, [pc, #12]	; f03c <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x58>
    f02c:	eb0039b3 	bl	1d700 <assertion_failed>
    f030:	00034ba0 	.word	0x00034ba0
    f034:	0002d69c 	.word	0x0002d69c
    f038:	0002d614 	.word	0x0002d614
    f03c:	0002cadc 	.word	0x0002cadc

0000f040 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    f040:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f044:	e59f7054 	ldr	r7, [pc, #84]	; f0a0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    f048:	e24dd00c 	sub	sp, sp, #12
    f04c:	e5973000 	ldr	r3, [r7]
    f050:	e3530000 	cmp	r3, #0
    f054:	1a00000d 	bne	f090 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    f058:	e1a05001 	mov	r5, r1
    f05c:	e1a04000 	mov	r4, r0
    f060:	e3a0001c 	mov	r0, #28
    f064:	eb0061ee 	bl	27824 <operator new(unsigned int)>
    f068:	e59f1034 	ldr	r1, [pc, #52]	; f0a4 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    f06c:	e1a03005 	mov	r3, r5
    f070:	e58d1000 	str	r1, [sp]
    f074:	e1a02004 	mov	r2, r4
    f078:	e3a01014 	mov	r1, #20
    f07c:	e1a06000 	mov	r6, r0
    f080:	eb003a93 	bl	1dad4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    f084:	e5876000 	str	r6, [r7]
    f088:	e28dd00c 	add	sp, sp, #12
    f08c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    f090:	e3a020e2 	mov	r2, #226	; 0xe2
    f094:	e59f100c 	ldr	r1, [pc, #12]	; f0a8 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    f098:	e59f000c 	ldr	r0, [pc, #12]	; f0ac <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    f09c:	eb003997 	bl	1d700 <assertion_failed>
    f0a0:	00034ba0 	.word	0x00034ba0
    f0a4:	0002d69c 	.word	0x0002d69c
    f0a8:	0002d614 	.word	0x0002d614
    f0ac:	0002cadc 	.word	0x0002cadc

0000f0b0 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    f0b0:	e3a02000 	mov	r2, #0
    f0b4:	e5801004 	str	r1, [r0, #4]
    f0b8:	e5c02000 	strb	r2, [r0]
    f0bc:	e12fff1e 	bx	lr

0000f0c0 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    f0c0:	e3a0c001 	mov	ip, #1
    f0c4:	e9800006 	stmib	r0, {r1, r2}
    f0c8:	e5c0c000 	strb	ip, [r0]
    f0cc:	e12fff1e 	bx	lr

0000f0d0 <CDWHCIRegister::~CDWHCIRegister()>:
    f0d0:	e12fff1e 	bx	lr

0000f0d4 <CDWHCIRegister::Read()>:
    f0d4:	e3a02001 	mov	r2, #1
    f0d8:	e5903004 	ldr	r3, [r0, #4]
    f0dc:	e5933000 	ldr	r3, [r3]
    f0e0:	e5c02000 	strb	r2, [r0]
    f0e4:	e5803008 	str	r3, [r0, #8]
    f0e8:	e1a00003 	mov	r0, r3
    f0ec:	e12fff1e 	bx	lr

0000f0f0 <CDWHCIRegister::Write()>:
    f0f0:	e5d03000 	ldrb	r3, [r0]
    f0f4:	e3530000 	cmp	r3, #0
    f0f8:	0a000003 	beq	f10c <CDWHCIRegister::Write()+0x1c>
    f0fc:	e5902008 	ldr	r2, [r0, #8]
    f100:	e5903004 	ldr	r3, [r0, #4]
    f104:	e5832000 	str	r2, [r3]
    f108:	e12fff1e 	bx	lr
    f10c:	e3a02035 	mov	r2, #53	; 0x35
    f110:	e92d4010 	push	{r4, lr}
    f114:	e59f1004 	ldr	r1, [pc, #4]	; f120 <CDWHCIRegister::Write()+0x30>
    f118:	e59f0004 	ldr	r0, [pc, #4]	; f124 <CDWHCIRegister::Write()+0x34>
    f11c:	eb003977 	bl	1d700 <assertion_failed>
    f120:	0002d6e4 	.word	0x0002d6e4
    f124:	0002d6f8 	.word	0x0002d6f8

0000f128 <CDWHCIRegister::Get() const>:
    f128:	e5d03000 	ldrb	r3, [r0]
    f12c:	e3530000 	cmp	r3, #0
    f130:	0a000001 	beq	f13c <CDWHCIRegister::Get() const+0x14>
    f134:	e5900008 	ldr	r0, [r0, #8]
    f138:	e12fff1e 	bx	lr
    f13c:	e3a0203b 	mov	r2, #59	; 0x3b
    f140:	e92d4010 	push	{r4, lr}
    f144:	e59f1004 	ldr	r1, [pc, #4]	; f150 <CDWHCIRegister::Get() const+0x28>
    f148:	e59f0004 	ldr	r0, [pc, #4]	; f154 <CDWHCIRegister::Get() const+0x2c>
    f14c:	eb00396b 	bl	1d700 <assertion_failed>
    f150:	0002d6e4 	.word	0x0002d6e4
    f154:	0002d6f8 	.word	0x0002d6f8

0000f158 <CDWHCIRegister::Set(unsigned int)>:
    f158:	e3a03001 	mov	r3, #1
    f15c:	e5801008 	str	r1, [r0, #8]
    f160:	e5c03000 	strb	r3, [r0]
    f164:	e12fff1e 	bx	lr

0000f168 <CDWHCIRegister::IsSet(unsigned int) const>:
    f168:	e5d03000 	ldrb	r3, [r0]
    f16c:	e3530000 	cmp	r3, #0
    f170:	0a000004 	beq	f188 <CDWHCIRegister::IsSet(unsigned int) const+0x20>
    f174:	e5903008 	ldr	r3, [r0, #8]
    f178:	e1110003 	tst	r1, r3
    f17c:	13a00001 	movne	r0, #1
    f180:	03a00000 	moveq	r0, #0
    f184:	e12fff1e 	bx	lr
    f188:	e3a02047 	mov	r2, #71	; 0x47
    f18c:	e92d4010 	push	{r4, lr}
    f190:	e59f1004 	ldr	r1, [pc, #4]	; f19c <CDWHCIRegister::IsSet(unsigned int) const+0x34>
    f194:	e59f0004 	ldr	r0, [pc, #4]	; f1a0 <CDWHCIRegister::IsSet(unsigned int) const+0x38>
    f198:	eb003958 	bl	1d700 <assertion_failed>
    f19c:	0002d6e4 	.word	0x0002d6e4
    f1a0:	0002d6f8 	.word	0x0002d6f8

0000f1a4 <CDWHCIRegister::And(unsigned int)>:
    f1a4:	e5d03000 	ldrb	r3, [r0]
    f1a8:	e3530000 	cmp	r3, #0
    f1ac:	0a000003 	beq	f1c0 <CDWHCIRegister::And(unsigned int)+0x1c>
    f1b0:	e5903008 	ldr	r3, [r0, #8]
    f1b4:	e0011003 	and	r1, r1, r3
    f1b8:	e5801008 	str	r1, [r0, #8]
    f1bc:	e12fff1e 	bx	lr
    f1c0:	e3a0204d 	mov	r2, #77	; 0x4d
    f1c4:	e92d4010 	push	{r4, lr}
    f1c8:	e59f1004 	ldr	r1, [pc, #4]	; f1d4 <CDWHCIRegister::And(unsigned int)+0x30>
    f1cc:	e59f0004 	ldr	r0, [pc, #4]	; f1d8 <CDWHCIRegister::And(unsigned int)+0x34>
    f1d0:	eb00394a 	bl	1d700 <assertion_failed>
    f1d4:	0002d6e4 	.word	0x0002d6e4
    f1d8:	0002d6f8 	.word	0x0002d6f8

0000f1dc <CDWHCIRegister::Or(unsigned int)>:
    f1dc:	e5d03000 	ldrb	r3, [r0]
    f1e0:	e3530000 	cmp	r3, #0
    f1e4:	0a000003 	beq	f1f8 <CDWHCIRegister::Or(unsigned int)+0x1c>
    f1e8:	e5903008 	ldr	r3, [r0, #8]
    f1ec:	e1831001 	orr	r1, r3, r1
    f1f0:	e5801008 	str	r1, [r0, #8]
    f1f4:	e12fff1e 	bx	lr
    f1f8:	e3a02053 	mov	r2, #83	; 0x53
    f1fc:	e92d4010 	push	{r4, lr}
    f200:	e59f1004 	ldr	r1, [pc, #4]	; f20c <CDWHCIRegister::Or(unsigned int)+0x30>
    f204:	e59f0004 	ldr	r0, [pc, #4]	; f210 <CDWHCIRegister::Or(unsigned int)+0x34>
    f208:	eb00393c 	bl	1d700 <assertion_failed>
    f20c:	0002d6e4 	.word	0x0002d6e4
    f210:	0002d6f8 	.word	0x0002d6f8

0000f214 <CDWHCIRegister::ClearBit(unsigned int)>:
    f214:	e5d03000 	ldrb	r3, [r0]
    f218:	e92d4010 	push	{r4, lr}
    f21c:	e3530000 	cmp	r3, #0
    f220:	0a000006 	beq	f240 <CDWHCIRegister::ClearBit(unsigned int)+0x2c>
    f224:	e351001f 	cmp	r1, #31
    f228:	8a000008 	bhi	f250 <CDWHCIRegister::ClearBit(unsigned int)+0x3c>
    f22c:	e3a02001 	mov	r2, #1
    f230:	e5903008 	ldr	r3, [r0, #8]
    f234:	e1c31112 	bic	r1, r3, r2, lsl r1
    f238:	e5801008 	str	r1, [r0, #8]
    f23c:	e8bd8010 	pop	{r4, pc}
    f240:	e3a02059 	mov	r2, #89	; 0x59
    f244:	e59f1014 	ldr	r1, [pc, #20]	; f260 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    f248:	e59f0014 	ldr	r0, [pc, #20]	; f264 <CDWHCIRegister::ClearBit(unsigned int)+0x50>
    f24c:	eb00392b 	bl	1d700 <assertion_failed>
    f250:	e3a0205a 	mov	r2, #90	; 0x5a
    f254:	e59f1004 	ldr	r1, [pc, #4]	; f260 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    f258:	e59f0008 	ldr	r0, [pc, #8]	; f268 <CDWHCIRegister::ClearBit(unsigned int)+0x54>
    f25c:	eb003927 	bl	1d700 <assertion_failed>
    f260:	0002d6e4 	.word	0x0002d6e4
    f264:	0002d6f8 	.word	0x0002d6f8
    f268:	0002d704 	.word	0x0002d704

0000f26c <CDWHCIRegister::SetBit(unsigned int)>:
    f26c:	e5d03000 	ldrb	r3, [r0]
    f270:	e92d4010 	push	{r4, lr}
    f274:	e3530000 	cmp	r3, #0
    f278:	0a000006 	beq	f298 <CDWHCIRegister::SetBit(unsigned int)+0x2c>
    f27c:	e351001f 	cmp	r1, #31
    f280:	8a000008 	bhi	f2a8 <CDWHCIRegister::SetBit(unsigned int)+0x3c>
    f284:	e3a02001 	mov	r2, #1
    f288:	e5903008 	ldr	r3, [r0, #8]
    f28c:	e1831112 	orr	r1, r3, r2, lsl r1
    f290:	e5801008 	str	r1, [r0, #8]
    f294:	e8bd8010 	pop	{r4, pc}
    f298:	e3a02060 	mov	r2, #96	; 0x60
    f29c:	e59f1014 	ldr	r1, [pc, #20]	; f2b8 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    f2a0:	e59f0014 	ldr	r0, [pc, #20]	; f2bc <CDWHCIRegister::SetBit(unsigned int)+0x50>
    f2a4:	eb003915 	bl	1d700 <assertion_failed>
    f2a8:	e3a02061 	mov	r2, #97	; 0x61
    f2ac:	e59f1004 	ldr	r1, [pc, #4]	; f2b8 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    f2b0:	e59f0008 	ldr	r0, [pc, #8]	; f2c0 <CDWHCIRegister::SetBit(unsigned int)+0x54>
    f2b4:	eb003911 	bl	1d700 <assertion_failed>
    f2b8:	0002d6e4 	.word	0x0002d6e4
    f2bc:	0002d6f8 	.word	0x0002d6f8
    f2c0:	0002d704 	.word	0x0002d704

0000f2c4 <CDWHCIRegister::ClearAll()>:
    f2c4:	e3a02000 	mov	r2, #0
    f2c8:	e3a03001 	mov	r3, #1
    f2cc:	e5802008 	str	r2, [r0, #8]
    f2d0:	e5c03000 	strb	r3, [r0]
    f2d4:	e12fff1e 	bx	lr

0000f2d8 <CDWHCIRegister::SetAll()>:
    f2d8:	e3e02000 	mvn	r2, #0
    f2dc:	e3a03001 	mov	r3, #1
    f2e0:	e5802008 	str	r2, [r0, #8]
    f2e4:	e5c03000 	strb	r3, [r0]
    f2e8:	e12fff1e 	bx	lr

0000f2ec <CDWHCIRegister::Dump() const>:
    f2ec:	e92d4010 	push	{r4, lr}
    f2f0:	e5d03000 	ldrb	r3, [r0]
    f2f4:	e1a04000 	mov	r4, r0
    f2f8:	e3530000 	cmp	r3, #0
    f2fc:	e24dd008 	sub	sp, sp, #8
    f300:	0a00000c 	beq	f338 <CDWHCIRegister::Dump() const+0x4c>
    f304:	eb0041fd 	bl	1fb00 <CLogger::Get()>
    f308:	e5943004 	ldr	r3, [r4, #4]
    f30c:	e5942008 	ldr	r2, [r4, #8]
    f310:	e1a03a03 	lsl	r3, r3, #20
    f314:	e1a03a23 	lsr	r3, r3, #20
    f318:	e58d3000 	str	r3, [sp]
    f31c:	e58d2004 	str	r2, [sp, #4]
    f320:	e59f303c 	ldr	r3, [pc, #60]	; f364 <CDWHCIRegister::Dump() const+0x78>
    f324:	e3a02004 	mov	r2, #4
    f328:	e59f1038 	ldr	r1, [pc, #56]	; f368 <CDWHCIRegister::Dump() const+0x7c>
    f32c:	eb004135 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f330:	e28dd008 	add	sp, sp, #8
    f334:	e8bd8010 	pop	{r4, pc}
    f338:	eb0041f0 	bl	1fb00 <CLogger::Get()>
    f33c:	e5942004 	ldr	r2, [r4, #4]
    f340:	e59f3024 	ldr	r3, [pc, #36]	; f36c <CDWHCIRegister::Dump() const+0x80>
    f344:	e1a02a02 	lsl	r2, r2, #20
    f348:	e1a02a22 	lsr	r2, r2, #20
    f34c:	e58d2000 	str	r2, [sp]
    f350:	e59f1010 	ldr	r1, [pc, #16]	; f368 <CDWHCIRegister::Dump() const+0x7c>
    f354:	e3a02004 	mov	r2, #4
    f358:	eb00412a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f35c:	e28dd008 	add	sp, sp, #8
    f360:	e8bd8010 	pop	{r4, pc}
    f364:	0002d720 	.word	0x0002d720
    f368:	0002d73c 	.word	0x0002d73c
    f36c:	0002d744 	.word	0x0002d744

0000f370 <CDWHCIRootPort::~CDWHCIRootPort()>:
    f370:	e92d4010 	push	{r4, lr}
    f374:	e1a04000 	mov	r4, r0
    f378:	e5900008 	ldr	r0, [r0, #8]
    f37c:	e59f301c 	ldr	r3, [pc, #28]	; f3a0 <CDWHCIRootPort::~CDWHCIRootPort()+0x30>
    f380:	e3500000 	cmp	r0, #0
    f384:	e5843000 	str	r3, [r4]
    f388:	0a000002 	beq	f398 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    f38c:	e5903000 	ldr	r3, [r0]
    f390:	e5933004 	ldr	r3, [r3, #4]
    f394:	e12fff33 	blx	r3
    f398:	e1a00004 	mov	r0, r4
    f39c:	e8bd8010 	pop	{r4, pc}
    f3a0:	0002d830 	.word	0x0002d830

0000f3a4 <CDWHCIRootPort::~CDWHCIRootPort()>:
    f3a4:	e92d4010 	push	{r4, lr}
    f3a8:	e1a04000 	mov	r4, r0
    f3ac:	e5900008 	ldr	r0, [r0, #8]
    f3b0:	e59f3028 	ldr	r3, [pc, #40]	; f3e0 <CDWHCIRootPort::~CDWHCIRootPort()+0x3c>
    f3b4:	e3500000 	cmp	r0, #0
    f3b8:	e5843000 	str	r3, [r4]
    f3bc:	0a000002 	beq	f3cc <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    f3c0:	e5903000 	ldr	r3, [r0]
    f3c4:	e5933004 	ldr	r3, [r3, #4]
    f3c8:	e12fff33 	blx	r3
    f3cc:	e1a00004 	mov	r0, r4
    f3d0:	e3a0100c 	mov	r1, #12
    f3d4:	eb006120 	bl	2785c <operator delete(void*, unsigned int)>
    f3d8:	e1a00004 	mov	r0, r4
    f3dc:	e8bd8010 	pop	{r4, pc}
    f3e0:	0002d830 	.word	0x0002d830

0000f3e4 <CDWHCIRootPort::RemoveDevice()>:
    f3e4:	e92d4010 	push	{r4, lr}
    f3e8:	e1a04000 	mov	r4, r0
    f3ec:	e5900004 	ldr	r0, [r0, #4]
    f3f0:	e3500000 	cmp	r0, #0
    f3f4:	0a00000b 	beq	f428 <CDWHCIRootPort::RemoveDevice()+0x44>
    f3f8:	e3a01000 	mov	r1, #0
    f3fc:	ebfff26c 	bl	bdb4 <CDWHCIDevice::DisableRootPort(bool)>
    f400:	e5940008 	ldr	r0, [r4, #8]
    f404:	e3500000 	cmp	r0, #0
    f408:	0a000002 	beq	f418 <CDWHCIRootPort::RemoveDevice()+0x34>
    f40c:	e5903000 	ldr	r3, [r0]
    f410:	e5933004 	ldr	r3, [r3, #4]
    f414:	e12fff33 	blx	r3
    f418:	e3a03000 	mov	r3, #0
    f41c:	e3a00001 	mov	r0, #1
    f420:	e5843008 	str	r3, [r4, #8]
    f424:	e8bd8010 	pop	{r4, pc}
    f428:	e3a0206d 	mov	r2, #109	; 0x6d
    f42c:	e59f1004 	ldr	r1, [pc, #4]	; f438 <CDWHCIRootPort::RemoveDevice()+0x54>
    f430:	e59f0004 	ldr	r0, [pc, #4]	; f43c <CDWHCIRootPort::RemoveDevice()+0x58>
    f434:	eb0038b1 	bl	1d700 <assertion_failed>
    f438:	0002d764 	.word	0x0002d764
    f43c:	0002d778 	.word	0x0002d778

0000f440 <CDWHCIRootPort::ReScanDevices()>:
    f440:	e92d4010 	push	{r4, lr}
    f444:	e5904008 	ldr	r4, [r0, #8]
    f448:	e3540000 	cmp	r4, #0
    f44c:	0a000002 	beq	f45c <CDWHCIRootPort::ReScanDevices()+0x1c>
    f450:	e1a00004 	mov	r0, r4
    f454:	e8bd4010 	pop	{r4, lr}
    f458:	ea00053e 	b	10958 <CUSBDevice::ReScanDevices()>
    f45c:	eb0041a7 	bl	1fb00 <CLogger::Get()>
    f460:	e3a02002 	mov	r2, #2
    f464:	e59f300c 	ldr	r3, [pc, #12]	; f478 <CDWHCIRootPort::ReScanDevices()+0x38>
    f468:	e59f100c 	ldr	r1, [pc, #12]	; f47c <CDWHCIRootPort::ReScanDevices()+0x3c>
    f46c:	eb0040e5 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f470:	e1a00004 	mov	r0, r4
    f474:	e8bd8010 	pop	{r4, pc}
    f478:	0002d788 	.word	0x0002d788
    f47c:	0002d844 	.word	0x0002d844

0000f480 <CDWHCIRootPort::HandlePortStatusChange()>:
    f480:	e92d4010 	push	{r4, lr}
    f484:	e1a04000 	mov	r4, r0
    f488:	e5900004 	ldr	r0, [r0, #4]
    f48c:	e3500000 	cmp	r0, #0
    f490:	0a00000f 	beq	f4d4 <CDWHCIRootPort::HandlePortStatusChange()+0x54>
    f494:	ebfff216 	bl	bcf4 <CDWHCIDevice::DeviceConnected()>
    f498:	e3500000 	cmp	r0, #0
    f49c:	e5943008 	ldr	r3, [r4, #8]
    f4a0:	1a000006 	bne	f4c0 <CDWHCIRootPort::HandlePortStatusChange()+0x40>
    f4a4:	e3530000 	cmp	r3, #0
    f4a8:	08bd8010 	popeq	{r4, pc}
    f4ac:	e5943000 	ldr	r3, [r4]
    f4b0:	e1a00004 	mov	r0, r4
    f4b4:	e8bd4010 	pop	{r4, lr}
    f4b8:	e593300c 	ldr	r3, [r3, #12]
    f4bc:	e12fff13 	bx	r3
    f4c0:	e3530000 	cmp	r3, #0
    f4c4:	18bd8010 	popne	{r4, pc}
    f4c8:	e5940004 	ldr	r0, [r4, #4]
    f4cc:	e8bd4010 	pop	{r4, lr}
    f4d0:	eafffb91 	b	e31c <CDWHCIDevice::ReScanDevices()>
    f4d4:	e3a02078 	mov	r2, #120	; 0x78
    f4d8:	e59f1004 	ldr	r1, [pc, #4]	; f4e4 <CDWHCIRootPort::HandlePortStatusChange()+0x64>
    f4dc:	e59f0004 	ldr	r0, [pc, #4]	; f4e8 <CDWHCIRootPort::HandlePortStatusChange()+0x68>
    f4e0:	eb003886 	bl	1d700 <assertion_failed>
    f4e4:	0002d764 	.word	0x0002d764
    f4e8:	0002d778 	.word	0x0002d778

0000f4ec <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
    f4ec:	e3a02000 	mov	r2, #0
    f4f0:	e59fc024 	ldr	ip, [pc, #36]	; f51c <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x30>
    f4f4:	e1510002 	cmp	r1, r2
    f4f8:	e5801004 	str	r1, [r0, #4]
    f4fc:	e580c000 	str	ip, [r0]
    f500:	e5802008 	str	r2, [r0, #8]
    f504:	112fff1e 	bxne	lr
    f508:	e3a0201f 	mov	r2, #31
    f50c:	e92d4010 	push	{r4, lr}
    f510:	e59f1008 	ldr	r1, [pc, #8]	; f520 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x34>
    f514:	e59f0008 	ldr	r0, [pc, #8]	; f524 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x38>
    f518:	eb003878 	bl	1d700 <assertion_failed>
    f51c:	0002d830 	.word	0x0002d830
    f520:	0002d764 	.word	0x0002d764
    f524:	0002d778 	.word	0x0002d778

0000f528 <CDWHCIRootPort::Initialize()>:
    f528:	e92d4070 	push	{r4, r5, r6, lr}
    f52c:	e1a04000 	mov	r4, r0
    f530:	e5900004 	ldr	r0, [r0, #4]
    f534:	e3500000 	cmp	r0, #0
    f538:	0a00003d 	beq	f634 <CDWHCIRootPort::Initialize()+0x10c>
    f53c:	ebfff1fa 	bl	bd2c <CDWHCIDevice::GetPortSpeed()>
    f540:	e3500004 	cmp	r0, #4
    f544:	e1a05000 	mov	r5, r0
    f548:	0a000031 	beq	f614 <CDWHCIRootPort::Initialize()+0xec>
    f54c:	e5943008 	ldr	r3, [r4, #8]
    f550:	e3530000 	cmp	r3, #0
    f554:	1a00003a 	bne	f644 <CDWHCIRootPort::Initialize()+0x11c>
    f558:	e3a00058 	mov	r0, #88	; 0x58
    f55c:	eb0060b0 	bl	27824 <operator new(unsigned int)>
    f560:	e1a06000 	mov	r6, r0
    f564:	e1a02005 	mov	r2, r5
    f568:	e1a03004 	mov	r3, r4
    f56c:	e5941004 	ldr	r1, [r4, #4]
    f570:	eb000471 	bl	1073c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
    f574:	e1a00006 	mov	r0, r6
    f578:	e5846008 	str	r6, [r4, #8]
    f57c:	eb00068a 	bl	10fac <CUSBDevice::Initialize()>
    f580:	e3500000 	cmp	r0, #0
    f584:	e5940008 	ldr	r0, [r4, #8]
    f588:	0a00000f 	beq	f5cc <CDWHCIRootPort::Initialize()+0xa4>
    f58c:	e5903000 	ldr	r3, [r0]
    f590:	e593300c 	ldr	r3, [r3, #12]
    f594:	e12fff33 	blx	r3
    f598:	e2505000 	subs	r5, r0, #0
    f59c:	0a000013 	beq	f5f0 <CDWHCIRootPort::Initialize()+0xc8>
    f5a0:	eb004156 	bl	1fb00 <CLogger::Get()>
    f5a4:	e3a02004 	mov	r2, #4
    f5a8:	e59f30d4 	ldr	r3, [pc, #212]	; f684 <CDWHCIRootPort::Initialize()+0x15c>
    f5ac:	e59f10d4 	ldr	r1, [pc, #212]	; f688 <CDWHCIRootPort::Initialize()+0x160>
    f5b0:	eb004094 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f5b4:	e5940004 	ldr	r0, [r4, #4]
    f5b8:	ebfff1ee 	bl	bd78 <CDWHCIDevice::OvercurrentDetected()>
    f5bc:	e3500000 	cmp	r0, #0
    f5c0:	1a000023 	bne	f654 <CDWHCIRootPort::Initialize()+0x12c>
    f5c4:	e1a00005 	mov	r0, r5
    f5c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f5cc:	e3500000 	cmp	r0, #0
    f5d0:	0a000002 	beq	f5e0 <CDWHCIRootPort::Initialize()+0xb8>
    f5d4:	e5903000 	ldr	r3, [r0]
    f5d8:	e5933004 	ldr	r3, [r3, #4]
    f5dc:	e12fff33 	blx	r3
    f5e0:	e3a05000 	mov	r5, #0
    f5e4:	e1a00005 	mov	r0, r5
    f5e8:	e5845008 	str	r5, [r4, #8]
    f5ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    f5f0:	eb004142 	bl	1fb00 <CLogger::Get()>
    f5f4:	e3a02002 	mov	r2, #2
    f5f8:	e59f308c 	ldr	r3, [pc, #140]	; f68c <CDWHCIRootPort::Initialize()+0x164>
    f5fc:	e59f1084 	ldr	r1, [pc, #132]	; f688 <CDWHCIRootPort::Initialize()+0x160>
    f600:	eb004080 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f604:	e5940008 	ldr	r0, [r4, #8]
    f608:	e3500000 	cmp	r0, #0
    f60c:	1afffff0 	bne	f5d4 <CDWHCIRootPort::Initialize()+0xac>
    f610:	eafffff2 	b	f5e0 <CDWHCIRootPort::Initialize()+0xb8>
    f614:	e3a05000 	mov	r5, #0
    f618:	eb004138 	bl	1fb00 <CLogger::Get()>
    f61c:	e3a02001 	mov	r2, #1
    f620:	e59f3068 	ldr	r3, [pc, #104]	; f690 <CDWHCIRootPort::Initialize()+0x168>
    f624:	e59f105c 	ldr	r1, [pc, #92]	; f688 <CDWHCIRootPort::Initialize()+0x160>
    f628:	eb004076 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f62c:	e1a00005 	mov	r0, r5
    f630:	e8bd8070 	pop	{r4, r5, r6, pc}
    f634:	e3a0202c 	mov	r2, #44	; 0x2c
    f638:	e59f1054 	ldr	r1, [pc, #84]	; f694 <CDWHCIRootPort::Initialize()+0x16c>
    f63c:	e59f0054 	ldr	r0, [pc, #84]	; f698 <CDWHCIRootPort::Initialize()+0x170>
    f640:	eb00382e 	bl	1d700 <assertion_failed>
    f644:	e3a02036 	mov	r2, #54	; 0x36
    f648:	e59f1044 	ldr	r1, [pc, #68]	; f694 <CDWHCIRootPort::Initialize()+0x16c>
    f64c:	e59f0048 	ldr	r0, [pc, #72]	; f69c <CDWHCIRootPort::Initialize()+0x174>
    f650:	eb00382a 	bl	1d700 <assertion_failed>
    f654:	eb004129 	bl	1fb00 <CLogger::Get()>
    f658:	e3a02001 	mov	r2, #1
    f65c:	e59f303c 	ldr	r3, [pc, #60]	; f6a0 <CDWHCIRootPort::Initialize()+0x178>
    f660:	e59f1020 	ldr	r1, [pc, #32]	; f688 <CDWHCIRootPort::Initialize()+0x160>
    f664:	eb004067 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f668:	e5940004 	ldr	r0, [r4, #4]
    f66c:	e3a01001 	mov	r1, #1
    f670:	ebfff1cf 	bl	bdb4 <CDWHCIDevice::DisableRootPort(bool)>
    f674:	e5940008 	ldr	r0, [r4, #8]
    f678:	e3500000 	cmp	r0, #0
    f67c:	1affffd4 	bne	f5d4 <CDWHCIRootPort::Initialize()+0xac>
    f680:	eaffffd6 	b	f5e0 <CDWHCIRootPort::Initialize()+0xb8>
    f684:	0002d7fc 	.word	0x0002d7fc
    f688:	0002d844 	.word	0x0002d844
    f68c:	0002d7e4 	.word	0x0002d7e4
    f690:	0002d7b8 	.word	0x0002d7b8
    f694:	0002d764 	.word	0x0002d764
    f698:	0002d778 	.word	0x0002d778
    f69c:	0002d7d4 	.word	0x0002d7d4
    f6a0:	0002d810 	.word	0x0002d810

0000f6a4 <CDWHCITransactionQueue::CDWHCITransactionQueue()>:
    f6a4:	e92d4010 	push	{r4, lr}
    f6a8:	e1a04000 	mov	r4, r0
    f6ac:	eb004420 	bl	20734 <CPtrList::CPtrList()>
    f6b0:	e3a03001 	mov	r3, #1
    f6b4:	e1a00004 	mov	r0, r4
    f6b8:	e5843004 	str	r3, [r4, #4]
    f6bc:	e8bd8010 	pop	{r4, pc}

0000f6c0 <CDWHCITransactionQueue::Flush()>:
    f6c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f6c4:	e1a05000 	mov	r5, r0
    f6c8:	e5900004 	ldr	r0, [r0, #4]
    f6cc:	e24dd00c 	sub	sp, sp, #12
    f6d0:	e3500000 	cmp	r0, #0
    f6d4:	1a000031 	bne	f7a0 <CDWHCITransactionQueue::Flush()+0xe0>
    f6d8:	e1a00005 	mov	r0, r5
    f6dc:	eb004421 	bl	20768 <CPtrList::GetFirst()>
    f6e0:	e2501000 	subs	r1, r0, #0
    f6e4:	0a000024 	beq	f77c <CDWHCITransactionQueue::Flush()+0xbc>
    f6e8:	e59f70e4 	ldr	r7, [pc, #228]	; f7d4 <CDWHCITransactionQueue::Flush()+0x114>
    f6ec:	e1a00005 	mov	r0, r5
    f6f0:	e58d1004 	str	r1, [sp, #4]
    f6f4:	eb004432 	bl	207c4 <CPtrList::GetPtr(TPtrListElement*)>
    f6f8:	e2504000 	subs	r4, r0, #0
    f6fc:	e59d1004 	ldr	r1, [sp, #4]
    f700:	0a000022 	beq	f790 <CDWHCITransactionQueue::Flush()+0xd0>
    f704:	e5943000 	ldr	r3, [r4]
    f708:	e1530007 	cmp	r3, r7
    f70c:	1a000025 	bne	f7a8 <CDWHCITransactionQueue::Flush()+0xe8>
    f710:	e1a00005 	mov	r0, r5
    f714:	eb0044b2 	bl	209e4 <CPtrList::Remove(TPtrListElement*)>
    f718:	e5940004 	ldr	r0, [r4, #4]
    f71c:	e3500000 	cmp	r0, #0
    f720:	0a000024 	beq	f7b8 <CDWHCITransactionQueue::Flush()+0xf8>
    f724:	eb00038a 	bl	10554 <CDWHCITransferStageData::GetURB() const>
    f728:	e2506000 	subs	r6, r0, #0
    f72c:	0a000003 	beq	f740 <CDWHCITransactionQueue::Flush()+0x80>
    f730:	ebffebea 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
    f734:	e1a00006 	mov	r0, r6
    f738:	e3a0102c 	mov	r1, #44	; 0x2c
    f73c:	ebffec6b 	bl	a8f0 <CUSBRequest::operator delete(void*, unsigned int)>
    f740:	e5946004 	ldr	r6, [r4, #4]
    f744:	e3560000 	cmp	r6, #0
    f748:	0a000004 	beq	f760 <CDWHCITransactionQueue::Flush()+0xa0>
    f74c:	e1a00006 	mov	r0, r6
    f750:	eb00012d 	bl	fc0c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    f754:	e1a00006 	mov	r0, r6
    f758:	e3a01054 	mov	r1, #84	; 0x54
    f75c:	eb0003aa 	bl	1060c <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    f760:	e3a0100c 	mov	r1, #12
    f764:	e1a00004 	mov	r0, r4
    f768:	eb00603b 	bl	2785c <operator delete(void*, unsigned int)>
    f76c:	e1a00005 	mov	r0, r5
    f770:	eb0043fc 	bl	20768 <CPtrList::GetFirst()>
    f774:	e2501000 	subs	r1, r0, #0
    f778:	1affffdb 	bne	f6ec <CDWHCITransactionQueue::Flush()+0x2c>
    f77c:	e5953004 	ldr	r3, [r5, #4]
    f780:	e3530000 	cmp	r3, #0
    f784:	1a00000f 	bne	f7c8 <CDWHCITransactionQueue::Flush()+0x108>
    f788:	e28dd00c 	add	sp, sp, #12
    f78c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    f790:	e3a02047 	mov	r2, #71	; 0x47
    f794:	e59f103c 	ldr	r1, [pc, #60]	; f7d8 <CDWHCITransactionQueue::Flush()+0x118>
    f798:	e59f003c 	ldr	r0, [pc, #60]	; f7dc <CDWHCITransactionQueue::Flush()+0x11c>
    f79c:	eb0037d7 	bl	1d700 <assertion_failed>
    f7a0:	eb0063bf 	bl	286a4 <EnterCritical>
    f7a4:	eaffffcb 	b	f6d8 <CDWHCITransactionQueue::Flush()+0x18>
    f7a8:	e3a02048 	mov	r2, #72	; 0x48
    f7ac:	e59f1024 	ldr	r1, [pc, #36]	; f7d8 <CDWHCITransactionQueue::Flush()+0x118>
    f7b0:	e59f0028 	ldr	r0, [pc, #40]	; f7e0 <CDWHCITransactionQueue::Flush()+0x120>
    f7b4:	eb0037d1 	bl	1d700 <assertion_failed>
    f7b8:	e3a0204c 	mov	r2, #76	; 0x4c
    f7bc:	e59f1014 	ldr	r1, [pc, #20]	; f7d8 <CDWHCITransactionQueue::Flush()+0x118>
    f7c0:	e59f001c 	ldr	r0, [pc, #28]	; f7e4 <CDWHCITransactionQueue::Flush()+0x124>
    f7c4:	eb0037cd 	bl	1d700 <assertion_failed>
    f7c8:	e28dd00c 	add	sp, sp, #12
    f7cc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    f7d0:	ea0063dd 	b	2874c <LeaveCritical>
    f7d4:	58415055 	.word	0x58415055
    f7d8:	0002d84c 	.word	0x0002d84c
    f7dc:	0002d860 	.word	0x0002d860
    f7e0:	0002d86c 	.word	0x0002d86c
    f7e4:	0002d890 	.word	0x0002d890

0000f7e8 <CDWHCITransactionQueue::~CDWHCITransactionQueue()>:
    f7e8:	e92d4010 	push	{r4, lr}
    f7ec:	e1a04000 	mov	r4, r0
    f7f0:	ebffffb2 	bl	f6c0 <CDWHCITransactionQueue::Flush()>
    f7f4:	e1a00004 	mov	r0, r4
    f7f8:	eb0043d0 	bl	20740 <CPtrList::~CPtrList()>
    f7fc:	e1a00004 	mov	r0, r4
    f800:	e8bd8010 	pop	{r4, pc}

0000f804 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)>:
    f804:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f808:	e2518000 	subs	r8, r1, #0
    f80c:	0a000046 	beq	f92c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x128>
    f810:	e1a07000 	mov	r7, r0
    f814:	e5900004 	ldr	r0, [r0, #4]
    f818:	e3500000 	cmp	r0, #0
    f81c:	1a000034 	bne	f8f4 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0xf0>
    f820:	e1a00007 	mov	r0, r7
    f824:	eb0043cf 	bl	20768 <CPtrList::GetFirst()>
    f828:	e2505000 	subs	r5, r0, #0
    f82c:	0a000042 	beq	f93c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x138>
    f830:	e59f9128 	ldr	r9, [pc, #296]	; f960 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x15c>
    f834:	e1a01005 	mov	r1, r5
    f838:	e1a00007 	mov	r0, r7
    f83c:	eb0043e0 	bl	207c4 <CPtrList::GetPtr(TPtrListElement*)>
    f840:	e2504000 	subs	r4, r0, #0
    f844:	0a00002c 	beq	f8fc <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0xf8>
    f848:	e5943000 	ldr	r3, [r4]
    f84c:	e1530009 	cmp	r3, r9
    f850:	1a00002d 	bne	f90c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x108>
    f854:	e1a01005 	mov	r1, r5
    f858:	e1a00007 	mov	r0, r7
    f85c:	eb0043c3 	bl	20770 <CPtrList::GetNext(TPtrListElement*)>
    f860:	e5943004 	ldr	r3, [r4, #4]
    f864:	e1a06000 	mov	r6, r0
    f868:	e3530000 	cmp	r3, #0
    f86c:	0a00002a 	beq	f91c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x118>
    f870:	e1a00003 	mov	r0, r3
    f874:	eb000341 	bl	10580 <CDWHCITransferStageData::GetDevice() const>
    f878:	e1580000 	cmp	r8, r0
    f87c:	0a000003 	beq	f890 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x8c>
    f880:	e3560000 	cmp	r6, #0
    f884:	0a00002c 	beq	f93c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x138>
    f888:	e1a05006 	mov	r5, r6
    f88c:	eaffffe8 	b	f834 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x30>
    f890:	e1a00007 	mov	r0, r7
    f894:	e1a01005 	mov	r1, r5
    f898:	eb004451 	bl	209e4 <CPtrList::Remove(TPtrListElement*)>
    f89c:	e5940004 	ldr	r0, [r4, #4]
    f8a0:	e3500000 	cmp	r0, #0
    f8a4:	0a000029 	beq	f950 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x14c>
    f8a8:	eb000329 	bl	10554 <CDWHCITransferStageData::GetURB() const>
    f8ac:	e2505000 	subs	r5, r0, #0
    f8b0:	0a000003 	beq	f8c4 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0xc0>
    f8b4:	ebffeb89 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
    f8b8:	e1a00005 	mov	r0, r5
    f8bc:	e3a0102c 	mov	r1, #44	; 0x2c
    f8c0:	ebffec0a 	bl	a8f0 <CUSBRequest::operator delete(void*, unsigned int)>
    f8c4:	e5945004 	ldr	r5, [r4, #4]
    f8c8:	e3550000 	cmp	r5, #0
    f8cc:	0a000004 	beq	f8e4 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0xe0>
    f8d0:	e1a00005 	mov	r0, r5
    f8d4:	eb0000cc 	bl	fc0c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    f8d8:	e1a00005 	mov	r0, r5
    f8dc:	e3a01054 	mov	r1, #84	; 0x54
    f8e0:	eb000349 	bl	1060c <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    f8e4:	e1a00004 	mov	r0, r4
    f8e8:	e3a0100c 	mov	r1, #12
    f8ec:	eb005fda 	bl	2785c <operator delete(void*, unsigned int)>
    f8f0:	eaffffe2 	b	f880 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x7c>
    f8f4:	eb00636a 	bl	286a4 <EnterCritical>
    f8f8:	eaffffc8 	b	f820 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x1c>
    f8fc:	e3a02067 	mov	r2, #103	; 0x67
    f900:	e59f105c 	ldr	r1, [pc, #92]	; f964 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x160>
    f904:	e59f005c 	ldr	r0, [pc, #92]	; f968 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x164>
    f908:	eb00377c 	bl	1d700 <assertion_failed>
    f90c:	e3a02068 	mov	r2, #104	; 0x68
    f910:	e59f104c 	ldr	r1, [pc, #76]	; f964 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x160>
    f914:	e59f0050 	ldr	r0, [pc, #80]	; f96c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x168>
    f918:	eb003778 	bl	1d700 <assertion_failed>
    f91c:	e3a0206c 	mov	r2, #108	; 0x6c
    f920:	e59f103c 	ldr	r1, [pc, #60]	; f964 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x160>
    f924:	e59f0044 	ldr	r0, [pc, #68]	; f970 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x16c>
    f928:	eb003774 	bl	1d700 <assertion_failed>
    f92c:	e3a0205f 	mov	r2, #95	; 0x5f
    f930:	e59f102c 	ldr	r1, [pc, #44]	; f964 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x160>
    f934:	e59f0038 	ldr	r0, [pc, #56]	; f974 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x170>
    f938:	eb003770 	bl	1d700 <assertion_failed>
    f93c:	e5973004 	ldr	r3, [r7, #4]
    f940:	e3530000 	cmp	r3, #0
    f944:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    f948:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    f94c:	ea00637e 	b	2874c <LeaveCritical>
    f950:	e3a02071 	mov	r2, #113	; 0x71
    f954:	e59f1008 	ldr	r1, [pc, #8]	; f964 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x160>
    f958:	e59f0010 	ldr	r0, [pc, #16]	; f970 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x16c>
    f95c:	eb003767 	bl	1d700 <assertion_failed>
    f960:	58415055 	.word	0x58415055
    f964:	0002d84c 	.word	0x0002d84c
    f968:	0002d860 	.word	0x0002d860
    f96c:	0002d86c 	.word	0x0002d86c
    f970:	0002d890 	.word	0x0002d890
    f974:	0002d8a8 	.word	0x0002d8a8

0000f978 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>:
    f978:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    f97c:	e2517000 	subs	r7, r1, #0
    f980:	e24dd00c 	sub	sp, sp, #12
    f984:	0a000045 	beq	faa0 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x128>
    f988:	e3520901 	cmp	r2, #16384	; 0x4000
    f98c:	e1a05002 	mov	r5, r2
    f990:	2a000046 	bcs	fab0 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x138>
    f994:	e1a04000 	mov	r4, r0
    f998:	e3a0000c 	mov	r0, #12
    f99c:	eb005fa0 	bl	27824 <operator new(unsigned int)>
    f9a0:	e1a06000 	mov	r6, r0
    f9a4:	e5940004 	ldr	r0, [r4, #4]
    f9a8:	e59f3110 	ldr	r3, [pc, #272]	; fac0 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x148>
    f9ac:	e3500000 	cmp	r0, #0
    f9b0:	e5867004 	str	r7, [r6, #4]
    f9b4:	e1c650b8 	strh	r5, [r6, #8]
    f9b8:	e5863000 	str	r3, [r6]
    f9bc:	1a000026 	bne	fa5c <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xe4>
    f9c0:	e1a00004 	mov	r0, r4
    f9c4:	eb004367 	bl	20768 <CPtrList::GetFirst()>
    f9c8:	e2501000 	subs	r1, r0, #0
    f9cc:	0a000027 	beq	fa70 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xf8>
    f9d0:	e59f70e8 	ldr	r7, [pc, #232]	; fac0 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x148>
    f9d4:	e59f90e8 	ldr	r9, [pc, #232]	; fac4 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x14c>
    f9d8:	e59f80e8 	ldr	r8, [pc, #232]	; fac8 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x150>
    f9dc:	e1a00004 	mov	r0, r4
    f9e0:	e58d1004 	str	r1, [sp, #4]
    f9e4:	eb004376 	bl	207c4 <CPtrList::GetPtr(TPtrListElement*)>
    f9e8:	e2503000 	subs	r3, r0, #0
    f9ec:	e59d1004 	ldr	r1, [sp, #4]
    f9f0:	0a000022 	beq	fa80 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x108>
    f9f4:	e5932000 	ldr	r2, [r3]
    f9f8:	e1520007 	cmp	r2, r7
    f9fc:	1a000023 	bne	fa90 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x118>
    fa00:	e1d330b8 	ldrh	r3, [r3, #8]
    fa04:	e1530005 	cmp	r3, r5
    fa08:	0a00000b 	beq	fa3c <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xc4>
    fa0c:	e0433005 	sub	r3, r3, r5
    fa10:	e0033009 	and	r3, r3, r9
    fa14:	e1530008 	cmp	r3, r8
    fa18:	2a000007 	bcs	fa3c <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xc4>
    fa1c:	e1a02006 	mov	r2, r6
    fa20:	e1a00004 	mov	r0, r4
    fa24:	eb00437b 	bl	20818 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    fa28:	e5943004 	ldr	r3, [r4, #4]
    fa2c:	e3530000 	cmp	r3, #0
    fa30:	1a00000b 	bne	fa64 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xec>
    fa34:	e28dd00c 	add	sp, sp, #12
    fa38:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    fa3c:	e1a00004 	mov	r0, r4
    fa40:	e58d1004 	str	r1, [sp, #4]
    fa44:	eb004349 	bl	20770 <CPtrList::GetNext(TPtrListElement*)>
    fa48:	e3500000 	cmp	r0, #0
    fa4c:	e59d1004 	ldr	r1, [sp, #4]
    fa50:	0a000006 	beq	fa70 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xf8>
    fa54:	e1a01000 	mov	r1, r0
    fa58:	eaffffdf 	b	f9dc <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x64>
    fa5c:	eb006310 	bl	286a4 <EnterCritical>
    fa60:	eaffffd6 	b	f9c0 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x48>
    fa64:	e28dd00c 	add	sp, sp, #12
    fa68:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
    fa6c:	ea006336 	b	2874c <LeaveCritical>
    fa70:	e1a02006 	mov	r2, r6
    fa74:	e1a00004 	mov	r0, r4
    fa78:	eb0043a0 	bl	20900 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    fa7c:	eaffffe9 	b	fa28 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xb0>
    fa80:	e3a02097 	mov	r2, #151	; 0x97
    fa84:	e59f1040 	ldr	r1, [pc, #64]	; facc <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x154>
    fa88:	e59f0040 	ldr	r0, [pc, #64]	; fad0 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x158>
    fa8c:	eb00371b 	bl	1d700 <assertion_failed>
    fa90:	e3a02098 	mov	r2, #152	; 0x98
    fa94:	e59f1030 	ldr	r1, [pc, #48]	; facc <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x154>
    fa98:	e59f0034 	ldr	r0, [pc, #52]	; fad4 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x15c>
    fa9c:	eb003717 	bl	1d700 <assertion_failed>
    faa0:	e3a02085 	mov	r2, #133	; 0x85
    faa4:	e59f1020 	ldr	r1, [pc, #32]	; facc <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x154>
    faa8:	e59f0028 	ldr	r0, [pc, #40]	; fad8 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x160>
    faac:	eb003713 	bl	1d700 <assertion_failed>
    fab0:	e3a02086 	mov	r2, #134	; 0x86
    fab4:	e59f1010 	ldr	r1, [pc, #16]	; facc <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x154>
    fab8:	e59f001c 	ldr	r0, [pc, #28]	; fadc <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x164>
    fabc:	eb00370f 	bl	1d700 <assertion_failed>
    fac0:	58415055 	.word	0x58415055
    fac4:	00003fff 	.word	0x00003fff
    fac8:	00001fff 	.word	0x00001fff
    facc:	0002d84c 	.word	0x0002d84c
    fad0:	0002d8e0 	.word	0x0002d8e0
    fad4:	0002d8f0 	.word	0x0002d8f0
    fad8:	0002d898 	.word	0x0002d898
    fadc:	0002d8b8 	.word	0x0002d8b8

0000fae0 <CDWHCITransactionQueue::Dequeue(unsigned short)>:
    fae0:	e92d4070 	push	{r4, r5, r6, lr}
    fae4:	e1a04000 	mov	r4, r0
    fae8:	e5900004 	ldr	r0, [r0, #4]
    faec:	e1a06001 	mov	r6, r1
    faf0:	e3500000 	cmp	r0, #0
    faf4:	e24dd008 	sub	sp, sp, #8
    faf8:	1a00002b 	bne	fbac <CDWHCITransactionQueue::Dequeue(unsigned short)+0xcc>
    fafc:	e1a00004 	mov	r0, r4
    fb00:	eb004318 	bl	20768 <CPtrList::GetFirst()>
    fb04:	e2501000 	subs	r1, r0, #0
    fb08:	0a000012 	beq	fb58 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x78>
    fb0c:	e1a00004 	mov	r0, r4
    fb10:	e58d1004 	str	r1, [sp, #4]
    fb14:	eb00432a 	bl	207c4 <CPtrList::GetPtr(TPtrListElement*)>
    fb18:	e2505000 	subs	r5, r0, #0
    fb1c:	e59d1004 	ldr	r1, [sp, #4]
    fb20:	0a000027 	beq	fbc4 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xe4>
    fb24:	e59f30c8 	ldr	r3, [pc, #200]	; fbf4 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x114>
    fb28:	e5952000 	ldr	r2, [r5]
    fb2c:	e1520003 	cmp	r2, r3
    fb30:	1a000027 	bne	fbd4 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xf4>
    fb34:	e1d520b8 	ldrh	r2, [r5, #8]
    fb38:	e1520006 	cmp	r2, r6
    fb3c:	0a00000c 	beq	fb74 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x94>
    fb40:	e0423006 	sub	r3, r2, r6
    fb44:	e1a03903 	lsl	r3, r3, #18
    fb48:	e59f20a8 	ldr	r2, [pc, #168]	; fbf8 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x118>
    fb4c:	e1a03923 	lsr	r3, r3, #18
    fb50:	e1530002 	cmp	r3, r2
    fb54:	2a000006 	bcs	fb74 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x94>
    fb58:	e5943004 	ldr	r3, [r4, #4]
    fb5c:	e3530000 	cmp	r3, #0
    fb60:	1a000013 	bne	fbb4 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xd4>
    fb64:	e3a04000 	mov	r4, #0
    fb68:	e1a00004 	mov	r0, r4
    fb6c:	e28dd008 	add	sp, sp, #8
    fb70:	e8bd8070 	pop	{r4, r5, r6, pc}
    fb74:	e1a00004 	mov	r0, r4
    fb78:	eb004399 	bl	209e4 <CPtrList::Remove(TPtrListElement*)>
    fb7c:	e5943004 	ldr	r3, [r4, #4]
    fb80:	e3530000 	cmp	r3, #0
    fb84:	1a00000c 	bne	fbbc <CDWHCITransactionQueue::Dequeue(unsigned short)+0xdc>
    fb88:	e5954004 	ldr	r4, [r5, #4]
    fb8c:	e3540000 	cmp	r4, #0
    fb90:	0a000013 	beq	fbe4 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x104>
    fb94:	e1a00005 	mov	r0, r5
    fb98:	e3a0100c 	mov	r1, #12
    fb9c:	eb005f2e 	bl	2785c <operator delete(void*, unsigned int)>
    fba0:	e1a00004 	mov	r0, r4
    fba4:	e28dd008 	add	sp, sp, #8
    fba8:	e8bd8070 	pop	{r4, r5, r6, pc}
    fbac:	eb0062bc 	bl	286a4 <EnterCritical>
    fbb0:	eaffffd1 	b	fafc <CDWHCITransactionQueue::Dequeue(unsigned short)+0x1c>
    fbb4:	eb0062e4 	bl	2874c <LeaveCritical>
    fbb8:	eaffffe9 	b	fb64 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x84>
    fbbc:	eb0062e2 	bl	2874c <LeaveCritical>
    fbc0:	eafffff0 	b	fb88 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xa8>
    fbc4:	e3a020bc 	mov	r2, #188	; 0xbc
    fbc8:	e59f102c 	ldr	r1, [pc, #44]	; fbfc <CDWHCITransactionQueue::Dequeue(unsigned short)+0x11c>
    fbcc:	e59f002c 	ldr	r0, [pc, #44]	; fc00 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x120>
    fbd0:	eb0036ca 	bl	1d700 <assertion_failed>
    fbd4:	e3a020bd 	mov	r2, #189	; 0xbd
    fbd8:	e59f101c 	ldr	r1, [pc, #28]	; fbfc <CDWHCITransactionQueue::Dequeue(unsigned short)+0x11c>
    fbdc:	e59f0020 	ldr	r0, [pc, #32]	; fc04 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x124>
    fbe0:	eb0036c6 	bl	1d700 <assertion_failed>
    fbe4:	e3a020cb 	mov	r2, #203	; 0xcb
    fbe8:	e59f100c 	ldr	r1, [pc, #12]	; fbfc <CDWHCITransactionQueue::Dequeue(unsigned short)+0x11c>
    fbec:	e59f0014 	ldr	r0, [pc, #20]	; fc08 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x128>
    fbf0:	eb0036c2 	bl	1d700 <assertion_failed>
    fbf4:	58415055 	.word	0x58415055
    fbf8:	00001fff 	.word	0x00001fff
    fbfc:	0002d84c 	.word	0x0002d84c
    fc00:	0002d860 	.word	0x0002d860
    fc04:	0002d86c 	.word	0x0002d86c
    fc08:	0002d898 	.word	0x0002d898

0000fc0c <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    fc0c:	e92d4010 	push	{r4, lr}
    fc10:	e1a04000 	mov	r4, r0
    fc14:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    fc18:	e3500000 	cmp	r0, #0
    fc1c:	0a000002 	beq	fc2c <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    fc20:	e5903000 	ldr	r3, [r0]
    fc24:	e5933004 	ldr	r3, [r3, #4]
    fc28:	e12fff33 	blx	r3
    fc2c:	e3a03000 	mov	r3, #0
    fc30:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    fc34:	e5843050 	str	r3, [r4, #80]	; 0x50
    fc38:	e1500003 	cmp	r0, r3
    fc3c:	e5843048 	str	r3, [r4, #72]	; 0x48
    fc40:	0a000000 	beq	fc48 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    fc44:	eb005f03 	bl	27858 <operator delete[](void*)>
    fc48:	e1a00004 	mov	r0, r4
    fc4c:	e8bd8010 	pop	{r4, pc}

0000fc50 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    fc50:	e5801000 	str	r1, [r0]
    fc54:	e12fff1e 	bx	lr

0000fc58 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    fc58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fc5c:	e1a04000 	mov	r4, r0
    fc60:	e59f0178 	ldr	r0, [pc, #376]	; fde0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    fc64:	e5841040 	str	r1, [r4, #64]	; 0x40
    fc68:	e0000001 	and	r0, r0, r1
    fc6c:	e3500000 	cmp	r0, #0
    fc70:	0a00000f 	beq	fcb4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x5c>
    fc74:	e3110010 	tst	r1, #16
    fc78:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    fc7c:	e5940004 	ldr	r0, [r4, #4]
    fc80:	ebffeb03 	bl	a894 <CUSBRequest::IsCompleteOnNAK() const>
    fc84:	e3500000 	cmp	r0, #0
    fc88:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    fc8c:	e5940018 	ldr	r0, [r4, #24]
    fc90:	eb0008cd 	bl	11fcc <CUSBEndpoint::GetType() const>
    fc94:	e3500001 	cmp	r0, #1
    fc98:	1a000048 	bne	fdc0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x168>
    fc9c:	e5d43008 	ldrb	r3, [r4, #8]
    fca0:	e3530000 	cmp	r3, #0
    fca4:	0a000049 	beq	fdd0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x178>
    fca8:	e3a03000 	mov	r3, #0
    fcac:	e5843028 	str	r3, [r4, #40]	; 0x28
    fcb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fcb4:	e1a05002 	mov	r5, r2
    fcb8:	e5d41010 	ldrb	r1, [r4, #16]
    fcbc:	e5946030 	ldr	r6, [r4, #48]	; 0x30
    fcc0:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    fcc4:	e3510000 	cmp	r1, #0
    fcc8:	e0467005 	sub	r7, r6, r5
    fccc:	e0423003 	sub	r3, r2, r3
    fcd0:	0a00001d 	beq	fd4c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf4>
    fcd4:	e5d40011 	ldrb	r0, [r4, #17]
    fcd8:	e3530000 	cmp	r3, #0
    fcdc:	13a01000 	movne	r1, #0
    fce0:	02001001 	andeq	r1, r0, #1
    fce4:	e3510000 	cmp	r1, #0
    fce8:	1a000022 	bne	fd78 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x120>
    fcec:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    fcf0:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    fcf4:	e0811003 	add	r1, r1, r3
    fcf8:	e3500000 	cmp	r0, #0
    fcfc:	e0823003 	add	r3, r2, r3
    fd00:	e5841034 	str	r1, [r4, #52]	; 0x34
    fd04:	e5843048 	str	r3, [r4, #72]	; 0x48
    fd08:	1a000015 	bne	fd64 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x10c>
    fd0c:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    fd10:	e1530007 	cmp	r3, r7
    fd14:	3a000021 	bcc	fda0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x148>
    fd18:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    fd1c:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    fd20:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    fd24:	e0833005 	add	r3, r3, r5
    fd28:	e0410002 	sub	r0, r1, r2
    fd2c:	e0433006 	sub	r3, r3, r6
    fd30:	e150000c 	cmp	r0, ip
    fd34:	e5843028 	str	r3, [r4, #40]	; 0x28
    fd38:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    fd3c:	e1510002 	cmp	r1, r2
    fd40:	3a00001a 	bcc	fdb0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x158>
    fd44:	e584002c 	str	r0, [r4, #44]	; 0x2c
    fd48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fd4c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    fd50:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    fd54:	e0811003 	add	r1, r1, r3
    fd58:	e0823003 	add	r3, r2, r3
    fd5c:	e5841034 	str	r1, [r4, #52]	; 0x34
    fd60:	e5843048 	str	r3, [r4, #72]	; 0x48
    fd64:	e1a01007 	mov	r1, r7
    fd68:	e5d42009 	ldrb	r2, [r4, #9]
    fd6c:	e5940018 	ldr	r0, [r4, #24]
    fd70:	eb0008bb 	bl	12064 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    fd74:	eaffffe4 	b	fd0c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb4>
    fd78:	e3520000 	cmp	r2, #0
    fd7c:	15942020 	ldrne	r2, [r4, #32]
    fd80:	10020792 	mulne	r2, r2, r7
    fd84:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    fd88:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    fd8c:	e0811002 	add	r1, r1, r2
    fd90:	e0832002 	add	r2, r3, r2
    fd94:	e5841034 	str	r1, [r4, #52]	; 0x34
    fd98:	e5842048 	str	r2, [r4, #72]	; 0x48
    fd9c:	eafffff0 	b	fd64 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x10c>
    fda0:	e3a020d6 	mov	r2, #214	; 0xd6
    fda4:	e59f1038 	ldr	r1, [pc, #56]	; fde4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    fda8:	e59f0038 	ldr	r0, [pc, #56]	; fde8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x190>
    fdac:	eb003653 	bl	1d700 <assertion_failed>
    fdb0:	e3a020dc 	mov	r2, #220	; 0xdc
    fdb4:	e59f1028 	ldr	r1, [pc, #40]	; fde4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    fdb8:	e59f002c 	ldr	r0, [pc, #44]	; fdec <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x194>
    fdbc:	eb00364f 	bl	1d700 <assertion_failed>
    fdc0:	e3a020b9 	mov	r2, #185	; 0xb9
    fdc4:	e59f1018 	ldr	r1, [pc, #24]	; fde4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    fdc8:	e59f0020 	ldr	r0, [pc, #32]	; fdf0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x198>
    fdcc:	eb00364b 	bl	1d700 <assertion_failed>
    fdd0:	e3a020ba 	mov	r2, #186	; 0xba
    fdd4:	e59f1008 	ldr	r1, [pc, #8]	; fde4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    fdd8:	e59f0014 	ldr	r0, [pc, #20]	; fdf4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x19c>
    fddc:	eb003647 	bl	1d700 <assertion_failed>
    fde0:	000007dc 	.word	0x000007dc
    fde4:	0002d914 	.word	0x0002d914
    fde8:	0002d960 	.word	0x0002d960
    fdec:	0002d984 	.word	0x0002d984
    fdf0:	0002d92c 	.word	0x0002d92c
    fdf4:	0002d958 	.word	0x0002d958

0000fdf8 <CDWHCITransferStageData::SetSplitComplete(bool)>:
    fdf8:	e5d03010 	ldrb	r3, [r0, #16]
    fdfc:	e3530000 	cmp	r3, #0
    fe00:	0a000001 	beq	fe0c <CDWHCITransferStageData::SetSplitComplete(bool)+0x14>
    fe04:	e5c01011 	strb	r1, [r0, #17]
    fe08:	e12fff1e 	bx	lr
    fe0c:	e3a020e3 	mov	r2, #227	; 0xe3
    fe10:	e92d4010 	push	{r4, lr}
    fe14:	e59f1004 	ldr	r1, [pc, #4]	; fe20 <CDWHCITransferStageData::SetSplitComplete(bool)+0x28>
    fe18:	e59f0004 	ldr	r0, [pc, #4]	; fe24 <CDWHCITransferStageData::SetSplitComplete(bool)+0x2c>
    fe1c:	eb003637 	bl	1d700 <assertion_failed>
    fe20:	0002d914 	.word	0x0002d914
    fe24:	0002d9b0 	.word	0x0002d9b0

0000fe28 <CDWHCITransferStageData::SetState(unsigned int)>:
    fe28:	e5801038 	str	r1, [r0, #56]	; 0x38
    fe2c:	e12fff1e 	bx	lr

0000fe30 <CDWHCITransferStageData::GetState() const>:
    fe30:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    fe34:	e12fff1e 	bx	lr

0000fe38 <CDWHCITransferStageData::SetSubState(unsigned int)>:
    fe38:	e580103c 	str	r1, [r0, #60]	; 0x3c
    fe3c:	e12fff1e 	bx	lr

0000fe40 <CDWHCITransferStageData::GetSubState() const>:
    fe40:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    fe44:	e12fff1e 	bx	lr

0000fe48 <CDWHCITransferStageData::BeginSplitCycle()>:
    fe48:	e3a00001 	mov	r0, #1
    fe4c:	e12fff1e 	bx	lr

0000fe50 <CDWHCITransferStageData::GetChannelNumber() const>:
    fe50:	e5900000 	ldr	r0, [r0]
    fe54:	e12fff1e 	bx	lr

0000fe58 <CDWHCITransferStageData::IsPeriodic() const>:
    fe58:	e5900018 	ldr	r0, [r0, #24]
    fe5c:	e92d4010 	push	{r4, lr}
    fe60:	e3500000 	cmp	r0, #0
    fe64:	0a000006 	beq	fe84 <CDWHCITransferStageData::IsPeriodic() const+0x2c>
    fe68:	eb000857 	bl	11fcc <CUSBEndpoint::GetType() const>
    fe6c:	e2400002 	sub	r0, r0, #2
    fe70:	e6ef0070 	uxtb	r0, r0
    fe74:	e3500001 	cmp	r0, #1
    fe78:	83a00000 	movhi	r0, #0
    fe7c:	93a00001 	movls	r0, #1
    fe80:	e8bd8010 	pop	{r4, pc}
    fe84:	e3a02f42 	mov	r2, #264	; 0x108
    fe88:	e59f1004 	ldr	r1, [pc, #4]	; fe94 <CDWHCITransferStageData::IsPeriodic() const+0x3c>
    fe8c:	e59f0004 	ldr	r0, [pc, #4]	; fe98 <CDWHCITransferStageData::IsPeriodic() const+0x40>
    fe90:	eb00361a 	bl	1d700 <assertion_failed>
    fe94:	0002d914 	.word	0x0002d914
    fe98:	0002c9f8 	.word	0x0002c9f8

0000fe9c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    fe9c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fea0:	e1a04000 	mov	r4, r0
    fea4:	e3a00000 	mov	r0, #0
    fea8:	e24dd00c 	sub	sp, sp, #12
    feac:	e5dd6020 	ldrb	r6, [sp, #32]
    feb0:	e1520000 	cmp	r2, r0
    feb4:	e8840006 	stm	r4, {r1, r2}
    feb8:	e5c43008 	strb	r3, [r4, #8]
    febc:	e5c46009 	strb	r6, [r4, #9]
    fec0:	e584000c 	str	r0, [r4, #12]
    fec4:	e5c40011 	strb	r0, [r4, #17]
    fec8:	e5840034 	str	r0, [r4, #52]	; 0x34
    fecc:	e5840038 	str	r0, [r4, #56]	; 0x38
    fed0:	e584003c 	str	r0, [r4, #60]	; 0x3c
    fed4:	e5840040 	str	r0, [r4, #64]	; 0x40
    fed8:	e5840044 	str	r0, [r4, #68]	; 0x44
    fedc:	e584004c 	str	r0, [r4, #76]	; 0x4c
    fee0:	e5840050 	str	r0, [r4, #80]	; 0x50
    fee4:	0a00008d 	beq	10120 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x284>
    fee8:	e1a00002 	mov	r0, r2
    feec:	e1a05002 	mov	r5, r2
    fef0:	ebffe9fb 	bl	a6e4 <CUSBRequest::GetEndpoint() const>
    fef4:	e3500000 	cmp	r0, #0
    fef8:	e5840018 	str	r0, [r4, #24]
    fefc:	0a00008b 	beq	10130 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x294>
    ff00:	eb000825 	bl	11f9c <CUSBEndpoint::GetDevice() const>
    ff04:	e3500000 	cmp	r0, #0
    ff08:	e5840014 	str	r0, [r4, #20]
    ff0c:	0a00008b 	beq	10140 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a4>
    ff10:	eb000343 	bl	10c24 <CUSBDevice::GetSpeed() const>
    ff14:	e1a03000 	mov	r3, r0
    ff18:	e5940018 	ldr	r0, [r4, #24]
    ff1c:	e5c4301c 	strb	r3, [r4, #28]
    ff20:	eb000831 	bl	11fec <CUSBEndpoint::GetMaxPacketSize() const>
    ff24:	e1a03000 	mov	r3, r0
    ff28:	e5940014 	ldr	r0, [r4, #20]
    ff2c:	e5843020 	str	r3, [r4, #32]
    ff30:	eb00033d 	bl	10c2c <CUSBDevice::IsSplit() const>
    ff34:	e3560000 	cmp	r6, #0
    ff38:	e5c40010 	strb	r0, [r4, #16]
    ff3c:	0a000020 	beq	ffc4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x128>
    ff40:	e5946044 	ldr	r6, [r4, #68]	; 0x44
    ff44:	e3560000 	cmp	r6, #0
    ff48:	1a000084 	bne	10160 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2c4>
    ff4c:	e3a00004 	mov	r0, #4
    ff50:	eb005e39 	bl	2783c <operator new[](unsigned int)>
    ff54:	e3a03001 	mov	r3, #1
    ff58:	e1a05000 	mov	r5, r0
    ff5c:	e5846024 	str	r6, [r4, #36]	; 0x24
    ff60:	e5840044 	str	r0, [r4, #68]	; 0x44
    ff64:	e5840048 	str	r0, [r4, #72]	; 0x48
    ff68:	e584602c 	str	r6, [r4, #44]	; 0x2c
    ff6c:	e5843028 	str	r3, [r4, #40]	; 0x28
    ff70:	e5843030 	str	r3, [r4, #48]	; 0x30
    ff74:	e3150003 	tst	r5, #3
    ff78:	1a000074 	bne	10150 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b4>
    ff7c:	e5d43010 	ldrb	r3, [r4, #16]
    ff80:	e3530000 	cmp	r3, #0
    ff84:	0a000032 	beq	10054 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1b8>
    ff88:	e1a00004 	mov	r0, r4
    ff8c:	ebffffb1 	bl	fe58 <CDWHCITransferStageData::IsPeriodic() const>
    ff90:	e3500000 	cmp	r0, #0
    ff94:	e3a00014 	mov	r0, #20
    ff98:	0a00003f 	beq	1009c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x200>
    ff9c:	ebfffbdf 	bl	ef20 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    ffa0:	e1a05000 	mov	r5, r0
    ffa4:	ebfffbc8 	bl	eecc <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    ffa8:	e5845050 	str	r5, [r4, #80]	; 0x50
    ffac:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    ffb0:	e3530000 	cmp	r3, #0
    ffb4:	1a00003f 	bne	100b8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x21c>
    ffb8:	e1a00004 	mov	r0, r4
    ffbc:	e28dd00c 	add	sp, sp, #12
    ffc0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    ffc4:	e1a01006 	mov	r1, r6
    ffc8:	e5940018 	ldr	r0, [r4, #24]
    ffcc:	eb000814 	bl	12024 <CUSBEndpoint::GetNextPID(bool)>
    ffd0:	e3500000 	cmp	r0, #0
    ffd4:	e1a00005 	mov	r0, r5
    ffd8:	0a00004a 	beq	10108 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x26c>
    ffdc:	ebffe9fe 	bl	a7dc <CUSBRequest::GetBuffer()>
    ffe0:	e1a03000 	mov	r3, r0
    ffe4:	e1a00005 	mov	r0, r5
    ffe8:	e5843048 	str	r3, [r4, #72]	; 0x48
    ffec:	ebffea09 	bl	a818 <CUSBRequest::GetBufLen() const>
    fff0:	e1a06000 	mov	r6, r0
    fff4:	e5945048 	ldr	r5, [r4, #72]	; 0x48
    fff8:	e5840024 	str	r0, [r4, #36]	; 0x24
    fffc:	e5947020 	ldr	r7, [r4, #32]
   10000:	e2470001 	sub	r0, r7, #1
   10004:	e1a01007 	mov	r1, r7
   10008:	e0800006 	add	r0, r0, r6
   1000c:	eb006a9c 	bl	2aa84 <__udivsi3>
   10010:	e5d43010 	ldrb	r3, [r4, #16]
   10014:	e5840028 	str	r0, [r4, #40]	; 0x28
   10018:	e3530000 	cmp	r3, #0
   1001c:	0584602c 	streq	r6, [r4, #44]	; 0x2c
   10020:	05840030 	streq	r0, [r4, #48]	; 0x30
   10024:	0a000004 	beq	1003c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1a0>
   10028:	e1570006 	cmp	r7, r6
   1002c:	31a06007 	movcc	r6, r7
   10030:	e3a03001 	mov	r3, #1
   10034:	e584602c 	str	r6, [r4, #44]	; 0x2c
   10038:	e5843030 	str	r3, [r4, #48]	; 0x30
   1003c:	e3550000 	cmp	r5, #0
   10040:	1affffcb 	bne	ff74 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xd8>
   10044:	e3a0206c 	mov	r2, #108	; 0x6c
   10048:	e59f1140 	ldr	r1, [pc, #320]	; 10190 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
   1004c:	e59f0140 	ldr	r0, [pc, #320]	; 10194 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
   10050:	eb0035aa 	bl	1d700 <assertion_failed>
   10054:	e5940014 	ldr	r0, [r4, #20]
   10058:	eb0002f5 	bl	10c34 <CUSBDevice::GetHubAddress() const>
   1005c:	e3500000 	cmp	r0, #0
   10060:	1affffd1 	bne	ffac <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
   10064:	e5d4301c 	ldrb	r3, [r4, #28]
   10068:	e3530002 	cmp	r3, #2
   1006c:	0affffce 	beq	ffac <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
   10070:	e1a00004 	mov	r0, r4
   10074:	ebffff77 	bl	fe58 <CDWHCITransferStageData::IsPeriodic() const>
   10078:	e1a01000 	mov	r1, r0
   1007c:	e3a00008 	mov	r0, #8
   10080:	e58d1004 	str	r1, [sp, #4]
   10084:	ebfffa8f 	bl	eac8 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
   10088:	e1a05000 	mov	r5, r0
   1008c:	e59d1004 	ldr	r1, [sp, #4]
   10090:	ebfffa85 	bl	eaac <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
   10094:	e5845050 	str	r5, [r4, #80]	; 0x50
   10098:	eaffffc3 	b	ffac <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x110>
   1009c:	ebfff9ec 	bl	e854 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
   100a0:	e1a05000 	mov	r5, r0
   100a4:	ebfff9d6 	bl	e804 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
   100a8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   100ac:	e5845050 	str	r5, [r4, #80]	; 0x50
   100b0:	e3530000 	cmp	r3, #0
   100b4:	0affffbf 	beq	ffb8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x11c>
   100b8:	e5940018 	ldr	r0, [r4, #24]
   100bc:	eb0007c2 	bl	11fcc <CUSBEndpoint::GetType() const>
   100c0:	e3500002 	cmp	r0, #2
   100c4:	1a000029 	bne	10170 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d4>
   100c8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   100cc:	e59f20c4 	ldr	r2, [pc, #196]	; 10198 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2fc>
   100d0:	e0833103 	add	r3, r3, r3, lsl #2
   100d4:	e0833103 	add	r3, r3, r3, lsl #2
   100d8:	e1a03103 	lsl	r3, r3, #2
   100dc:	e0821392 	umull	r1, r2, r2, r3
   100e0:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   100e4:	e1a03322 	lsr	r3, r2, #6
   100e8:	e584300c 	str	r3, [r4, #12]
   100ec:	3a000023 	bcc	10180 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e4>
   100f0:	eb005990 	bl	26738 <CTimer::Get()>
   100f4:	eb0056dd 	bl	25c70 <CTimer::GetTicks() const>
   100f8:	e584004c 	str	r0, [r4, #76]	; 0x4c
   100fc:	e1a00004 	mov	r0, r4
   10100:	e28dd00c 	add	sp, sp, #12
   10104:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10108:	ebffe99f 	bl	a78c <CUSBRequest::GetSetupData()>
   1010c:	e3a06008 	mov	r6, #8
   10110:	e1a05000 	mov	r5, r0
   10114:	e5846024 	str	r6, [r4, #36]	; 0x24
   10118:	e5840048 	str	r0, [r4, #72]	; 0x48
   1011c:	eaffffb6 	b	fffc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x160>
   10120:	e3a02031 	mov	r2, #49	; 0x31
   10124:	e59f1064 	ldr	r1, [pc, #100]	; 10190 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
   10128:	e59f006c 	ldr	r0, [pc, #108]	; 1019c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x300>
   1012c:	eb003573 	bl	1d700 <assertion_failed>
   10130:	e3a02034 	mov	r2, #52	; 0x34
   10134:	e59f1054 	ldr	r1, [pc, #84]	; 10190 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
   10138:	e59f0060 	ldr	r0, [pc, #96]	; 101a0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x304>
   1013c:	eb00356f 	bl	1d700 <assertion_failed>
   10140:	e3a02036 	mov	r2, #54	; 0x36
   10144:	e59f1044 	ldr	r1, [pc, #68]	; 10190 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
   10148:	e59f0054 	ldr	r0, [pc, #84]	; 101a4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x308>
   1014c:	eb00356b 	bl	1d700 <assertion_failed>
   10150:	e3a0206d 	mov	r2, #109	; 0x6d
   10154:	e59f1034 	ldr	r1, [pc, #52]	; 10190 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
   10158:	e59f0048 	ldr	r0, [pc, #72]	; 101a8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x30c>
   1015c:	eb003567 	bl	1d700 <assertion_failed>
   10160:	e3a02061 	mov	r2, #97	; 0x61
   10164:	e59f1024 	ldr	r1, [pc, #36]	; 10190 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
   10168:	e59f003c 	ldr	r0, [pc, #60]	; 101ac <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x310>
   1016c:	eb003563 	bl	1d700 <assertion_failed>
   10170:	e3a02088 	mov	r2, #136	; 0x88
   10174:	e59f1014 	ldr	r1, [pc, #20]	; 10190 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
   10178:	e59f0030 	ldr	r0, [pc, #48]	; 101b0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x314>
   1017c:	eb00355f 	bl	1d700 <assertion_failed>
   10180:	e3a0208b 	mov	r2, #139	; 0x8b
   10184:	e59f1004 	ldr	r1, [pc, #4]	; 10190 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
   10188:	e59f0024 	ldr	r0, [pc, #36]	; 101b4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x318>
   1018c:	eb00355b 	bl	1d700 <assertion_failed>
   10190:	0002d914 	.word	0x0002d914
   10194:	0002d9f4 	.word	0x0002d9f4
   10198:	10624dd3 	.word	0x10624dd3
   1019c:	0002d9c4 	.word	0x0002d9c4
   101a0:	0002c9f8 	.word	0x0002c9f8
   101a4:	0002d9d0 	.word	0x0002d9d0
   101a8:	0002da0c 	.word	0x0002da0c
   101ac:	0002d9e0 	.word	0x0002d9e0
   101b0:	0002da34 	.word	0x0002da34
   101b4:	0002da68 	.word	0x0002da68

000101b8 <CDWHCITransferStageData::GetDeviceAddress() const>:
   101b8:	e5900014 	ldr	r0, [r0, #20]
   101bc:	e3500000 	cmp	r0, #0
   101c0:	0a000000 	beq	101c8 <CDWHCITransferStageData::GetDeviceAddress() const+0x10>
   101c4:	ea000294 	b	10c1c <CUSBDevice::GetAddress() const>
   101c8:	e92d4010 	push	{r4, lr}
   101cc:	e59f2008 	ldr	r2, [pc, #8]	; 101dc <CDWHCITransferStageData::GetDeviceAddress() const+0x24>
   101d0:	e59f1008 	ldr	r1, [pc, #8]	; 101e0 <CDWHCITransferStageData::GetDeviceAddress() const+0x28>
   101d4:	e59f0008 	ldr	r0, [pc, #8]	; 101e4 <CDWHCITransferStageData::GetDeviceAddress() const+0x2c>
   101d8:	eb003548 	bl	1d700 <assertion_failed>
   101dc:	00000111 	.word	0x00000111
   101e0:	0002d914 	.word	0x0002d914
   101e4:	0002d9d0 	.word	0x0002d9d0

000101e8 <CDWHCITransferStageData::GetEndpointType() const>:
   101e8:	e5900018 	ldr	r0, [r0, #24]
   101ec:	e92d4010 	push	{r4, lr}
   101f0:	e3500000 	cmp	r0, #0
   101f4:	0a000005 	beq	10210 <CDWHCITransferStageData::GetEndpointType() const+0x28>
   101f8:	eb000773 	bl	11fcc <CUSBEndpoint::GetType() const>
   101fc:	e3500002 	cmp	r0, #2
   10200:	8a000006 	bhi	10220 <CDWHCITransferStageData::GetEndpointType() const+0x38>
   10204:	e59f3024 	ldr	r3, [pc, #36]	; 10230 <CDWHCITransferStageData::GetEndpointType() const+0x48>
   10208:	e7d30100 	ldrb	r0, [r3, r0, lsl #2]
   1020c:	e8bd8010 	pop	{r4, pc}
   10210:	e59f201c 	ldr	r2, [pc, #28]	; 10234 <CDWHCITransferStageData::GetEndpointType() const+0x4c>
   10214:	e59f101c 	ldr	r1, [pc, #28]	; 10238 <CDWHCITransferStageData::GetEndpointType() const+0x50>
   10218:	e59f001c 	ldr	r0, [pc, #28]	; 1023c <CDWHCITransferStageData::GetEndpointType() const+0x54>
   1021c:	eb003537 	bl	1d700 <assertion_failed>
   10220:	e59f2018 	ldr	r2, [pc, #24]	; 10240 <CDWHCITransferStageData::GetEndpointType() const+0x58>
   10224:	e59f100c 	ldr	r1, [pc, #12]	; 10238 <CDWHCITransferStageData::GetEndpointType() const+0x50>
   10228:	e59f0014 	ldr	r0, [pc, #20]	; 10244 <CDWHCITransferStageData::GetEndpointType() const+0x5c>
   1022c:	eb003533 	bl	1d700 <assertion_failed>
   10230:	0002dadc 	.word	0x0002dadc
   10234:	00000117 	.word	0x00000117
   10238:	0002d914 	.word	0x0002d914
   1023c:	0002c9f8 	.word	0x0002c9f8
   10240:	0000012a 	.word	0x0000012a
   10244:	0002dbb4 	.word	0x0002dbb4

00010248 <CDWHCITransferStageData::GetEndpointNumber() const>:
   10248:	e5900018 	ldr	r0, [r0, #24]
   1024c:	e3500000 	cmp	r0, #0
   10250:	0a000000 	beq	10258 <CDWHCITransferStageData::GetEndpointNumber() const+0x10>
   10254:	ea00075a 	b	11fc4 <CUSBEndpoint::GetNumber() const>
   10258:	e92d4010 	push	{r4, lr}
   1025c:	e59f2008 	ldr	r2, [pc, #8]	; 1026c <CDWHCITransferStageData::GetEndpointNumber() const+0x24>
   10260:	e59f1008 	ldr	r1, [pc, #8]	; 10270 <CDWHCITransferStageData::GetEndpointNumber() const+0x28>
   10264:	e59f0008 	ldr	r0, [pc, #8]	; 10274 <CDWHCITransferStageData::GetEndpointNumber() const+0x2c>
   10268:	eb003524 	bl	1d700 <assertion_failed>
   1026c:	00000133 	.word	0x00000133
   10270:	0002d914 	.word	0x0002d914
   10274:	0002c9f8 	.word	0x0002c9f8

00010278 <CDWHCITransferStageData::GetMaxPacketSize() const>:
   10278:	e5900020 	ldr	r0, [r0, #32]
   1027c:	e12fff1e 	bx	lr

00010280 <CDWHCITransferStageData::GetSpeed() const>:
   10280:	e5d0001c 	ldrb	r0, [r0, #28]
   10284:	e12fff1e 	bx	lr

00010288 <CDWHCITransferStageData::GetPID() const>:
   10288:	e5903018 	ldr	r3, [r0, #24]
   1028c:	e92d4010 	push	{r4, lr}
   10290:	e3530000 	cmp	r3, #0
   10294:	0a000008 	beq	102bc <CDWHCITransferStageData::GetPID() const+0x34>
   10298:	e5d01009 	ldrb	r1, [r0, #9]
   1029c:	e1a00003 	mov	r0, r3
   102a0:	eb00075f 	bl	12024 <CUSBEndpoint::GetNextPID(bool)>
   102a4:	e3500002 	cmp	r0, #2
   102a8:	8a000007 	bhi	102cc <CDWHCITransferStageData::GetPID() const+0x44>
   102ac:	e59f3028 	ldr	r3, [pc, #40]	; 102dc <CDWHCITransferStageData::GetPID() const+0x54>
   102b0:	e0830000 	add	r0, r3, r0
   102b4:	e5d0000c 	ldrb	r0, [r0, #12]
   102b8:	e8bd8010 	pop	{r4, pc}
   102bc:	e59f201c 	ldr	r2, [pc, #28]	; 102e0 <CDWHCITransferStageData::GetPID() const+0x58>
   102c0:	e59f101c 	ldr	r1, [pc, #28]	; 102e4 <CDWHCITransferStageData::GetPID() const+0x5c>
   102c4:	e59f001c 	ldr	r0, [pc, #28]	; 102e8 <CDWHCITransferStageData::GetPID() const+0x60>
   102c8:	eb00350c 	bl	1d700 <assertion_failed>
   102cc:	e59f2018 	ldr	r2, [pc, #24]	; 102ec <CDWHCITransferStageData::GetPID() const+0x64>
   102d0:	e59f100c 	ldr	r1, [pc, #12]	; 102e4 <CDWHCITransferStageData::GetPID() const+0x5c>
   102d4:	e59f0014 	ldr	r0, [pc, #20]	; 102f0 <CDWHCITransferStageData::GetPID() const+0x68>
   102d8:	eb003508 	bl	1d700 <assertion_failed>
   102dc:	0002dadc 	.word	0x0002dadc
   102e0:	00000143 	.word	0x00000143
   102e4:	0002d914 	.word	0x0002d914
   102e8:	0002c9f8 	.word	0x0002c9f8
   102ec:	00000156 	.word	0x00000156
   102f0:	0002dbb4 	.word	0x0002dbb4

000102f4 <CDWHCITransferStageData::IsDirectionIn() const>:
   102f4:	e5d00008 	ldrb	r0, [r0, #8]
   102f8:	e12fff1e 	bx	lr

000102fc <CDWHCITransferStageData::IsStatusStage() const>:
   102fc:	e5d00009 	ldrb	r0, [r0, #9]
   10300:	e12fff1e 	bx	lr

00010304 <CDWHCITransferStageData::GetDMAAddress() const>:
   10304:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   10308:	e3500000 	cmp	r0, #0
   1030c:	112fff1e 	bxne	lr
   10310:	e92d4010 	push	{r4, lr}
   10314:	e59f2008 	ldr	r2, [pc, #8]	; 10324 <CDWHCITransferStageData::GetDMAAddress() const+0x20>
   10318:	e59f1008 	ldr	r1, [pc, #8]	; 10328 <CDWHCITransferStageData::GetDMAAddress() const+0x24>
   1031c:	e59f0008 	ldr	r0, [pc, #8]	; 1032c <CDWHCITransferStageData::GetDMAAddress() const+0x28>
   10320:	eb0034f6 	bl	1d700 <assertion_failed>
   10324:	00000169 	.word	0x00000169
   10328:	0002d914 	.word	0x0002d914
   1032c:	0002d9f4 	.word	0x0002d9f4

00010330 <CDWHCITransferStageData::GetBytesToTransfer() const>:
   10330:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10334:	e12fff1e 	bx	lr

00010338 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
   10338:	e5900030 	ldr	r0, [r0, #48]	; 0x30
   1033c:	e12fff1e 	bx	lr

00010340 <CDWHCITransferStageData::IsSplit() const>:
   10340:	e5d00010 	ldrb	r0, [r0, #16]
   10344:	e12fff1e 	bx	lr

00010348 <CDWHCITransferStageData::IsSplitComplete() const>:
   10348:	e5d03010 	ldrb	r3, [r0, #16]
   1034c:	e3530000 	cmp	r3, #0
   10350:	0a000001 	beq	1035c <CDWHCITransferStageData::IsSplitComplete() const+0x14>
   10354:	e5d00011 	ldrb	r0, [r0, #17]
   10358:	e12fff1e 	bx	lr
   1035c:	e92d4010 	push	{r4, lr}
   10360:	e59f2008 	ldr	r2, [pc, #8]	; 10370 <CDWHCITransferStageData::IsSplitComplete() const+0x28>
   10364:	e59f1008 	ldr	r1, [pc, #8]	; 10374 <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
   10368:	e59f0008 	ldr	r0, [pc, #8]	; 10378 <CDWHCITransferStageData::IsSplitComplete() const+0x30>
   1036c:	eb0034e3 	bl	1d700 <assertion_failed>
   10370:	0000017f 	.word	0x0000017f
   10374:	0002d914 	.word	0x0002d914
   10378:	0002d9b0 	.word	0x0002d9b0

0001037c <CDWHCITransferStageData::GetHubAddress() const>:
   1037c:	e5d03010 	ldrb	r3, [r0, #16]
   10380:	e92d4010 	push	{r4, lr}
   10384:	e3530000 	cmp	r3, #0
   10388:	0a000004 	beq	103a0 <CDWHCITransferStageData::GetHubAddress() const+0x24>
   1038c:	e5900014 	ldr	r0, [r0, #20]
   10390:	e3500000 	cmp	r0, #0
   10394:	0a000005 	beq	103b0 <CDWHCITransferStageData::GetHubAddress() const+0x34>
   10398:	e8bd4010 	pop	{r4, lr}
   1039c:	ea000224 	b	10c34 <CUSBDevice::GetHubAddress() const>
   103a0:	e59f2018 	ldr	r2, [pc, #24]	; 103c0 <CDWHCITransferStageData::GetHubAddress() const+0x44>
   103a4:	e59f1018 	ldr	r1, [pc, #24]	; 103c4 <CDWHCITransferStageData::GetHubAddress() const+0x48>
   103a8:	e59f0018 	ldr	r0, [pc, #24]	; 103c8 <CDWHCITransferStageData::GetHubAddress() const+0x4c>
   103ac:	eb0034d3 	bl	1d700 <assertion_failed>
   103b0:	e3a02f62 	mov	r2, #392	; 0x188
   103b4:	e59f1008 	ldr	r1, [pc, #8]	; 103c4 <CDWHCITransferStageData::GetHubAddress() const+0x48>
   103b8:	e59f000c 	ldr	r0, [pc, #12]	; 103cc <CDWHCITransferStageData::GetHubAddress() const+0x50>
   103bc:	eb0034cf 	bl	1d700 <assertion_failed>
   103c0:	00000186 	.word	0x00000186
   103c4:	0002d914 	.word	0x0002d914
   103c8:	0002d9b0 	.word	0x0002d9b0
   103cc:	0002d9d0 	.word	0x0002d9d0

000103d0 <CDWHCITransferStageData::GetHubPortAddress() const>:
   103d0:	e5d03010 	ldrb	r3, [r0, #16]
   103d4:	e92d4010 	push	{r4, lr}
   103d8:	e3530000 	cmp	r3, #0
   103dc:	0a000004 	beq	103f4 <CDWHCITransferStageData::GetHubPortAddress() const+0x24>
   103e0:	e5900014 	ldr	r0, [r0, #20]
   103e4:	e3500000 	cmp	r0, #0
   103e8:	0a000005 	beq	10404 <CDWHCITransferStageData::GetHubPortAddress() const+0x34>
   103ec:	e8bd4010 	pop	{r4, lr}
   103f0:	ea000211 	b	10c3c <CUSBDevice::GetHubPortNumber() const>
   103f4:	e59f2018 	ldr	r2, [pc, #24]	; 10414 <CDWHCITransferStageData::GetHubPortAddress() const+0x44>
   103f8:	e59f1018 	ldr	r1, [pc, #24]	; 10418 <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
   103fc:	e59f0018 	ldr	r0, [pc, #24]	; 1041c <CDWHCITransferStageData::GetHubPortAddress() const+0x4c>
   10400:	eb0034be 	bl	1d700 <assertion_failed>
   10404:	e3a02e19 	mov	r2, #400	; 0x190
   10408:	e59f1008 	ldr	r1, [pc, #8]	; 10418 <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
   1040c:	e59f000c 	ldr	r0, [pc, #12]	; 10420 <CDWHCITransferStageData::GetHubPortAddress() const+0x50>
   10410:	eb0034ba 	bl	1d700 <assertion_failed>
   10414:	0000018e 	.word	0x0000018e
   10418:	0002d914 	.word	0x0002d914
   1041c:	0002d9b0 	.word	0x0002d9b0
   10420:	0002d9d0 	.word	0x0002d9d0

00010424 <CDWHCITransferStageData::GetSplitPosition() const>:
   10424:	e3a00003 	mov	r0, #3
   10428:	e12fff1e 	bx	lr

0001042c <CDWHCITransferStageData::GetStatusMask() const>:
   1042c:	e5d03010 	ldrb	r3, [r0, #16]
   10430:	e3530000 	cmp	r3, #0
   10434:	0a000001 	beq	10440 <CDWHCITransferStageData::GetStatusMask() const+0x14>
   10438:	e59f0018 	ldr	r0, [pc, #24]	; 10458 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
   1043c:	e12fff1e 	bx	lr
   10440:	e92d4010 	push	{r4, lr}
   10444:	ebfffe83 	bl	fe58 <CDWHCITransferStageData::IsPeriodic() const>
   10448:	e3500000 	cmp	r0, #0
   1044c:	159f0004 	ldrne	r0, [pc, #4]	; 10458 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
   10450:	059f0004 	ldreq	r0, [pc, #4]	; 1045c <CDWHCITransferStageData::GetStatusMask() const+0x30>
   10454:	e8bd8010 	pop	{r4, pc}
   10458:	000007ff 	.word	0x000007ff
   1045c:	0000078f 	.word	0x0000078f

00010460 <CDWHCITransferStageData::GetTransactionStatus() const>:
   10460:	e5900040 	ldr	r0, [r0, #64]	; 0x40
   10464:	e3500000 	cmp	r0, #0
   10468:	112fff1e 	bxne	lr
   1046c:	e92d4010 	push	{r4, lr}
   10470:	e59f2008 	ldr	r2, [pc, #8]	; 10480 <CDWHCITransferStageData::GetTransactionStatus() const+0x20>
   10474:	e59f1008 	ldr	r1, [pc, #8]	; 10484 <CDWHCITransferStageData::GetTransactionStatus() const+0x24>
   10478:	e59f0008 	ldr	r0, [pc, #8]	; 10488 <CDWHCITransferStageData::GetTransactionStatus() const+0x28>
   1047c:	eb00349f 	bl	1d700 <assertion_failed>
   10480:	000001ad 	.word	0x000001ad
   10484:	0002d914 	.word	0x0002d914
   10488:	0002da7c 	.word	0x0002da7c

0001048c <CDWHCITransferStageData::GetUSBError() const>:
   1048c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   10490:	e3130008 	tst	r3, #8
   10494:	1a00000d 	bne	104d0 <CDWHCITransferStageData::GetUSBError() const+0x44>
   10498:	e3130080 	tst	r3, #128	; 0x80
   1049c:	1a000009 	bne	104c8 <CDWHCITransferStageData::GetUSBError() const+0x3c>
   104a0:	e3130c01 	tst	r3, #256	; 0x100
   104a4:	1a00000b 	bne	104d8 <CDWHCITransferStageData::GetUSBError() const+0x4c>
   104a8:	e3130c02 	tst	r3, #512	; 0x200
   104ac:	1a00000b 	bne	104e0 <CDWHCITransferStageData::GetUSBError() const+0x54>
   104b0:	e3130b01 	tst	r3, #1024	; 0x400
   104b4:	1a00000b 	bne	104e8 <CDWHCITransferStageData::GetUSBError() const+0x5c>
   104b8:	e3130004 	tst	r3, #4
   104bc:	03a00009 	moveq	r0, #9
   104c0:	13a00005 	movne	r0, #5
   104c4:	e12fff1e 	bx	lr
   104c8:	e3a00001 	mov	r0, #1
   104cc:	e12fff1e 	bx	lr
   104d0:	e3a00000 	mov	r0, #0
   104d4:	e12fff1e 	bx	lr
   104d8:	e3a00002 	mov	r0, #2
   104dc:	e12fff1e 	bx	lr
   104e0:	e3a00003 	mov	r0, #3
   104e4:	e12fff1e 	bx	lr
   104e8:	e3a00004 	mov	r0, #4
   104ec:	e12fff1e 	bx	lr

000104f0 <CDWHCITransferStageData::IsStageComplete() const>:
   104f0:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   104f4:	e16f0f10 	clz	r0, r0
   104f8:	e1a002a0 	lsr	r0, r0, #5
   104fc:	e12fff1e 	bx	lr

00010500 <CDWHCITransferStageData::GetResultLen() const>:
   10500:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   10504:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   10508:	e1520000 	cmp	r2, r0
   1050c:	31a00002 	movcc	r0, r2
   10510:	e12fff1e 	bx	lr

00010514 <CDWHCITransferStageData::IsTimeout() const>:
   10514:	e590300c 	ldr	r3, [r0, #12]
   10518:	e3530000 	cmp	r3, #0
   1051c:	1a000001 	bne	10528 <CDWHCITransferStageData::IsTimeout() const+0x14>
   10520:	e1a00003 	mov	r0, r3
   10524:	e12fff1e 	bx	lr
   10528:	e92d4010 	push	{r4, lr}
   1052c:	e1a04000 	mov	r4, r0
   10530:	eb005880 	bl	26738 <CTimer::Get()>
   10534:	eb0055cd 	bl	25c70 <CTimer::GetTicks() const>
   10538:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   1053c:	e594300c 	ldr	r3, [r4, #12]
   10540:	e0400002 	sub	r0, r0, r2
   10544:	e1500003 	cmp	r0, r3
   10548:	33a00000 	movcc	r0, #0
   1054c:	23a00001 	movcs	r0, #1
   10550:	e8bd8010 	pop	{r4, pc}

00010554 <CDWHCITransferStageData::GetURB() const>:
   10554:	e5900004 	ldr	r0, [r0, #4]
   10558:	e3500000 	cmp	r0, #0
   1055c:	112fff1e 	bxne	lr
   10560:	e92d4010 	push	{r4, lr}
   10564:	e59f2008 	ldr	r2, [pc, #8]	; 10574 <CDWHCITransferStageData::GetURB() const+0x20>
   10568:	e59f1008 	ldr	r1, [pc, #8]	; 10578 <CDWHCITransferStageData::GetURB() const+0x24>
   1056c:	e59f0008 	ldr	r0, [pc, #8]	; 1057c <CDWHCITransferStageData::GetURB() const+0x28>
   10570:	eb003462 	bl	1d700 <assertion_failed>
   10574:	000001ef 	.word	0x000001ef
   10578:	0002d914 	.word	0x0002d914
   1057c:	0002d9c4 	.word	0x0002d9c4

00010580 <CDWHCITransferStageData::GetDevice() const>:
   10580:	e5900014 	ldr	r0, [r0, #20]
   10584:	e3500000 	cmp	r0, #0
   10588:	112fff1e 	bxne	lr
   1058c:	e92d4010 	push	{r4, lr}
   10590:	e59f2008 	ldr	r2, [pc, #8]	; 105a0 <CDWHCITransferStageData::GetDevice() const+0x20>
   10594:	e59f1008 	ldr	r1, [pc, #8]	; 105a4 <CDWHCITransferStageData::GetDevice() const+0x24>
   10598:	e59f0008 	ldr	r0, [pc, #8]	; 105a8 <CDWHCITransferStageData::GetDevice() const+0x28>
   1059c:	eb003457 	bl	1d700 <assertion_failed>
   105a0:	000001f5 	.word	0x000001f5
   105a4:	0002d914 	.word	0x0002d914
   105a8:	0002d9d0 	.word	0x0002d9d0

000105ac <CDWHCITransferStageData::GetFrameScheduler() const>:
   105ac:	e5900050 	ldr	r0, [r0, #80]	; 0x50
   105b0:	e12fff1e 	bx	lr

000105b4 <CDWHCITransferStageData::operator new(unsigned int)>:
   105b4:	e3500054 	cmp	r0, #84	; 0x54
   105b8:	e92d4010 	push	{r4, lr}
   105bc:	1a000005 	bne	105d8 <CDWHCITransferStageData::operator new(unsigned int)+0x24>
   105c0:	e59f3030 	ldr	r3, [pc, #48]	; 105f8 <CDWHCITransferStageData::operator new(unsigned int)+0x44>
   105c4:	e5930000 	ldr	r0, [r3]
   105c8:	e3500000 	cmp	r0, #0
   105cc:	0a000005 	beq	105e8 <CDWHCITransferStageData::operator new(unsigned int)+0x34>
   105d0:	e8bd4010 	pop	{r4, lr}
   105d4:	ea00354b 	b	1db08 <CClassAllocator::Allocate()>
   105d8:	e59f201c 	ldr	r2, [pc, #28]	; 105fc <CDWHCITransferStageData::operator new(unsigned int)+0x48>
   105dc:	e59f101c 	ldr	r1, [pc, #28]	; 10600 <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
   105e0:	e59f001c 	ldr	r0, [pc, #28]	; 10604 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
   105e4:	eb003445 	bl	1d700 <assertion_failed>
   105e8:	e59f200c 	ldr	r2, [pc, #12]	; 105fc <CDWHCITransferStageData::operator new(unsigned int)+0x48>
   105ec:	e59f100c 	ldr	r1, [pc, #12]	; 10600 <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
   105f0:	e59f0010 	ldr	r0, [pc, #16]	; 10608 <CDWHCITransferStageData::operator new(unsigned int)+0x54>
   105f4:	eb003441 	bl	1d700 <assertion_failed>
   105f8:	00034ba4 	.word	0x00034ba4
   105fc:	000001fe 	.word	0x000001fe
   10600:	0002d914 	.word	0x0002d914
   10604:	0002da98 	.word	0x0002da98
   10608:	0002cac8 	.word	0x0002cac8

0001060c <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
   1060c:	e3510054 	cmp	r1, #84	; 0x54
   10610:	e92d4010 	push	{r4, lr}
   10614:	1a000006 	bne	10634 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x28>
   10618:	e59f3034 	ldr	r3, [pc, #52]	; 10654 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x48>
   1061c:	e1a01000 	mov	r1, r0
   10620:	e5930000 	ldr	r0, [r3]
   10624:	e3500000 	cmp	r0, #0
   10628:	0a000005 	beq	10644 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x38>
   1062c:	e8bd4010 	pop	{r4, lr}
   10630:	ea00356f 	b	1dbf4 <CClassAllocator::Free(void*)>
   10634:	e59f201c 	ldr	r2, [pc, #28]	; 10658 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x4c>
   10638:	e59f101c 	ldr	r1, [pc, #28]	; 1065c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
   1063c:	e59f001c 	ldr	r0, [pc, #28]	; 10660 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x54>
   10640:	eb00342e 	bl	1d700 <assertion_failed>
   10644:	e59f200c 	ldr	r2, [pc, #12]	; 10658 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x4c>
   10648:	e59f100c 	ldr	r1, [pc, #12]	; 1065c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
   1064c:	e59f0010 	ldr	r0, [pc, #16]	; 10664 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x58>
   10650:	eb00342a 	bl	1d700 <assertion_failed>
   10654:	00034ba4 	.word	0x00034ba4
   10658:	000001fe 	.word	0x000001fe
   1065c:	0002d914 	.word	0x0002d914
   10660:	0002da98 	.word	0x0002da98
   10664:	0002cac8 	.word	0x0002cac8

00010668 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
   10668:	e92d4070 	push	{r4, r5, r6, lr}
   1066c:	e59f6040 	ldr	r6, [pc, #64]	; 106b4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x4c>
   10670:	e5963000 	ldr	r3, [r6]
   10674:	e3530000 	cmp	r3, #0
   10678:	1a000009 	bne	106a4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x3c>
   1067c:	e1a04000 	mov	r4, r0
   10680:	e3a0001c 	mov	r0, #28
   10684:	eb005c66 	bl	27824 <operator new(unsigned int)>
   10688:	e1a05000 	mov	r5, r0
   1068c:	e1a02004 	mov	r2, r4
   10690:	e3a01054 	mov	r1, #84	; 0x54
   10694:	e59f301c 	ldr	r3, [pc, #28]	; 106b8 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x50>
   10698:	eb003501 	bl	1daa4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   1069c:	e5865000 	str	r5, [r6]
   106a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   106a4:	e59f2010 	ldr	r2, [pc, #16]	; 106bc <CDWHCITransferStageData::InitAllocator(unsigned int)+0x54>
   106a8:	e59f1010 	ldr	r1, [pc, #16]	; 106c0 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x58>
   106ac:	e59f0010 	ldr	r0, [pc, #16]	; 106c4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x5c>
   106b0:	eb003412 	bl	1d700 <assertion_failed>
   106b4:	00034ba4 	.word	0x00034ba4
   106b8:	0002dac4 	.word	0x0002dac4
   106bc:	000001fe 	.word	0x000001fe
   106c0:	0002d914 	.word	0x0002d914
   106c4:	0002cadc 	.word	0x0002cadc

000106c8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
   106c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   106cc:	e59f7054 	ldr	r7, [pc, #84]	; 10728 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   106d0:	e24dd00c 	sub	sp, sp, #12
   106d4:	e5973000 	ldr	r3, [r7]
   106d8:	e3530000 	cmp	r3, #0
   106dc:	1a00000d 	bne	10718 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
   106e0:	e1a05001 	mov	r5, r1
   106e4:	e1a04000 	mov	r4, r0
   106e8:	e3a0001c 	mov	r0, #28
   106ec:	eb005c4c 	bl	27824 <operator new(unsigned int)>
   106f0:	e59f1034 	ldr	r1, [pc, #52]	; 1072c <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   106f4:	e1a03005 	mov	r3, r5
   106f8:	e58d1000 	str	r1, [sp]
   106fc:	e1a02004 	mov	r2, r4
   10700:	e3a01054 	mov	r1, #84	; 0x54
   10704:	e1a06000 	mov	r6, r0
   10708:	eb0034f1 	bl	1dad4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   1070c:	e5876000 	str	r6, [r7]
   10710:	e28dd00c 	add	sp, sp, #12
   10714:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10718:	e59f2010 	ldr	r2, [pc, #16]	; 10730 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   1071c:	e59f1010 	ldr	r1, [pc, #16]	; 10734 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   10720:	e59f0010 	ldr	r0, [pc, #16]	; 10738 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x70>
   10724:	eb0033f5 	bl	1d700 <assertion_failed>
   10728:	00034ba4 	.word	0x00034ba4
   1072c:	0002dac4 	.word	0x0002dac4
   10730:	000001fe 	.word	0x000001fe
   10734:	0002d914 	.word	0x0002d914
   10738:	0002cadc 	.word	0x0002cadc

0001073c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
   1073c:	e92d4070 	push	{r4, r5, r6, lr}
   10740:	e1a04000 	mov	r4, r0
   10744:	e3a05000 	mov	r5, #0
   10748:	e3a00001 	mov	r0, #1
   1074c:	e1510005 	cmp	r1, r5
   10750:	e5841004 	str	r1, [r4, #4]
   10754:	e59f108c 	ldr	r1, [pc, #140]	; 107e8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xac>
   10758:	e5843008 	str	r3, [r4, #8]
   1075c:	e5c42015 	strb	r2, [r4, #21]
   10760:	e5841000 	str	r1, [r4]
   10764:	e5c4001e 	strb	r0, [r4, #30]
   10768:	e584500c 	str	r5, [r4, #12]
   1076c:	e5c45014 	strb	r5, [r4, #20]
   10770:	e5845018 	str	r5, [r4, #24]
   10774:	e1c451bc 	strh	r5, [r4, #28]
   10778:	e5845020 	str	r5, [r4, #32]
   1077c:	e5845024 	str	r5, [r4, #36]	; 0x24
   10780:	e5845028 	str	r5, [r4, #40]	; 0x28
   10784:	e584502c 	str	r5, [r4, #44]	; 0x2c
   10788:	0a00000e 	beq	107c8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x8c>
   1078c:	e3530000 	cmp	r3, #0
   10790:	0a000010 	beq	107d8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x9c>
   10794:	e3a00014 	mov	r0, #20
   10798:	eb005c21 	bl	27824 <operator new(unsigned int)>
   1079c:	e1a06000 	mov	r6, r0
   107a0:	e1a01004 	mov	r1, r4
   107a4:	eb00058b 	bl	11dd8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
   107a8:	e5846018 	str	r6, [r4, #24]
   107ac:	e284302c 	add	r3, r4, #44	; 0x2c
   107b0:	e2842054 	add	r2, r4, #84	; 0x54
   107b4:	e5a35004 	str	r5, [r3, #4]!
   107b8:	e1530002 	cmp	r3, r2
   107bc:	1afffffc 	bne	107b4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x78>
   107c0:	e1a00004 	mov	r0, r4
   107c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   107c8:	e3a02038 	mov	r2, #56	; 0x38
   107cc:	e59f1018 	ldr	r1, [pc, #24]	; 107ec <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb0>
   107d0:	e59f0018 	ldr	r0, [pc, #24]	; 107f0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
   107d4:	eb0033c9 	bl	1d700 <assertion_failed>
   107d8:	e3a02039 	mov	r2, #57	; 0x39
   107dc:	e59f1008 	ldr	r1, [pc, #8]	; 107ec <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb0>
   107e0:	e59f000c 	ldr	r0, [pc, #12]	; 107f4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb8>
   107e4:	eb0033c5 	bl	1d700 <assertion_failed>
   107e8:	0002de94 	.word	0x0002de94
   107ec:	0002daec 	.word	0x0002daec
   107f0:	0002d778 	.word	0x0002d778
   107f4:	0002dafc 	.word	0x0002dafc

000107f8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
   107f8:	e92d4070 	push	{r4, r5, r6, lr}
   107fc:	e3a0c000 	mov	ip, #0
   10800:	e1a04000 	mov	r4, r0
   10804:	e151000c 	cmp	r1, ip
   10808:	e59f0130 	ldr	r0, [pc, #304]	; 10940 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x148>
   1080c:	e5841004 	str	r1, [r4, #4]
   10810:	e59d1010 	ldr	r1, [sp, #16]
   10814:	e584300c 	str	r3, [r4, #12]
   10818:	e5c42015 	strb	r2, [r4, #21]
   1081c:	e5840000 	str	r0, [r4]
   10820:	e5841010 	str	r1, [r4, #16]
   10824:	e584c008 	str	ip, [r4, #8]
   10828:	e5c4c014 	strb	ip, [r4, #20]
   1082c:	e584c018 	str	ip, [r4, #24]
   10830:	e584c024 	str	ip, [r4, #36]	; 0x24
   10834:	e584c028 	str	ip, [r4, #40]	; 0x28
   10838:	e584c02c 	str	ip, [r4, #44]	; 0x2c
   1083c:	0a00002f 	beq	10900 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x108>
   10840:	e3530000 	cmp	r3, #0
   10844:	0a000031 	beq	10910 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x118>
   10848:	e1a00003 	mov	r0, r3
   1084c:	eb000731 	bl	12518 <CUSBFunction::GetDevice() const>
   10850:	e3500000 	cmp	r0, #0
   10854:	0a000031 	beq	10920 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x128>
   10858:	e5d0301c 	ldrb	r3, [r0, #28]
   1085c:	e5c4301c 	strb	r3, [r4, #28]
   10860:	e5d0201d 	ldrb	r2, [r0, #29]
   10864:	e3530000 	cmp	r3, #0
   10868:	e5c4201d 	strb	r2, [r4, #29]
   1086c:	e5d0301e 	ldrb	r3, [r0, #30]
   10870:	e5c4301e 	strb	r3, [r4, #30]
   10874:	e5903020 	ldr	r3, [r0, #32]
   10878:	e5843020 	str	r3, [r4, #32]
   1087c:	0a000010 	beq	108c4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xcc>
   10880:	e5945018 	ldr	r5, [r4, #24]
   10884:	e3550000 	cmp	r5, #0
   10888:	1a000028 	bne	10930 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x138>
   1088c:	e3a00014 	mov	r0, #20
   10890:	eb005be3 	bl	27824 <operator new(unsigned int)>
   10894:	e1a01004 	mov	r1, r4
   10898:	e1a06000 	mov	r6, r0
   1089c:	eb00054d 	bl	11dd8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
   108a0:	e1a02005 	mov	r2, r5
   108a4:	e5846018 	str	r6, [r4, #24]
   108a8:	e284302c 	add	r3, r4, #44	; 0x2c
   108ac:	e2841054 	add	r1, r4, #84	; 0x54
   108b0:	e5a32004 	str	r2, [r3, #4]!
   108b4:	e1530001 	cmp	r3, r1
   108b8:	1afffffc 	bne	108b0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb8>
   108bc:	e1a00004 	mov	r0, r4
   108c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   108c4:	e5d03015 	ldrb	r3, [r0, #21]
   108c8:	e3530002 	cmp	r3, #2
   108cc:	1affffeb 	bne	10880 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
   108d0:	e5d43015 	ldrb	r3, [r4, #21]
   108d4:	e3530001 	cmp	r3, #1
   108d8:	8affffe8 	bhi	10880 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
   108dc:	e3a02001 	mov	r2, #1
   108e0:	e5943010 	ldr	r3, [r4, #16]
   108e4:	e5c4201c 	strb	r2, [r4, #28]
   108e8:	e5d02014 	ldrb	r2, [r0, #20]
   108ec:	e2833001 	add	r3, r3, #1
   108f0:	e5c4201d 	strb	r2, [r4, #29]
   108f4:	e5840020 	str	r0, [r4, #32]
   108f8:	e5c4301e 	strb	r3, [r4, #30]
   108fc:	eaffffdf 	b	10880 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
   10900:	e3a02057 	mov	r2, #87	; 0x57
   10904:	e59f1038 	ldr	r1, [pc, #56]	; 10944 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
   10908:	e59f0038 	ldr	r0, [pc, #56]	; 10948 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x150>
   1090c:	eb00337b 	bl	1d700 <assertion_failed>
   10910:	e3a02058 	mov	r2, #88	; 0x58
   10914:	e59f1028 	ldr	r1, [pc, #40]	; 10944 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
   10918:	e59f002c 	ldr	r0, [pc, #44]	; 1094c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x154>
   1091c:	eb003377 	bl	1d700 <assertion_failed>
   10920:	e3a0205b 	mov	r2, #91	; 0x5b
   10924:	e59f1018 	ldr	r1, [pc, #24]	; 10944 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
   10928:	e59f0020 	ldr	r0, [pc, #32]	; 10950 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x158>
   1092c:	eb003373 	bl	1d700 <assertion_failed>
   10930:	e3a02073 	mov	r2, #115	; 0x73
   10934:	e59f1008 	ldr	r1, [pc, #8]	; 10944 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
   10938:	e59f0014 	ldr	r0, [pc, #20]	; 10954 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x15c>
   1093c:	eb00336f 	bl	1d700 <assertion_failed>
   10940:	0002de94 	.word	0x0002de94
   10944:	0002daec 	.word	0x0002daec
   10948:	0002d778 	.word	0x0002d778
   1094c:	0002db10 	.word	0x0002db10
   10950:	0002db1c 	.word	0x0002db1c
   10954:	0002db2c 	.word	0x0002db2c

00010958 <CUSBDevice::ReScanDevices()>:
   10958:	e92d4070 	push	{r4, r5, r6, lr}
   1095c:	e3a05000 	mov	r5, #0
   10960:	e280402c 	add	r4, r0, #44	; 0x2c
   10964:	e2806054 	add	r6, r0, #84	; 0x54
   10968:	e5b40004 	ldr	r0, [r4, #4]!
   1096c:	e3500000 	cmp	r0, #0
   10970:	0a000004 	beq	10988 <CUSBDevice::ReScanDevices()+0x30>
   10974:	e5903000 	ldr	r3, [r0]
   10978:	e5933020 	ldr	r3, [r3, #32]
   1097c:	e12fff33 	blx	r3
   10980:	e3500000 	cmp	r0, #0
   10984:	11a05000 	movne	r5, r0
   10988:	e1540006 	cmp	r4, r6
   1098c:	1afffff5 	bne	10968 <CUSBDevice::ReScanDevices()+0x10>
   10990:	e1a00005 	mov	r0, r5
   10994:	e8bd8070 	pop	{r4, r5, r6, pc}

00010998 <CUSBDevice::RemoveDevice()>:
   10998:	e5903008 	ldr	r3, [r0, #8]
   1099c:	e3530000 	cmp	r3, #0
   109a0:	0a000003 	beq	109b4 <CUSBDevice::RemoveDevice()+0x1c>
   109a4:	e5932000 	ldr	r2, [r3]
   109a8:	e1a00003 	mov	r0, r3
   109ac:	e592300c 	ldr	r3, [r2, #12]
   109b0:	e12fff13 	bx	r3
   109b4:	e590300c 	ldr	r3, [r0, #12]
   109b8:	e3530000 	cmp	r3, #0
   109bc:	0a000002 	beq	109cc <CUSBDevice::RemoveDevice()+0x34>
   109c0:	e5901010 	ldr	r1, [r0, #16]
   109c4:	e1a00003 	mov	r0, r3
   109c8:	eaffe8a8 	b	ac70 <CUSBStandardHub::RemoveDevice(unsigned int)>
   109cc:	e3a02f7f 	mov	r2, #508	; 0x1fc
   109d0:	e92d4010 	push	{r4, lr}
   109d4:	e59f1004 	ldr	r1, [pc, #4]	; 109e0 <CUSBDevice::RemoveDevice()+0x48>
   109d8:	e59f0004 	ldr	r0, [pc, #4]	; 109e4 <CUSBDevice::RemoveDevice()+0x4c>
   109dc:	eb003347 	bl	1d700 <assertion_failed>
   109e0:	0002daec 	.word	0x0002daec
   109e4:	0002db10 	.word	0x0002db10

000109e8 <CUSBDevice::GetName(TDeviceNameSelector) const>:
   109e8:	e92d4070 	push	{r4, r5, r6, lr}
   109ec:	e1a06000 	mov	r6, r0
   109f0:	e24dd008 	sub	sp, sp, #8
   109f4:	e3a00010 	mov	r0, #16
   109f8:	e1a04001 	mov	r4, r1
   109fc:	eb005b88 	bl	27824 <operator new(unsigned int)>
   10a00:	e1a05000 	mov	r5, r0
   10a04:	eb004e5a 	bl	24374 <CString::CString()>
   10a08:	e3540000 	cmp	r4, #0
   10a0c:	0a000012 	beq	10a5c <CUSBDevice::GetName(TDeviceNameSelector) const+0x74>
   10a10:	e3540001 	cmp	r4, #1
   10a14:	1a00002d 	bne	10ad0 <CUSBDevice::GetName(TDeviceNameSelector) const+0xe8>
   10a18:	e5961024 	ldr	r1, [r6, #36]	; 0x24
   10a1c:	e3510000 	cmp	r1, #0
   10a20:	0a000022 	beq	10ab0 <CUSBDevice::GetName(TDeviceNameSelector) const+0xc8>
   10a24:	e5d12004 	ldrb	r2, [r1, #4]
   10a28:	e2423001 	sub	r3, r2, #1
   10a2c:	e6ef3073 	uxtb	r3, r3
   10a30:	e35300fd 	cmp	r3, #253	; 0xfd
   10a34:	8a000017 	bhi	10a98 <CUSBDevice::GetName(TDeviceNameSelector) const+0xb0>
   10a38:	e5d13005 	ldrb	r3, [r1, #5]
   10a3c:	e5d11006 	ldrb	r1, [r1, #6]
   10a40:	e1a00005 	mov	r0, r5
   10a44:	e58d1000 	str	r1, [sp]
   10a48:	e59f1090 	ldr	r1, [pc, #144]	; 10ae0 <CUSBDevice::GetName(TDeviceNameSelector) const+0xf8>
   10a4c:	eb00538e 	bl	2588c <CString::Format(char const*, ...)>
   10a50:	e1a00005 	mov	r0, r5
   10a54:	e28dd008 	add	sp, sp, #8
   10a58:	e8bd8070 	pop	{r4, r5, r6, pc}
   10a5c:	e5961024 	ldr	r1, [r6, #36]	; 0x24
   10a60:	e3510000 	cmp	r1, #0
   10a64:	0a000015 	beq	10ac0 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd8>
   10a68:	e5d1000b 	ldrb	r0, [r1, #11]
   10a6c:	e5d1300a 	ldrb	r3, [r1, #10]
   10a70:	e5d12008 	ldrb	r2, [r1, #8]
   10a74:	e5d11009 	ldrb	r1, [r1, #9]
   10a78:	e1833400 	orr	r3, r3, r0, lsl #8
   10a7c:	e1822401 	orr	r2, r2, r1, lsl #8
   10a80:	e1a00005 	mov	r0, r5
   10a84:	e59f1058 	ldr	r1, [pc, #88]	; 10ae4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
   10a88:	eb00537f 	bl	2588c <CString::Format(char const*, ...)>
   10a8c:	e1a00005 	mov	r0, r5
   10a90:	e28dd008 	add	sp, sp, #8
   10a94:	e8bd8070 	pop	{r4, r5, r6, pc}
   10a98:	e1a00005 	mov	r0, r5
   10a9c:	e59f1044 	ldr	r1, [pc, #68]	; 10ae8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
   10aa0:	eb004e51 	bl	243ec <CString::operator=(char const*)>
   10aa4:	e1a00005 	mov	r0, r5
   10aa8:	e28dd008 	add	sp, sp, #8
   10aac:	e8bd8070 	pop	{r4, r5, r6, pc}
   10ab0:	e59f2034 	ldr	r2, [pc, #52]	; 10aec <CUSBDevice::GetName(TDeviceNameSelector) const+0x104>
   10ab4:	e59f1034 	ldr	r1, [pc, #52]	; 10af0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
   10ab8:	e59f0034 	ldr	r0, [pc, #52]	; 10af4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
   10abc:	eb00330f 	bl	1d700 <assertion_failed>
   10ac0:	e3a02f82 	mov	r2, #520	; 0x208
   10ac4:	e59f1024 	ldr	r1, [pc, #36]	; 10af0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
   10ac8:	e59f0024 	ldr	r0, [pc, #36]	; 10af4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
   10acc:	eb00330b 	bl	1d700 <assertion_failed>
   10ad0:	e3a02f87 	mov	r2, #540	; 0x21c
   10ad4:	e59f1014 	ldr	r1, [pc, #20]	; 10af0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
   10ad8:	e59f0018 	ldr	r0, [pc, #24]	; 10af8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
   10adc:	eb003307 	bl	1d700 <assertion_failed>
   10ae0:	0002db68 	.word	0x0002db68
   10ae4:	0002db54 	.word	0x0002db54
   10ae8:	0002db60 	.word	0x0002db60
   10aec:	0000020f 	.word	0x0000020f
   10af0:	0002daec 	.word	0x0002daec
   10af4:	0002db40 	.word	0x0002db40
   10af8:	0002dbb4 	.word	0x0002dbb4

00010afc <CUSBDevice::GetNames() const>:
   10afc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b00:	e1a07000 	mov	r7, r0
   10b04:	e3a00010 	mov	r0, #16
   10b08:	eb005b45 	bl	27824 <operator new(unsigned int)>
   10b0c:	e3a06000 	mov	r6, #0
   10b10:	e1a05000 	mov	r5, r0
   10b14:	eb004e16 	bl	24374 <CString::CString()>
   10b18:	e59f80b8 	ldr	r8, [pc, #184]	; 10bd8 <CUSBDevice::GetNames() const+0xdc>
   10b1c:	e59f90b8 	ldr	r9, [pc, #184]	; 10bdc <CUSBDevice::GetNames() const+0xe0>
   10b20:	e1a01006 	mov	r1, r6
   10b24:	e1a00007 	mov	r0, r7
   10b28:	ebffffae 	bl	109e8 <CUSBDevice::GetName(TDeviceNameSelector) const>
   10b2c:	e2504000 	subs	r4, r0, #0
   10b30:	0a000020 	beq	10bb8 <CUSBDevice::GetNames() const+0xbc>
   10b34:	e1a01008 	mov	r1, r8
   10b38:	eb004e7c 	bl	24530 <CString::Compare(char const*) const>
   10b3c:	e3500000 	cmp	r0, #0
   10b40:	1a00000d 	bne	10b7c <CUSBDevice::GetNames() const+0x80>
   10b44:	e5943000 	ldr	r3, [r4]
   10b48:	e1a00004 	mov	r0, r4
   10b4c:	e5933004 	ldr	r3, [r3, #4]
   10b50:	e12fff33 	blx	r3
   10b54:	e3560001 	cmp	r6, #1
   10b58:	1a000005 	bne	10b74 <CUSBDevice::GetNames() const+0x78>
   10b5c:	e1a00005 	mov	r0, r5
   10b60:	eb004e4d 	bl	2449c <CString::GetLength() const>
   10b64:	e3500000 	cmp	r0, #0
   10b68:	0a00000d 	beq	10ba4 <CUSBDevice::GetNames() const+0xa8>
   10b6c:	e1a00005 	mov	r0, r5
   10b70:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b74:	e3a06001 	mov	r6, #1
   10b78:	eaffffe8 	b	10b20 <CUSBDevice::GetNames() const+0x24>
   10b7c:	e1a00005 	mov	r0, r5
   10b80:	eb004e45 	bl	2449c <CString::GetLength() const>
   10b84:	e3500000 	cmp	r0, #0
   10b88:	1a00000e 	bne	10bc8 <CUSBDevice::GetNames() const+0xcc>
   10b8c:	e1a00004 	mov	r0, r4
   10b90:	eb004e0f 	bl	243d4 <CString::operator char const*() const>
   10b94:	e1a01000 	mov	r1, r0
   10b98:	e1a00005 	mov	r0, r5
   10b9c:	eb004e42 	bl	244ac <CString::Append(char const*)>
   10ba0:	eaffffe7 	b	10b44 <CUSBDevice::GetNames() const+0x48>
   10ba4:	e1a00005 	mov	r0, r5
   10ba8:	e59f1028 	ldr	r1, [pc, #40]	; 10bd8 <CUSBDevice::GetNames() const+0xdc>
   10bac:	eb004e0e 	bl	243ec <CString::operator=(char const*)>
   10bb0:	e1a00005 	mov	r0, r5
   10bb4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bb8:	e59f2020 	ldr	r2, [pc, #32]	; 10be0 <CUSBDevice::GetNames() const+0xe4>
   10bbc:	e59f1020 	ldr	r1, [pc, #32]	; 10be4 <CUSBDevice::GetNames() const+0xe8>
   10bc0:	e59f0020 	ldr	r0, [pc, #32]	; 10be8 <CUSBDevice::GetNames() const+0xec>
   10bc4:	eb0032cd 	bl	1d700 <assertion_failed>
   10bc8:	e1a01009 	mov	r1, r9
   10bcc:	e1a00005 	mov	r0, r5
   10bd0:	eb004e35 	bl	244ac <CString::Append(char const*)>
   10bd4:	eaffffec 	b	10b8c <CUSBDevice::GetNames() const+0x90>
   10bd8:	0002db60 	.word	0x0002db60
   10bdc:	0002db80 	.word	0x0002db80
   10be0:	0000022d 	.word	0x0000022d
   10be4:	0002daec 	.word	0x0002daec
   10be8:	0002db74 	.word	0x0002db74

00010bec <CUSBDevice::SetAddress(unsigned char)>:
   10bec:	e351003f 	cmp	r1, #63	; 0x3f
   10bf0:	8a000001 	bhi	10bfc <CUSBDevice::SetAddress(unsigned char)+0x10>
   10bf4:	e5c01014 	strb	r1, [r0, #20]
   10bf8:	e12fff1e 	bx	lr
   10bfc:	e92d4010 	push	{r4, lr}
   10c00:	e59f2008 	ldr	r2, [pc, #8]	; 10c10 <CUSBDevice::SetAddress(unsigned char)+0x24>
   10c04:	e59f1008 	ldr	r1, [pc, #8]	; 10c14 <CUSBDevice::SetAddress(unsigned char)+0x28>
   10c08:	e59f0008 	ldr	r0, [pc, #8]	; 10c18 <CUSBDevice::SetAddress(unsigned char)+0x2c>
   10c0c:	eb0032bb 	bl	1d700 <assertion_failed>
   10c10:	00000247 	.word	0x00000247
   10c14:	0002daec 	.word	0x0002daec
   10c18:	0002db84 	.word	0x0002db84

00010c1c <CUSBDevice::GetAddress() const>:
   10c1c:	e5d00014 	ldrb	r0, [r0, #20]
   10c20:	e12fff1e 	bx	lr

00010c24 <CUSBDevice::GetSpeed() const>:
   10c24:	e5d00015 	ldrb	r0, [r0, #21]
   10c28:	e12fff1e 	bx	lr

00010c2c <CUSBDevice::IsSplit() const>:
   10c2c:	e5d0001c 	ldrb	r0, [r0, #28]
   10c30:	e12fff1e 	bx	lr

00010c34 <CUSBDevice::GetHubAddress() const>:
   10c34:	e5d0001d 	ldrb	r0, [r0, #29]
   10c38:	e12fff1e 	bx	lr

00010c3c <CUSBDevice::GetHubPortNumber() const>:
   10c3c:	e5d0001e 	ldrb	r0, [r0, #30]
   10c40:	e12fff1e 	bx	lr

00010c44 <CUSBDevice::GetTTHubDevice() const>:
   10c44:	e5900020 	ldr	r0, [r0, #32]
   10c48:	e12fff1e 	bx	lr

00010c4c <CUSBDevice::GetEndpoint0() const>:
   10c4c:	e5900018 	ldr	r0, [r0, #24]
   10c50:	e3500000 	cmp	r0, #0
   10c54:	112fff1e 	bxne	lr
   10c58:	e3a02e27 	mov	r2, #624	; 0x270
   10c5c:	e92d4010 	push	{r4, lr}
   10c60:	e59f1004 	ldr	r1, [pc, #4]	; 10c6c <CUSBDevice::GetEndpoint0() const+0x20>
   10c64:	e59f0004 	ldr	r0, [pc, #4]	; 10c70 <CUSBDevice::GetEndpoint0() const+0x24>
   10c68:	eb0032a4 	bl	1d700 <assertion_failed>
   10c6c:	0002daec 	.word	0x0002daec
   10c70:	0002dba4 	.word	0x0002dba4

00010c74 <CUSBDevice::GetHost() const>:
   10c74:	e5900004 	ldr	r0, [r0, #4]
   10c78:	e3500000 	cmp	r0, #0
   10c7c:	112fff1e 	bxne	lr
   10c80:	e92d4010 	push	{r4, lr}
   10c84:	e59f2008 	ldr	r2, [pc, #8]	; 10c94 <CUSBDevice::GetHost() const+0x20>
   10c88:	e59f1008 	ldr	r1, [pc, #8]	; 10c98 <CUSBDevice::GetHost() const+0x24>
   10c8c:	e59f0008 	ldr	r0, [pc, #8]	; 10c9c <CUSBDevice::GetHost() const+0x28>
   10c90:	eb00329a 	bl	1d700 <assertion_failed>
   10c94:	00000276 	.word	0x00000276
   10c98:	0002daec 	.word	0x0002daec
   10c9c:	0002d778 	.word	0x0002d778

00010ca0 <CUSBDevice::GetDeviceDescriptor() const>:
   10ca0:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   10ca4:	e3500000 	cmp	r0, #0
   10ca8:	112fff1e 	bxne	lr
   10cac:	e3a02f9f 	mov	r2, #636	; 0x27c
   10cb0:	e92d4010 	push	{r4, lr}
   10cb4:	e59f1004 	ldr	r1, [pc, #4]	; 10cc0 <CUSBDevice::GetDeviceDescriptor() const+0x20>
   10cb8:	e59f0004 	ldr	r0, [pc, #4]	; 10cc4 <CUSBDevice::GetDeviceDescriptor() const+0x24>
   10cbc:	eb00328f 	bl	1d700 <assertion_failed>
   10cc0:	0002daec 	.word	0x0002daec
   10cc4:	0002db40 	.word	0x0002db40

00010cc8 <CUSBDevice::GetConfigurationDescriptor() const>:
   10cc8:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   10ccc:	e3500000 	cmp	r0, #0
   10cd0:	112fff1e 	bxne	lr
   10cd4:	e92d4010 	push	{r4, lr}
   10cd8:	e59f2008 	ldr	r2, [pc, #8]	; 10ce8 <CUSBDevice::GetConfigurationDescriptor() const+0x20>
   10cdc:	e59f1008 	ldr	r1, [pc, #8]	; 10cec <CUSBDevice::GetConfigurationDescriptor() const+0x24>
   10ce0:	e59f0008 	ldr	r0, [pc, #8]	; 10cf0 <CUSBDevice::GetConfigurationDescriptor() const+0x28>
   10ce4:	eb003285 	bl	1d700 <assertion_failed>
   10ce8:	00000282 	.word	0x00000282
   10cec:	0002daec 	.word	0x0002daec
   10cf0:	0002dbb8 	.word	0x0002dbb8

00010cf4 <CUSBDevice::GetDescriptor(unsigned char)>:
   10cf4:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10cf8:	e3500000 	cmp	r0, #0
   10cfc:	0a000000 	beq	10d04 <CUSBDevice::GetDescriptor(unsigned char)+0x10>
   10d00:	ea002919 	b	1b16c <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   10d04:	e3a02fa2 	mov	r2, #648	; 0x288
   10d08:	e92d4010 	push	{r4, lr}
   10d0c:	e59f1004 	ldr	r1, [pc, #4]	; 10d18 <CUSBDevice::GetDescriptor(unsigned char)+0x24>
   10d10:	e59f0004 	ldr	r0, [pc, #4]	; 10d1c <CUSBDevice::GetDescriptor(unsigned char)+0x28>
   10d14:	eb003279 	bl	1d700 <assertion_failed>
   10d18:	0002daec 	.word	0x0002daec
   10d1c:	0002dbcc 	.word	0x0002dbcc

00010d20 <CUSBDevice::ConfigurationError(char const*) const>:
   10d20:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   10d24:	e3500000 	cmp	r0, #0
   10d28:	0a000000 	beq	10d30 <CUSBDevice::ConfigurationError(char const*) const+0x10>
   10d2c:	ea002949 	b	1b258 <CUSBConfigurationParser::Error(char const*) const>
   10d30:	e92d4010 	push	{r4, lr}
   10d34:	e59f2008 	ldr	r2, [pc, #8]	; 10d44 <CUSBDevice::ConfigurationError(char const*) const+0x24>
   10d38:	e59f1008 	ldr	r1, [pc, #8]	; 10d48 <CUSBDevice::ConfigurationError(char const*) const+0x28>
   10d3c:	e59f0008 	ldr	r0, [pc, #8]	; 10d4c <CUSBDevice::ConfigurationError(char const*) const+0x2c>
   10d40:	eb00326e 	bl	1d700 <assertion_failed>
   10d44:	0000028e 	.word	0x0000028e
   10d48:	0002daec 	.word	0x0002daec
   10d4c:	0002dbcc 	.word	0x0002dbcc

00010d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
   10d50:	e92d000c 	push	{r2, r3}
   10d54:	e92d4070 	push	{r4, r5, r6, lr}
   10d58:	e24dd020 	sub	sp, sp, #32
   10d5c:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
   10d60:	e3560000 	cmp	r6, #0
   10d64:	0a00001d 	beq	10de0 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x90>
   10d68:	e1a04000 	mov	r4, r0
   10d6c:	e28d0010 	add	r0, sp, #16
   10d70:	e1a05001 	mov	r5, r1
   10d74:	eb004d7e 	bl	24374 <CString::CString()>
   10d78:	e5d4301e 	ldrb	r3, [r4, #30]
   10d7c:	e59f206c 	ldr	r2, [pc, #108]	; 10df0 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa0>
   10d80:	e58d3000 	str	r3, [sp]
   10d84:	e59f1068 	ldr	r1, [pc, #104]	; 10df4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa4>
   10d88:	e5d4301d 	ldrb	r3, [r4, #29]
   10d8c:	e28d0010 	add	r0, sp, #16
   10d90:	eb0052bd 	bl	2588c <CString::Format(char const*, ...)>
   10d94:	e28d3034 	add	r3, sp, #52	; 0x34
   10d98:	e58d300c 	str	r3, [sp, #12]
   10d9c:	eb003b57 	bl	1fb00 <CLogger::Get()>
   10da0:	e1a04000 	mov	r4, r0
   10da4:	e28d0010 	add	r0, sp, #16
   10da8:	eb004d89 	bl	243d4 <CString::operator char const*() const>
   10dac:	e59dc00c 	ldr	ip, [sp, #12]
   10db0:	e1a01000 	mov	r1, r0
   10db4:	e1a03006 	mov	r3, r6
   10db8:	e1a00004 	mov	r0, r4
   10dbc:	e1a02005 	mov	r2, r5
   10dc0:	e58dc000 	str	ip, [sp]
   10dc4:	eb003a9b 	bl	1f838 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   10dc8:	e28d0010 	add	r0, sp, #16
   10dcc:	eb004d35 	bl	242a8 <CString::~CString()>
   10dd0:	e28dd020 	add	sp, sp, #32
   10dd4:	e8bd4070 	pop	{r4, r5, r6, lr}
   10dd8:	e28dd008 	add	sp, sp, #8
   10ddc:	e12fff1e 	bx	lr
   10de0:	e3a02fa5 	mov	r2, #660	; 0x294
   10de4:	e59f100c 	ldr	r1, [pc, #12]	; 10df8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa8>
   10de8:	e59f000c 	ldr	r0, [pc, #12]	; 10dfc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
   10dec:	eb003243 	bl	1d700 <assertion_failed>
   10df0:	0002dea4 	.word	0x0002dea4
   10df4:	0002dbf4 	.word	0x0002dbf4
   10df8:	0002daec 	.word	0x0002daec
   10dfc:	0002dbe4 	.word	0x0002dbe4

00010e00 <CUSBDevice::~CUSBDevice()>:
   10e00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10e04:	e1a05000 	mov	r5, r0
   10e08:	e5900004 	ldr	r0, [r0, #4]
   10e0c:	e59f315c 	ldr	r3, [pc, #348]	; 10f70 <CUSBDevice::~CUSBDevice()+0x170>
   10e10:	e3500000 	cmp	r0, #0
   10e14:	e5853000 	str	r3, [r5]
   10e18:	0a00004c 	beq	10f50 <CUSBDevice::~CUSBDevice()+0x150>
   10e1c:	e5903000 	ldr	r3, [r0]
   10e20:	e59f214c 	ldr	r2, [pc, #332]	; 10f74 <CUSBDevice::~CUSBDevice()+0x174>
   10e24:	e5933010 	ldr	r3, [r3, #16]
   10e28:	e1530002 	cmp	r3, r2
   10e2c:	1a000044 	bne	10f44 <CUSBDevice::~CUSBDevice()+0x144>
   10e30:	e3a07000 	mov	r7, #0
   10e34:	e285402c 	add	r4, r5, #44	; 0x2c
   10e38:	e2856054 	add	r6, r5, #84	; 0x54
   10e3c:	e5b40004 	ldr	r0, [r4, #4]!
   10e40:	e3500000 	cmp	r0, #0
   10e44:	0a000002 	beq	10e54 <CUSBDevice::~CUSBDevice()+0x54>
   10e48:	e5903000 	ldr	r3, [r0]
   10e4c:	e5933004 	ldr	r3, [r3, #4]
   10e50:	e12fff33 	blx	r3
   10e54:	e1540006 	cmp	r4, r6
   10e58:	e5847000 	str	r7, [r4]
   10e5c:	1afffff6 	bne	10e3c <CUSBDevice::~CUSBDevice()+0x3c>
   10e60:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   10e64:	e3530000 	cmp	r3, #0
   10e68:	0a00000d 	beq	10ea4 <CUSBDevice::~CUSBDevice()+0xa4>
   10e6c:	e1a00005 	mov	r0, r5
   10e70:	ebffff21 	bl	10afc <CUSBDevice::GetNames() const>
   10e74:	e2504000 	subs	r4, r0, #0
   10e78:	0a000038 	beq	10f60 <CUSBDevice::~CUSBDevice()+0x160>
   10e7c:	eb004d54 	bl	243d4 <CString::operator char const*() const>
   10e80:	e3a01003 	mov	r1, #3
   10e84:	e1a03000 	mov	r3, r0
   10e88:	e59f20e8 	ldr	r2, [pc, #232]	; 10f78 <CUSBDevice::~CUSBDevice()+0x178>
   10e8c:	e1a00005 	mov	r0, r5
   10e90:	ebffffae 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   10e94:	e5943000 	ldr	r3, [r4]
   10e98:	e1a00004 	mov	r0, r4
   10e9c:	e5933004 	ldr	r3, [r3, #4]
   10ea0:	e12fff33 	blx	r3
   10ea4:	e5d51014 	ldrb	r1, [r5, #20]
   10ea8:	e3510000 	cmp	r1, #0
   10eac:	1a000021 	bne	10f38 <CUSBDevice::~CUSBDevice()+0x138>
   10eb0:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
   10eb4:	e3540000 	cmp	r4, #0
   10eb8:	0a000004 	beq	10ed0 <CUSBDevice::~CUSBDevice()+0xd0>
   10ebc:	e1a00004 	mov	r0, r4
   10ec0:	eb0028a6 	bl	1b160 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   10ec4:	e1a00004 	mov	r0, r4
   10ec8:	e3a0101c 	mov	r1, #28
   10ecc:	eb005a62 	bl	2785c <operator delete(void*, unsigned int)>
   10ed0:	e3a03000 	mov	r3, #0
   10ed4:	e5950028 	ldr	r0, [r5, #40]	; 0x28
   10ed8:	e585302c 	str	r3, [r5, #44]	; 0x2c
   10edc:	e1500003 	cmp	r0, r3
   10ee0:	0a000001 	beq	10eec <CUSBDevice::~CUSBDevice()+0xec>
   10ee4:	e3a01009 	mov	r1, #9
   10ee8:	eb005a5b 	bl	2785c <operator delete(void*, unsigned int)>
   10eec:	e3a03000 	mov	r3, #0
   10ef0:	e5950024 	ldr	r0, [r5, #36]	; 0x24
   10ef4:	e5853028 	str	r3, [r5, #40]	; 0x28
   10ef8:	e1500003 	cmp	r0, r3
   10efc:	0a000001 	beq	10f08 <CUSBDevice::~CUSBDevice()+0x108>
   10f00:	e3a01012 	mov	r1, #18
   10f04:	eb005a54 	bl	2785c <operator delete(void*, unsigned int)>
   10f08:	e3a03000 	mov	r3, #0
   10f0c:	e5954018 	ldr	r4, [r5, #24]
   10f10:	e5853024 	str	r3, [r5, #36]	; 0x24
   10f14:	e1540003 	cmp	r4, r3
   10f18:	0a000004 	beq	10f30 <CUSBDevice::~CUSBDevice()+0x130>
   10f1c:	e1a00004 	mov	r0, r4
   10f20:	eb00041c 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   10f24:	e1a00004 	mov	r0, r4
   10f28:	e3a01014 	mov	r1, #20
   10f2c:	eb005a4a 	bl	2785c <operator delete(void*, unsigned int)>
   10f30:	e1a00005 	mov	r0, r5
   10f34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10f38:	e59f003c 	ldr	r0, [pc, #60]	; 10f7c <CUSBDevice::~CUSBDevice()+0x17c>
   10f3c:	eb005bbe 	bl	27e3c <CNumberPool::FreeNumber(unsigned int)>
   10f40:	eaffffda 	b	10eb0 <CUSBDevice::~CUSBDevice()+0xb0>
   10f44:	e1a01005 	mov	r1, r5
   10f48:	e12fff33 	blx	r3
   10f4c:	eaffffb7 	b	10e30 <CUSBDevice::~CUSBDevice()+0x30>
   10f50:	e3a0207f 	mov	r2, #127	; 0x7f
   10f54:	e59f1024 	ldr	r1, [pc, #36]	; 10f80 <CUSBDevice::~CUSBDevice()+0x180>
   10f58:	e59f0024 	ldr	r0, [pc, #36]	; 10f84 <CUSBDevice::~CUSBDevice()+0x184>
   10f5c:	eb0031e7 	bl	1d700 <assertion_failed>
   10f60:	e3a0208b 	mov	r2, #139	; 0x8b
   10f64:	e59f1014 	ldr	r1, [pc, #20]	; 10f80 <CUSBDevice::~CUSBDevice()+0x180>
   10f68:	e59f0018 	ldr	r0, [pc, #24]	; 10f88 <CUSBDevice::~CUSBDevice()+0x188>
   10f6c:	eb0031e3 	bl	1d700 <assertion_failed>
   10f70:	0002de94 	.word	0x0002de94
   10f74:	00009554 	.word	0x00009554
   10f78:	0002dc08 	.word	0x0002dc08
   10f7c:	00034ba8 	.word	0x00034ba8
   10f80:	0002daec 	.word	0x0002daec
   10f84:	0002d778 	.word	0x0002d778
   10f88:	0002dbfc 	.word	0x0002dbfc

00010f8c <CUSBDevice::~CUSBDevice()>:
   10f8c:	e92d4010 	push	{r4, lr}
   10f90:	e1a04000 	mov	r4, r0
   10f94:	ebffff99 	bl	10e00 <CUSBDevice::~CUSBDevice()>
   10f98:	e1a00004 	mov	r0, r4
   10f9c:	e3a01058 	mov	r1, #88	; 0x58
   10fa0:	eb005a2d 	bl	2785c <operator delete(void*, unsigned int)>
   10fa4:	e1a00004 	mov	r0, r4
   10fa8:	e8bd8010 	pop	{r4, pc}

00010fac <CUSBDevice::Initialize()>:
   10fac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fb0:	e5905024 	ldr	r5, [r0, #36]	; 0x24
   10fb4:	e24dd01c 	sub	sp, sp, #28
   10fb8:	e3550000 	cmp	r5, #0
   10fbc:	1a00009d 	bne	11238 <CUSBDevice::Initialize()+0x28c>
   10fc0:	e1a04000 	mov	r4, r0
   10fc4:	e3a00012 	mov	r0, #18
   10fc8:	eb005a15 	bl	27824 <operator new(unsigned int)>
   10fcc:	e5943004 	ldr	r3, [r4, #4]
   10fd0:	e5840024 	str	r0, [r4, #36]	; 0x24
   10fd4:	e3530000 	cmp	r3, #0
   10fd8:	0a00009a 	beq	11248 <CUSBDevice::Initialize()+0x29c>
   10fdc:	e5941018 	ldr	r1, [r4, #24]
   10fe0:	e3510000 	cmp	r1, #0
   10fe4:	0a00009b 	beq	11258 <CUSBDevice::Initialize()+0x2ac>
   10fe8:	e3a02008 	mov	r2, #8
   10fec:	e3a06080 	mov	r6, #128	; 0x80
   10ff0:	e58d0000 	str	r0, [sp]
   10ff4:	e98d0044 	stmib	sp, {r2, r6}
   10ff8:	e1a00003 	mov	r0, r3
   10ffc:	e3a02001 	mov	r2, #1
   11000:	e1a03005 	mov	r3, r5
   11004:	e58d500c 	str	r5, [sp, #12]
   11008:	ebffe032 	bl	90d8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1100c:	e3500008 	cmp	r0, #8
   11010:	1a000014 	bne	11068 <CUSBDevice::Initialize()+0xbc>
   11014:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11018:	e5d37000 	ldrb	r7, [r3]
   1101c:	e3570012 	cmp	r7, #18
   11020:	1a000002 	bne	11030 <CUSBDevice::Initialize()+0x84>
   11024:	e5d38001 	ldrb	r8, [r3, #1]
   11028:	e3580001 	cmp	r8, #1
   1102c:	0a00000f 	beq	11070 <CUSBDevice::Initialize()+0xc4>
   11030:	e59f25ec 	ldr	r2, [pc, #1516]	; 11624 <CUSBDevice::Initialize()+0x678>
   11034:	e3a01001 	mov	r1, #1
   11038:	e1a00004 	mov	r0, r4
   1103c:	ebffff43 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   11040:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   11044:	e3500000 	cmp	r0, #0
   11048:	0a000001 	beq	11054 <CUSBDevice::Initialize()+0xa8>
   1104c:	e3a01012 	mov	r1, #18
   11050:	eb005a01 	bl	2785c <operator delete(void*, unsigned int)>
   11054:	e3a05000 	mov	r5, #0
   11058:	e5845024 	str	r5, [r4, #36]	; 0x24
   1105c:	e1a00005 	mov	r0, r5
   11060:	e28dd01c 	add	sp, sp, #28
   11064:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11068:	e59f25b8 	ldr	r2, [pc, #1464]	; 11628 <CUSBDevice::Initialize()+0x67c>
   1106c:	eafffff0 	b	11034 <CUSBDevice::Initialize()+0x88>
   11070:	e5d31007 	ldrb	r1, [r3, #7]
   11074:	e5940018 	ldr	r0, [r4, #24]
   11078:	eb0003d7 	bl	11fdc <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
   1107c:	e3500000 	cmp	r0, #0
   11080:	0a00007b 	beq	11274 <CUSBDevice::Initialize()+0x2c8>
   11084:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   11088:	e58d500c 	str	r5, [sp, #12]
   1108c:	e88d0088 	stm	sp, {r3, r7}
   11090:	e58d6008 	str	r6, [sp, #8]
   11094:	e1a03005 	mov	r3, r5
   11098:	e1a02008 	mov	r2, r8
   1109c:	e5941018 	ldr	r1, [r4, #24]
   110a0:	e5940004 	ldr	r0, [r4, #4]
   110a4:	ebffe00b 	bl	90d8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   110a8:	e3500012 	cmp	r0, #18
   110ac:	1a00006d 	bne	11268 <CUSBDevice::Initialize()+0x2bc>
   110b0:	e1a01005 	mov	r1, r5
   110b4:	e59f2570 	ldr	r2, [pc, #1392]	; 1162c <CUSBDevice::Initialize()+0x680>
   110b8:	e59f0570 	ldr	r0, [pc, #1392]	; 11630 <CUSBDevice::Initialize()+0x684>
   110bc:	eb005b23 	bl	27d50 <CNumberPool::AllocateNumber(bool, char const*)>
   110c0:	e3500040 	cmp	r0, #64	; 0x40
   110c4:	e1a06000 	mov	r6, r0
   110c8:	0a000078 	beq	112b0 <CUSBDevice::Initialize()+0x304>
   110cc:	e6ef7070 	uxtb	r7, r0
   110d0:	e1a02007 	mov	r2, r7
   110d4:	e5941018 	ldr	r1, [r4, #24]
   110d8:	e5940004 	ldr	r0, [r4, #4]
   110dc:	ebffe00b 	bl	9110 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
   110e0:	e2505000 	subs	r5, r0, #0
   110e4:	0a000080 	beq	112ec <CUSBDevice::Initialize()+0x340>
   110e8:	e357003f 	cmp	r7, #63	; 0x3f
   110ec:	8a000087 	bhi	11310 <CUSBDevice::Initialize()+0x364>
   110f0:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   110f4:	e5c47014 	strb	r7, [r4, #20]
   110f8:	e3550000 	cmp	r5, #0
   110fc:	1a000087 	bne	11320 <CUSBDevice::Initialize()+0x374>
   11100:	e3a00009 	mov	r0, #9
   11104:	eb0059c6 	bl	27824 <operator new(unsigned int)>
   11108:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   1110c:	e5840028 	str	r0, [r4, #40]	; 0x28
   11110:	e5d12008 	ldrb	r2, [r1, #8]
   11114:	e5d1c009 	ldrb	ip, [r1, #9]
   11118:	e59f3514 	ldr	r3, [pc, #1300]	; 11634 <CUSBDevice::Initialize()+0x688>
   1111c:	e182240c 	orr	r2, r2, ip, lsl #8
   11120:	e1520003 	cmp	r2, r3
   11124:	1a000006 	bne	11144 <CUSBDevice::Initialize()+0x198>
   11128:	e5d1500a 	ldrb	r5, [r1, #10]
   1112c:	e5d1200b 	ldrb	r2, [r1, #11]
   11130:	e59f3500 	ldr	r3, [pc, #1280]	; 11638 <CUSBDevice::Initialize()+0x68c>
   11134:	e1855402 	orr	r5, r5, r2, lsl #8
   11138:	e0455003 	sub	r5, r5, r3
   1113c:	e16f5f15 	clz	r5, r5
   11140:	e1a052a5 	lsr	r5, r5, #5
   11144:	e3a06009 	mov	r6, #9
   11148:	e3a08000 	mov	r8, #0
   1114c:	e3a07080 	mov	r7, #128	; 0x80
   11150:	e88d01c1 	stm	sp, {r0, r6, r7, r8}
   11154:	e1a03005 	mov	r3, r5
   11158:	e3a02002 	mov	r2, #2
   1115c:	e5941018 	ldr	r1, [r4, #24]
   11160:	e5940004 	ldr	r0, [r4, #4]
   11164:	ebffdfdb 	bl	90d8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   11168:	e1500006 	cmp	r0, r6
   1116c:	1a000054 	bne	112c4 <CUSBDevice::Initialize()+0x318>
   11170:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   11174:	e5d06000 	ldrb	r6, [r0]
   11178:	e3560009 	cmp	r6, #9
   1117c:	1a00003f 	bne	11280 <CUSBDevice::Initialize()+0x2d4>
   11180:	e5d0a001 	ldrb	sl, [r0, #1]
   11184:	e35a0002 	cmp	sl, #2
   11188:	1a00003c 	bne	11280 <CUSBDevice::Initialize()+0x2d4>
   1118c:	e5d09002 	ldrb	r9, [r0, #2]
   11190:	e5d03003 	ldrb	r3, [r0, #3]
   11194:	e1899403 	orr	r9, r9, r3, lsl #8
   11198:	e3590c02 	cmp	r9, #512	; 0x200
   1119c:	8a000037 	bhi	11280 <CUSBDevice::Initialize()+0x2d4>
   111a0:	e1a01006 	mov	r1, r6
   111a4:	eb0059ac 	bl	2785c <operator delete(void*, unsigned int)>
   111a8:	e1a00009 	mov	r0, r9
   111ac:	eb0059a2 	bl	2783c <operator new[](unsigned int)>
   111b0:	e58d800c 	str	r8, [sp, #12]
   111b4:	e5840028 	str	r0, [r4, #40]	; 0x28
   111b8:	e58d0000 	str	r0, [sp]
   111bc:	e58d7008 	str	r7, [sp, #8]
   111c0:	e58d9004 	str	r9, [sp, #4]
   111c4:	e1a03005 	mov	r3, r5
   111c8:	e1a0200a 	mov	r2, sl
   111cc:	e5941018 	ldr	r1, [r4, #24]
   111d0:	e5940004 	ldr	r0, [r4, #4]
   111d4:	ebffdfbf 	bl	90d8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   111d8:	e1500009 	cmp	r0, r9
   111dc:	e1a05000 	mov	r5, r0
   111e0:	159f2454 	ldrne	r2, [pc, #1108]	; 1163c <CUSBDevice::Initialize()+0x690>
   111e4:	1a000026 	bne	11284 <CUSBDevice::Initialize()+0x2d8>
   111e8:	e594602c 	ldr	r6, [r4, #44]	; 0x2c
   111ec:	e3560000 	cmp	r6, #0
   111f0:	1a0000f1 	bne	115bc <CUSBDevice::Initialize()+0x610>
   111f4:	e3a0001c 	mov	r0, #28
   111f8:	eb005989 	bl	27824 <operator new(unsigned int)>
   111fc:	e1a07000 	mov	r7, r0
   11200:	e1a02005 	mov	r2, r5
   11204:	e5941028 	ldr	r1, [r4, #40]	; 0x28
   11208:	eb002765 	bl	1afa4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
   1120c:	e1a00007 	mov	r0, r7
   11210:	e584702c 	str	r7, [r4, #44]	; 0x2c
   11214:	eb0027d2 	bl	1b164 <CUSBConfigurationParser::IsValid() const>
   11218:	e2505000 	subs	r5, r0, #0
   1121c:	1a000043 	bne	11330 <CUSBDevice::Initialize()+0x384>
   11220:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11224:	e3500000 	cmp	r0, #0
   11228:	0a0000e7 	beq	115cc <CUSBDevice::Initialize()+0x620>
   1122c:	e59f140c 	ldr	r1, [pc, #1036]	; 11640 <CUSBDevice::Initialize()+0x694>
   11230:	eb002808 	bl	1b258 <CUSBConfigurationParser::Error(char const*) const>
   11234:	eaffff88 	b	1105c <CUSBDevice::Initialize()+0xb0>
   11238:	e3a020b4 	mov	r2, #180	; 0xb4
   1123c:	e59f1400 	ldr	r1, [pc, #1024]	; 11644 <CUSBDevice::Initialize()+0x698>
   11240:	e59f0400 	ldr	r0, [pc, #1024]	; 11648 <CUSBDevice::Initialize()+0x69c>
   11244:	eb00312d 	bl	1d700 <assertion_failed>
   11248:	e3a020b8 	mov	r2, #184	; 0xb8
   1124c:	e59f13f0 	ldr	r1, [pc, #1008]	; 11644 <CUSBDevice::Initialize()+0x698>
   11250:	e59f03f4 	ldr	r0, [pc, #1012]	; 1164c <CUSBDevice::Initialize()+0x6a0>
   11254:	eb003129 	bl	1d700 <assertion_failed>
   11258:	e3a020b9 	mov	r2, #185	; 0xb9
   1125c:	e59f13e0 	ldr	r1, [pc, #992]	; 11644 <CUSBDevice::Initialize()+0x698>
   11260:	e59f03e8 	ldr	r0, [pc, #1000]	; 11650 <CUSBDevice::Initialize()+0x6a4>
   11264:	eb003125 	bl	1d700 <assertion_failed>
   11268:	e1a01008 	mov	r1, r8
   1126c:	e59f23e0 	ldr	r2, [pc, #992]	; 11654 <CUSBDevice::Initialize()+0x6a8>
   11270:	eaffff70 	b	11038 <CUSBDevice::Initialize()+0x8c>
   11274:	e1a01008 	mov	r1, r8
   11278:	e59f23d8 	ldr	r2, [pc, #984]	; 11658 <CUSBDevice::Initialize()+0x6ac>
   1127c:	eaffff6d 	b	11038 <CUSBDevice::Initialize()+0x8c>
   11280:	e59f23d4 	ldr	r2, [pc, #980]	; 1165c <CUSBDevice::Initialize()+0x6b0>
   11284:	e1a00004 	mov	r0, r4
   11288:	e3a01001 	mov	r1, #1
   1128c:	ebfffeaf 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   11290:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   11294:	e3500000 	cmp	r0, #0
   11298:	0a000001 	beq	112a4 <CUSBDevice::Initialize()+0x2f8>
   1129c:	e3a01009 	mov	r1, #9
   112a0:	eb00596d 	bl	2785c <operator delete(void*, unsigned int)>
   112a4:	e3a05000 	mov	r5, #0
   112a8:	e5845028 	str	r5, [r4, #40]	; 0x28
   112ac:	eaffff6a 	b	1105c <CUSBDevice::Initialize()+0xb0>
   112b0:	e1a01008 	mov	r1, r8
   112b4:	e1a00004 	mov	r0, r4
   112b8:	e59f23a0 	ldr	r2, [pc, #928]	; 11660 <CUSBDevice::Initialize()+0x6b4>
   112bc:	ebfffea3 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   112c0:	eaffff65 	b	1105c <CUSBDevice::Initialize()+0xb0>
   112c4:	e1a00004 	mov	r0, r4
   112c8:	e3a01001 	mov	r1, #1
   112cc:	e59f2390 	ldr	r2, [pc, #912]	; 11664 <CUSBDevice::Initialize()+0x6b8>
   112d0:	ebfffe9e 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   112d4:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   112d8:	e1500008 	cmp	r0, r8
   112dc:	0afffff0 	beq	112a4 <CUSBDevice::Initialize()+0x2f8>
   112e0:	e1a01006 	mov	r1, r6
   112e4:	eb00595c 	bl	2785c <operator delete(void*, unsigned int)>
   112e8:	eaffffed 	b	112a4 <CUSBDevice::Initialize()+0x2f8>
   112ec:	e1a00004 	mov	r0, r4
   112f0:	e1a03006 	mov	r3, r6
   112f4:	e3a01001 	mov	r1, #1
   112f8:	e59f2368 	ldr	r2, [pc, #872]	; 11668 <CUSBDevice::Initialize()+0x6bc>
   112fc:	ebfffe93 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   11300:	e1a01006 	mov	r1, r6
   11304:	e59f0324 	ldr	r0, [pc, #804]	; 11630 <CUSBDevice::Initialize()+0x684>
   11308:	eb005acb 	bl	27e3c <CNumberPool::FreeNumber(unsigned int)>
   1130c:	eaffff52 	b	1105c <CUSBDevice::Initialize()+0xb0>
   11310:	e59f2354 	ldr	r2, [pc, #852]	; 1166c <CUSBDevice::Initialize()+0x6c0>
   11314:	e59f1328 	ldr	r1, [pc, #808]	; 11644 <CUSBDevice::Initialize()+0x698>
   11318:	e59f0350 	ldr	r0, [pc, #848]	; 11670 <CUSBDevice::Initialize()+0x6c4>
   1131c:	eb0030f7 	bl	1d700 <assertion_failed>
   11320:	e3a02f41 	mov	r2, #260	; 0x104
   11324:	e59f1318 	ldr	r1, [pc, #792]	; 11644 <CUSBDevice::Initialize()+0x698>
   11328:	e59f0344 	ldr	r0, [pc, #836]	; 11674 <CUSBDevice::Initialize()+0x6c8>
   1132c:	eb0030f3 	bl	1d700 <assertion_failed>
   11330:	e1a00004 	mov	r0, r4
   11334:	ebfffdf0 	bl	10afc <CUSBDevice::GetNames() const>
   11338:	e2507000 	subs	r7, r0, #0
   1133c:	0a0000ae 	beq	115fc <CUSBDevice::Initialize()+0x650>
   11340:	eb004c23 	bl	243d4 <CString::operator char const*() const>
   11344:	e3a01003 	mov	r1, #3
   11348:	e1a03000 	mov	r3, r0
   1134c:	e59f2324 	ldr	r2, [pc, #804]	; 11678 <CUSBDevice::Initialize()+0x6cc>
   11350:	e1a00004 	mov	r0, r4
   11354:	ebfffe7d 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   11358:	e5973000 	ldr	r3, [r7]
   1135c:	e1a00007 	mov	r0, r7
   11360:	e5933004 	ldr	r3, [r3, #4]
   11364:	e12fff33 	blx	r3
   11368:	e1a09006 	mov	r9, r6
   1136c:	e59fb308 	ldr	fp, [pc, #776]	; 1167c <CUSBDevice::Initialize()+0x6d0>
   11370:	e59fa308 	ldr	sl, [pc, #776]	; 11680 <CUSBDevice::Initialize()+0x6d4>
   11374:	e3a01004 	mov	r1, #4
   11378:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1137c:	eb00277a 	bl	1b16c <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   11380:	e3500000 	cmp	r0, #0
   11384:	0a000094 	beq	115dc <CUSBDevice::Initialize()+0x630>
   11388:	e5d03002 	ldrb	r3, [r0, #2]
   1138c:	e1530006 	cmp	r3, r6
   11390:	21a08003 	movcs	r8, r3
   11394:	31a08006 	movcc	r8, r6
   11398:	3a00004f 	bcc	114dc <CUSBDevice::Initialize()+0x530>
   1139c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   113a0:	e3530000 	cmp	r3, #0
   113a4:	0a000080 	beq	115ac <CUSBDevice::Initialize()+0x600>
   113a8:	e0847109 	add	r7, r4, r9, lsl #2
   113ac:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   113b0:	e3530000 	cmp	r3, #0
   113b4:	1a000078 	bne	1159c <CUSBDevice::Initialize()+0x5f0>
   113b8:	e3a00018 	mov	r0, #24
   113bc:	eb005918 	bl	27824 <operator new(unsigned int)>
   113c0:	e1a06000 	mov	r6, r0
   113c4:	e1a01004 	mov	r1, r4
   113c8:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   113cc:	eb0003c4 	bl	122e4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
   113d0:	e3590000 	cmp	r9, #0
   113d4:	e5876030 	str	r6, [r7, #48]	; 0x30
   113d8:	1a000027 	bne	1147c <CUSBDevice::Initialize()+0x4d0>
   113dc:	e1a01009 	mov	r1, r9
   113e0:	e1a00004 	mov	r0, r4
   113e4:	ebfffd7f 	bl	109e8 <CUSBDevice::GetName(TDeviceNameSelector) const>
   113e8:	e1a01000 	mov	r1, r0
   113ec:	e1a00006 	mov	r0, r6
   113f0:	eb000122 	bl	11880 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
   113f4:	e2506000 	subs	r6, r0, #0
   113f8:	0a000016 	beq	11458 <CUSBDevice::Initialize()+0x4ac>
   113fc:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   11400:	e3530000 	cmp	r3, #0
   11404:	0a00004a 	beq	11534 <CUSBDevice::Initialize()+0x588>
   11408:	e5932000 	ldr	r2, [r3]
   1140c:	e1a00003 	mov	r0, r3
   11410:	e5923004 	ldr	r3, [r2, #4]
   11414:	e12fff33 	blx	r3
   11418:	e3560000 	cmp	r6, #0
   1141c:	05876030 	streq	r6, [r7, #48]	; 0x30
   11420:	0a000027 	beq	114c4 <CUSBDevice::Initialize()+0x518>
   11424:	e5963000 	ldr	r3, [r6]
   11428:	e1a00006 	mov	r0, r6
   1142c:	e5933018 	ldr	r3, [r3, #24]
   11430:	e5876030 	str	r6, [r7, #48]	; 0x30
   11434:	e12fff33 	blx	r3
   11438:	e2503000 	subs	r3, r0, #0
   1143c:	0a000044 	beq	11554 <CUSBDevice::Initialize()+0x5a8>
   11440:	e2899001 	add	r9, r9, #1
   11444:	e359000a 	cmp	r9, #10
   11448:	0a00006f 	beq	1160c <CUSBDevice::Initialize()+0x660>
   1144c:	e2886001 	add	r6, r8, #1
   11450:	e6ef6076 	uxtb	r6, r6
   11454:	eaffffc6 	b	11374 <CUSBDevice::Initialize()+0x3c8>
   11458:	e3a01001 	mov	r1, #1
   1145c:	e1a00004 	mov	r0, r4
   11460:	e5946030 	ldr	r6, [r4, #48]	; 0x30
   11464:	ebfffd5f 	bl	109e8 <CUSBDevice::GetName(TDeviceNameSelector) const>
   11468:	e1a01000 	mov	r1, r0
   1146c:	e1a00006 	mov	r0, r6
   11470:	eb000102 	bl	11880 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
   11474:	e2506000 	subs	r6, r0, #0
   11478:	1affffdf 	bne	113fc <CUSBDevice::Initialize()+0x450>
   1147c:	e5970030 	ldr	r0, [r7, #48]	; 0x30
   11480:	eb0003fa 	bl	12470 <CUSBFunction::GetInterfaceName() const>
   11484:	e2506000 	subs	r6, r0, #0
   11488:	0a00003f 	beq	1158c <CUSBDevice::Initialize()+0x5e0>
   1148c:	e59f11f0 	ldr	r1, [pc, #496]	; 11684 <CUSBDevice::Initialize()+0x6d8>
   11490:	eb004c26 	bl	24530 <CString::Compare(char const*) const>
   11494:	e2502000 	subs	r2, r0, #0
   11498:	1a000016 	bne	114f8 <CUSBDevice::Initialize()+0x54c>
   1149c:	e5963000 	ldr	r3, [r6]
   114a0:	e1a00006 	mov	r0, r6
   114a4:	e5933004 	ldr	r3, [r3, #4]
   114a8:	e58d2014 	str	r2, [sp, #20]
   114ac:	e12fff33 	blx	r3
   114b0:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   114b4:	e59d2014 	ldr	r2, [sp, #20]
   114b8:	e3530000 	cmp	r3, #0
   114bc:	11a06002 	movne	r6, r2
   114c0:	1affffd0 	bne	11408 <CUSBDevice::Initialize()+0x45c>
   114c4:	e1a0200a 	mov	r2, sl
   114c8:	e3a01002 	mov	r1, #2
   114cc:	e1a00004 	mov	r0, r4
   114d0:	e1a06008 	mov	r6, r8
   114d4:	ebfffe1d 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   114d8:	eaffffa5 	b	11374 <CUSBDevice::Initialize()+0x3c8>
   114dc:	e5d03003 	ldrb	r3, [r0, #3]
   114e0:	e3a01004 	mov	r1, #4
   114e4:	e1a00004 	mov	r0, r4
   114e8:	e59f2198 	ldr	r2, [pc, #408]	; 11688 <CUSBDevice::Initialize()+0x6dc>
   114ec:	e1a06008 	mov	r6, r8
   114f0:	ebfffe16 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   114f4:	eaffff9e 	b	11374 <CUSBDevice::Initialize()+0x3c8>
   114f8:	e1a00006 	mov	r0, r6
   114fc:	eb004bb4 	bl	243d4 <CString::operator char const*() const>
   11500:	e3a01003 	mov	r1, #3
   11504:	e1a03000 	mov	r3, r0
   11508:	e59f217c 	ldr	r2, [pc, #380]	; 1168c <CUSBDevice::Initialize()+0x6e0>
   1150c:	e1a00004 	mov	r0, r4
   11510:	ebfffe0e 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   11514:	e1a01006 	mov	r1, r6
   11518:	e5970030 	ldr	r0, [r7, #48]	; 0x30
   1151c:	eb0000d7 	bl	11880 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
   11520:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   11524:	e1a06000 	mov	r6, r0
   11528:	e3530000 	cmp	r3, #0
   1152c:	1affffb5 	bne	11408 <CUSBDevice::Initialize()+0x45c>
   11530:	eaffffb8 	b	11418 <CUSBDevice::Initialize()+0x46c>
   11534:	e5963000 	ldr	r3, [r6]
   11538:	e1a00006 	mov	r0, r6
   1153c:	e5933018 	ldr	r3, [r3, #24]
   11540:	e5846030 	str	r6, [r4, #48]	; 0x30
   11544:	e12fff33 	blx	r3
   11548:	e3500000 	cmp	r0, #0
   1154c:	13a09001 	movne	r9, #1
   11550:	1affffbd 	bne	1144c <CUSBDevice::Initialize()+0x4a0>
   11554:	e1a00004 	mov	r0, r4
   11558:	e1a0200b 	mov	r2, fp
   1155c:	e3a01001 	mov	r1, #1
   11560:	ebfffdfa 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   11564:	e5970030 	ldr	r0, [r7, #48]	; 0x30
   11568:	e3500000 	cmp	r0, #0
   1156c:	0a000002 	beq	1157c <CUSBDevice::Initialize()+0x5d0>
   11570:	e5903000 	ldr	r3, [r0]
   11574:	e5933004 	ldr	r3, [r3, #4]
   11578:	e12fff33 	blx	r3
   1157c:	e3a03000 	mov	r3, #0
   11580:	e1a06008 	mov	r6, r8
   11584:	e5873030 	str	r3, [r7, #48]	; 0x30
   11588:	eaffff79 	b	11374 <CUSBDevice::Initialize()+0x3c8>
   1158c:	e3a02f61 	mov	r2, #388	; 0x184
   11590:	e59f10ac 	ldr	r1, [pc, #172]	; 11644 <CUSBDevice::Initialize()+0x698>
   11594:	e59f00f4 	ldr	r0, [pc, #244]	; 11690 <CUSBDevice::Initialize()+0x6e4>
   11598:	eb003058 	bl	1d700 <assertion_failed>
   1159c:	e59f20f0 	ldr	r2, [pc, #240]	; 11694 <CUSBDevice::Initialize()+0x6e8>
   115a0:	e59f109c 	ldr	r1, [pc, #156]	; 11644 <CUSBDevice::Initialize()+0x698>
   115a4:	e59f00ec 	ldr	r0, [pc, #236]	; 11698 <CUSBDevice::Initialize()+0x6ec>
   115a8:	eb003054 	bl	1d700 <assertion_failed>
   115ac:	e59f20e8 	ldr	r2, [pc, #232]	; 1169c <CUSBDevice::Initialize()+0x6f0>
   115b0:	e59f108c 	ldr	r1, [pc, #140]	; 11644 <CUSBDevice::Initialize()+0x698>
   115b4:	e59f00e4 	ldr	r0, [pc, #228]	; 116a0 <CUSBDevice::Initialize()+0x6f4>
   115b8:	eb003050 	bl	1d700 <assertion_failed>
   115bc:	e59f20e0 	ldr	r2, [pc, #224]	; 116a4 <CUSBDevice::Initialize()+0x6f8>
   115c0:	e59f107c 	ldr	r1, [pc, #124]	; 11644 <CUSBDevice::Initialize()+0x698>
   115c4:	e59f00dc 	ldr	r0, [pc, #220]	; 116a8 <CUSBDevice::Initialize()+0x6fc>
   115c8:	eb00304c 	bl	1d700 <assertion_failed>
   115cc:	e59f20d8 	ldr	r2, [pc, #216]	; 116ac <CUSBDevice::Initialize()+0x700>
   115d0:	e59f106c 	ldr	r1, [pc, #108]	; 11644 <CUSBDevice::Initialize()+0x698>
   115d4:	e59f00c4 	ldr	r0, [pc, #196]	; 116a0 <CUSBDevice::Initialize()+0x6f4>
   115d8:	eb003048 	bl	1d700 <assertion_failed>
   115dc:	e3590000 	cmp	r9, #0
   115e0:	1afffe9d 	bne	1105c <CUSBDevice::Initialize()+0xb0>
   115e4:	e1a00004 	mov	r0, r4
   115e8:	e3a01002 	mov	r1, #2
   115ec:	e59f20bc 	ldr	r2, [pc, #188]	; 116b0 <CUSBDevice::Initialize()+0x704>
   115f0:	e1a05009 	mov	r5, r9
   115f4:	ebfffdd5 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   115f8:	eafffe97 	b	1105c <CUSBDevice::Initialize()+0xb0>
   115fc:	e59f20b0 	ldr	r2, [pc, #176]	; 116b4 <CUSBDevice::Initialize()+0x708>
   11600:	e59f103c 	ldr	r1, [pc, #60]	; 11644 <CUSBDevice::Initialize()+0x698>
   11604:	e59f00ac 	ldr	r0, [pc, #172]	; 116b8 <CUSBDevice::Initialize()+0x70c>
   11608:	eb00303c 	bl	1d700 <assertion_failed>
   1160c:	e1a00004 	mov	r0, r4
   11610:	e3a01002 	mov	r1, #2
   11614:	e59f20a0 	ldr	r2, [pc, #160]	; 116bc <CUSBDevice::Initialize()+0x710>
   11618:	e1a05003 	mov	r5, r3
   1161c:	ebfffdcb 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   11620:	eafffe8d 	b	1105c <CUSBDevice::Initialize()+0xb0>
   11624:	0002dc58 	.word	0x0002dc58
   11628:	0002dc30 	.word	0x0002dc30
   1162c:	0002dcbc 	.word	0x0002dcbc
   11630:	00034ba8 	.word	0x00034ba8
   11634:	00000525 	.word	0x00000525
   11638:	0000a4a2 	.word	0x0000a4a2
   1163c:	0002dd54 	.word	0x0002dd54
   11640:	0002dea4 	.word	0x0002dea4
   11644:	0002daec 	.word	0x0002daec
   11648:	0002dc1c 	.word	0x0002dc1c
   1164c:	0002d778 	.word	0x0002d778
   11650:	0002dba4 	.word	0x0002dba4
   11654:	0002dc9c 	.word	0x0002dc9c
   11658:	0002dc74 	.word	0x0002dc74
   1165c:	0002dd30 	.word	0x0002dd30
   11660:	0002dcc4 	.word	0x0002dcc4
   11664:	0002dd04 	.word	0x0002dd04
   11668:	0002dcd8 	.word	0x0002dcd8
   1166c:	00000247 	.word	0x00000247
   11670:	0002db84 	.word	0x0002db84
   11674:	0002dcf0 	.word	0x0002dcf0
   11678:	0002dd90 	.word	0x0002dd90
   1167c:	0002de0c 	.word	0x0002de0c
   11680:	0002ddf0 	.word	0x0002ddf0
   11684:	0002db60 	.word	0x0002db60
   11688:	0002dda0 	.word	0x0002dda0
   1168c:	0002dddc 	.word	0x0002dddc
   11690:	0002db74 	.word	0x0002db74
   11694:	00000172 	.word	0x00000172
   11698:	0002ddc0 	.word	0x0002ddc0
   1169c:	00000171 	.word	0x00000171
   116a0:	0002dbcc 	.word	0x0002dbcc
   116a4:	00000142 	.word	0x00000142
   116a8:	0002dd78 	.word	0x0002dd78
   116ac:	0000028e 	.word	0x0000028e
   116b0:	0002de48 	.word	0x0002de48
   116b4:	0000014e 	.word	0x0000014e
   116b8:	0002dbfc 	.word	0x0002dbfc
   116bc:	0002de28 	.word	0x0002de28

000116c0 <CUSBDevice::Configure()>:
   116c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   116c4:	e1a05000 	mov	r5, r0
   116c8:	e5900004 	ldr	r0, [r0, #4]
   116cc:	e3500000 	cmp	r0, #0
   116d0:	0a000029 	beq	1177c <CUSBDevice::Configure()+0xbc>
   116d4:	e5951018 	ldr	r1, [r5, #24]
   116d8:	e3510000 	cmp	r1, #0
   116dc:	0a00002a 	beq	1178c <CUSBDevice::Configure()+0xcc>
   116e0:	e5956028 	ldr	r6, [r5, #40]	; 0x28
   116e4:	e3560000 	cmp	r6, #0
   116e8:	0a000019 	beq	11754 <CUSBDevice::Configure()+0x94>
   116ec:	e5d62005 	ldrb	r2, [r6, #5]
   116f0:	ebffde99 	bl	915c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
   116f4:	e2506000 	subs	r6, r0, #0
   116f8:	0a000017 	beq	1175c <CUSBDevice::Configure()+0x9c>
   116fc:	e3a06000 	mov	r6, #0
   11700:	e1a07006 	mov	r7, r6
   11704:	e285402c 	add	r4, r5, #44	; 0x2c
   11708:	e2855054 	add	r5, r5, #84	; 0x54
   1170c:	e5b40004 	ldr	r0, [r4, #4]!
   11710:	e3500000 	cmp	r0, #0
   11714:	0a00000c 	beq	1174c <CUSBDevice::Configure()+0x8c>
   11718:	e5903000 	ldr	r3, [r0]
   1171c:	e593301c 	ldr	r3, [r3, #28]
   11720:	e12fff33 	blx	r3
   11724:	e3500000 	cmp	r0, #0
   11728:	11a06000 	movne	r6, r0
   1172c:	1a000006 	bne	1174c <CUSBDevice::Configure()+0x8c>
   11730:	e5940000 	ldr	r0, [r4]
   11734:	e3500000 	cmp	r0, #0
   11738:	0a000002 	beq	11748 <CUSBDevice::Configure()+0x88>
   1173c:	e5903000 	ldr	r3, [r0]
   11740:	e5933004 	ldr	r3, [r3, #4]
   11744:	e12fff33 	blx	r3
   11748:	e5847000 	str	r7, [r4]
   1174c:	e1540005 	cmp	r4, r5
   11750:	1affffed 	bne	1170c <CUSBDevice::Configure()+0x4c>
   11754:	e1a00006 	mov	r0, r6
   11758:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1175c:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   11760:	e1a00005 	mov	r0, r5
   11764:	e3a01001 	mov	r1, #1
   11768:	e5d33005 	ldrb	r3, [r3, #5]
   1176c:	e59f2028 	ldr	r2, [pc, #40]	; 1179c <CUSBDevice::Configure()+0xdc>
   11770:	ebfffd76 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   11774:	e1a00006 	mov	r0, r6
   11778:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1177c:	e59f201c 	ldr	r2, [pc, #28]	; 117a0 <CUSBDevice::Configure()+0xe0>
   11780:	e59f101c 	ldr	r1, [pc, #28]	; 117a4 <CUSBDevice::Configure()+0xe4>
   11784:	e59f001c 	ldr	r0, [pc, #28]	; 117a8 <CUSBDevice::Configure()+0xe8>
   11788:	eb002fdc 	bl	1d700 <assertion_failed>
   1178c:	e59f2018 	ldr	r2, [pc, #24]	; 117ac <CUSBDevice::Configure()+0xec>
   11790:	e59f100c 	ldr	r1, [pc, #12]	; 117a4 <CUSBDevice::Configure()+0xe4>
   11794:	e59f0014 	ldr	r0, [pc, #20]	; 117b0 <CUSBDevice::Configure()+0xf0>
   11798:	eb002fd8 	bl	1d700 <assertion_failed>
   1179c:	0002de6c 	.word	0x0002de6c
   117a0:	000001bd 	.word	0x000001bd
   117a4:	0002daec 	.word	0x0002daec
   117a8:	0002d778 	.word	0x0002d778
   117ac:	000001be 	.word	0x000001be
   117b0:	0002dba4 	.word	0x0002dba4

000117b4 <_GLOBAL__sub_I__ZN10CUSBDevice19s_DeviceAddressPoolE>:
   117b4:	e92d4010 	push	{r4, lr}
   117b8:	e59f4020 	ldr	r4, [pc, #32]	; 117e0 <_GLOBAL__sub_I__ZN10CUSBDevice19s_DeviceAddressPoolE+0x2c>
   117bc:	e3a0203f 	mov	r2, #63	; 0x3f
   117c0:	e1a00004 	mov	r0, r4
   117c4:	e3a01001 	mov	r1, #1
   117c8:	eb00594b 	bl	27cfc <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   117cc:	e1a00004 	mov	r0, r4
   117d0:	e8bd4010 	pop	{r4, lr}
   117d4:	e59f2008 	ldr	r2, [pc, #8]	; 117e4 <_GLOBAL__sub_I__ZN10CUSBDevice19s_DeviceAddressPoolE+0x30>
   117d8:	e59f1008 	ldr	r1, [pc, #8]	; 117e8 <_GLOBAL__sub_I__ZN10CUSBDevice19s_DeviceAddressPoolE+0x34>
   117dc:	ea005035 	b	258b8 <__aeabi_atexit>
   117e0:	00034ba8 	.word	0x00034ba8
   117e4:	00034c44 	.word	0x00034c44
   117e8:	00027d4c 	.word	0x00027d4c

000117ec <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>:
   117ec:	e92d4070 	push	{r4, r5, r6, lr}
   117f0:	e1a05000 	mov	r5, r0
   117f4:	e59f6080 	ldr	r6, [pc, #128]	; 1187c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x90>
   117f8:	e24dd010 	sub	sp, sp, #16
   117fc:	e2814004 	add	r4, r1, #4
   11800:	ea000000 	b	11808 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x1c>
   11804:	eb004aa7 	bl	242a8 <CString::~CString()>
   11808:	e15430b4 	ldrh	r3, [r4, #-4]
   1180c:	e3530000 	cmp	r3, #0
   11810:	1a000002 	bne	11820 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x34>
   11814:	e15430b2 	ldrh	r3, [r4, #-2]
   11818:	e3530000 	cmp	r3, #0
   1181c:	0a000013 	beq	11870 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x84>
   11820:	e1a0000d 	mov	r0, sp
   11824:	eb004ad2 	bl	24374 <CString::CString()>
   11828:	e15430b2 	ldrh	r3, [r4, #-2]
   1182c:	e15420b4 	ldrh	r2, [r4, #-4]
   11830:	e1a01006 	mov	r1, r6
   11834:	e1a0000d 	mov	r0, sp
   11838:	eb005013 	bl	2588c <CString::Format(char const*, ...)>
   1183c:	e1a0000d 	mov	r0, sp
   11840:	eb004ae3 	bl	243d4 <CString::operator char const*() const>
   11844:	e1a01000 	mov	r1, r0
   11848:	e1a00005 	mov	r0, r5
   1184c:	eb004b37 	bl	24530 <CString::Compare(char const*) const>
   11850:	e3500000 	cmp	r0, #0
   11854:	e2844004 	add	r4, r4, #4
   11858:	e1a0000d 	mov	r0, sp
   1185c:	1affffe8 	bne	11804 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x18>
   11860:	eb004a90 	bl	242a8 <CString::~CString()>
   11864:	e3a00001 	mov	r0, #1
   11868:	e28dd010 	add	sp, sp, #16
   1186c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11870:	e1a00003 	mov	r0, r3
   11874:	e28dd010 	add	sp, sp, #16
   11878:	e8bd8070 	pop	{r4, r5, r6, pc}
   1187c:	0002db54 	.word	0x0002db54

00011880 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
   11880:	e92d4070 	push	{r4, r5, r6, lr}
   11884:	e2505000 	subs	r5, r0, #0
   11888:	0a00002c 	beq	11940 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xc0>
   1188c:	e3510000 	cmp	r1, #0
   11890:	e1a04001 	mov	r4, r1
   11894:	0a00002d 	beq	11950 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xd0>
   11898:	e1a00004 	mov	r0, r4
   1189c:	e59f14b8 	ldr	r1, [pc, #1208]	; 11d5c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4dc>
   118a0:	eb004b22 	bl	24530 <CString::Compare(char const*) const>
   118a4:	e3500000 	cmp	r0, #0
   118a8:	1a000014 	bne	11900 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x80>
   118ac:	e3a00078 	mov	r0, #120	; 0x78
   118b0:	eb0057db 	bl	27824 <operator new(unsigned int)>
   118b4:	e1a01005 	mov	r1, r5
   118b8:	e1a05000 	mov	r5, r0
   118bc:	ebffe4a3 	bl	ab50 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
   118c0:	e1a00005 	mov	r0, r5
   118c4:	eb000313 	bl	12518 <CUSBFunction::GetDevice() const>
   118c8:	e1a06000 	mov	r6, r0
   118cc:	e1a00004 	mov	r0, r4
   118d0:	eb004abf 	bl	243d4 <CString::operator char const*() const>
   118d4:	e3a01003 	mov	r1, #3
   118d8:	e1a03000 	mov	r3, r0
   118dc:	e59f247c 	ldr	r2, [pc, #1148]	; 11d60 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4e0>
   118e0:	e1a00006 	mov	r0, r6
   118e4:	ebfffd19 	bl	10d50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   118e8:	e5943000 	ldr	r3, [r4]
   118ec:	e1a00004 	mov	r0, r4
   118f0:	e5933004 	ldr	r3, [r3, #4]
   118f4:	e12fff33 	blx	r3
   118f8:	e1a00005 	mov	r0, r5
   118fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   11900:	e1a00004 	mov	r0, r4
   11904:	e59f1458 	ldr	r1, [pc, #1112]	; 11d64 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4e4>
   11908:	eb004b08 	bl	24530 <CString::Compare(char const*) const>
   1190c:	e3500000 	cmp	r0, #0
   11910:	0affffe5 	beq	118ac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c>
   11914:	e1a00004 	mov	r0, r4
   11918:	e59f1448 	ldr	r1, [pc, #1096]	; 11d68 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4e8>
   1191c:	eb004b03 	bl	24530 <CString::Compare(char const*) const>
   11920:	e3500000 	cmp	r0, #0
   11924:	1a00000d 	bne	11960 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xe0>
   11928:	e3a00038 	mov	r0, #56	; 0x38
   1192c:	eb0057bc 	bl	27824 <operator new(unsigned int)>
   11930:	e1a01005 	mov	r1, r5
   11934:	e1a05000 	mov	r5, r0
   11938:	eb000ef9 	bl	15524 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
   1193c:	eaffffdf 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11940:	e3a02030 	mov	r2, #48	; 0x30
   11944:	e59f1420 	ldr	r1, [pc, #1056]	; 11d6c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4ec>
   11948:	e59f0420 	ldr	r0, [pc, #1056]	; 11d70 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4f0>
   1194c:	eb002f6b 	bl	1d700 <assertion_failed>
   11950:	e3a02031 	mov	r2, #49	; 0x31
   11954:	e59f1410 	ldr	r1, [pc, #1040]	; 11d6c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4ec>
   11958:	e59f0414 	ldr	r0, [pc, #1044]	; 11d74 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4f4>
   1195c:	eb002f67 	bl	1d700 <assertion_failed>
   11960:	e1a00004 	mov	r0, r4
   11964:	e59f140c 	ldr	r1, [pc, #1036]	; 11d78 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4f8>
   11968:	eb004af0 	bl	24530 <CString::Compare(char const*) const>
   1196c:	e3500000 	cmp	r0, #0
   11970:	0a00000a 	beq	119a0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x120>
   11974:	e1a00004 	mov	r0, r4
   11978:	e59f13fc 	ldr	r1, [pc, #1020]	; 11d7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4fc>
   1197c:	eb004aeb 	bl	24530 <CString::Compare(char const*) const>
   11980:	e3500000 	cmp	r0, #0
   11984:	1a00000b 	bne	119b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
   11988:	e3a0005c 	mov	r0, #92	; 0x5c
   1198c:	eb0057a4 	bl	27824 <operator new(unsigned int)>
   11990:	e1a01005 	mov	r1, r5
   11994:	e1a05000 	mov	r5, r0
   11998:	eb001271 	bl	16364 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
   1199c:	eaffffc7 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   119a0:	e59f03d8 	ldr	r0, [pc, #984]	; 11d80 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x500>
   119a4:	eb00579e 	bl	27824 <operator new(unsigned int)>
   119a8:	e1a01005 	mov	r1, r5
   119ac:	e1a05000 	mov	r5, r0
   119b0:	ebffdf6f 	bl	9774 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
   119b4:	eaffffc1 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   119b8:	e1a00004 	mov	r0, r4
   119bc:	e59f13c0 	ldr	r1, [pc, #960]	; 11d84 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x504>
   119c0:	eb004ada 	bl	24530 <CString::Compare(char const*) const>
   119c4:	e3500000 	cmp	r0, #0
   119c8:	1a000006 	bne	119e8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x168>
   119cc:	e3a00d05 	mov	r0, #320	; 0x140
   119d0:	eb005793 	bl	27824 <operator new(unsigned int)>
   119d4:	e1a01005 	mov	r1, r5
   119d8:	e3a02001 	mov	r2, #1
   119dc:	e1a05000 	mov	r5, r0
   119e0:	eb0006e1 	bl	1356c <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   119e4:	eaffffb5 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   119e8:	e1a00004 	mov	r0, r4
   119ec:	e59f1394 	ldr	r1, [pc, #916]	; 11d88 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x508>
   119f0:	eb004ace 	bl	24530 <CString::Compare(char const*) const>
   119f4:	e3500000 	cmp	r0, #0
   119f8:	1a000005 	bne	11a14 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x194>
   119fc:	e3a00d06 	mov	r0, #384	; 0x180
   11a00:	eb005787 	bl	27824 <operator new(unsigned int)>
   11a04:	e1a01005 	mov	r1, r5
   11a08:	e1a05000 	mov	r5, r0
   11a0c:	eb0003d8 	bl	12974 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
   11a10:	eaffffaa 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11a14:	e1a00004 	mov	r0, r4
   11a18:	e59f136c 	ldr	r1, [pc, #876]	; 11d8c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x50c>
   11a1c:	eb004ac3 	bl	24530 <CString::Compare(char const*) const>
   11a20:	e3500000 	cmp	r0, #0
   11a24:	0a000004 	beq	11a3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1bc>
   11a28:	e1a00004 	mov	r0, r4
   11a2c:	e59f135c 	ldr	r1, [pc, #860]	; 11d90 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x510>
   11a30:	eb004abe 	bl	24530 <CString::Compare(char const*) const>
   11a34:	e3500000 	cmp	r0, #0
   11a38:	1a000005 	bne	11a54 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d4>
   11a3c:	e3a00e15 	mov	r0, #336	; 0x150
   11a40:	eb005777 	bl	27824 <operator new(unsigned int)>
   11a44:	e1a01005 	mov	r1, r5
   11a48:	e1a05000 	mov	r5, r0
   11a4c:	eb000538 	bl	12f34 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
   11a50:	eaffff9a 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11a54:	e1a00004 	mov	r0, r4
   11a58:	e59f1334 	ldr	r1, [pc, #820]	; 11d94 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x514>
   11a5c:	eb004ab3 	bl	24530 <CString::Compare(char const*) const>
   11a60:	e3500000 	cmp	r0, #0
   11a64:	0a000004 	beq	11a7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1fc>
   11a68:	e1a00004 	mov	r0, r4
   11a6c:	e59f1324 	ldr	r1, [pc, #804]	; 11d98 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x518>
   11a70:	eb004aae 	bl	24530 <CString::Compare(char const*) const>
   11a74:	e3500000 	cmp	r0, #0
   11a78:	1a000005 	bne	11a94 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x214>
   11a7c:	e3a00f4d 	mov	r0, #308	; 0x134
   11a80:	eb005767 	bl	27824 <operator new(unsigned int)>
   11a84:	e1a01005 	mov	r1, r5
   11a88:	e1a05000 	mov	r5, r0
   11a8c:	eb000b1f 	bl	14710 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
   11a90:	eaffff8a 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11a94:	e1a00004 	mov	r0, r4
   11a98:	e59f12fc 	ldr	r1, [pc, #764]	; 11d9c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x51c>
   11a9c:	eb004aa3 	bl	24530 <CString::Compare(char const*) const>
   11aa0:	e3500000 	cmp	r0, #0
   11aa4:	0a000004 	beq	11abc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
   11aa8:	e1a00004 	mov	r0, r4
   11aac:	e59f12ec 	ldr	r1, [pc, #748]	; 11da0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x520>
   11ab0:	eb004a9e 	bl	24530 <CString::Compare(char const*) const>
   11ab4:	e3500000 	cmp	r0, #0
   11ab8:	1a000005 	bne	11ad4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x254>
   11abc:	e3a00f4e 	mov	r0, #312	; 0x138
   11ac0:	eb005757 	bl	27824 <operator new(unsigned int)>
   11ac4:	e1a01005 	mov	r1, r5
   11ac8:	e1a05000 	mov	r5, r0
   11acc:	eb000c38 	bl	14bb4 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
   11ad0:	eaffff7a 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11ad4:	e1a00004 	mov	r0, r4
   11ad8:	e59f12c4 	ldr	r1, [pc, #708]	; 11da4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x524>
   11adc:	eb004a93 	bl	24530 <CString::Compare(char const*) const>
   11ae0:	e3500000 	cmp	r0, #0
   11ae4:	0afffff4 	beq	11abc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
   11ae8:	e1a00004 	mov	r0, r4
   11aec:	e59f12b4 	ldr	r1, [pc, #692]	; 11da8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x528>
   11af0:	eb004a8e 	bl	24530 <CString::Compare(char const*) const>
   11af4:	e3500000 	cmp	r0, #0
   11af8:	0affffef 	beq	11abc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x23c>
   11afc:	e1a00004 	mov	r0, r4
   11b00:	e59f12a4 	ldr	r1, [pc, #676]	; 11dac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x52c>
   11b04:	eb004a89 	bl	24530 <CString::Compare(char const*) const>
   11b08:	e3500000 	cmp	r0, #0
   11b0c:	1a000005 	bne	11b28 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2a8>
   11b10:	e3a00f4e 	mov	r0, #312	; 0x138
   11b14:	eb005742 	bl	27824 <operator new(unsigned int)>
   11b18:	e1a01005 	mov	r1, r5
   11b1c:	e1a05000 	mov	r5, r0
   11b20:	eb00095d 	bl	1409c <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
   11b24:	eaffff65 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11b28:	e1a00004 	mov	r0, r4
   11b2c:	e59f127c 	ldr	r1, [pc, #636]	; 11db0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x530>
   11b30:	eb004a7e 	bl	24530 <CString::Compare(char const*) const>
   11b34:	e3500000 	cmp	r0, #0
   11b38:	0a000004 	beq	11b50 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2d0>
   11b3c:	e1a00004 	mov	r0, r4
   11b40:	e59f126c 	ldr	r1, [pc, #620]	; 11db4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x534>
   11b44:	eb004a79 	bl	24530 <CString::Compare(char const*) const>
   11b48:	e3500000 	cmp	r0, #0
   11b4c:	1a000005 	bne	11b68 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2e8>
   11b50:	e3a00028 	mov	r0, #40	; 0x28
   11b54:	eb005732 	bl	27824 <operator new(unsigned int)>
   11b58:	e1a01005 	mov	r1, r5
   11b5c:	e1a05000 	mov	r5, r0
   11b60:	eb001409 	bl	16b8c <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
   11b64:	eaffff55 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11b68:	e1a00004 	mov	r0, r4
   11b6c:	e59f1244 	ldr	r1, [pc, #580]	; 11db8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x538>
   11b70:	eb004a6e 	bl	24530 <CString::Compare(char const*) const>
   11b74:	e3500000 	cmp	r0, #0
   11b78:	1a000005 	bne	11b94 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x314>
   11b7c:	e3a0002c 	mov	r0, #44	; 0x2c
   11b80:	eb005727 	bl	27824 <operator new(unsigned int)>
   11b84:	e1a01005 	mov	r1, r5
   11b88:	e1a05000 	mov	r5, r0
   11b8c:	eb001fed 	bl	19b48 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
   11b90:	eaffff4a 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11b94:	e1a00004 	mov	r0, r4
   11b98:	e59f121c 	ldr	r1, [pc, #540]	; 11dbc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x53c>
   11b9c:	eb004a63 	bl	24530 <CString::Compare(char const*) const>
   11ba0:	e3500000 	cmp	r0, #0
   11ba4:	1a000005 	bne	11bc0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x340>
   11ba8:	e3a0002c 	mov	r0, #44	; 0x2c
   11bac:	eb00571c 	bl	27824 <operator new(unsigned int)>
   11bb0:	e1a01005 	mov	r1, r5
   11bb4:	e1a05000 	mov	r5, r0
   11bb8:	eb001c5f 	bl	18d3c <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
   11bbc:	eaffff3f 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11bc0:	e1a00004 	mov	r0, r4
   11bc4:	e59f11f4 	ldr	r1, [pc, #500]	; 11dc0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x540>
   11bc8:	eb004a58 	bl	24530 <CString::Compare(char const*) const>
   11bcc:	e3500000 	cmp	r0, #0
   11bd0:	0a000004 	beq	11be8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x368>
   11bd4:	e1a00004 	mov	r0, r4
   11bd8:	e59f11e4 	ldr	r1, [pc, #484]	; 11dc4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x544>
   11bdc:	eb004a53 	bl	24530 <CString::Compare(char const*) const>
   11be0:	e3500000 	cmp	r0, #0
   11be4:	1a000005 	bne	11c00 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x380>
   11be8:	e3a00030 	mov	r0, #48	; 0x30
   11bec:	eb00570c 	bl	27824 <operator new(unsigned int)>
   11bf0:	e1a01005 	mov	r1, r5
   11bf4:	e1a05000 	mov	r5, r0
   11bf8:	eb00222d 	bl	1a4b4 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
   11bfc:	eaffff2f 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11c00:	e1a00004 	mov	r0, r4
   11c04:	e59f11bc 	ldr	r1, [pc, #444]	; 11dc8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x548>
   11c08:	eb004a48 	bl	24530 <CString::Compare(char const*) const>
   11c0c:	e3500000 	cmp	r0, #0
   11c10:	0a000004 	beq	11c28 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3a8>
   11c14:	e1a00004 	mov	r0, r4
   11c18:	e59f11ac 	ldr	r1, [pc, #428]	; 11dcc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x54c>
   11c1c:	eb004a43 	bl	24530 <CString::Compare(char const*) const>
   11c20:	e3500000 	cmp	r0, #0
   11c24:	1a000005 	bne	11c40 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3c0>
   11c28:	e3a00034 	mov	r0, #52	; 0x34
   11c2c:	eb0056fc 	bl	27824 <operator new(unsigned int)>
   11c30:	e1a01005 	mov	r1, r5
   11c34:	e1a05000 	mov	r5, r0
   11c38:	ebffdfbf 	bl	9b3c <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
   11c3c:	eaffff1f 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11c40:	e1a00004 	mov	r0, r4
   11c44:	e59f1184 	ldr	r1, [pc, #388]	; 11dd0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x550>
   11c48:	eb004a38 	bl	24530 <CString::Compare(char const*) const>
   11c4c:	e3500000 	cmp	r0, #0
   11c50:	1a000005 	bne	11c6c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3ec>
   11c54:	e3a0002c 	mov	r0, #44	; 0x2c
   11c58:	eb0056f1 	bl	27824 <operator new(unsigned int)>
   11c5c:	e1a01005 	mov	r1, r5
   11c60:	e1a05000 	mov	r5, r0
   11c64:	eb0023ec 	bl	1ac1c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
   11c68:	eaffff14 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11c6c:	e1a00004 	mov	r0, r4
   11c70:	e59f115c 	ldr	r1, [pc, #348]	; 11dd4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x554>
   11c74:	eb004a2d 	bl	24530 <CString::Compare(char const*) const>
   11c78:	e3500000 	cmp	r0, #0
   11c7c:	1a000005 	bne	11c98 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
   11c80:	e3a00048 	mov	r0, #72	; 0x48
   11c84:	eb0056e6 	bl	27824 <operator new(unsigned int)>
   11c88:	e1a01005 	mov	r1, r5
   11c8c:	e1a05000 	mov	r5, r0
   11c90:	eb001afd 	bl	1888c <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)>
   11c94:	eaffff09 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11c98:	eb0014c0 	bl	16fa0 <CUSBSerialCH341Device::GetDeviceIDTable()>
   11c9c:	e1a01000 	mov	r1, r0
   11ca0:	e1a00004 	mov	r0, r4
   11ca4:	ebfffed0 	bl	117ec <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
   11ca8:	e3500000 	cmp	r0, #0
   11cac:	0a000005 	beq	11cc8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x448>
   11cb0:	e3a00044 	mov	r0, #68	; 0x44
   11cb4:	eb0056da 	bl	27824 <operator new(unsigned int)>
   11cb8:	e1a01005 	mov	r1, r5
   11cbc:	e1a05000 	mov	r5, r0
   11cc0:	eb0014ad 	bl	16f7c <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)>
   11cc4:	eafffefd 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11cc8:	eb001606 	bl	174e8 <CUSBSerialCP2102Device::GetDeviceIDTable()>
   11ccc:	e1a01000 	mov	r1, r0
   11cd0:	e1a00004 	mov	r0, r4
   11cd4:	ebfffec4 	bl	117ec <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
   11cd8:	e3500000 	cmp	r0, #0
   11cdc:	0a000005 	beq	11cf8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x478>
   11ce0:	e3a00044 	mov	r0, #68	; 0x44
   11ce4:	eb0056ce 	bl	27824 <operator new(unsigned int)>
   11ce8:	e1a01005 	mov	r1, r5
   11cec:	e1a05000 	mov	r5, r0
   11cf0:	eb0015f3 	bl	174c4 <CUSBSerialCP2102Device::CUSBSerialCP2102Device(CUSBFunction*)>
   11cf4:	eafffef1 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11cf8:	eb00175a 	bl	17a68 <CUSBSerialPL2303Device::GetDeviceIDTable()>
   11cfc:	e1a01000 	mov	r1, r0
   11d00:	e1a00004 	mov	r0, r4
   11d04:	ebfffeb8 	bl	117ec <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
   11d08:	e3500000 	cmp	r0, #0
   11d0c:	0a000005 	beq	11d28 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4a8>
   11d10:	e3a00044 	mov	r0, #68	; 0x44
   11d14:	eb0056c2 	bl	27824 <operator new(unsigned int)>
   11d18:	e1a01005 	mov	r1, r5
   11d1c:	e1a05000 	mov	r5, r0
   11d20:	eb001747 	bl	17a44 <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)>
   11d24:	eafffee5 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11d28:	eb0019b6 	bl	18408 <CUSBSerialFT231XDevice::GetDeviceIDTable()>
   11d2c:	e1a01000 	mov	r1, r0
   11d30:	e1a00004 	mov	r0, r4
   11d34:	ebfffeac 	bl	117ec <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
   11d38:	e3500000 	cmp	r0, #0
   11d3c:	01a05000 	moveq	r5, r0
   11d40:	0afffee8 	beq	118e8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   11d44:	e3a00044 	mov	r0, #68	; 0x44
   11d48:	eb0056b5 	bl	27824 <operator new(unsigned int)>
   11d4c:	e1a01005 	mov	r1, r5
   11d50:	e1a05000 	mov	r5, r0
   11d54:	eb0019a2 	bl	183e4 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)>
   11d58:	eafffed8 	b	118c0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
   11d5c:	0002ded4 	.word	0x0002ded4
   11d60:	0002e00c 	.word	0x0002e00c
   11d64:	0002dee0 	.word	0x0002dee0
   11d68:	0002deec 	.word	0x0002deec
   11d6c:	0002deac 	.word	0x0002deac
   11d70:	0002dec4 	.word	0x0002dec4
   11d74:	0002db74 	.word	0x0002db74
   11d78:	0002def8 	.word	0x0002def8
   11d7c:	0002df04 	.word	0x0002df04
   11d80:	00000454 	.word	0x00000454
   11d84:	0002df10 	.word	0x0002df10
   11d88:	0002df1c 	.word	0x0002df1c
   11d8c:	0002df28 	.word	0x0002df28
   11d90:	0002df34 	.word	0x0002df34
   11d94:	0002df40 	.word	0x0002df40
   11d98:	0002df4c 	.word	0x0002df4c
   11d9c:	0002df58 	.word	0x0002df58
   11da0:	0002df64 	.word	0x0002df64
   11da4:	0002df70 	.word	0x0002df70
   11da8:	0002df7c 	.word	0x0002df7c
   11dac:	0002df88 	.word	0x0002df88
   11db0:	0002df94 	.word	0x0002df94
   11db4:	0002dfa0 	.word	0x0002dfa0
   11db8:	0002dfac 	.word	0x0002dfac
   11dbc:	0002dfb8 	.word	0x0002dfb8
   11dc0:	0002dfc4 	.word	0x0002dfc4
   11dc4:	0002dfd0 	.word	0x0002dfd0
   11dc8:	0002dfdc 	.word	0x0002dfdc
   11dcc:	0002dfe8 	.word	0x0002dfe8
   11dd0:	0002dff4 	.word	0x0002dff4
   11dd4:	0002e000 	.word	0x0002e000

00011dd8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
   11dd8:	e3a02000 	mov	r2, #0
   11ddc:	e92d4010 	push	{r4, lr}
   11de0:	e3a0c001 	mov	ip, #1
   11de4:	e3a0e008 	mov	lr, #8
   11de8:	e1510002 	cmp	r1, r2
   11dec:	e5801000 	str	r1, [r0]
   11df0:	e580e008 	str	lr, [r0, #8]
   11df4:	e580c00c 	str	ip, [r0, #12]
   11df8:	e1c020b4 	strh	r2, [r0, #4]
   11dfc:	e5c02006 	strb	r2, [r0, #6]
   11e00:	e5c02010 	strb	r2, [r0, #16]
   11e04:	18bd8010 	popne	{r4, pc}
   11e08:	e3a02023 	mov	r2, #35	; 0x23
   11e0c:	e59f1004 	ldr	r1, [pc, #4]	; 11e18 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x40>
   11e10:	e59f0004 	ldr	r0, [pc, #4]	; 11e1c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x44>
   11e14:	eb002e39 	bl	1d700 <assertion_failed>
   11e18:	0002e028 	.word	0x0002e028
   11e1c:	0002d9d0 	.word	0x0002d9d0

00011e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
   11e20:	e92d4070 	push	{r4, r5, r6, lr}
   11e24:	e3a05001 	mov	r5, #1
   11e28:	e3510000 	cmp	r1, #0
   11e2c:	e5801000 	str	r1, [r0]
   11e30:	e580500c 	str	r5, [r0, #12]
   11e34:	e5c05010 	strb	r5, [r0, #16]
   11e38:	0a00003c 	beq	11f30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x110>
   11e3c:	e3520000 	cmp	r2, #0
   11e40:	0a00003e 	beq	11f40 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x120>
   11e44:	e5d23000 	ldrb	r3, [r2]
   11e48:	e3530006 	cmp	r3, #6
   11e4c:	9a00003f 	bls	11f50 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x130>
   11e50:	e5d23001 	ldrb	r3, [r2, #1]
   11e54:	e3530005 	cmp	r3, #5
   11e58:	1a000040 	bne	11f60 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x140>
   11e5c:	e5d23003 	ldrb	r3, [r2, #3]
   11e60:	e1a04000 	mov	r4, r0
   11e64:	e2033003 	and	r3, r3, #3
   11e68:	e3530002 	cmp	r3, #2
   11e6c:	0a00001f 	beq	11ef0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd0>
   11e70:	e3530003 	cmp	r3, #3
   11e74:	1a00003d 	bne	11f70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x150>
   11e78:	e3a00002 	mov	r0, #2
   11e7c:	e5d23002 	ldrb	r3, [r2, #2]
   11e80:	e5c40005 	strb	r0, [r4, #5]
   11e84:	e203000f 	and	r0, r3, #15
   11e88:	e1a033a3 	lsr	r3, r3, #7
   11e8c:	e5c40004 	strb	r0, [r4, #4]
   11e90:	e5c43006 	strb	r3, [r4, #6]
   11e94:	e5d20005 	ldrb	r0, [r2, #5]
   11e98:	e5d23004 	ldrb	r3, [r2, #4]
   11e9c:	e5d22006 	ldrb	r2, [r2, #6]
   11ea0:	e1833400 	orr	r3, r3, r0, lsl #8
   11ea4:	e1a03a83 	lsl	r3, r3, #21
   11ea8:	e1a03aa3 	lsr	r3, r3, #21
   11eac:	e3520001 	cmp	r2, #1
   11eb0:	e1a00001 	mov	r0, r1
   11eb4:	e5843008 	str	r3, [r4, #8]
   11eb8:	21a06002 	movcs	r6, r2
   11ebc:	33a06001 	movcc	r6, #1
   11ec0:	ebfffb57 	bl	10c24 <CUSBDevice::GetSpeed() const>
   11ec4:	e3500001 	cmp	r0, #1
   11ec8:	9a000016 	bls	11f28 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x108>
   11ecc:	e3560010 	cmp	r6, #16
   11ed0:	31a02006 	movcc	r2, r6
   11ed4:	23a02010 	movcs	r2, #16
   11ed8:	e2422001 	sub	r2, r2, #1
   11edc:	e1a02215 	lsl	r2, r5, r2
   11ee0:	e1b021a2 	lsrs	r2, r2, #3
   11ee4:	11a05002 	movne	r5, r2
   11ee8:	e584500c 	str	r5, [r4, #12]
   11eec:	ea00000b 	b	11f20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x100>
   11ef0:	e5d23002 	ldrb	r3, [r2, #2]
   11ef4:	e5c05005 	strb	r5, [r0, #5]
   11ef8:	e203100f 	and	r1, r3, #15
   11efc:	e1a033a3 	lsr	r3, r3, #7
   11f00:	e5c01004 	strb	r1, [r0, #4]
   11f04:	e5c03006 	strb	r3, [r0, #6]
   11f08:	e5d23004 	ldrb	r3, [r2, #4]
   11f0c:	e5d22005 	ldrb	r2, [r2, #5]
   11f10:	e1833402 	orr	r3, r3, r2, lsl #8
   11f14:	e1a03a83 	lsl	r3, r3, #21
   11f18:	e1a03aa3 	lsr	r3, r3, #21
   11f1c:	e5803008 	str	r3, [r0, #8]
   11f20:	e1a00004 	mov	r0, r4
   11f24:	e8bd8070 	pop	{r4, r5, r6, pc}
   11f28:	e584600c 	str	r6, [r4, #12]
   11f2c:	eafffffb 	b	11f20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x100>
   11f30:	e3a02032 	mov	r2, #50	; 0x32
   11f34:	e59f1044 	ldr	r1, [pc, #68]	; 11f80 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x160>
   11f38:	e59f0044 	ldr	r0, [pc, #68]	; 11f84 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x164>
   11f3c:	eb002def 	bl	1d700 <assertion_failed>
   11f40:	e3a02034 	mov	r2, #52	; 0x34
   11f44:	e59f1034 	ldr	r1, [pc, #52]	; 11f80 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x160>
   11f48:	e59f0038 	ldr	r0, [pc, #56]	; 11f88 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x168>
   11f4c:	eb002deb 	bl	1d700 <assertion_failed>
   11f50:	e3a02035 	mov	r2, #53	; 0x35
   11f54:	e59f1024 	ldr	r1, [pc, #36]	; 11f80 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x160>
   11f58:	e59f002c 	ldr	r0, [pc, #44]	; 11f8c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x16c>
   11f5c:	eb002de7 	bl	1d700 <assertion_failed>
   11f60:	e3a02036 	mov	r2, #54	; 0x36
   11f64:	e59f1014 	ldr	r1, [pc, #20]	; 11f80 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x160>
   11f68:	e59f0020 	ldr	r0, [pc, #32]	; 11f90 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x170>
   11f6c:	eb002de3 	bl	1d700 <assertion_failed>
   11f70:	e3a02043 	mov	r2, #67	; 0x43
   11f74:	e59f1004 	ldr	r1, [pc, #4]	; 11f80 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x160>
   11f78:	e59f0014 	ldr	r0, [pc, #20]	; 11f94 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x174>
   11f7c:	eb002ddf 	bl	1d700 <assertion_failed>
   11f80:	0002e028 	.word	0x0002e028
   11f84:	0002d9d0 	.word	0x0002d9d0
   11f88:	0002e038 	.word	0x0002e038
   11f8c:	0002e044 	.word	0x0002e044
   11f90:	0002e064 	.word	0x0002e064
   11f94:	0002dbb4 	.word	0x0002dbb4

00011f98 <CUSBEndpoint::~CUSBEndpoint()>:
   11f98:	e12fff1e 	bx	lr

00011f9c <CUSBEndpoint::GetDevice() const>:
   11f9c:	e5900000 	ldr	r0, [r0]
   11fa0:	e3500000 	cmp	r0, #0
   11fa4:	112fff1e 	bxne	lr
   11fa8:	e3a02086 	mov	r2, #134	; 0x86
   11fac:	e92d4010 	push	{r4, lr}
   11fb0:	e59f1004 	ldr	r1, [pc, #4]	; 11fbc <CUSBEndpoint::GetDevice() const+0x20>
   11fb4:	e59f0004 	ldr	r0, [pc, #4]	; 11fc0 <CUSBEndpoint::GetDevice() const+0x24>
   11fb8:	eb002dd0 	bl	1d700 <assertion_failed>
   11fbc:	0002e028 	.word	0x0002e028
   11fc0:	0002d9d0 	.word	0x0002d9d0

00011fc4 <CUSBEndpoint::GetNumber() const>:
   11fc4:	e5d00004 	ldrb	r0, [r0, #4]
   11fc8:	e12fff1e 	bx	lr

00011fcc <CUSBEndpoint::GetType() const>:
   11fcc:	e5d00005 	ldrb	r0, [r0, #5]
   11fd0:	e12fff1e 	bx	lr

00011fd4 <CUSBEndpoint::IsDirectionIn() const>:
   11fd4:	e5d00006 	ldrb	r0, [r0, #6]
   11fd8:	e12fff1e 	bx	lr

00011fdc <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
   11fdc:	e1a03000 	mov	r3, r0
   11fe0:	e3a00001 	mov	r0, #1
   11fe4:	e5831008 	str	r1, [r3, #8]
   11fe8:	e12fff1e 	bx	lr

00011fec <CUSBEndpoint::GetMaxPacketSize() const>:
   11fec:	e5900008 	ldr	r0, [r0, #8]
   11ff0:	e12fff1e 	bx	lr

00011ff4 <CUSBEndpoint::GetInterval() const>:
   11ff4:	e5d03005 	ldrb	r3, [r0, #5]
   11ff8:	e3530002 	cmp	r3, #2
   11ffc:	1a000001 	bne	12008 <CUSBEndpoint::GetInterval() const+0x14>
   12000:	e590000c 	ldr	r0, [r0, #12]
   12004:	e12fff1e 	bx	lr
   12008:	e3a020ae 	mov	r2, #174	; 0xae
   1200c:	e92d4010 	push	{r4, lr}
   12010:	e59f1004 	ldr	r1, [pc, #4]	; 1201c <CUSBEndpoint::GetInterval() const+0x28>
   12014:	e59f0004 	ldr	r0, [pc, #4]	; 12020 <CUSBEndpoint::GetInterval() const+0x2c>
   12018:	eb002db8 	bl	1d700 <assertion_failed>
   1201c:	0002e028 	.word	0x0002e028
   12020:	0002e094 	.word	0x0002e094

00012024 <CUSBEndpoint::GetNextPID(bool)>:
   12024:	e3510000 	cmp	r1, #0
   12028:	0a000004 	beq	12040 <CUSBEndpoint::GetNextPID(bool)+0x1c>
   1202c:	e5d03005 	ldrb	r3, [r0, #5]
   12030:	e3530000 	cmp	r3, #0
   12034:	1a000003 	bne	12048 <CUSBEndpoint::GetNextPID(bool)+0x24>
   12038:	e3a00002 	mov	r0, #2
   1203c:	e12fff1e 	bx	lr
   12040:	e5d00010 	ldrb	r0, [r0, #16]
   12044:	e12fff1e 	bx	lr
   12048:	e3a020b7 	mov	r2, #183	; 0xb7
   1204c:	e92d4010 	push	{r4, lr}
   12050:	e59f1004 	ldr	r1, [pc, #4]	; 1205c <CUSBEndpoint::GetNextPID(bool)+0x38>
   12054:	e59f0004 	ldr	r0, [pc, #4]	; 12060 <CUSBEndpoint::GetNextPID(bool)+0x3c>
   12058:	eb002da8 	bl	1d700 <assertion_failed>
   1205c:	0002e028 	.word	0x0002e028
   12060:	0002e0b4 	.word	0x0002e0b4

00012064 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
   12064:	e5d03005 	ldrb	r3, [r0, #5]
   12068:	e92d4010 	push	{r4, lr}
   1206c:	e3530002 	cmp	r3, #2
   12070:	8a000019 	bhi	120dc <CUSBEndpoint::SkipPID(unsigned int, bool)+0x78>
   12074:	e3520000 	cmp	r2, #0
   12078:	1a000008 	bne	120a0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x3c>
   1207c:	e5d03010 	ldrb	r3, [r0, #16]
   12080:	e3530001 	cmp	r3, #1
   12084:	0a00000f 	beq	120c8 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x64>
   12088:	e3530002 	cmp	r3, #2
   1208c:	1a000007 	bne	120b0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x4c>
   12090:	e3110001 	tst	r1, #1
   12094:	13a03001 	movne	r3, #1
   12098:	15c03010 	strbne	r3, [r0, #16]
   1209c:	e8bd8010 	pop	{r4, pc}
   120a0:	e3530000 	cmp	r3, #0
   120a4:	1a000010 	bne	120ec <CUSBEndpoint::SkipPID(unsigned int, bool)+0x88>
   120a8:	e5c03010 	strb	r3, [r0, #16]
   120ac:	e8bd8010 	pop	{r4, pc}
   120b0:	e3530000 	cmp	r3, #0
   120b4:	0a000005 	beq	120d0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x6c>
   120b8:	e3a020dc 	mov	r2, #220	; 0xdc
   120bc:	e59f1038 	ldr	r1, [pc, #56]	; 120fc <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
   120c0:	e59f0038 	ldr	r0, [pc, #56]	; 12100 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x9c>
   120c4:	eb002d8d 	bl	1d700 <assertion_failed>
   120c8:	e3110001 	tst	r1, #1
   120cc:	08bd8010 	popeq	{r4, pc}
   120d0:	e3a03002 	mov	r3, #2
   120d4:	e5c03010 	strb	r3, [r0, #16]
   120d8:	e8bd8010 	pop	{r4, pc}
   120dc:	e3a020c1 	mov	r2, #193	; 0xc1
   120e0:	e59f1014 	ldr	r1, [pc, #20]	; 120fc <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
   120e4:	e59f0018 	ldr	r0, [pc, #24]	; 12104 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa0>
   120e8:	eb002d84 	bl	1d700 <assertion_failed>
   120ec:	e3a020e2 	mov	r2, #226	; 0xe2
   120f0:	e59f1004 	ldr	r1, [pc, #4]	; 120fc <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
   120f4:	e59f000c 	ldr	r0, [pc, #12]	; 12108 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa4>
   120f8:	eb002d80 	bl	1d700 <assertion_failed>
   120fc:	0002e028 	.word	0x0002e028
   12100:	0002dbb4 	.word	0x0002dbb4
   12104:	0002e0d4 	.word	0x0002e0d4
   12108:	0002e0b4 	.word	0x0002e0b4

0001210c <CUSBEndpoint::ResetPID()>:
   1210c:	e5d03005 	ldrb	r3, [r0, #5]
   12110:	e3530001 	cmp	r3, #1
   12114:	1a000001 	bne	12120 <CUSBEndpoint::ResetPID()+0x14>
   12118:	e5c03010 	strb	r3, [r0, #16]
   1211c:	e12fff1e 	bx	lr
   12120:	e3a020ed 	mov	r2, #237	; 0xed
   12124:	e92d4010 	push	{r4, lr}
   12128:	e59f1004 	ldr	r1, [pc, #4]	; 12134 <CUSBEndpoint::ResetPID()+0x28>
   1212c:	e59f0004 	ldr	r0, [pc, #4]	; 12138 <CUSBEndpoint::ResetPID()+0x2c>
   12130:	eb002d72 	bl	1d700 <assertion_failed>
   12134:	0002e028 	.word	0x0002e028
   12138:	0002e134 	.word	0x0002e134

0001213c <CUSBFunction::Initialize()>:
   1213c:	e3a00001 	mov	r0, #1
   12140:	e12fff1e 	bx	lr

00012144 <CUSBFunction::ReScanDevices()>:
   12144:	e3a00000 	mov	r0, #0
   12148:	e12fff1e 	bx	lr

0001214c <CUSBFunction::~CUSBFunction()>:
   1214c:	e3a03000 	mov	r3, #0
   12150:	e92d4070 	push	{r4, r5, r6, lr}
   12154:	e5905010 	ldr	r5, [r0, #16]
   12158:	e59f2040 	ldr	r2, [pc, #64]	; 121a0 <CUSBFunction::~CUSBFunction()+0x54>
   1215c:	e1550003 	cmp	r5, r3
   12160:	e1a04000 	mov	r4, r0
   12164:	e5802000 	str	r2, [r0]
   12168:	e5803014 	str	r3, [r0, #20]
   1216c:	0a000004 	beq	12184 <CUSBFunction::~CUSBFunction()+0x38>
   12170:	e1a00005 	mov	r0, r5
   12174:	eb0023f9 	bl	1b160 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   12178:	e1a00005 	mov	r0, r5
   1217c:	e3a0101c 	mov	r1, #28
   12180:	eb0055b5 	bl	2785c <operator delete(void*, unsigned int)>
   12184:	e3a03000 	mov	r3, #0
   12188:	e1a00004 	mov	r0, r4
   1218c:	e5843010 	str	r3, [r4, #16]
   12190:	e584300c 	str	r3, [r4, #12]
   12194:	eb002f32 	bl	1de64 <CDevice::~CDevice()>
   12198:	e1a00004 	mov	r0, r4
   1219c:	e8bd8070 	pop	{r4, r5, r6, pc}
   121a0:	0002e1e0 	.word	0x0002e1e0

000121a4 <CUSBFunction::~CUSBFunction()>:
   121a4:	e92d4010 	push	{r4, lr}
   121a8:	e1a04000 	mov	r4, r0
   121ac:	ebffffe6 	bl	1214c <CUSBFunction::~CUSBFunction()>
   121b0:	e1a00004 	mov	r0, r4
   121b4:	e3a01018 	mov	r1, #24
   121b8:	eb0055a7 	bl	2785c <operator delete(void*, unsigned int)>
   121bc:	e1a00004 	mov	r0, r4
   121c0:	e8bd8010 	pop	{r4, pc}

000121c4 <CUSBFunction::RemoveDevice()>:
   121c4:	e590000c 	ldr	r0, [r0, #12]
   121c8:	e3500000 	cmp	r0, #0
   121cc:	0a000000 	beq	121d4 <CUSBFunction::RemoveDevice()+0x10>
   121d0:	eafff9f0 	b	10998 <CUSBDevice::RemoveDevice()>
   121d4:	e3a02066 	mov	r2, #102	; 0x66
   121d8:	e92d4010 	push	{r4, lr}
   121dc:	e59f1004 	ldr	r1, [pc, #4]	; 121e8 <CUSBFunction::RemoveDevice()+0x24>
   121e0:	e59f0004 	ldr	r0, [pc, #4]	; 121ec <CUSBFunction::RemoveDevice()+0x28>
   121e4:	eb002d45 	bl	1d700 <assertion_failed>
   121e8:	0002e150 	.word	0x0002e150
   121ec:	0002d9d0 	.word	0x0002d9d0

000121f0 <CUSBFunction::Configure()>:
   121f0:	e92d4070 	push	{r4, r5, r6, lr}
   121f4:	e5903014 	ldr	r3, [r0, #20]
   121f8:	e24dd010 	sub	sp, sp, #16
   121fc:	e3530000 	cmp	r3, #0
   12200:	0a000026 	beq	122a0 <CUSBFunction::Configure()+0xb0>
   12204:	e5d33003 	ldrb	r3, [r3, #3]
   12208:	e3530000 	cmp	r3, #0
   1220c:	0a000019 	beq	12278 <CUSBFunction::Configure()+0x88>
   12210:	e1a04000 	mov	r4, r0
   12214:	e590000c 	ldr	r0, [r0, #12]
   12218:	e3500000 	cmp	r0, #0
   1221c:	0a000023 	beq	122b0 <CUSBFunction::Configure()+0xc0>
   12220:	ebfffa93 	bl	10c74 <CUSBDevice::GetHost() const>
   12224:	e594300c 	ldr	r3, [r4, #12]
   12228:	e1a06000 	mov	r6, r0
   1222c:	e3530000 	cmp	r3, #0
   12230:	0a000022 	beq	122c0 <CUSBFunction::Configure()+0xd0>
   12234:	e3a05000 	mov	r5, #0
   12238:	e1a00003 	mov	r0, r3
   1223c:	ebfffa82 	bl	10c4c <CUSBDevice::GetEndpoint0() const>
   12240:	e5943014 	ldr	r3, [r4, #20]
   12244:	e58d500c 	str	r5, [sp, #12]
   12248:	e58d5008 	str	r5, [sp, #8]
   1224c:	e5d32002 	ldrb	r2, [r3, #2]
   12250:	e1a01000 	mov	r1, r0
   12254:	e58d2004 	str	r2, [sp, #4]
   12258:	e5d33003 	ldrb	r3, [r3, #3]
   1225c:	e1a00006 	mov	r0, r6
   12260:	e58d3000 	str	r3, [sp]
   12264:	e3a02001 	mov	r2, #1
   12268:	e3a0300b 	mov	r3, #11
   1226c:	ebffdb67 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12270:	e1500005 	cmp	r0, r5
   12274:	ba000002 	blt	12284 <CUSBFunction::Configure()+0x94>
   12278:	e3a00001 	mov	r0, #1
   1227c:	e28dd010 	add	sp, sp, #16
   12280:	e8bd8070 	pop	{r4, r5, r6, pc}
   12284:	eb00361d 	bl	1fb00 <CLogger::Get()>
   12288:	e3a02001 	mov	r2, #1
   1228c:	e59f303c 	ldr	r3, [pc, #60]	; 122d0 <CUSBFunction::Configure()+0xe0>
   12290:	e59f103c 	ldr	r1, [pc, #60]	; 122d4 <CUSBFunction::Configure()+0xe4>
   12294:	eb00355b 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12298:	e1a00005 	mov	r0, r5
   1229c:	eafffff6 	b	1227c <CUSBFunction::Configure()+0x8c>
   122a0:	e3a0204e 	mov	r2, #78	; 0x4e
   122a4:	e59f102c 	ldr	r1, [pc, #44]	; 122d8 <CUSBFunction::Configure()+0xe8>
   122a8:	e59f002c 	ldr	r0, [pc, #44]	; 122dc <CUSBFunction::Configure()+0xec>
   122ac:	eb002d13 	bl	1d700 <assertion_failed>
   122b0:	e3a02090 	mov	r2, #144	; 0x90
   122b4:	e59f101c 	ldr	r1, [pc, #28]	; 122d8 <CUSBFunction::Configure()+0xe8>
   122b8:	e59f0020 	ldr	r0, [pc, #32]	; 122e0 <CUSBFunction::Configure()+0xf0>
   122bc:	eb002d0f 	bl	1d700 <assertion_failed>
   122c0:	e3a0208a 	mov	r2, #138	; 0x8a
   122c4:	e59f100c 	ldr	r1, [pc, #12]	; 122d8 <CUSBFunction::Configure()+0xe8>
   122c8:	e59f0010 	ldr	r0, [pc, #16]	; 122e0 <CUSBFunction::Configure()+0xf0>
   122cc:	eb002d0b 	bl	1d700 <assertion_failed>
   122d0:	0002c93c 	.word	0x0002c93c
   122d4:	0002e204 	.word	0x0002e204
   122d8:	0002e150 	.word	0x0002e150
   122dc:	0002e160 	.word	0x0002e160
   122e0:	0002d9d0 	.word	0x0002d9d0

000122e4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
   122e4:	e92d4070 	push	{r4, r5, r6, lr}
   122e8:	e1a04000 	mov	r4, r0
   122ec:	e1a05001 	mov	r5, r1
   122f0:	e1a06002 	mov	r6, r2
   122f4:	eb002efc 	bl	1deec <CDevice::CDevice()>
   122f8:	e3a03000 	mov	r3, #0
   122fc:	e59f2080 	ldr	r2, [pc, #128]	; 12384 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
   12300:	e1550003 	cmp	r5, r3
   12304:	e584500c 	str	r5, [r4, #12]
   12308:	e5842000 	str	r2, [r4]
   1230c:	e5843010 	str	r3, [r4, #16]
   12310:	e5843014 	str	r3, [r4, #20]
   12314:	0a00000e 	beq	12354 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x70>
   12318:	e3560000 	cmp	r6, #0
   1231c:	0a000010 	beq	12364 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x80>
   12320:	e3a0001c 	mov	r0, #28
   12324:	eb00553e 	bl	27824 <operator new(unsigned int)>
   12328:	e1a05000 	mov	r5, r0
   1232c:	e1a01006 	mov	r1, r6
   12330:	eb002372 	bl	1b100 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   12334:	e1a00005 	mov	r0, r5
   12338:	e5845010 	str	r5, [r4, #16]
   1233c:	eb0023b3 	bl	1b210 <CUSBConfigurationParser::GetCurrentDescriptor()>
   12340:	e3500000 	cmp	r0, #0
   12344:	e5840014 	str	r0, [r4, #20]
   12348:	0a000009 	beq	12374 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x90>
   1234c:	e1a00004 	mov	r0, r4
   12350:	e8bd8070 	pop	{r4, r5, r6, pc}
   12354:	e3a02022 	mov	r2, #34	; 0x22
   12358:	e59f1028 	ldr	r1, [pc, #40]	; 12388 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa4>
   1235c:	e59f0028 	ldr	r0, [pc, #40]	; 1238c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa8>
   12360:	eb002ce6 	bl	1d700 <assertion_failed>
   12364:	e3a02024 	mov	r2, #36	; 0x24
   12368:	e59f1018 	ldr	r1, [pc, #24]	; 12388 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa4>
   1236c:	e59f001c 	ldr	r0, [pc, #28]	; 12390 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
   12370:	eb002ce2 	bl	1d700 <assertion_failed>
   12374:	e3a02029 	mov	r2, #41	; 0x29
   12378:	e59f1008 	ldr	r1, [pc, #8]	; 12388 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa4>
   1237c:	e59f0010 	ldr	r0, [pc, #16]	; 12394 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb0>
   12380:	eb002cde 	bl	1d700 <assertion_failed>
   12384:	0002e1e0 	.word	0x0002e1e0
   12388:	0002e150 	.word	0x0002e150
   1238c:	0002d9d0 	.word	0x0002d9d0
   12390:	0002e178 	.word	0x0002e178
   12394:	0002e160 	.word	0x0002e160

00012398 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
   12398:	e92d4070 	push	{r4, r5, r6, lr}
   1239c:	e1a04000 	mov	r4, r0
   123a0:	e1a05001 	mov	r5, r1
   123a4:	eb002ed0 	bl	1deec <CDevice::CDevice()>
   123a8:	e3a03000 	mov	r3, #0
   123ac:	e59f20a4 	ldr	r2, [pc, #164]	; 12458 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
   123b0:	e1550003 	cmp	r5, r3
   123b4:	e5842000 	str	r2, [r4]
   123b8:	e584300c 	str	r3, [r4, #12]
   123bc:	e5843010 	str	r3, [r4, #16]
   123c0:	e5843014 	str	r3, [r4, #20]
   123c4:	0a000013 	beq	12418 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x80>
   123c8:	e595300c 	ldr	r3, [r5, #12]
   123cc:	e3530000 	cmp	r3, #0
   123d0:	e584300c 	str	r3, [r4, #12]
   123d4:	0a000013 	beq	12428 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x90>
   123d8:	e5953010 	ldr	r3, [r5, #16]
   123dc:	e3530000 	cmp	r3, #0
   123e0:	0a000014 	beq	12438 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xa0>
   123e4:	e3a0001c 	mov	r0, #28
   123e8:	eb00550d 	bl	27824 <operator new(unsigned int)>
   123ec:	e1a06000 	mov	r6, r0
   123f0:	e5951010 	ldr	r1, [r5, #16]
   123f4:	eb002341 	bl	1b100 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   123f8:	e1a00006 	mov	r0, r6
   123fc:	e5846010 	str	r6, [r4, #16]
   12400:	eb002382 	bl	1b210 <CUSBConfigurationParser::GetCurrentDescriptor()>
   12404:	e3500000 	cmp	r0, #0
   12408:	e5840014 	str	r0, [r4, #20]
   1240c:	0a00000d 	beq	12448 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xb0>
   12410:	e1a00004 	mov	r0, r4
   12414:	e8bd8070 	pop	{r4, r5, r6, pc}
   12418:	e3a02031 	mov	r2, #49	; 0x31
   1241c:	e59f1038 	ldr	r1, [pc, #56]	; 1245c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
   12420:	e59f0038 	ldr	r0, [pc, #56]	; 12460 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc8>
   12424:	eb002cb5 	bl	1d700 <assertion_failed>
   12428:	e3a02033 	mov	r2, #51	; 0x33
   1242c:	e59f1028 	ldr	r1, [pc, #40]	; 1245c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
   12430:	e59f002c 	ldr	r0, [pc, #44]	; 12464 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xcc>
   12434:	eb002cb1 	bl	1d700 <assertion_failed>
   12438:	e3a02035 	mov	r2, #53	; 0x35
   1243c:	e59f1018 	ldr	r1, [pc, #24]	; 1245c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
   12440:	e59f0020 	ldr	r0, [pc, #32]	; 12468 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xd0>
   12444:	eb002cad 	bl	1d700 <assertion_failed>
   12448:	e3a0203a 	mov	r2, #58	; 0x3a
   1244c:	e59f1008 	ldr	r1, [pc, #8]	; 1245c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
   12450:	e59f0014 	ldr	r0, [pc, #20]	; 1246c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xd4>
   12454:	eb002ca9 	bl	1d700 <assertion_failed>
   12458:	0002e1e0 	.word	0x0002e1e0
   1245c:	0002e150 	.word	0x0002e150
   12460:	0002e18c 	.word	0x0002e18c
   12464:	0002d9d0 	.word	0x0002d9d0
   12468:	0002e19c 	.word	0x0002e19c
   1246c:	0002e160 	.word	0x0002e160

00012470 <CUSBFunction::GetInterfaceName() const>:
   12470:	e92d4030 	push	{r4, r5, lr}
   12474:	e1a05000 	mov	r5, r0
   12478:	e24dd00c 	sub	sp, sp, #12
   1247c:	e3a00010 	mov	r0, #16
   12480:	eb0054e7 	bl	27824 <operator new(unsigned int)>
   12484:	e59f1054 	ldr	r1, [pc, #84]	; 124e0 <CUSBFunction::GetInterfaceName() const+0x70>
   12488:	e1a04000 	mov	r4, r0
   1248c:	eb0047be 	bl	2438c <CString::CString(char const*)>
   12490:	e5951014 	ldr	r1, [r5, #20]
   12494:	e3510000 	cmp	r1, #0
   12498:	0a000004 	beq	124b0 <CUSBFunction::GetInterfaceName() const+0x40>
   1249c:	e5d12005 	ldrb	r2, [r1, #5]
   124a0:	e2423001 	sub	r3, r2, #1
   124a4:	e6ef3073 	uxtb	r3, r3
   124a8:	e35300fd 	cmp	r3, #253	; 0xfd
   124ac:	9a000002 	bls	124bc <CUSBFunction::GetInterfaceName() const+0x4c>
   124b0:	e1a00004 	mov	r0, r4
   124b4:	e28dd00c 	add	sp, sp, #12
   124b8:	e8bd8030 	pop	{r4, r5, pc}
   124bc:	e5d13006 	ldrb	r3, [r1, #6]
   124c0:	e5d11007 	ldrb	r1, [r1, #7]
   124c4:	e1a00004 	mov	r0, r4
   124c8:	e58d1000 	str	r1, [sp]
   124cc:	e59f1010 	ldr	r1, [pc, #16]	; 124e4 <CUSBFunction::GetInterfaceName() const+0x74>
   124d0:	eb004ced 	bl	2588c <CString::Format(char const*, ...)>
   124d4:	e1a00004 	mov	r0, r4
   124d8:	e28dd00c 	add	sp, sp, #12
   124dc:	e8bd8030 	pop	{r4, r5, pc}
   124e0:	0002db60 	.word	0x0002db60
   124e4:	0002e1bc 	.word	0x0002e1bc

000124e8 <CUSBFunction::GetNumEndpoints() const>:
   124e8:	e5903014 	ldr	r3, [r0, #20]
   124ec:	e3530000 	cmp	r3, #0
   124f0:	0a000001 	beq	124fc <CUSBFunction::GetNumEndpoints() const+0x14>
   124f4:	e5d30004 	ldrb	r0, [r3, #4]
   124f8:	e12fff1e 	bx	lr
   124fc:	e3a0207e 	mov	r2, #126	; 0x7e
   12500:	e92d4010 	push	{r4, lr}
   12504:	e59f1004 	ldr	r1, [pc, #4]	; 12510 <CUSBFunction::GetNumEndpoints() const+0x28>
   12508:	e59f0004 	ldr	r0, [pc, #4]	; 12514 <CUSBFunction::GetNumEndpoints() const+0x2c>
   1250c:	eb002c7b 	bl	1d700 <assertion_failed>
   12510:	0002e150 	.word	0x0002e150
   12514:	0002e160 	.word	0x0002e160

00012518 <CUSBFunction::GetDevice() const>:
   12518:	e590000c 	ldr	r0, [r0, #12]
   1251c:	e3500000 	cmp	r0, #0
   12520:	112fff1e 	bxne	lr
   12524:	e3a02084 	mov	r2, #132	; 0x84
   12528:	e92d4010 	push	{r4, lr}
   1252c:	e59f1004 	ldr	r1, [pc, #4]	; 12538 <CUSBFunction::GetDevice() const+0x20>
   12530:	e59f0004 	ldr	r0, [pc, #4]	; 1253c <CUSBFunction::GetDevice() const+0x24>
   12534:	eb002c71 	bl	1d700 <assertion_failed>
   12538:	0002e150 	.word	0x0002e150
   1253c:	0002d9d0 	.word	0x0002d9d0

00012540 <CUSBFunction::GetEndpoint0() const>:
   12540:	e590000c 	ldr	r0, [r0, #12]
   12544:	e3500000 	cmp	r0, #0
   12548:	0a000000 	beq	12550 <CUSBFunction::GetEndpoint0() const+0x10>
   1254c:	eafff9be 	b	10c4c <CUSBDevice::GetEndpoint0() const>
   12550:	e3a0208a 	mov	r2, #138	; 0x8a
   12554:	e92d4010 	push	{r4, lr}
   12558:	e59f1004 	ldr	r1, [pc, #4]	; 12564 <CUSBFunction::GetEndpoint0() const+0x24>
   1255c:	e59f0004 	ldr	r0, [pc, #4]	; 12568 <CUSBFunction::GetEndpoint0() const+0x28>
   12560:	eb002c66 	bl	1d700 <assertion_failed>
   12564:	0002e150 	.word	0x0002e150
   12568:	0002d9d0 	.word	0x0002d9d0

0001256c <CUSBFunction::GetHost() const>:
   1256c:	e590000c 	ldr	r0, [r0, #12]
   12570:	e3500000 	cmp	r0, #0
   12574:	0a000000 	beq	1257c <CUSBFunction::GetHost() const+0x10>
   12578:	eafff9bd 	b	10c74 <CUSBDevice::GetHost() const>
   1257c:	e3a02090 	mov	r2, #144	; 0x90
   12580:	e92d4010 	push	{r4, lr}
   12584:	e59f1004 	ldr	r1, [pc, #4]	; 12590 <CUSBFunction::GetHost() const+0x24>
   12588:	e59f0004 	ldr	r0, [pc, #4]	; 12594 <CUSBFunction::GetHost() const+0x28>
   1258c:	eb002c5b 	bl	1d700 <assertion_failed>
   12590:	0002e150 	.word	0x0002e150
   12594:	0002d9d0 	.word	0x0002d9d0

00012598 <CUSBFunction::GetDescriptor(unsigned char)>:
   12598:	e5900010 	ldr	r0, [r0, #16]
   1259c:	e3500000 	cmp	r0, #0
   125a0:	0a000000 	beq	125a8 <CUSBFunction::GetDescriptor(unsigned char)+0x10>
   125a4:	ea0022f0 	b	1b16c <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   125a8:	e3a02096 	mov	r2, #150	; 0x96
   125ac:	e92d4010 	push	{r4, lr}
   125b0:	e59f1004 	ldr	r1, [pc, #4]	; 125bc <CUSBFunction::GetDescriptor(unsigned char)+0x24>
   125b4:	e59f0004 	ldr	r0, [pc, #4]	; 125c0 <CUSBFunction::GetDescriptor(unsigned char)+0x28>
   125b8:	eb002c50 	bl	1d700 <assertion_failed>
   125bc:	0002e150 	.word	0x0002e150
   125c0:	0002dbcc 	.word	0x0002dbcc

000125c4 <CUSBFunction::ConfigurationError(char const*) const>:
   125c4:	e5900010 	ldr	r0, [r0, #16]
   125c8:	e92d4010 	push	{r4, lr}
   125cc:	e3500000 	cmp	r0, #0
   125d0:	0a000003 	beq	125e4 <CUSBFunction::ConfigurationError(char const*) const+0x20>
   125d4:	e3510000 	cmp	r1, #0
   125d8:	0a000005 	beq	125f4 <CUSBFunction::ConfigurationError(char const*) const+0x30>
   125dc:	e8bd4010 	pop	{r4, lr}
   125e0:	ea00231c 	b	1b258 <CUSBConfigurationParser::Error(char const*) const>
   125e4:	e3a0209c 	mov	r2, #156	; 0x9c
   125e8:	e59f1014 	ldr	r1, [pc, #20]	; 12604 <CUSBFunction::ConfigurationError(char const*) const+0x40>
   125ec:	e59f0014 	ldr	r0, [pc, #20]	; 12608 <CUSBFunction::ConfigurationError(char const*) const+0x44>
   125f0:	eb002c42 	bl	1d700 <assertion_failed>
   125f4:	e3a0209d 	mov	r2, #157	; 0x9d
   125f8:	e59f1004 	ldr	r1, [pc, #4]	; 12604 <CUSBFunction::ConfigurationError(char const*) const+0x40>
   125fc:	e59f0008 	ldr	r0, [pc, #8]	; 1260c <CUSBFunction::ConfigurationError(char const*) const+0x48>
   12600:	eb002c3e 	bl	1d700 <assertion_failed>
   12604:	0002e150 	.word	0x0002e150
   12608:	0002dbcc 	.word	0x0002dbcc
   1260c:	0002e1c8 	.word	0x0002e1c8

00012610 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
   12610:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12614:	e1a04000 	mov	r4, r0
   12618:	e5900014 	ldr	r0, [r0, #20]
   1261c:	e3500000 	cmp	r0, #0
   12620:	0a00001d 	beq	1269c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x8c>
   12624:	e1a07003 	mov	r7, r3
   12628:	e5943010 	ldr	r3, [r4, #16]
   1262c:	e3530000 	cmp	r3, #0
   12630:	0a00001d 	beq	126ac <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x9c>
   12634:	e594300c 	ldr	r3, [r4, #12]
   12638:	e1a05001 	mov	r5, r1
   1263c:	e3530000 	cmp	r3, #0
   12640:	e1a06002 	mov	r6, r2
   12644:	1a000009 	bne	12670 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x60>
   12648:	ea00001b 	b	126bc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xac>
   1264c:	e3a01004 	mov	r1, #4
   12650:	e594000c 	ldr	r0, [r4, #12]
   12654:	ebfff9a6 	bl	10cf4 <CUSBDevice::GetDescriptor(unsigned char)>
   12658:	e3a01004 	mov	r1, #4
   1265c:	e5940010 	ldr	r0, [r4, #16]
   12660:	eb0022c1 	bl	1b16c <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   12664:	e3500000 	cmp	r0, #0
   12668:	e5840014 	str	r0, [r4, #20]
   1266c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   12670:	e5d0c005 	ldrb	ip, [r0, #5]
   12674:	e15c0005 	cmp	ip, r5
   12678:	1afffff3 	bne	1264c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
   1267c:	e5d01006 	ldrb	r1, [r0, #6]
   12680:	e1510006 	cmp	r1, r6
   12684:	1afffff0 	bne	1264c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
   12688:	e5d03007 	ldrb	r3, [r0, #7]
   1268c:	e1530007 	cmp	r3, r7
   12690:	1affffed 	bne	1264c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
   12694:	e3a00001 	mov	r0, #1
   12698:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1269c:	e3a020a3 	mov	r2, #163	; 0xa3
   126a0:	e59f1024 	ldr	r1, [pc, #36]	; 126cc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
   126a4:	e59f0024 	ldr	r0, [pc, #36]	; 126d0 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc0>
   126a8:	eb002c14 	bl	1d700 <assertion_failed>
   126ac:	e3a020a4 	mov	r2, #164	; 0xa4
   126b0:	e59f1014 	ldr	r1, [pc, #20]	; 126cc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
   126b4:	e59f0018 	ldr	r0, [pc, #24]	; 126d4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
   126b8:	eb002c10 	bl	1d700 <assertion_failed>
   126bc:	e3a020a5 	mov	r2, #165	; 0xa5
   126c0:	e59f1004 	ldr	r1, [pc, #4]	; 126cc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
   126c4:	e59f000c 	ldr	r0, [pc, #12]	; 126d8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc8>
   126c8:	eb002c0c 	bl	1d700 <assertion_failed>
   126cc:	0002e150 	.word	0x0002e150
   126d0:	0002e160 	.word	0x0002e160
   126d4:	0002dbcc 	.word	0x0002dbcc
   126d8:	0002d9d0 	.word	0x0002d9d0

000126dc <CUSBFunction::GetInterfaceNumber() const>:
   126dc:	e5903014 	ldr	r3, [r0, #20]
   126e0:	e3530000 	cmp	r3, #0
   126e4:	0a000001 	beq	126f0 <CUSBFunction::GetInterfaceNumber() const+0x14>
   126e8:	e5d30002 	ldrb	r0, [r3, #2]
   126ec:	e12fff1e 	bx	lr
   126f0:	e3a020bb 	mov	r2, #187	; 0xbb
   126f4:	e92d4010 	push	{r4, lr}
   126f8:	e59f1004 	ldr	r1, [pc, #4]	; 12704 <CUSBFunction::GetInterfaceNumber() const+0x28>
   126fc:	e59f0004 	ldr	r0, [pc, #4]	; 12708 <CUSBFunction::GetInterfaceNumber() const+0x2c>
   12700:	eb002bfe 	bl	1d700 <assertion_failed>
   12704:	0002e150 	.word	0x0002e150
   12708:	0002e160 	.word	0x0002e160

0001270c <CUSBFunction::GetInterfaceClass() const>:
   1270c:	e5903014 	ldr	r3, [r0, #20]
   12710:	e3530000 	cmp	r3, #0
   12714:	0a000001 	beq	12720 <CUSBFunction::GetInterfaceClass() const+0x14>
   12718:	e5d30005 	ldrb	r0, [r3, #5]
   1271c:	e12fff1e 	bx	lr
   12720:	e3a020c1 	mov	r2, #193	; 0xc1
   12724:	e92d4010 	push	{r4, lr}
   12728:	e59f1004 	ldr	r1, [pc, #4]	; 12734 <CUSBFunction::GetInterfaceClass() const+0x28>
   1272c:	e59f0004 	ldr	r0, [pc, #4]	; 12738 <CUSBFunction::GetInterfaceClass() const+0x2c>
   12730:	eb002bf2 	bl	1d700 <assertion_failed>
   12734:	0002e150 	.word	0x0002e150
   12738:	0002e160 	.word	0x0002e160

0001273c <CUSBFunction::GetInterfaceSubClass() const>:
   1273c:	e5903014 	ldr	r3, [r0, #20]
   12740:	e3530000 	cmp	r3, #0
   12744:	0a000001 	beq	12750 <CUSBFunction::GetInterfaceSubClass() const+0x14>
   12748:	e5d30006 	ldrb	r0, [r3, #6]
   1274c:	e12fff1e 	bx	lr
   12750:	e3a020c7 	mov	r2, #199	; 0xc7
   12754:	e92d4010 	push	{r4, lr}
   12758:	e59f1004 	ldr	r1, [pc, #4]	; 12764 <CUSBFunction::GetInterfaceSubClass() const+0x28>
   1275c:	e59f0004 	ldr	r0, [pc, #4]	; 12768 <CUSBFunction::GetInterfaceSubClass() const+0x2c>
   12760:	eb002be6 	bl	1d700 <assertion_failed>
   12764:	0002e150 	.word	0x0002e150
   12768:	0002e160 	.word	0x0002e160

0001276c <CUSBFunction::GetInterfaceProtocol() const>:
   1276c:	e5903014 	ldr	r3, [r0, #20]
   12770:	e3530000 	cmp	r3, #0
   12774:	0a000001 	beq	12780 <CUSBFunction::GetInterfaceProtocol() const+0x14>
   12778:	e5d30007 	ldrb	r0, [r3, #7]
   1277c:	e12fff1e 	bx	lr
   12780:	e3a020cd 	mov	r2, #205	; 0xcd
   12784:	e92d4010 	push	{r4, lr}
   12788:	e59f1004 	ldr	r1, [pc, #4]	; 12794 <CUSBFunction::GetInterfaceProtocol() const+0x28>
   1278c:	e59f0004 	ldr	r0, [pc, #4]	; 12798 <CUSBFunction::GetInterfaceProtocol() const+0x2c>
   12790:	eb002bda 	bl	1d700 <assertion_failed>
   12794:	0002e150 	.word	0x0002e150
   12798:	0002e160 	.word	0x0002e160

0001279c <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   1279c:	e92d4010 	push	{r4, lr}
   127a0:	e1a04000 	mov	r4, r0
   127a4:	e59f300c 	ldr	r3, [pc, #12]	; 127b8 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
   127a8:	e5803000 	str	r3, [r0]
   127ac:	eb000357 	bl	13510 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   127b0:	e1a00004 	mov	r0, r4
   127b4:	e8bd8010 	pop	{r4, pc}
   127b8:	0002e294 	.word	0x0002e294

000127bc <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   127bc:	e92d4010 	push	{r4, lr}
   127c0:	e1a04000 	mov	r4, r0
   127c4:	e59f3018 	ldr	r3, [pc, #24]	; 127e4 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
   127c8:	e5803000 	str	r3, [r0]
   127cc:	eb00034f 	bl	13510 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   127d0:	e1a00004 	mov	r0, r4
   127d4:	e3a01d06 	mov	r1, #384	; 0x180
   127d8:	eb00541f 	bl	2785c <operator delete(void*, unsigned int)>
   127dc:	e1a00004 	mov	r0, r4
   127e0:	e8bd8010 	pop	{r4, pc}
   127e4:	0002e294 	.word	0x0002e294

000127e8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
   127e8:	e92d4070 	push	{r4, r5, r6, lr}
   127ec:	e1a05001 	mov	r5, r1
   127f0:	e24dd070 	sub	sp, sp, #112	; 0x70
   127f4:	e28d4037 	add	r4, sp, #55	; 0x37
   127f8:	e3c4401f 	bic	r4, r4, #31
   127fc:	e2801d05 	add	r1, r0, #320	; 0x140
   12800:	e1a06000 	mov	r6, r0
   12804:	e3a02030 	mov	r2, #48	; 0x30
   12808:	e1a00004 	mov	r0, r4
   1280c:	eb00521e 	bl	2708c <memcpy>
   12810:	e3550001 	cmp	r5, #1
   12814:	0a000007 	beq	12838 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   12818:	e3550002 	cmp	r5, #2
   1281c:	0a000025 	beq	128b8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xd0>
   12820:	e3550000 	cmp	r5, #0
   12824:	0a00001f 	beq	128a8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xc0>
   12828:	e59f20a4 	ldr	r2, [pc, #164]	; 128d4 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xec>
   1282c:	e59f10a4 	ldr	r1, [pc, #164]	; 128d8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xf0>
   12830:	e59f00a4 	ldr	r0, [pc, #164]	; 128dc <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xf4>
   12834:	eb002bb1 	bl	1d700 <assertion_failed>
   12838:	e3e01001 	mvn	r1, #1
   1283c:	e3e02c01 	mvn	r2, #256	; 0x100
   12840:	e3a03000 	mov	r3, #0
   12844:	e5c41001 	strb	r1, [r4, #1]
   12848:	e1c420b2 	strh	r2, [r4, #2]
   1284c:	e5c43004 	strb	r3, [r4, #4]
   12850:	e1a00006 	mov	r0, r6
   12854:	ebffff44 	bl	1256c <CUSBFunction::GetHost() const>
   12858:	e1a05000 	mov	r5, r0
   1285c:	e1a00006 	mov	r0, r6
   12860:	ebffff36 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   12864:	e1a01000 	mov	r1, r0
   12868:	e1a00006 	mov	r0, r6
   1286c:	e58d1014 	str	r1, [sp, #20]
   12870:	ebffff99 	bl	126dc <CUSBFunction::GetInterfaceNumber() const>
   12874:	e3a0c030 	mov	ip, #48	; 0x30
   12878:	e59f2060 	ldr	r2, [pc, #96]	; 128e0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xf8>
   1287c:	e6ff3070 	uxth	r3, r0
   12880:	e88d101c 	stm	sp, {r2, r3, r4, ip}
   12884:	e1a00005 	mov	r0, r5
   12888:	e3a03009 	mov	r3, #9
   1288c:	e3a02021 	mov	r2, #33	; 0x21
   12890:	e59d1014 	ldr	r1, [sp, #20]
   12894:	ebffd9dd 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12898:	e1e00000 	mvn	r0, r0
   1289c:	e1a00fa0 	lsr	r0, r0, #31
   128a0:	e28dd070 	add	sp, sp, #112	; 0x70
   128a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   128a8:	e5c45001 	strb	r5, [r4, #1]
   128ac:	e1c450b2 	strh	r5, [r4, #2]
   128b0:	e5c45004 	strb	r5, [r4, #4]
   128b4:	eaffffe5 	b	12850 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x68>
   128b8:	e3e01001 	mvn	r1, #1
   128bc:	e3a02cfe 	mov	r2, #65024	; 0xfe00
   128c0:	e3e03000 	mvn	r3, #0
   128c4:	e5c41001 	strb	r1, [r4, #1]
   128c8:	e1c420b2 	strh	r2, [r4, #2]
   128cc:	e5c43004 	strb	r3, [r4, #4]
   128d0:	eaffffde 	b	12850 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x68>
   128d4:	0000010e 	.word	0x0000010e
   128d8:	0002e20c 	.word	0x0002e20c
   128dc:	0002dbb4 	.word	0x0002dbb4
   128e0:	00000201 	.word	0x00000201

000128e4 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
   128e4:	e351000a 	cmp	r1, #10
   128e8:	9a000001 	bls	128f4 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
   128ec:	e3a00000 	mov	r0, #0
   128f0:	e12fff1e 	bx	lr
   128f4:	e59f3070 	ldr	r3, [pc, #112]	; 1296c <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x88>
   128f8:	e92d4030 	push	{r4, r5, lr}
   128fc:	e0831001 	add	r1, r3, r1
   12900:	e5d1304c 	ldrb	r3, [r1, #76]	; 0x4c
   12904:	e24dd01c 	sub	sp, sp, #28
   12908:	e1a03083 	lsl	r3, r3, #1
   1290c:	e5c03149 	strb	r3, [r0, #329]	; 0x149
   12910:	e1a04000 	mov	r4, r0
   12914:	ebffff14 	bl	1256c <CUSBFunction::GetHost() const>
   12918:	e1a05000 	mov	r5, r0
   1291c:	e1a00004 	mov	r0, r4
   12920:	ebffff06 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   12924:	e1a01000 	mov	r1, r0
   12928:	e1a00004 	mov	r0, r4
   1292c:	e58d1014 	str	r1, [sp, #20]
   12930:	ebffff69 	bl	126dc <CUSBFunction::GetInterfaceNumber() const>
   12934:	e3a0c030 	mov	ip, #48	; 0x30
   12938:	e59f2030 	ldr	r2, [pc, #48]	; 12970 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x8c>
   1293c:	e6ff3070 	uxth	r3, r0
   12940:	e2844d05 	add	r4, r4, #320	; 0x140
   12944:	e88d101c 	stm	sp, {r2, r3, r4, ip}
   12948:	e1a00005 	mov	r0, r5
   1294c:	e3a03009 	mov	r3, #9
   12950:	e3a02021 	mov	r2, #33	; 0x21
   12954:	e59d1014 	ldr	r1, [sp, #20]
   12958:	ebffd9ac 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1295c:	e1e00000 	mvn	r0, r0
   12960:	e1a00fa0 	lsr	r0, r0, #31
   12964:	e28dd01c 	add	sp, sp, #28
   12968:	e8bd8030 	pop	{r4, r5, pc}
   1296c:	0002e28c 	.word	0x0002e28c
   12970:	00000201 	.word	0x00000201

00012974 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
   12974:	e92d4070 	push	{r4, r5, r6, lr}
   12978:	e3a02000 	mov	r2, #0
   1297c:	e1a04000 	mov	r4, r0
   12980:	eb0002f9 	bl	1356c <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   12984:	e3a03000 	mov	r3, #0
   12988:	e59f5030 	ldr	r5, [pc, #48]	; 129c0 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x4c>
   1298c:	e1a00004 	mov	r0, r4
   12990:	e2852008 	add	r2, r5, #8
   12994:	e5842000 	str	r2, [r4]
   12998:	e3a01003 	mov	r1, #3
   1299c:	e1a02003 	mov	r2, r3
   129a0:	ebffff1a 	bl	12610 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   129a4:	e3a02030 	mov	r2, #48	; 0x30
   129a8:	e5c4013e 	strb	r0, [r4, #318]	; 0x13e
   129ac:	e2851058 	add	r1, r5, #88	; 0x58
   129b0:	e2840d05 	add	r0, r4, #320	; 0x140
   129b4:	eb0051b4 	bl	2708c <memcpy>
   129b8:	e1a00004 	mov	r0, r4
   129bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   129c0:	0002e28c 	.word	0x0002e28c

000129c4 <CUSBGamePadPS3Device::PS3Enable()>:
   129c4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   129c8:	e24dd054 	sub	sp, sp, #84	; 0x54
   129cc:	e28d6037 	add	r6, sp, #55	; 0x37
   129d0:	e3c6601f 	bic	r6, r6, #31
   129d4:	e1a03006 	mov	r3, r6
   129d8:	e3a04000 	mov	r4, #0
   129dc:	e59f2098 	ldr	r2, [pc, #152]	; 12a7c <CUSBGamePadPS3Device::PS3Enable()+0xb8>
   129e0:	e1a05000 	mov	r5, r0
   129e4:	e4832004 	str	r2, [r3], #4
   129e8:	e5834004 	str	r4, [r3, #4]
   129ec:	e5834008 	str	r4, [r3, #8]
   129f0:	e583400c 	str	r4, [r3, #12]
   129f4:	e5834010 	str	r4, [r3, #16]
   129f8:	e5834014 	str	r4, [r3, #20]
   129fc:	e5834018 	str	r4, [r3, #24]
   12a00:	e5864004 	str	r4, [r6, #4]
   12a04:	ebfffed8 	bl	1256c <CUSBFunction::GetHost() const>
   12a08:	e1a07000 	mov	r7, r0
   12a0c:	e1a00005 	mov	r0, r5
   12a10:	ebfffeca 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   12a14:	e1a01000 	mov	r1, r0
   12a18:	e1a00005 	mov	r0, r5
   12a1c:	e58d1014 	str	r1, [sp, #20]
   12a20:	ebffff2d 	bl	126dc <CUSBFunction::GetInterfaceNumber() const>
   12a24:	e3a0c004 	mov	ip, #4
   12a28:	e3a02ffd 	mov	r2, #1012	; 0x3f4
   12a2c:	e6ff3070 	uxth	r3, r0
   12a30:	e58d3004 	str	r3, [sp, #4]
   12a34:	e58d2000 	str	r2, [sp]
   12a38:	e1a00007 	mov	r0, r7
   12a3c:	e3a03009 	mov	r3, #9
   12a40:	e3a02021 	mov	r2, #33	; 0x21
   12a44:	e59d1014 	ldr	r1, [sp, #20]
   12a48:	e58d6008 	str	r6, [sp, #8]
   12a4c:	e58dc00c 	str	ip, [sp, #12]
   12a50:	ebffd96e 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12a54:	e1500004 	cmp	r0, r4
   12a58:	b1a00004 	movlt	r0, r4
   12a5c:	ba000004 	blt	12a74 <CUSBGamePadPS3Device::PS3Enable()+0xb0>
   12a60:	e5953000 	ldr	r3, [r5]
   12a64:	e1a00005 	mov	r0, r5
   12a68:	e5d51130 	ldrb	r1, [r5, #304]	; 0x130
   12a6c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   12a70:	e12fff33 	blx	r3
   12a74:	e28dd054 	add	sp, sp, #84	; 0x54
   12a78:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12a7c:	00000c42 	.word	0x00000c42

00012a80 <CUSBGamePadPS3Device::Configure()>:
   12a80:	e92d4030 	push	{r4, r5, lr}
   12a84:	e5d0313e 	ldrb	r3, [r0, #318]	; 0x13e
   12a88:	e24dd00c 	sub	sp, sp, #12
   12a8c:	e3530000 	cmp	r3, #0
   12a90:	0a00001e 	beq	12b10 <CUSBGamePadPS3Device::Configure()+0x90>
   12a94:	e1a04000 	mov	r4, r0
   12a98:	eb000414 	bl	13af0 <CUSBGamePadStandardDevice::Configure()>
   12a9c:	e3500000 	cmp	r0, #0
   12aa0:	0a000029 	beq	12b4c <CUSBGamePadPS3Device::Configure()+0xcc>
   12aa4:	e2845f4b 	add	r5, r4, #300	; 0x12c
   12aa8:	e1d530b0 	ldrh	r3, [r5]
   12aac:	e2433031 	sub	r3, r3, #49	; 0x31
   12ab0:	e3530001 	cmp	r3, #1
   12ab4:	8a00001a 	bhi	12b24 <CUSBGamePadPS3Device::Configure()+0xa4>
   12ab8:	e3a01010 	mov	r1, #16
   12abc:	e3a0c013 	mov	ip, #19
   12ac0:	e1a03004 	mov	r3, r4
   12ac4:	e3a02000 	mov	r2, #0
   12ac8:	e3a000ff 	mov	r0, #255	; 0xff
   12acc:	e5841028 	str	r1, [r4, #40]	; 0x28
   12ad0:	e584c108 	str	ip, [r4, #264]	; 0x108
   12ad4:	e28410c0 	add	r1, r4, #192	; 0xc0
   12ad8:	e5832030 	str	r2, [r3, #48]	; 0x30
   12adc:	e5830034 	str	r0, [r3, #52]	; 0x34
   12ae0:	e283300c 	add	r3, r3, #12
   12ae4:	e1530001 	cmp	r3, r1
   12ae8:	1afffffa 	bne	12ad8 <CUSBGamePadPS3Device::Configure()+0x58>
   12aec:	e1a00004 	mov	r0, r4
   12af0:	e58420ec 	str	r2, [r4, #236]	; 0xec
   12af4:	ebffffb2 	bl	129c4 <CUSBGamePadPS3Device::PS3Enable()>
   12af8:	e3500000 	cmp	r0, #0
   12afc:	0a00001a 	beq	12b6c <CUSBGamePadPS3Device::Configure()+0xec>
   12b00:	e1a00004 	mov	r0, r4
   12b04:	e28dd00c 	add	sp, sp, #12
   12b08:	e8bd4030 	pop	{r4, r5, lr}
   12b0c:	ea000a02 	b	1531c <CUSBHIDDevice::StartRequest()>
   12b10:	e59f1074 	ldr	r1, [pc, #116]	; 12b8c <CUSBGamePadPS3Device::Configure()+0x10c>
   12b14:	ebfffeaa 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   12b18:	e3a00000 	mov	r0, #0
   12b1c:	e28dd00c 	add	sp, sp, #12
   12b20:	e8bd8030 	pop	{r4, r5, pc}
   12b24:	eb0033f5 	bl	1fb00 <CLogger::Get()>
   12b28:	e1d520b0 	ldrh	r2, [r5]
   12b2c:	e59f305c 	ldr	r3, [pc, #92]	; 12b90 <CUSBGamePadPS3Device::Configure()+0x110>
   12b30:	e58d2000 	str	r2, [sp]
   12b34:	e59f1050 	ldr	r1, [pc, #80]	; 12b8c <CUSBGamePadPS3Device::Configure()+0x10c>
   12b38:	e3a02001 	mov	r2, #1
   12b3c:	eb003331 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12b40:	e3a00000 	mov	r0, #0
   12b44:	e28dd00c 	add	sp, sp, #12
   12b48:	e8bd8030 	pop	{r4, r5, pc}
   12b4c:	eb0033eb 	bl	1fb00 <CLogger::Get()>
   12b50:	e3a02001 	mov	r2, #1
   12b54:	e59f3038 	ldr	r3, [pc, #56]	; 12b94 <CUSBGamePadPS3Device::Configure()+0x114>
   12b58:	e59f102c 	ldr	r1, [pc, #44]	; 12b8c <CUSBGamePadPS3Device::Configure()+0x10c>
   12b5c:	eb003329 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12b60:	e3a00000 	mov	r0, #0
   12b64:	e28dd00c 	add	sp, sp, #12
   12b68:	e8bd8030 	pop	{r4, r5, pc}
   12b6c:	eb0033e3 	bl	1fb00 <CLogger::Get()>
   12b70:	e3a02001 	mov	r2, #1
   12b74:	e59f301c 	ldr	r3, [pc, #28]	; 12b98 <CUSBGamePadPS3Device::Configure()+0x118>
   12b78:	e59f100c 	ldr	r1, [pc, #12]	; 12b8c <CUSBGamePadPS3Device::Configure()+0x10c>
   12b7c:	eb003321 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12b80:	e3a00000 	mov	r0, #0
   12b84:	e28dd00c 	add	sp, sp, #12
   12b88:	e8bd8030 	pop	{r4, r5, pc}
   12b8c:	0002e314 	.word	0x0002e314
   12b90:	0002e240 	.word	0x0002e240
   12b94:	0002e220 	.word	0x0002e220
   12b98:	0002e25c 	.word	0x0002e25c

00012b9c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
   12b9c:	e2803f4b 	add	r3, r0, #300	; 0x12c
   12ba0:	e1d330b0 	ldrh	r3, [r3]
   12ba4:	e92d4010 	push	{r4, lr}
   12ba8:	e3530031 	cmp	r3, #49	; 0x31
   12bac:	e1a0c000 	mov	ip, r0
   12bb0:	e1a04001 	mov	r4, r1
   12bb4:	0a000007 	beq	12bd8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
   12bb8:	e3530032 	cmp	r3, #50	; 0x32
   12bbc:	0a000044 	beq	12cd4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x138>
   12bc0:	e3530000 	cmp	r3, #0
   12bc4:	0a000040 	beq	12ccc <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x130>
   12bc8:	e3a02092 	mov	r2, #146	; 0x92
   12bcc:	e59f1118 	ldr	r1, [pc, #280]	; 12cec <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
   12bd0:	e59f0118 	ldr	r0, [pc, #280]	; 12cf0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x154>
   12bd4:	eb002ac9 	bl	1d700 <assertion_failed>
   12bd8:	e3510000 	cmp	r1, #0
   12bdc:	0a00003e 	beq	12cdc <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x140>
   12be0:	e5d40003 	ldrb	r0, [r4, #3]
   12be4:	e5d42002 	ldrb	r2, [r4, #2]
   12be8:	e5d41004 	ldrb	r1, [r4, #4]
   12bec:	e1822400 	orr	r2, r2, r0, lsl #8
   12bf0:	e5d40005 	ldrb	r0, [r4, #5]
   12bf4:	e1822801 	orr	r2, r2, r1, lsl #16
   12bf8:	e59f10f4 	ldr	r1, [pc, #244]	; 12cf4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x158>
   12bfc:	e1820c00 	orr	r0, r2, r0, lsl #24
   12c00:	e59fe0f0 	ldr	lr, [pc, #240]	; 12cf8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x15c>
   12c04:	e00112a0 	and	r1, r1, r0, lsr #5
   12c08:	e1a02682 	lsl	r2, r2, #13
   12c0c:	e00e0580 	and	r0, lr, r0, lsl #11
   12c10:	e1812ea2 	orr	r2, r1, r2, lsr #29
   12c14:	e1822000 	orr	r2, r2, r0
   12c18:	e58c210c 	str	r2, [ip, #268]	; 0x10c
   12c1c:	e5d42006 	ldrb	r2, [r4, #6]
   12c20:	e3a03006 	mov	r3, #6
   12c24:	e58c202c 	str	r2, [ip, #44]	; 0x2c
   12c28:	e5d41007 	ldrb	r1, [r4, #7]
   12c2c:	e59fe0c8 	ldr	lr, [pc, #200]	; 12cfc <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x160>
   12c30:	e58c1038 	str	r1, [ip, #56]	; 0x38
   12c34:	e5d40008 	ldrb	r0, [r4, #8]
   12c38:	e284200d 	add	r2, r4, #13
   12c3c:	e58c0044 	str	r0, [ip, #68]	; 0x44
   12c40:	e5d40009 	ldrb	r0, [r4, #9]
   12c44:	e2841019 	add	r1, r4, #25
   12c48:	e58c0050 	str	r0, [ip, #80]	; 0x50
   12c4c:	ea000000 	b	12c54 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb8>
   12c50:	e5be3004 	ldr	r3, [lr, #4]!
   12c54:	e5f20001 	ldrb	r0, [r2, #1]!
   12c58:	e0833083 	add	r3, r3, r3, lsl #1
   12c5c:	e08c3103 	add	r3, ip, r3, lsl #2
   12c60:	e1520001 	cmp	r2, r1
   12c64:	e583002c 	str	r0, [r3, #44]	; 0x2c
   12c68:	1afffff8 	bne	12c50 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb4>
   12c6c:	e1d432b9 	ldrh	r3, [r4, #41]	; 0x29
   12c70:	e59f2088 	ldr	r2, [pc, #136]	; 12d00 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x164>
   12c74:	e6bf3fb3 	rev16	r3, r3
   12c78:	e6ff3073 	uxth	r3, r3
   12c7c:	e0423003 	sub	r3, r2, r3
   12c80:	e58c3110 	str	r3, [ip, #272]	; 0x110
   12c84:	e1d432bb 	ldrh	r3, [r4, #43]	; 0x2b
   12c88:	e6bf3fb3 	rev16	r3, r3
   12c8c:	e6ff3073 	uxth	r3, r3
   12c90:	e0423003 	sub	r3, r2, r3
   12c94:	e58c3114 	str	r3, [ip, #276]	; 0x114
   12c98:	e1d432bd 	ldrh	r3, [r4, #45]	; 0x2d
   12c9c:	e6bf3fb3 	rev16	r3, r3
   12ca0:	e6ff3073 	uxth	r3, r3
   12ca4:	e0422003 	sub	r2, r2, r3
   12ca8:	e58c2118 	str	r2, [ip, #280]	; 0x118
   12cac:	e5d4302f 	ldrb	r3, [r4, #47]	; 0x2f
   12cb0:	e5d42030 	ldrb	r2, [r4, #48]	; 0x30
   12cb4:	e1833402 	orr	r3, r3, r2, lsl #8
   12cb8:	e6bf3fb3 	rev16	r3, r3
   12cbc:	e6ff3073 	uxth	r3, r3
   12cc0:	e2433006 	sub	r3, r3, #6
   12cc4:	e58c3124 	str	r3, [ip, #292]	; 0x124
   12cc8:	e8bd8010 	pop	{r4, pc}
   12ccc:	e8bd4010 	pop	{r4, lr}
   12cd0:	ea00027d 	b	136cc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   12cd4:	e2814001 	add	r4, r1, #1
   12cd8:	eaffffc0 	b	12be0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x44>
   12cdc:	e3a02097 	mov	r2, #151	; 0x97
   12ce0:	e59f1004 	ldr	r1, [pc, #4]	; 12cec <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
   12ce4:	e59f0018 	ldr	r0, [pc, #24]	; 12d04 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x168>
   12ce8:	eb002a84 	bl	1d700 <assertion_failed>
   12cec:	0002e20c 	.word	0x0002e20c
   12cf0:	0002dbb4 	.word	0x0002dbb4
   12cf4:	000007f8 	.word	0x000007f8
   12cf8:	0007f800 	.word	0x0007f800
   12cfc:	0002e320 	.word	0x0002e320
   12d00:	000001ff 	.word	0x000001ff
   12d04:	0002e27c 	.word	0x0002e27c

00012d08 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   12d08:	e3a00000 	mov	r0, #0
   12d0c:	e12fff1e 	bx	lr

00012d10 <CUSBGamePadPS3Device::GetProperties()>:
   12d10:	e3a0001b 	mov	r0, #27
   12d14:	e12fff1e 	bx	lr

00012d18 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   12d18:	e5d13001 	ldrb	r3, [r1, #1]
   12d1c:	e59f21a0 	ldr	r2, [pc, #416]	; 12ec4 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1ac>
   12d20:	e580302c 	str	r3, [r0, #44]	; 0x2c
   12d24:	e5d13002 	ldrb	r3, [r1, #2]
   12d28:	e5803038 	str	r3, [r0, #56]	; 0x38
   12d2c:	e5d13003 	ldrb	r3, [r1, #3]
   12d30:	e5803044 	str	r3, [r0, #68]	; 0x44
   12d34:	e5d13004 	ldrb	r3, [r1, #4]
   12d38:	e5803050 	str	r3, [r0, #80]	; 0x50
   12d3c:	e5d13008 	ldrb	r3, [r1, #8]
   12d40:	e580305c 	str	r3, [r0, #92]	; 0x5c
   12d44:	e5d13009 	ldrb	r3, [r1, #9]
   12d48:	e5803068 	str	r3, [r0, #104]	; 0x68
   12d4c:	e5d13005 	ldrb	r3, [r1, #5]
   12d50:	e203300f 	and	r3, r3, #15
   12d54:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   12d58:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   12d5c:	e580210c 	str	r2, [r0, #268]	; 0x10c
   12d60:	e5d13005 	ldrb	r3, [r1, #5]
   12d64:	e3130080 	tst	r3, #128	; 0x80
   12d68:	13822080 	orrne	r2, r2, #128	; 0x80
   12d6c:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   12d70:	e3130040 	tst	r3, #64	; 0x40
   12d74:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   12d78:	13822c01 	orrne	r2, r2, #256	; 0x100
   12d7c:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   12d80:	e3130020 	tst	r3, #32
   12d84:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   12d88:	13822c02 	orrne	r2, r2, #512	; 0x200
   12d8c:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   12d90:	e3130010 	tst	r3, #16
   12d94:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   12d98:	13833b01 	orrne	r3, r3, #1024	; 0x400
   12d9c:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   12da0:	e5d13006 	ldrb	r3, [r1, #6]
   12da4:	e3130080 	tst	r3, #128	; 0x80
   12da8:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   12dac:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   12db0:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   12db4:	e3130040 	tst	r3, #64	; 0x40
   12db8:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   12dbc:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   12dc0:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   12dc4:	e3130020 	tst	r3, #32
   12dc8:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   12dcc:	13822901 	orrne	r2, r2, #16384	; 0x4000
   12dd0:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   12dd4:	e3130010 	tst	r3, #16
   12dd8:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   12ddc:	13822b02 	orrne	r2, r2, #2048	; 0x800
   12de0:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   12de4:	e3130008 	tst	r3, #8
   12de8:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   12dec:	13822010 	orrne	r2, r2, #16
   12df0:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   12df4:	e3130004 	tst	r3, #4
   12df8:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   12dfc:	13822008 	orrne	r2, r2, #8
   12e00:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   12e04:	e3130002 	tst	r3, #2
   12e08:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   12e0c:	13822040 	orrne	r2, r2, #64	; 0x40
   12e10:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   12e14:	e3130001 	tst	r3, #1
   12e18:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   12e1c:	13833020 	orrne	r3, r3, #32
   12e20:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   12e24:	e5d13007 	ldrb	r3, [r1, #7]
   12e28:	e3130002 	tst	r3, #2
   12e2c:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   12e30:	13822602 	orrne	r2, r2, #2097152	; 0x200000
   12e34:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   12e38:	e3130001 	tst	r3, #1
   12e3c:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   12e40:	13833001 	orrne	r3, r3, #1
   12e44:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   12e48:	e5d12014 	ldrb	r2, [r1, #20]
   12e4c:	e5d13013 	ldrb	r3, [r1, #19]
   12e50:	e1833402 	orr	r3, r3, r2, lsl #8
   12e54:	e6bf3073 	sxth	r3, r3
   12e58:	e5803110 	str	r3, [r0, #272]	; 0x110
   12e5c:	e5d12018 	ldrb	r2, [r1, #24]
   12e60:	e5d13017 	ldrb	r3, [r1, #23]
   12e64:	e1833402 	orr	r3, r3, r2, lsl #8
   12e68:	e6bf3073 	sxth	r3, r3
   12e6c:	e5803114 	str	r3, [r0, #276]	; 0x114
   12e70:	e5d12016 	ldrb	r2, [r1, #22]
   12e74:	e5d13015 	ldrb	r3, [r1, #21]
   12e78:	e1833402 	orr	r3, r3, r2, lsl #8
   12e7c:	e6bf3073 	sxth	r3, r3
   12e80:	e5803118 	str	r3, [r0, #280]	; 0x118
   12e84:	e5d12012 	ldrb	r2, [r1, #18]
   12e88:	e5d13011 	ldrb	r3, [r1, #17]
   12e8c:	e1833402 	orr	r3, r3, r2, lsl #8
   12e90:	e6bf3073 	sxth	r3, r3
   12e94:	e580311c 	str	r3, [r0, #284]	; 0x11c
   12e98:	e5d1200e 	ldrb	r2, [r1, #14]
   12e9c:	e5d1300d 	ldrb	r3, [r1, #13]
   12ea0:	e1833402 	orr	r3, r3, r2, lsl #8
   12ea4:	e6bf3073 	sxth	r3, r3
   12ea8:	e5803120 	str	r3, [r0, #288]	; 0x120
   12eac:	e5d1300f 	ldrb	r3, [r1, #15]
   12eb0:	e5d12010 	ldrb	r2, [r1, #16]
   12eb4:	e1833402 	orr	r3, r3, r2, lsl #8
   12eb8:	e6bf3073 	sxth	r3, r3
   12ebc:	e5803124 	str	r3, [r0, #292]	; 0x124
   12ec0:	e12fff1e 	bx	lr
   12ec4:	0002e398 	.word	0x0002e398

00012ec8 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   12ec8:	e92d4010 	push	{r4, lr}
   12ecc:	e1a04000 	mov	r4, r0
   12ed0:	e5900144 	ldr	r0, [r0, #324]	; 0x144
   12ed4:	e59f3034 	ldr	r3, [pc, #52]	; 12f10 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
   12ed8:	e3500000 	cmp	r0, #0
   12edc:	e5843000 	str	r3, [r4]
   12ee0:	0a000002 	beq	12ef0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   12ee4:	e5903000 	ldr	r3, [r0]
   12ee8:	e5933004 	ldr	r3, [r3, #4]
   12eec:	e12fff33 	blx	r3
   12ef0:	e5940140 	ldr	r0, [r4, #320]	; 0x140
   12ef4:	e3500000 	cmp	r0, #0
   12ef8:	0a000000 	beq	12f00 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   12efc:	eb005255 	bl	27858 <operator delete[](void*)>
   12f00:	e1a00004 	mov	r0, r4
   12f04:	eb002159 	bl	1b470 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12f08:	e1a00004 	mov	r0, r4
   12f0c:	e8bd8010 	pop	{r4, pc}
   12f10:	0002e3c4 	.word	0x0002e3c4

00012f14 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   12f14:	e92d4010 	push	{r4, lr}
   12f18:	e1a04000 	mov	r4, r0
   12f1c:	ebffffe9 	bl	12ec8 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
   12f20:	e1a00004 	mov	r0, r4
   12f24:	e3a01e15 	mov	r1, #336	; 0x150
   12f28:	eb00524b 	bl	2785c <operator delete(void*, unsigned int)>
   12f2c:	e1a00004 	mov	r0, r4
   12f30:	e8bd8010 	pop	{r4, pc}

00012f34 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   12f34:	e92d4010 	push	{r4, lr}
   12f38:	e1a04000 	mov	r4, r0
   12f3c:	eb00213a 	bl	1b42c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   12f40:	e3a03000 	mov	r3, #0
   12f44:	e59f2030 	ldr	r2, [pc, #48]	; 12f7c <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
   12f48:	e1a00004 	mov	r0, r4
   12f4c:	e5842000 	str	r2, [r4]
   12f50:	e3a01003 	mov	r1, #3
   12f54:	e1a02003 	mov	r2, r3
   12f58:	ebfffdac 	bl	12610 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   12f5c:	e3a03000 	mov	r3, #0
   12f60:	e2842f52 	add	r2, r4, #328	; 0x148
   12f64:	e5c40134 	strb	r0, [r4, #308]	; 0x134
   12f68:	e5843140 	str	r3, [r4, #320]	; 0x140
   12f6c:	e5843144 	str	r3, [r4, #324]	; 0x144
   12f70:	e1a00004 	mov	r0, r4
   12f74:	e1c230b0 	strh	r3, [r2]
   12f78:	e8bd8010 	pop	{r4, pc}
   12f7c:	0002e3c4 	.word	0x0002e3c4

00012f80 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   12f80:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f84:	e5d13007 	ldrb	r3, [r1, #7]
   12f88:	e1a06001 	mov	r6, r1
   12f8c:	e3130002 	tst	r3, #2
   12f90:	e1a05000 	mov	r5, r0
   12f94:	e24dd00c 	sub	sp, sp, #12
   12f98:	1a000050 	bne	130e0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x160>
   12f9c:	e5d00148 	ldrb	r0, [r0, #328]	; 0x148
   12fa0:	e3500000 	cmp	r0, #0
   12fa4:	1a000051 	bne	130f0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x170>
   12fa8:	e3a04000 	mov	r4, #0
   12fac:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
   12fb0:	e1a08004 	mov	r8, r4
   12fb4:	e2473001 	sub	r3, r7, #1
   12fb8:	e3530003 	cmp	r3, #3
   12fbc:	23a07001 	movcs	r7, #1
   12fc0:	e2859f52 	add	r9, r5, #328	; 0x148
   12fc4:	ea00001b 	b	13038 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb8>
   12fc8:	e5d53149 	ldrb	r3, [r5, #329]	; 0x149
   12fcc:	e3530000 	cmp	r3, #0
   12fd0:	1a00002a 	bne	13080 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x100>
   12fd4:	e5d12006 	ldrb	r2, [r1, #6]
   12fd8:	e5d1e005 	ldrb	lr, [r1, #5]
   12fdc:	e5d1c004 	ldrb	ip, [r1, #4]
   12fe0:	e1a01202 	lsl	r1, r2, #4
   12fe4:	e1a02003 	mov	r2, r3
   12fe8:	e20ea00f 	and	sl, lr, #15
   12fec:	e18cc40a 	orr	ip, ip, sl, lsl #8
   12ff0:	e181122e 	orr	r1, r1, lr, lsr #4
   12ff4:	e285af53 	add	sl, r5, #332	; 0x14c
   12ff8:	e3500000 	cmp	r0, #0
   12ffc:	e3a00001 	mov	r0, #1
   13000:	e5c50149 	strb	r0, [r5, #329]	; 0x149
   13004:	e1c9c0b2 	strh	ip, [r9, #2]
   13008:	e1ca10b0 	strh	r1, [sl]
   1300c:	0a000005 	beq	13028 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xa8>
   13010:	e5950144 	ldr	r0, [r5, #324]	; 0x144
   13014:	e3500000 	cmp	r0, #0
   13018:	0a000014 	beq	13070 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xf0>
   1301c:	e58d8000 	str	r8, [sp]
   13020:	e5d51148 	ldrb	r1, [r5, #328]	; 0x148
   13024:	eb002677 	bl	1ca08 <CMouseDevice::ReportHandler(unsigned int, int, int, int)>
   13028:	e2844001 	add	r4, r4, #1
   1302c:	e1570004 	cmp	r7, r4
   13030:	e3a00000 	mov	r0, #0
   13034:	0a000032 	beq	13104 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x184>
   13038:	e0843184 	add	r3, r4, r4, lsl #3
   1303c:	e0863003 	add	r3, r6, r3
   13040:	e5d32023 	ldrb	r2, [r3, #35]	; 0x23
   13044:	e2831020 	add	r1, r3, #32
   13048:	e1b033a2 	lsrs	r3, r2, #7
   1304c:	0affffdd 	beq	12fc8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x48>
   13050:	e3500000 	cmp	r0, #0
   13054:	e5c58149 	strb	r8, [r5, #329]	; 0x149
   13058:	0afffff2 	beq	13028 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xa8>
   1305c:	e3a03000 	mov	r3, #0
   13060:	e5950144 	ldr	r0, [r5, #324]	; 0x144
   13064:	e1a02003 	mov	r2, r3
   13068:	e3500000 	cmp	r0, #0
   1306c:	1affffea 	bne	1301c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x9c>
   13070:	e59f2094 	ldr	r2, [pc, #148]	; 1310c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x18c>
   13074:	e59f1094 	ldr	r1, [pc, #148]	; 13110 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x190>
   13078:	e59f0094 	ldr	r0, [pc, #148]	; 13114 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x194>
   1307c:	eb00299f 	bl	1d700 <assertion_failed>
   13080:	e5d1b005 	ldrb	fp, [r1, #5]
   13084:	e5d1c004 	ldrb	ip, [r1, #4]
   13088:	e20b300f 	and	r3, fp, #15
   1308c:	e1d920b2 	ldrh	r2, [r9, #2]
   13090:	e18cc403 	orr	ip, ip, r3, lsl #8
   13094:	e04c2002 	sub	r2, ip, r2
   13098:	e352007f 	cmp	r2, #127	; 0x7f
   1309c:	e3e0e07e 	mvn	lr, #126	; 0x7e
   130a0:	a3a0207f 	movge	r2, #127	; 0x7f
   130a4:	e5d11006 	ldrb	r1, [r1, #6]
   130a8:	e285af53 	add	sl, r5, #332	; 0x14c
   130ac:	e1da30b0 	ldrh	r3, [sl]
   130b0:	e1a01201 	lsl	r1, r1, #4
   130b4:	e181122b 	orr	r1, r1, fp, lsr #4
   130b8:	e0413003 	sub	r3, r1, r3
   130bc:	e152000e 	cmp	r2, lr
   130c0:	b1a0200e 	movlt	r2, lr
   130c4:	e353007f 	cmp	r3, #127	; 0x7f
   130c8:	a3a0307f 	movge	r3, #127	; 0x7f
   130cc:	e153000e 	cmp	r3, lr
   130d0:	b1a0300e 	movlt	r3, lr
   130d4:	e192e003 	orrs	lr, r2, r3
   130d8:	13800001 	orrne	r0, r0, #1
   130dc:	eaffffc5 	b	12ff8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x78>
   130e0:	e5d02148 	ldrb	r2, [r0, #328]	; 0x148
   130e4:	e3520000 	cmp	r2, #0
   130e8:	13a00000 	movne	r0, #0
   130ec:	1affffad 	bne	12fa8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   130f0:	e1a030a3 	lsr	r3, r3, #1
   130f4:	e2033001 	and	r3, r3, #1
   130f8:	e3a00001 	mov	r0, #1
   130fc:	e5c53148 	strb	r3, [r5, #328]	; 0x148
   13100:	eaffffa8 	b	12fa8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   13104:	e28dd00c 	add	sp, sp, #12
   13108:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1310c:	0000015a 	.word	0x0000015a
   13110:	0002e350 	.word	0x0002e350
   13114:	0002e364 	.word	0x0002e364

00013118 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   13118:	e2422040 	sub	r2, r2, #64	; 0x40
   1311c:	e16f2f12 	clz	r2, r2
   13120:	e3510000 	cmp	r1, #0
   13124:	e1a022a2 	lsr	r2, r2, #5
   13128:	03a02000 	moveq	r2, #0
   1312c:	e3520000 	cmp	r2, #0
   13130:	012fff1e 	bxeq	lr
   13134:	e92d4070 	push	{r4, r5, r6, lr}
   13138:	e1a04000 	mov	r4, r0
   1313c:	e5903000 	ldr	r3, [r0]
   13140:	e1a05001 	mov	r5, r1
   13144:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   13148:	e12fff33 	blx	r3
   1314c:	e5943128 	ldr	r3, [r4, #296]	; 0x128
   13150:	e3530000 	cmp	r3, #0
   13154:	0a000003 	beq	13168 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x50>
   13158:	e5940130 	ldr	r0, [r4, #304]	; 0x130
   1315c:	e2841028 	add	r1, r4, #40	; 0x28
   13160:	e2400001 	sub	r0, r0, #1
   13164:	e12fff33 	blx	r3
   13168:	e5943144 	ldr	r3, [r4, #324]	; 0x144
   1316c:	e3530000 	cmp	r3, #0
   13170:	08bd8070 	popeq	{r4, r5, r6, pc}
   13174:	e1a01005 	mov	r1, r5
   13178:	e1a00004 	mov	r0, r4
   1317c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13180:	eaffff7e 	b	12f80 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

00013184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   13184:	e92d4010 	push	{r4, lr}
   13188:	e5902140 	ldr	r2, [r0, #320]	; 0x140
   1318c:	e5d0c135 	ldrb	ip, [r0, #309]	; 0x135
   13190:	e3a03000 	mov	r3, #0
   13194:	e5c2c003 	strb	ip, [r2, #3]
   13198:	e590c140 	ldr	ip, [r0, #320]	; 0x140
   1319c:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
   131a0:	e3a02020 	mov	r2, #32
   131a4:	e5cce004 	strb	lr, [ip, #4]
   131a8:	e590c140 	ldr	ip, [r0, #320]	; 0x140
   131ac:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
   131b0:	e5cce005 	strb	lr, [ip, #5]
   131b4:	e590c140 	ldr	ip, [r0, #320]	; 0x140
   131b8:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
   131bc:	e5cce006 	strb	lr, [ip, #6]
   131c0:	e590c140 	ldr	ip, [r0, #320]	; 0x140
   131c4:	e5d0e139 	ldrb	lr, [r0, #313]	; 0x139
   131c8:	e5cce007 	strb	lr, [ip, #7]
   131cc:	e590c140 	ldr	ip, [r0, #320]	; 0x140
   131d0:	e5d0e13a 	ldrb	lr, [r0, #314]	; 0x13a
   131d4:	e5cce008 	strb	lr, [ip, #8]
   131d8:	e590c140 	ldr	ip, [r0, #320]	; 0x140
   131dc:	e5d0e13b 	ldrb	lr, [r0, #315]	; 0x13b
   131e0:	e5cce009 	strb	lr, [ip, #9]
   131e4:	e590c140 	ldr	ip, [r0, #320]	; 0x140
   131e8:	e5d0e13c 	ldrb	lr, [r0, #316]	; 0x13c
   131ec:	e5cce00a 	strb	lr, [ip, #10]
   131f0:	e5901140 	ldr	r1, [r0, #320]	; 0x140
   131f4:	eb0007c7 	bl	15118 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   131f8:	e2504000 	subs	r4, r0, #0
   131fc:	0a000001 	beq	13208 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x84>
   13200:	e1a00004 	mov	r0, r4
   13204:	e8bd8010 	pop	{r4, pc}
   13208:	eb00323c 	bl	1fb00 <CLogger::Get()>
   1320c:	e3a02001 	mov	r2, #1
   13210:	e59f300c 	ldr	r3, [pc, #12]	; 13224 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0xa0>
   13214:	e59f100c 	ldr	r1, [pc, #12]	; 13228 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0xa4>
   13218:	eb00317a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1321c:	e1a00004 	mov	r0, r4
   13220:	e8bd8010 	pop	{r4, pc}
   13224:	0002e378 	.word	0x0002e378
   13228:	0002e408 	.word	0x0002e408

0001322c <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   1322c:	e2411001 	sub	r1, r1, #1
   13230:	e3510006 	cmp	r1, #6
   13234:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   13238:	ea000029 	b	132e4 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xb8>
   1323c:	0001326c 	.word	0x0001326c
   13240:	00013280 	.word	0x00013280
   13244:	00013294 	.word	0x00013294
   13248:	000132a8 	.word	0x000132a8
   1324c:	000132bc 	.word	0x000132bc
   13250:	000132d0 	.word	0x000132d0
   13254:	00013258 	.word	0x00013258
   13258:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
   1325c:	e3e03000 	mvn	r3, #0
   13260:	e5802138 	str	r2, [r0, #312]	; 0x138
   13264:	e5c0313c 	strb	r3, [r0, #316]	; 0x13c
   13268:	eaffffc5 	b	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1326c:	e3e02000 	mvn	r2, #0
   13270:	e59f307c 	ldr	r3, [pc, #124]	; 132f4 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xc8>
   13274:	e5c0213c 	strb	r2, [r0, #316]	; 0x13c
   13278:	e5803138 	str	r3, [r0, #312]	; 0x138
   1327c:	eaffffc0 	b	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13280:	e3e02000 	mvn	r2, #0
   13284:	e59f306c 	ldr	r3, [pc, #108]	; 132f8 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xcc>
   13288:	e5c0213c 	strb	r2, [r0, #316]	; 0x13c
   1328c:	e5803138 	str	r3, [r0, #312]	; 0x138
   13290:	eaffffbb 	b	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13294:	e3e02000 	mvn	r2, #0
   13298:	e59f305c 	ldr	r3, [pc, #92]	; 132fc <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd0>
   1329c:	e5c0213c 	strb	r2, [r0, #316]	; 0x13c
   132a0:	e5803138 	str	r3, [r0, #312]	; 0x138
   132a4:	eaffffb6 	b	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   132a8:	e3e02000 	mvn	r2, #0
   132ac:	e59f304c 	ldr	r3, [pc, #76]	; 13300 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd4>
   132b0:	e5c0213c 	strb	r2, [r0, #316]	; 0x13c
   132b4:	e5803138 	str	r3, [r0, #312]	; 0x138
   132b8:	eaffffb1 	b	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   132bc:	e3e02000 	mvn	r2, #0
   132c0:	e59f303c 	ldr	r3, [pc, #60]	; 13304 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xd8>
   132c4:	e5c0213c 	strb	r2, [r0, #316]	; 0x13c
   132c8:	e5803138 	str	r3, [r0, #312]	; 0x138
   132cc:	eaffffac 	b	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   132d0:	e3e02000 	mvn	r2, #0
   132d4:	e59f302c 	ldr	r3, [pc, #44]	; 13308 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xdc>
   132d8:	e5c0213c 	strb	r2, [r0, #316]	; 0x13c
   132dc:	e5803138 	str	r3, [r0, #312]	; 0x138
   132e0:	eaffffa7 	b	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   132e4:	e3a03000 	mov	r3, #0
   132e8:	e5803138 	str	r3, [r0, #312]	; 0x138
   132ec:	e5c0313c 	strb	r3, [r0, #316]	; 0x13c
   132f0:	eaffffdc 	b	13268 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x3c>
   132f4:	7fff0000 	.word	0x7fff0000
   132f8:	7f0000ff 	.word	0x7f0000ff
   132fc:	7fff00ff 	.word	0x7fff00ff
   13300:	7f00ff00 	.word	0x7f00ff00
   13304:	7fffff00 	.word	0x7fffff00
   13308:	7f00ffff 	.word	0x7f00ffff

0001330c <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   1330c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   13310:	e1a0e821 	lsr	lr, r1, #16
   13314:	e5c0213b 	strb	r2, [r0, #315]	; 0x13b
   13318:	e1a02421 	lsr	r2, r1, #8
   1331c:	e5c0113a 	strb	r1, [r0, #314]	; 0x13a
   13320:	e5c0313c 	strb	r3, [r0, #316]	; 0x13c
   13324:	e5c0e138 	strb	lr, [r0, #312]	; 0x138
   13328:	e5c02139 	strb	r2, [r0, #313]	; 0x139
   1332c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   13330:	eaffff93 	b	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00013334 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   13334:	e3510001 	cmp	r1, #1
   13338:	0a000005 	beq	13354 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x20>
   1333c:	e3510002 	cmp	r1, #2
   13340:	0a00000e 	beq	13380 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x4c>
   13344:	e3510000 	cmp	r1, #0
   13348:	0a000007 	beq	1336c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
   1334c:	e3a00001 	mov	r0, #1
   13350:	e12fff1e 	bx	lr
   13354:	e3e0100c 	mvn	r1, #12
   13358:	e3a02cff 	mov	r2, #65280	; 0xff00
   1335c:	e2803f4d 	add	r3, r0, #308	; 0x134
   13360:	e5c01135 	strb	r1, [r0, #309]	; 0x135
   13364:	e1c320b2 	strh	r2, [r3, #2]
   13368:	eaffff85 	b	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1336c:	e3e0200f 	mvn	r2, #15
   13370:	e2803f4d 	add	r3, r0, #308	; 0x134
   13374:	e5c02135 	strb	r2, [r0, #309]	; 0x135
   13378:	e1c310b2 	strh	r1, [r3, #2]
   1337c:	eaffff80 	b	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13380:	e3e0100c 	mvn	r1, #12
   13384:	e3a020ff 	mov	r2, #255	; 0xff
   13388:	e2803f4d 	add	r3, r0, #308	; 0x134
   1338c:	e5c01135 	strb	r1, [r0, #309]	; 0x135
   13390:	e1c320b2 	strh	r2, [r3, #2]
   13394:	eaffff7a 	b	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00013398 <CUSBGamePadPS4Device::DisableTouchpad()>:
   13398:	e3a02000 	mov	r2, #0
   1339c:	e59f3004 	ldr	r3, [pc, #4]	; 133a8 <CUSBGamePadPS4Device::DisableTouchpad()+0x10>
   133a0:	e5c32000 	strb	r2, [r3]
   133a4:	e12fff1e 	bx	lr
   133a8:	0003472c 	.word	0x0003472c

000133ac <CUSBGamePadPS4Device::Configure()>:
   133ac:	e5d03134 	ldrb	r3, [r0, #308]	; 0x134
   133b0:	e92d4070 	push	{r4, r5, r6, lr}
   133b4:	e3530000 	cmp	r3, #0
   133b8:	0a00003c 	beq	134b0 <CUSBGamePadPS4Device::Configure()+0x104>
   133bc:	e3a02040 	mov	r2, #64	; 0x40
   133c0:	e2803f4b 	add	r3, r0, #300	; 0x12c
   133c4:	e1c320b0 	strh	r2, [r3]
   133c8:	e1a04000 	mov	r4, r0
   133cc:	eb001fe4 	bl	1b364 <CUSBGamePadDevice::Configure()>
   133d0:	e3500000 	cmp	r0, #0
   133d4:	0a000041 	beq	134e0 <CUSBGamePadPS4Device::Configure()+0x134>
   133d8:	e59f311c 	ldr	r3, [pc, #284]	; 134fc <CUSBGamePadPS4Device::Configure()+0x150>
   133dc:	e5d33000 	ldrb	r3, [r3]
   133e0:	e3530000 	cmp	r3, #0
   133e4:	1a000035 	bne	134c0 <CUSBGamePadPS4Device::Configure()+0x114>
   133e8:	e3a02006 	mov	r2, #6
   133ec:	e3a0c00e 	mov	ip, #14
   133f0:	e3a00001 	mov	r0, #1
   133f4:	e1a03004 	mov	r3, r4
   133f8:	e3a05000 	mov	r5, #0
   133fc:	e3a010ff 	mov	r1, #255	; 0xff
   13400:	e5842028 	str	r2, [r4, #40]	; 0x28
   13404:	e584c108 	str	ip, [r4, #264]	; 0x108
   13408:	e58400ec 	str	r0, [r4, #236]	; 0xec
   1340c:	e2842048 	add	r2, r4, #72	; 0x48
   13410:	e5835030 	str	r5, [r3, #48]	; 0x30
   13414:	e5831034 	str	r1, [r3, #52]	; 0x34
   13418:	e283300c 	add	r3, r3, #12
   1341c:	e1530002 	cmp	r3, r2
   13420:	1afffffa 	bne	13410 <CUSBGamePadPS4Device::Configure()+0x64>
   13424:	e3a00020 	mov	r0, #32
   13428:	eb005103 	bl	2783c <operator new[](unsigned int)>
   1342c:	e3a06005 	mov	r6, #5
   13430:	e3a02020 	mov	r2, #32
   13434:	e3a01000 	mov	r1, #0
   13438:	e5840140 	str	r0, [r4, #320]	; 0x140
   1343c:	eb004cc9 	bl	26768 <memset>
   13440:	e3a0e007 	mov	lr, #7
   13444:	e3a0c004 	mov	ip, #4
   13448:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
   1344c:	e3e03000 	mvn	r3, #0
   13450:	e3e0000f 	mvn	r0, #15
   13454:	e5941140 	ldr	r1, [r4, #320]	; 0x140
   13458:	e5c16000 	strb	r6, [r1]
   1345c:	e5941140 	ldr	r1, [r4, #320]	; 0x140
   13460:	e5c1e001 	strb	lr, [r1, #1]
   13464:	e5941140 	ldr	r1, [r4, #320]	; 0x140
   13468:	e5c1c002 	strb	ip, [r1, #2]
   1346c:	e2841f4d 	add	r1, r4, #308	; 0x134
   13470:	e5c40135 	strb	r0, [r4, #309]	; 0x135
   13474:	e1c150b2 	strh	r5, [r1, #2]
   13478:	e1a00004 	mov	r0, r4
   1347c:	e5842138 	str	r2, [r4, #312]	; 0x138
   13480:	e5c4313c 	strb	r3, [r4, #316]	; 0x13c
   13484:	ebffff3e 	bl	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   13488:	e2843f4e 	add	r3, r4, #312	; 0x138
   1348c:	e1c350b0 	strh	r5, [r3]
   13490:	e3a000fa 	mov	r0, #250	; 0xfa
   13494:	e5c4513a 	strb	r5, [r4, #314]	; 0x13a
   13498:	eb004c71 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
   1349c:	e1a00004 	mov	r0, r4
   134a0:	ebffff37 	bl	13184 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   134a4:	e1a00004 	mov	r0, r4
   134a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   134ac:	ea00079a 	b	1531c <CUSBHIDDevice::StartRequest()>
   134b0:	e59f1048 	ldr	r1, [pc, #72]	; 13500 <CUSBGamePadPS4Device::Configure()+0x154>
   134b4:	ebfffc42 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   134b8:	e3a00000 	mov	r0, #0
   134bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   134c0:	e3a00038 	mov	r0, #56	; 0x38
   134c4:	eb0050d6 	bl	27824 <operator new(unsigned int)>
   134c8:	e1a05000 	mov	r5, r0
   134cc:	e3a02000 	mov	r2, #0
   134d0:	e3a01001 	mov	r1, #1
   134d4:	eb00250d 	bl	1c910 <CMouseDevice::CMouseDevice(unsigned int, bool)>
   134d8:	e5845144 	str	r5, [r4, #324]	; 0x144
   134dc:	eaffffc1 	b	133e8 <CUSBGamePadPS4Device::Configure()+0x3c>
   134e0:	eb003186 	bl	1fb00 <CLogger::Get()>
   134e4:	e3a02001 	mov	r2, #1
   134e8:	e59f3014 	ldr	r3, [pc, #20]	; 13504 <CUSBGamePadPS4Device::Configure()+0x158>
   134ec:	e59f100c 	ldr	r1, [pc, #12]	; 13500 <CUSBGamePadPS4Device::Configure()+0x154>
   134f0:	eb0030c4 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   134f4:	e3a00000 	mov	r0, #0
   134f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   134fc:	0003472c 	.word	0x0003472c
   13500:	0002e408 	.word	0x0002e408
   13504:	0002e220 	.word	0x0002e220

00013508 <CUSBGamePadPS4Device::GetProperties()>:
   13508:	e3a0003f 	mov	r0, #63	; 0x3f
   1350c:	e12fff1e 	bx	lr

00013510 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   13510:	e92d4010 	push	{r4, lr}
   13514:	e1a04000 	mov	r4, r0
   13518:	e5900138 	ldr	r0, [r0, #312]	; 0x138
   1351c:	e59f3024 	ldr	r3, [pc, #36]	; 13548 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
   13520:	e3500000 	cmp	r0, #0
   13524:	e5843000 	str	r3, [r4]
   13528:	0a000000 	beq	13530 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   1352c:	eb0050c9 	bl	27858 <operator delete[](void*)>
   13530:	e3a03000 	mov	r3, #0
   13534:	e1a00004 	mov	r0, r4
   13538:	e5843138 	str	r3, [r4, #312]	; 0x138
   1353c:	eb001fcb 	bl	1b470 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   13540:	e1a00004 	mov	r0, r4
   13544:	e8bd8010 	pop	{r4, pc}
   13548:	0002e488 	.word	0x0002e488

0001354c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   1354c:	e92d4010 	push	{r4, lr}
   13550:	e1a04000 	mov	r4, r0
   13554:	ebffffed 	bl	13510 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   13558:	e1a00004 	mov	r0, r4
   1355c:	e3a01d05 	mov	r1, #320	; 0x140
   13560:	eb0050bd 	bl	2785c <operator delete(void*, unsigned int)>
   13564:	e1a00004 	mov	r0, r4
   13568:	e8bd8010 	pop	{r4, pc}

0001356c <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   1356c:	e92d4070 	push	{r4, r5, r6, lr}
   13570:	e1a04000 	mov	r4, r0
   13574:	e1a05002 	mov	r5, r2
   13578:	eb001fab 	bl	1b42c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   1357c:	e3a03000 	mov	r3, #0
   13580:	e59f1018 	ldr	r1, [pc, #24]	; 135a0 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
   13584:	e2842f4f 	add	r2, r4, #316	; 0x13c
   13588:	e5c45134 	strb	r5, [r4, #308]	; 0x134
   1358c:	e5841000 	str	r1, [r4]
   13590:	e5843138 	str	r3, [r4, #312]	; 0x138
   13594:	e1a00004 	mov	r0, r4
   13598:	e1c230b0 	strh	r3, [r2]
   1359c:	e8bd8070 	pop	{r4, r5, r6, pc}
   135a0:	0002e488 	.word	0x0002e488

000135a4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   135a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a8:	e0819002 	add	r9, r1, r2
   135ac:	e2895007 	add	r5, r9, #7
   135b0:	e1a051a5 	lsr	r5, r5, #3
   135b4:	e15501a1 	cmp	r5, r1, lsr #3
   135b8:	e24dd00c 	sub	sp, sp, #12
   135bc:	9a000035 	bls	13698 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xf4>
   135c0:	e3a07001 	mov	r7, #1
   135c4:	e3a04000 	mov	r4, #0
   135c8:	e201e007 	and	lr, r1, #7
   135cc:	e08e6002 	add	r6, lr, r2
   135d0:	e1a06617 	lsl	r6, r7, r6
   135d4:	e6ef6076 	uxtb	r6, r6
   135d8:	e1a07e17 	lsl	r7, r7, lr
   135dc:	e6ef7077 	uxtb	r7, r7
   135e0:	e246a001 	sub	sl, r6, #1
   135e4:	e1a0c1a1 	lsr	ip, r1, #3
   135e8:	e0466007 	sub	r6, r6, r7
   135ec:	e2491001 	sub	r1, r9, #1
   135f0:	e2677000 	rsb	r7, r7, #0
   135f4:	e6ef907a 	uxtb	r9, sl
   135f8:	e1a08000 	mov	r8, r0
   135fc:	e1a0300c 	mov	r3, ip
   13600:	e1a00004 	mov	r0, r4
   13604:	e1a011a1 	lsr	r1, r1, #3
   13608:	e58d9004 	str	r9, [sp, #4]
   1360c:	e6ef6076 	uxtb	r6, r6
   13610:	e6ef7077 	uxtb	r7, r7
   13614:	e26eb008 	rsb	fp, lr, #8
   13618:	ea00000d 	b	13654 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb0>
   1361c:	e15c0003 	cmp	ip, r3
   13620:	0a000015 	beq	1367c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
   13624:	e1510003 	cmp	r1, r3
   13628:	07d89001 	ldrbeq	r9, [r8, r1]
   1362c:	059da004 	ldreq	sl, [sp, #4]
   13630:	17d8a003 	ldrbne	sl, [r8, r3]
   13634:	12844008 	addne	r4, r4, #8
   13638:	0009900a 	andeq	r9, r9, sl
   1363c:	10429004 	subne	r9, r2, r4
   13640:	01800009 	orreq	r0, r0, r9
   13644:	1180091a 	orrne	r0, r0, sl, lsl r9
   13648:	e2833001 	add	r3, r3, #1
   1364c:	e1530005 	cmp	r3, r5
   13650:	0a000007 	beq	13674 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd0>
   13654:	e151000c 	cmp	r1, ip
   13658:	1affffef 	bne	1361c <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
   1365c:	e7d80003 	ldrb	r0, [r8, r3]
   13660:	e2833001 	add	r3, r3, #1
   13664:	e0000006 	and	r0, r0, r6
   13668:	e1530005 	cmp	r3, r5
   1366c:	e1a00e50 	asr	r0, r0, lr
   13670:	1afffff7 	bne	13654 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb0>
   13674:	e28dd00c 	add	sp, sp, #12
   13678:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1367c:	e7d8000c 	ldrb	r0, [r8, ip]
   13680:	e084400b 	add	r4, r4, fp
   13684:	e0000007 	and	r0, r0, r7
   13688:	e1a00e50 	asr	r0, r0, lr
   1368c:	e0429004 	sub	r9, r2, r4
   13690:	e1a00910 	lsl	r0, r0, r9
   13694:	eaffffeb 	b	13648 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
   13698:	e3a00000 	mov	r0, #0
   1369c:	e28dd00c 	add	sp, sp, #12
   136a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000136a4 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   136a4:	e92d4010 	push	{r4, lr}
   136a8:	e1a04002 	mov	r4, r2
   136ac:	ebffffbc 	bl	135a4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   136b0:	e3a03001 	mov	r3, #1
   136b4:	e2422001 	sub	r2, r2, #1
   136b8:	e0102213 	ands	r2, r0, r3, lsl r2
   136bc:	11a03413 	lslne	r3, r3, r4
   136c0:	12633000 	rsbne	r3, r3, #0
   136c4:	11800003 	orrne	r0, r0, r3
   136c8:	e8bd8010 	pop	{r4, pc}

000136cc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   136cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136d0:	e5905138 	ldr	r5, [r0, #312]	; 0x138
   136d4:	e24dd034 	sub	sp, sp, #52	; 0x34
   136d8:	e3550000 	cmp	r5, #0
   136dc:	e58d0010 	str	r0, [sp, #16]
   136e0:	0a000099 	beq	1394c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x280>
   136e4:	e59d3010 	ldr	r3, [sp, #16]
   136e8:	e2833f4f 	add	r3, r3, #316	; 0x13c
   136ec:	e1d340b0 	ldrh	r4, [r3]
   136f0:	e3540000 	cmp	r4, #0
   136f4:	0a0000f4 	beq	13acc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x400>
   136f8:	e3a09000 	mov	r9, #0
   136fc:	e59fb3e0 	ldr	fp, [pc, #992]	; 13ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x418>
   13700:	ee071a90 	vmov	s15, r1
   13704:	e1a0a009 	mov	sl, r9
   13708:	e1a07009 	mov	r7, r9
   1370c:	e1a06009 	mov	r6, r9
   13710:	e58db008 	str	fp, [sp, #8]
   13714:	e58d901c 	str	r9, [sp, #28]
   13718:	e58d9018 	str	r9, [sp, #24]
   1371c:	e58d9004 	str	r9, [sp, #4]
   13720:	e58db014 	str	fp, [sp, #20]
   13724:	e58db00c 	str	fp, [sp, #12]
   13728:	ea000007 	b	1374c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x80>
   1372c:	e3530014 	cmp	r3, #20
   13730:	058d800c 	streq	r8, [sp, #12]
   13734:	0a000002 	beq	13744 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   13738:	da000033 	ble	1380c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x140>
   1373c:	e3530024 	cmp	r3, #36	; 0x24
   13740:	01a0b008 	moveq	fp, r8
   13744:	e3540000 	cmp	r4, #0
   13748:	0a000022 	beq	137d8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x10c>
   1374c:	e1d530d0 	ldrsb	r3, [r5]
   13750:	e2038003 	and	r8, r3, #3
   13754:	e3580001 	cmp	r8, #1
   13758:	0a000055 	beq	138b4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e8>
   1375c:	e3580002 	cmp	r8, #2
   13760:	0a00004c 	beq	13898 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1cc>
   13764:	e3580000 	cmp	r8, #0
   13768:	02444001 	subeq	r4, r4, #1
   1376c:	06ff4074 	uxtheq	r4, r4
   13770:	02855001 	addeq	r5, r5, #1
   13774:	0a00000a 	beq	137a4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xd8>
   13778:	e1d580d3 	ldrsb	r8, [r5, #3]
   1377c:	e1d520d2 	ldrsb	r2, [r5, #2]
   13780:	e1d510d1 	ldrsb	r1, [r5, #1]
   13784:	e1a08808 	lsl	r8, r8, #16
   13788:	e1888402 	orr	r8, r8, r2, lsl #8
   1378c:	e1d520d4 	ldrsb	r2, [r5, #4]
   13790:	e2444005 	sub	r4, r4, #5
   13794:	e1888001 	orr	r8, r8, r1
   13798:	e6ff4074 	uxth	r4, r4
   1379c:	e1888c02 	orr	r8, r8, r2, lsl #24
   137a0:	e2855005 	add	r5, r5, #5
   137a4:	e20330fc 	and	r3, r3, #252	; 0xfc
   137a8:	e3530084 	cmp	r3, #132	; 0x84
   137ac:	0a00002c 	beq	13864 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x198>
   137b0:	e3530034 	cmp	r3, #52	; 0x34
   137b4:	0a000043 	beq	138c8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1fc>
   137b8:	daffffdb 	ble	1372c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   137bc:	e3530080 	cmp	r3, #128	; 0x80
   137c0:	0a000042 	beq	138d0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   137c4:	da000016 	ble	13824 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x158>
   137c8:	e3530094 	cmp	r3, #148	; 0x94
   137cc:	01a07008 	moveq	r7, r8
   137d0:	e3540000 	cmp	r4, #0
   137d4:	1affffdc 	bne	1374c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x80>
   137d8:	e59d3004 	ldr	r3, [sp, #4]
   137dc:	e2834007 	add	r4, r3, #7
   137e0:	e1a041a4 	lsr	r4, r4, #3
   137e4:	e6ff4074 	uxth	r4, r4
   137e8:	e59d2010 	ldr	r2, [sp, #16]
   137ec:	e59d1018 	ldr	r1, [sp, #24]
   137f0:	e2823f4b 	add	r3, r2, #300	; 0x12c
   137f4:	e5821028 	str	r1, [r2, #40]	; 0x28
   137f8:	e59d101c 	ldr	r1, [sp, #28]
   137fc:	e58210ec 	str	r1, [r2, #236]	; 0xec
   13800:	e1c340b0 	strh	r4, [r3]
   13804:	e28dd034 	add	sp, sp, #52	; 0x34
   13808:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1380c:	e3530004 	cmp	r3, #4
   13810:	1a000009 	bne	1383c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x170>
   13814:	e3590001 	cmp	r9, #1
   13818:	03580009 	cmpeq	r8, #9
   1381c:	03a09002 	moveq	r9, #2
   13820:	eaffffc7 	b	13744 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   13824:	e3530044 	cmp	r3, #68	; 0x44
   13828:	058d8008 	streq	r8, [sp, #8]
   1382c:	0affffc4 	beq	13744 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   13830:	e3530074 	cmp	r3, #116	; 0x74
   13834:	01a06008 	moveq	r6, r8
   13838:	eaffffc1 	b	13744 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   1383c:	e3530008 	cmp	r3, #8
   13840:	1affffbf 	bne	13744 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   13844:	e3580036 	cmp	r8, #54	; 0x36
   13848:	ca000028 	bgt	138f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x224>
   1384c:	e358002f 	cmp	r8, #47	; 0x2f
   13850:	ca00003a 	bgt	13940 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x274>
   13854:	e2488004 	sub	r8, r8, #4
   13858:	e3580001 	cmp	r8, #1
   1385c:	93a09001 	movls	r9, #1
   13860:	eaffffb7 	b	13744 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   13864:	e35a0000 	cmp	sl, #0
   13868:	1affffda 	bne	137d8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x10c>
   1386c:	e1a0100a 	mov	r1, sl
   13870:	e3a02008 	mov	r2, #8
   13874:	ee170a90 	vmov	r0, s15
   13878:	ebffff49 	bl	135a4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   1387c:	e3500000 	cmp	r0, #0
   13880:	11500008 	cmpne	r0, r8
   13884:	1affffde 	bne	13804 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x138>
   13888:	e3a03008 	mov	r3, #8
   1388c:	e1a0a008 	mov	sl, r8
   13890:	e58d3004 	str	r3, [sp, #4]
   13894:	eaffffaa 	b	13744 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   13898:	e5d58001 	ldrb	r8, [r5, #1]
   1389c:	e1d520d2 	ldrsb	r2, [r5, #2]
   138a0:	e2444003 	sub	r4, r4, #3
   138a4:	e6ff4074 	uxth	r4, r4
   138a8:	e1888402 	orr	r8, r8, r2, lsl #8
   138ac:	e2855003 	add	r5, r5, #3
   138b0:	eaffffbb 	b	137a4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xd8>
   138b4:	e2444002 	sub	r4, r4, #2
   138b8:	e1d580d1 	ldrsb	r8, [r5, #1]
   138bc:	e6ff4074 	uxth	r4, r4
   138c0:	e2855002 	add	r5, r5, #2
   138c4:	eaffffb6 	b	137a4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xd8>
   138c8:	e58d8014 	str	r8, [sp, #20]
   138cc:	eaffff9c 	b	13744 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   138d0:	e2088003 	and	r8, r8, #3
   138d4:	e3580002 	cmp	r8, #2
   138d8:	0a000009 	beq	13904 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x238>
   138dc:	e0020796 	mul	r2, r6, r7
   138e0:	e59d3004 	ldr	r3, [sp, #4]
   138e4:	e0833002 	add	r3, r3, r2
   138e8:	e58d3004 	str	r3, [sp, #4]
   138ec:	eaffff94 	b	13744 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   138f0:	e3580039 	cmp	r8, #57	; 0x39
   138f4:	1affff92 	bne	13744 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   138f8:	e3590001 	cmp	r9, #1
   138fc:	03a09004 	moveq	r9, #4
   13900:	eaffff8f 	b	13744 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   13904:	e3590003 	cmp	r9, #3
   13908:	0a000013 	beq	1395c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x290>
   1390c:	e3590004 	cmp	r9, #4
   13910:	0a00004a 	beq	13a40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x374>
   13914:	e3590002 	cmp	r9, #2
   13918:	e0020796 	mul	r2, r6, r7
   1391c:	1affffef 	bne	138e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   13920:	e59d8010 	ldr	r8, [sp, #16]
   13924:	ee170a90 	vmov	r0, s15
   13928:	e59d1004 	ldr	r1, [sp, #4]
   1392c:	e5887108 	str	r7, [r8, #264]	; 0x108
   13930:	ebffff1b 	bl	135a4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   13934:	e3a09001 	mov	r9, #1
   13938:	e588010c 	str	r0, [r8, #268]	; 0x10c
   1393c:	eaffffe7 	b	138e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   13940:	e3590001 	cmp	r9, #1
   13944:	03a09003 	moveq	r9, #3
   13948:	eaffff7d 	b	13744 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x78>
   1394c:	e3a020a2 	mov	r2, #162	; 0xa2
   13950:	e59f1190 	ldr	r1, [pc, #400]	; 13ae8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x41c>
   13954:	e59f0190 	ldr	r0, [pc, #400]	; 13aec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x420>
   13958:	eb002768 	bl	1d700 <assertion_failed>
   1395c:	e3570000 	cmp	r7, #0
   13960:	0a00005c 	beq	13ad8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x40c>
   13964:	e59d200c 	ldr	r2, [sp, #12]
   13968:	e59f1174 	ldr	r1, [pc, #372]	; 13ae4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x418>
   1396c:	e59d0014 	ldr	r0, [sp, #20]
   13970:	e1520001 	cmp	r2, r1
   13974:	e1a03002 	mov	r3, r2
   13978:	01a03000 	moveq	r3, r0
   1397c:	e15b0001 	cmp	fp, r1
   13980:	e59d2008 	ldr	r2, [sp, #8]
   13984:	11a0200b 	movne	r2, fp
   13988:	e59d0018 	ldr	r0, [sp, #24]
   1398c:	e59d1004 	ldr	r1, [sp, #4]
   13990:	e59dc010 	ldr	ip, [sp, #16]
   13994:	e0808080 	add	r8, r0, r0, lsl #1
   13998:	e2800001 	add	r0, r0, #1
   1399c:	e58da020 	str	sl, [sp, #32]
   139a0:	e58d5024 	str	r5, [sp, #36]	; 0x24
   139a4:	e58d4028 	str	r4, [sp, #40]	; 0x28
   139a8:	e58db02c 	str	fp, [sp, #44]	; 0x2c
   139ac:	e1a04006 	mov	r4, r6
   139b0:	e3a09000 	mov	r9, #0
   139b4:	e1a05002 	mov	r5, r2
   139b8:	e1a0b003 	mov	fp, r3
   139bc:	e1a06001 	mov	r6, r1
   139c0:	ee17aa90 	vmov	sl, s15
   139c4:	e08c8108 	add	r8, ip, r8, lsl #2
   139c8:	e58d0018 	str	r0, [sp, #24]
   139cc:	ea000009 	b	139f8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x32c>
   139d0:	ebfffef3 	bl	135a4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   139d4:	e59d3018 	ldr	r3, [sp, #24]
   139d8:	e588002c 	str	r0, [r8, #44]	; 0x2c
   139dc:	e083c009 	add	ip, r3, r9
   139e0:	e2899001 	add	r9, r9, #1
   139e4:	e359000f 	cmp	r9, #15
   139e8:	91590007 	cmpls	r9, r7
   139ec:	e0866004 	add	r6, r6, r4
   139f0:	e288800c 	add	r8, r8, #12
   139f4:	2a000008 	bcs	13a1c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x350>
   139f8:	e35b0000 	cmp	fp, #0
   139fc:	e1a02004 	mov	r2, r4
   13a00:	e1a01006 	mov	r1, r6
   13a04:	e1a0000a 	mov	r0, sl
   13a08:	e588b030 	str	fp, [r8, #48]	; 0x30
   13a0c:	e5885034 	str	r5, [r8, #52]	; 0x34
   13a10:	aaffffee 	bge	139d0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x304>
   13a14:	ebffff22 	bl	136a4 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   13a18:	eaffffed 	b	139d4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x308>
   13a1c:	e1a06004 	mov	r6, r4
   13a20:	e3a09001 	mov	r9, #1
   13a24:	e0020796 	mul	r2, r6, r7
   13a28:	e59da020 	ldr	sl, [sp, #32]
   13a2c:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   13a30:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
   13a34:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   13a38:	e58dc018 	str	ip, [sp, #24]
   13a3c:	eaffffa7 	b	138e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   13a40:	e3570000 	cmp	r7, #0
   13a44:	0a000023 	beq	13ad8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x40c>
   13a48:	e59d201c 	ldr	r2, [sp, #28]
   13a4c:	e59d0010 	ldr	r0, [sp, #16]
   13a50:	e282303c 	add	r3, r2, #60	; 0x3c
   13a54:	e59d1004 	ldr	r1, [sp, #4]
   13a58:	e0809103 	add	r9, r0, r3, lsl #2
   13a5c:	e2823001 	add	r3, r2, #1
   13a60:	e58da01c 	str	sl, [sp, #28]
   13a64:	e1a02006 	mov	r2, r6
   13a68:	e58d5020 	str	r5, [sp, #32]
   13a6c:	e3a08000 	mov	r8, #0
   13a70:	e1a05009 	mov	r5, r9
   13a74:	e1a06001 	mov	r6, r1
   13a78:	ee17aa90 	vmov	sl, s15
   13a7c:	e1a09003 	mov	r9, r3
   13a80:	e58d4024 	str	r4, [sp, #36]	; 0x24
   13a84:	e1a01006 	mov	r1, r6
   13a88:	e1a0000a 	mov	r0, sl
   13a8c:	e0894008 	add	r4, r9, r8
   13a90:	e2888001 	add	r8, r8, #1
   13a94:	ebfffec2 	bl	135a4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   13a98:	e3580005 	cmp	r8, #5
   13a9c:	91580007 	cmpls	r8, r7
   13aa0:	e0866002 	add	r6, r6, r2
   13aa4:	e4850004 	str	r0, [r5], #4
   13aa8:	3afffff5 	bcc	13a84 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3b8>
   13aac:	e1a06002 	mov	r6, r2
   13ab0:	e59da01c 	ldr	sl, [sp, #28]
   13ab4:	e3a09001 	mov	r9, #1
   13ab8:	e58d401c 	str	r4, [sp, #28]
   13abc:	e0020792 	mul	r2, r2, r7
   13ac0:	e59d5020 	ldr	r5, [sp, #32]
   13ac4:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   13ac8:	eaffff84 	b	138e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   13acc:	e58d401c 	str	r4, [sp, #28]
   13ad0:	e58d4018 	str	r4, [sp, #24]
   13ad4:	eaffff43 	b	137e8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x11c>
   13ad8:	e1a02007 	mov	r2, r7
   13adc:	e3a09001 	mov	r9, #1
   13ae0:	eaffff7e 	b	138e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x214>
   13ae4:	f8a432eb 	.word	0xf8a432eb
   13ae8:	0002e414 	.word	0x0002e414
   13aec:	0002e42c 	.word	0x0002e42c

00013af0 <CUSBGamePadStandardDevice::Configure()>:
   13af0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13af4:	e3a01021 	mov	r1, #33	; 0x21
   13af8:	e24dd080 	sub	sp, sp, #128	; 0x80
   13afc:	e1a04000 	mov	r4, r0
   13b00:	ebfffaa4 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
   13b04:	e2505000 	subs	r5, r0, #0
   13b08:	0a000003 	beq	13b1c <CUSBGamePadStandardDevice::Configure()+0x2c>
   13b0c:	e5d50007 	ldrb	r0, [r5, #7]
   13b10:	e5d53008 	ldrb	r3, [r5, #8]
   13b14:	e1900403 	orrs	r0, r0, r3, lsl #8
   13b18:	1a000006 	bne	13b38 <CUSBGamePadStandardDevice::Configure()+0x48>
   13b1c:	e1a00004 	mov	r0, r4
   13b20:	e59f1164 	ldr	r1, [pc, #356]	; 13c8c <CUSBGamePadStandardDevice::Configure()+0x19c>
   13b24:	ebfffaa6 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   13b28:	e3a05000 	mov	r5, #0
   13b2c:	e1a00005 	mov	r0, r5
   13b30:	e28dd080 	add	sp, sp, #128	; 0x80
   13b34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13b38:	e2846f4f 	add	r6, r4, #316	; 0x13c
   13b3c:	e1c600b0 	strh	r0, [r6]
   13b40:	eb004f3d 	bl	2783c <operator new[](unsigned int)>
   13b44:	e1a03000 	mov	r3, r0
   13b48:	e1a00004 	mov	r0, r4
   13b4c:	e5843138 	str	r3, [r4, #312]	; 0x138
   13b50:	ebfffa85 	bl	1256c <CUSBFunction::GetHost() const>
   13b54:	e1a07000 	mov	r7, r0
   13b58:	e1a00004 	mov	r0, r4
   13b5c:	ebfffa77 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   13b60:	e1a01000 	mov	r1, r0
   13b64:	e5d52006 	ldrb	r2, [r5, #6]
   13b68:	e1a00004 	mov	r0, r4
   13b6c:	e1d680b0 	ldrh	r8, [r6]
   13b70:	e5945138 	ldr	r5, [r4, #312]	; 0x138
   13b74:	e58d1014 	str	r1, [sp, #20]
   13b78:	e58d2010 	str	r2, [sp, #16]
   13b7c:	ebfffad6 	bl	126dc <CUSBFunction::GetInterfaceNumber() const>
   13b80:	e3a0c081 	mov	ip, #129	; 0x81
   13b84:	e6ff3070 	uxth	r3, r0
   13b88:	e58d300c 	str	r3, [sp, #12]
   13b8c:	e1a00007 	mov	r0, r7
   13b90:	e3a03000 	mov	r3, #0
   13b94:	e59d1014 	ldr	r1, [sp, #20]
   13b98:	e59d2010 	ldr	r2, [sp, #16]
   13b9c:	e58d8004 	str	r8, [sp, #4]
   13ba0:	e58d5000 	str	r5, [sp]
   13ba4:	e58dc008 	str	ip, [sp, #8]
   13ba8:	ebffd54a 	bl	90d8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   13bac:	e1d630b0 	ldrh	r3, [r6]
   13bb0:	e1500003 	cmp	r0, r3
   13bb4:	1a000021 	bne	13c40 <CUSBGamePadStandardDevice::Configure()+0x150>
   13bb8:	e3a01000 	mov	r1, #0
   13bbc:	e3a02060 	mov	r2, #96	; 0x60
   13bc0:	e28d0020 	add	r0, sp, #32
   13bc4:	e58d101c 	str	r1, [sp, #28]
   13bc8:	eb004ae6 	bl	26768 <memset>
   13bcc:	e5943000 	ldr	r3, [r4]
   13bd0:	e1a00004 	mov	r0, r4
   13bd4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   13bd8:	e28d101c 	add	r1, sp, #28
   13bdc:	e12fff33 	blx	r3
   13be0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   13be4:	e3530000 	cmp	r3, #0
   13be8:	1a000005 	bne	13c04 <CUSBGamePadStandardDevice::Configure()+0x114>
   13bec:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   13bf0:	e3530000 	cmp	r3, #0
   13bf4:	1a000002 	bne	13c04 <CUSBGamePadStandardDevice::Configure()+0x114>
   13bf8:	e5945108 	ldr	r5, [r4, #264]	; 0x108
   13bfc:	e3550000 	cmp	r5, #0
   13c00:	0affffc9 	beq	13b2c <CUSBGamePadStandardDevice::Configure()+0x3c>
   13c04:	e2843f4b 	add	r3, r4, #300	; 0x12c
   13c08:	e1d330b0 	ldrh	r3, [r3]
   13c0c:	e3530000 	cmp	r3, #0
   13c10:	0a000019 	beq	13c7c <CUSBGamePadStandardDevice::Configure()+0x18c>
   13c14:	e1a00004 	mov	r0, r4
   13c18:	eb001dd1 	bl	1b364 <CUSBGamePadDevice::Configure()>
   13c1c:	e2505000 	subs	r5, r0, #0
   13c20:	0a00000f 	beq	13c64 <CUSBGamePadStandardDevice::Configure()+0x174>
   13c24:	e5d43134 	ldrb	r3, [r4, #308]	; 0x134
   13c28:	e3530000 	cmp	r3, #0
   13c2c:	0affffbe 	beq	13b2c <CUSBGamePadStandardDevice::Configure()+0x3c>
   13c30:	e1a00004 	mov	r0, r4
   13c34:	eb0005b8 	bl	1531c <CUSBHIDDevice::StartRequest()>
   13c38:	e1a05000 	mov	r5, r0
   13c3c:	eaffffba 	b	13b2c <CUSBGamePadStandardDevice::Configure()+0x3c>
   13c40:	e3a05000 	mov	r5, #0
   13c44:	eb002fad 	bl	1fb00 <CLogger::Get()>
   13c48:	e3a02001 	mov	r2, #1
   13c4c:	e59f303c 	ldr	r3, [pc, #60]	; 13c90 <CUSBGamePadStandardDevice::Configure()+0x1a0>
   13c50:	e59f1034 	ldr	r1, [pc, #52]	; 13c8c <CUSBGamePadStandardDevice::Configure()+0x19c>
   13c54:	eb002eeb 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13c58:	e1a00005 	mov	r0, r5
   13c5c:	e28dd080 	add	sp, sp, #128	; 0x80
   13c60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13c64:	eb002fa5 	bl	1fb00 <CLogger::Get()>
   13c68:	e3a02001 	mov	r2, #1
   13c6c:	e59f3020 	ldr	r3, [pc, #32]	; 13c94 <CUSBGamePadStandardDevice::Configure()+0x1a4>
   13c70:	e59f1014 	ldr	r1, [pc, #20]	; 13c8c <CUSBGamePadStandardDevice::Configure()+0x19c>
   13c74:	eb002ee3 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13c78:	eaffffab 	b	13b2c <CUSBGamePadStandardDevice::Configure()+0x3c>
   13c7c:	e3a02085 	mov	r2, #133	; 0x85
   13c80:	e59f1010 	ldr	r1, [pc, #16]	; 13c98 <CUSBGamePadStandardDevice::Configure()+0x1a8>
   13c84:	e59f0010 	ldr	r0, [pc, #16]	; 13c9c <CUSBGamePadStandardDevice::Configure()+0x1ac>
   13c88:	eb00269c 	bl	1d700 <assertion_failed>
   13c8c:	0002e4cc 	.word	0x0002e4cc
   13c90:	0002e448 	.word	0x0002e448
   13c94:	0002e220 	.word	0x0002e220
   13c98:	0002e414 	.word	0x0002e414
   13c9c:	0002e46c 	.word	0x0002e46c

00013ca0 <CUSBGamePadDevice::GetProperties()>:
   13ca0:	e3a00000 	mov	r0, #0
   13ca4:	e12fff1e 	bx	lr

00013ca8 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   13ca8:	e3a00000 	mov	r0, #0
   13cac:	e12fff1e 	bx	lr

00013cb0 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   13cb0:	e3a00000 	mov	r0, #0
   13cb4:	e12fff1e 	bx	lr

00013cb8 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   13cb8:	e92d4010 	push	{r4, lr}
   13cbc:	e1a04000 	mov	r4, r0
   13cc0:	e59f300c 	ldr	r3, [pc, #12]	; 13cd4 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   13cc4:	e5803000 	str	r3, [r0]
   13cc8:	eb001de8 	bl	1b470 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   13ccc:	e1a00004 	mov	r0, r4
   13cd0:	e8bd8010 	pop	{r4, pc}
   13cd4:	0002e5dc 	.word	0x0002e5dc

00013cd8 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   13cd8:	e92d4010 	push	{r4, lr}
   13cdc:	e1a04000 	mov	r4, r0
   13ce0:	e59f3018 	ldr	r3, [pc, #24]	; 13d00 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   13ce4:	e5803000 	str	r3, [r0]
   13ce8:	eb001de0 	bl	1b470 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   13cec:	e1a00004 	mov	r0, r4
   13cf0:	e3a01f4e 	mov	r1, #312	; 0x138
   13cf4:	eb004ed8 	bl	2785c <operator delete(void*, unsigned int)>
   13cf8:	e1a00004 	mov	r0, r4
   13cfc:	e8bd8010 	pop	{r4, pc}
   13d00:	0002e5dc 	.word	0x0002e5dc

00013d04 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   13d04:	e92d4010 	push	{r4, lr}
   13d08:	e5d13000 	ldrb	r3, [r1]
   13d0c:	e1a04001 	mov	r4, r1
   13d10:	e3530030 	cmp	r3, #48	; 0x30
   13d14:	e24dd008 	sub	sp, sp, #8
   13d18:	1a00006e 	bne	13ed8 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1d4>
   13d1c:	e3a03000 	mov	r3, #0
   13d20:	e580310c 	str	r3, [r0, #268]	; 0x10c
   13d24:	e5d13003 	ldrb	r3, [r1, #3]
   13d28:	e3130001 	tst	r3, #1
   13d2c:	13a03080 	movne	r3, #128	; 0x80
   13d30:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13d34:	15d13003 	ldrbne	r3, [r1, #3]
   13d38:	e3130002 	tst	r3, #2
   13d3c:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13d40:	13833b01 	orrne	r3, r3, #1024	; 0x400
   13d44:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13d48:	15d13003 	ldrbne	r3, [r1, #3]
   13d4c:	e3130004 	tst	r3, #4
   13d50:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13d54:	13833c01 	orrne	r3, r3, #256	; 0x100
   13d58:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13d5c:	15d13003 	ldrbne	r3, [r1, #3]
   13d60:	e3130008 	tst	r3, #8
   13d64:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13d68:	13833c02 	orrne	r3, r3, #512	; 0x200
   13d6c:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13d70:	15d13003 	ldrbne	r3, [r1, #3]
   13d74:	e3130040 	tst	r3, #64	; 0x40
   13d78:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13d7c:	13833040 	orrne	r3, r3, #64	; 0x40
   13d80:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13d84:	15d13003 	ldrbne	r3, [r1, #3]
   13d88:	e3130080 	tst	r3, #128	; 0x80
   13d8c:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13d90:	13833010 	orrne	r3, r3, #16
   13d94:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13d98:	e5d13004 	ldrb	r3, [r1, #4]
   13d9c:	e3130001 	tst	r3, #1
   13da0:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13da4:	13833702 	orrne	r3, r3, #524288	; 0x80000
   13da8:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13dac:	15d13004 	ldrbne	r3, [r1, #4]
   13db0:	e3130002 	tst	r3, #2
   13db4:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13db8:	13833601 	orrne	r3, r3, #1048576	; 0x100000
   13dbc:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13dc0:	15d13004 	ldrbne	r3, [r1, #4]
   13dc4:	e3130004 	tst	r3, #4
   13dc8:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13dcc:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   13dd0:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13dd4:	15d13004 	ldrbne	r3, [r1, #4]
   13dd8:	e3130008 	tst	r3, #8
   13ddc:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13de0:	13833a01 	orrne	r3, r3, #4096	; 0x1000
   13de4:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13de8:	15d13004 	ldrbne	r3, [r1, #4]
   13dec:	e3130010 	tst	r3, #16
   13df0:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13df4:	13833001 	orrne	r3, r3, #1
   13df8:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13dfc:	15d13004 	ldrbne	r3, [r1, #4]
   13e00:	e3130020 	tst	r3, #32
   13e04:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13e08:	13833b02 	orrne	r3, r3, #2048	; 0x800
   13e0c:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13e10:	e5d13005 	ldrb	r3, [r1, #5]
   13e14:	e3130001 	tst	r3, #1
   13e18:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13e1c:	13833802 	orrne	r3, r3, #131072	; 0x20000
   13e20:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13e24:	15d13005 	ldrbne	r3, [r1, #5]
   13e28:	e3130002 	tst	r3, #2
   13e2c:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13e30:	13833902 	orrne	r3, r3, #32768	; 0x8000
   13e34:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13e38:	15d13005 	ldrbne	r3, [r1, #5]
   13e3c:	e3130004 	tst	r3, #4
   13e40:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13e44:	13833801 	orrne	r3, r3, #65536	; 0x10000
   13e48:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13e4c:	15d13005 	ldrbne	r3, [r1, #5]
   13e50:	e3130008 	tst	r3, #8
   13e54:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13e58:	13833701 	orrne	r3, r3, #262144	; 0x40000
   13e5c:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13e60:	15d13005 	ldrbne	r3, [r1, #5]
   13e64:	e3130040 	tst	r3, #64	; 0x40
   13e68:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13e6c:	13833020 	orrne	r3, r3, #32
   13e70:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13e74:	15d13005 	ldrbne	r3, [r1, #5]
   13e78:	e3130080 	tst	r3, #128	; 0x80
   13e7c:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   13e80:	13833008 	orrne	r3, r3, #8
   13e84:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   13e88:	e5d12007 	ldrb	r2, [r1, #7]
   13e8c:	e5d13006 	ldrb	r3, [r1, #6]
   13e90:	e1833402 	orr	r3, r3, r2, lsl #8
   13e94:	e1a03243 	asr	r3, r3, #4
   13e98:	e6ef3073 	uxtb	r3, r3
   13e9c:	e580302c 	str	r3, [r0, #44]	; 0x2c
   13ea0:	e5d13008 	ldrb	r3, [r1, #8]
   13ea4:	e26330ff 	rsb	r3, r3, #255	; 0xff
   13ea8:	e5803038 	str	r3, [r0, #56]	; 0x38
   13eac:	e5d13009 	ldrb	r3, [r1, #9]
   13eb0:	e5d1200a 	ldrb	r2, [r1, #10]
   13eb4:	e1833402 	orr	r3, r3, r2, lsl #8
   13eb8:	e1a03243 	asr	r3, r3, #4
   13ebc:	e6ef3073 	uxtb	r3, r3
   13ec0:	e5803044 	str	r3, [r0, #68]	; 0x44
   13ec4:	e5d1300b 	ldrb	r3, [r1, #11]
   13ec8:	e26330ff 	rsb	r3, r3, #255	; 0xff
   13ecc:	e5803050 	str	r3, [r0, #80]	; 0x50
   13ed0:	e28dd008 	add	sp, sp, #8
   13ed4:	e8bd8010 	pop	{r4, pc}
   13ed8:	eb002f08 	bl	1fb00 <CLogger::Get()>
   13edc:	e5d42000 	ldrb	r2, [r4]
   13ee0:	e59f3014 	ldr	r3, [pc, #20]	; 13efc <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1f8>
   13ee4:	e58d2000 	str	r2, [sp]
   13ee8:	e59f1010 	ldr	r1, [pc, #16]	; 13f00 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1fc>
   13eec:	e3a02003 	mov	r2, #3
   13ef0:	eb002e44 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13ef4:	e28dd008 	add	sp, sp, #8
   13ef8:	e8bd8010 	pop	{r4, pc}
   13efc:	0002e4d8 	.word	0x0002e4d8
   13f00:	0002e620 	.word	0x0002e620

00013f04 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   13f04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13f08:	e24dd038 	sub	sp, sp, #56	; 0x38
   13f0c:	e28dc01f 	add	ip, sp, #31
   13f10:	e3ccc01f 	bic	ip, ip, #31
   13f14:	e1a0400c 	mov	r4, ip
   13f18:	e3a0e000 	mov	lr, #0
   13f1c:	e1a05000 	mov	r5, r0
   13f20:	e1a08001 	mov	r8, r1
   13f24:	e59f607c 	ldr	r6, [pc, #124]	; 13fa8 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0xa4>
   13f28:	e5d07135 	ldrb	r7, [r0, #309]	; 0x135
   13f2c:	e896000f 	ldm	r6, {r0, r1, r2, r3}
   13f30:	e8a40007 	stmia	r4!, {r0, r1, r2}
   13f34:	e2872001 	add	r2, r7, #1
   13f38:	e5c43000 	strb	r3, [r4]
   13f3c:	e5c52135 	strb	r2, [r5, #309]	; 0x135
   13f40:	e1a00005 	mov	r0, r5
   13f44:	e1a0100c 	mov	r1, ip
   13f48:	e1a0300e 	mov	r3, lr
   13f4c:	e3a0200c 	mov	r2, #12
   13f50:	e207700f 	and	r7, r7, #15
   13f54:	e58ce019 	str	lr, [ip, #25]
   13f58:	e5cc7001 	strb	r7, [ip, #1]
   13f5c:	e5cc800b 	strb	r8, [ip, #11]
   13f60:	e58ce00d 	str	lr, [ip, #13]
   13f64:	e58ce011 	str	lr, [ip, #17]
   13f68:	e58ce015 	str	lr, [ip, #21]
   13f6c:	e58ce01c 	str	lr, [ip, #28]
   13f70:	eb000468 	bl	15118 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   13f74:	e2504000 	subs	r4, r0, #0
   13f78:	0a000002 	beq	13f88 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x84>
   13f7c:	e1a00004 	mov	r0, r4
   13f80:	e28dd038 	add	sp, sp, #56	; 0x38
   13f84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13f88:	eb002edc 	bl	1fb00 <CLogger::Get()>
   13f8c:	e3a02001 	mov	r2, #1
   13f90:	e59f3014 	ldr	r3, [pc, #20]	; 13fac <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0xa8>
   13f94:	e2461010 	sub	r1, r6, #16
   13f98:	eb002e1a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13f9c:	e1a00004 	mov	r0, r4
   13fa0:	e28dd038 	add	sp, sp, #56	; 0x38
   13fa4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13fa8:	0002e630 	.word	0x0002e630
   13fac:	0002e4f4 	.word	0x0002e4f4

00013fb0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   13fb0:	e1a02001 	mov	r2, r1
   13fb4:	e3a03000 	mov	r3, #0
   13fb8:	e92d4010 	push	{r4, lr}
   13fbc:	e24dd038 	sub	sp, sp, #56	; 0x38
   13fc0:	e59f10c4 	ldr	r1, [pc, #196]	; 1408c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xdc>
   13fc4:	e28dc01f 	add	ip, sp, #31
   13fc8:	e3ccc01f 	bic	ip, ip, #31
   13fcc:	e3520001 	cmp	r2, #1
   13fd0:	e1a0e000 	mov	lr, r0
   13fd4:	e8910003 	ldm	r1, {r0, r1}
   13fd8:	e58c3008 	str	r3, [ip, #8]
   13fdc:	e88c0003 	stm	ip, {r0, r1}
   13fe0:	e58c300c 	str	r3, [ip, #12]
   13fe4:	e58c3010 	str	r3, [ip, #16]
   13fe8:	e58c3014 	str	r3, [ip, #20]
   13fec:	e58c3018 	str	r3, [ip, #24]
   13ff0:	e58c301c 	str	r3, [ip, #28]
   13ff4:	0a00001f 	beq	14078 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc8>
   13ff8:	e3520002 	cmp	r2, #2
   13ffc:	0a000005 	beq	14018 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x68>
   14000:	e1520003 	cmp	r2, r3
   14004:	13a04001 	movne	r4, #1
   14008:	0a000006 	beq	14028 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x78>
   1400c:	e1a00004 	mov	r0, r4
   14010:	e28dd038 	add	sp, sp, #56	; 0x38
   14014:	e8bd8010 	pop	{r4, pc}
   14018:	e3a02d82 	mov	r2, #8320	; 0x2080
   1401c:	e3e0309d 	mvn	r3, #157	; 0x9d
   14020:	e1cc20b2 	strh	r2, [ip, #2]
   14024:	e1cc30b4 	strh	r3, [ip, #4]
   14028:	e5de3135 	ldrb	r3, [lr, #309]	; 0x135
   1402c:	e1a0100c 	mov	r1, ip
   14030:	e2832001 	add	r2, r3, #1
   14034:	e203400f 	and	r4, r3, #15
   14038:	e5ce2135 	strb	r2, [lr, #309]	; 0x135
   1403c:	e1a0000e 	mov	r0, lr
   14040:	e3a03000 	mov	r3, #0
   14044:	e3a0200a 	mov	r2, #10
   14048:	e5cc4001 	strb	r4, [ip, #1]
   1404c:	eb000431 	bl	15118 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   14050:	e2504000 	subs	r4, r0, #0
   14054:	1affffec 	bne	1400c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x5c>
   14058:	eb002ea8 	bl	1fb00 <CLogger::Get()>
   1405c:	e3a02001 	mov	r2, #1
   14060:	e59f3028 	ldr	r3, [pc, #40]	; 14090 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe0>
   14064:	e59f1028 	ldr	r1, [pc, #40]	; 14094 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe4>
   14068:	eb002de6 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1406c:	e1a00004 	mov	r0, r4
   14070:	e28dd038 	add	sp, sp, #56	; 0x38
   14074:	e8bd8010 	pop	{r4, pc}
   14078:	e3e0209d 	mvn	r2, #157	; 0x9d
   1407c:	e59f3014 	ldr	r3, [pc, #20]	; 14098 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe8>
   14080:	e1cc20b8 	strh	r2, [ip, #8]
   14084:	e1cc30b6 	strh	r3, [ip, #6]
   14088:	eaffffe6 	b	14028 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x78>
   1408c:	0002e650 	.word	0x0002e650
   14090:	0002e508 	.word	0x0002e508
   14094:	0002e620 	.word	0x0002e620
   14098:	00002098 	.word	0x00002098

0001409c <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   1409c:	e92d4010 	push	{r4, lr}
   140a0:	e1a04000 	mov	r4, r0
   140a4:	eb001ce0 	bl	1b42c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   140a8:	e3a03000 	mov	r3, #0
   140ac:	e59f2024 	ldr	r2, [pc, #36]	; 140d8 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   140b0:	e1a00004 	mov	r0, r4
   140b4:	e5842000 	str	r2, [r4]
   140b8:	e3a01003 	mov	r1, #3
   140bc:	e1a02003 	mov	r2, r3
   140c0:	ebfff952 	bl	12610 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   140c4:	e3a03000 	mov	r3, #0
   140c8:	e5c40134 	strb	r0, [r4, #308]	; 0x134
   140cc:	e5c43135 	strb	r3, [r4, #309]	; 0x135
   140d0:	e1a00004 	mov	r0, r4
   140d4:	e8bd8010 	pop	{r4, pc}
   140d8:	0002e5dc 	.word	0x0002e5dc

000140dc <CUSBGamePadSwitchProDevice::Configure()>:
   140dc:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   140e0:	e28db01c 	add	fp, sp, #28
   140e4:	e24dd078 	sub	sp, sp, #120	; 0x78
   140e8:	e5d06134 	ldrb	r6, [r0, #308]	; 0x134
   140ec:	e3560000 	cmp	r6, #0
   140f0:	0a00006d 	beq	142ac <CUSBGamePadSwitchProDevice::Configure()+0x1d0>
   140f4:	e3a03040 	mov	r3, #64	; 0x40
   140f8:	e2809f4b 	add	r9, r0, #300	; 0x12c
   140fc:	e1c930b0 	strh	r3, [r9]
   14100:	e1a04000 	mov	r4, r0
   14104:	eb001c96 	bl	1b364 <CUSBGamePadDevice::Configure()>
   14108:	e2506000 	subs	r6, r0, #0
   1410c:	0a000073 	beq	142e0 <CUSBGamePadSwitchProDevice::Configure()+0x204>
   14110:	e3a03012 	mov	r3, #18
   14114:	e3a05000 	mov	r5, #0
   14118:	e3a000ff 	mov	r0, #255	; 0xff
   1411c:	e3a0c004 	mov	ip, #4
   14120:	e1d920b0 	ldrh	r2, [r9]
   14124:	e5843108 	str	r3, [r4, #264]	; 0x108
   14128:	e2423001 	sub	r3, r2, #1
   1412c:	e383301f 	orr	r3, r3, #31
   14130:	e2833020 	add	r3, r3, #32
   14134:	e3c33007 	bic	r3, r3, #7
   14138:	e04dd003 	sub	sp, sp, r3
   1413c:	e28d801f 	add	r8, sp, #31
   14140:	e3c8801f 	bic	r8, r8, #31
   14144:	e1a01008 	mov	r1, r8
   14148:	e1a03005 	mov	r3, r5
   1414c:	e584c028 	str	ip, [r4, #40]	; 0x28
   14150:	e5840034 	str	r0, [r4, #52]	; 0x34
   14154:	e5840040 	str	r0, [r4, #64]	; 0x40
   14158:	e584004c 	str	r0, [r4, #76]	; 0x4c
   1415c:	e5840058 	str	r0, [r4, #88]	; 0x58
   14160:	e58450ec 	str	r5, [r4, #236]	; 0xec
   14164:	e1a00004 	mov	r0, r4
   14168:	e5845030 	str	r5, [r4, #48]	; 0x30
   1416c:	e584503c 	str	r5, [r4, #60]	; 0x3c
   14170:	e5845048 	str	r5, [r4, #72]	; 0x48
   14174:	e5845054 	str	r5, [r4, #84]	; 0x54
   14178:	eb000442 	bl	15288 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   1417c:	e3a0cd0e 	mov	ip, #896	; 0x380
   14180:	e24b7075 	sub	r7, fp, #117	; 0x75
   14184:	e3c7701f 	bic	r7, r7, #31
   14188:	e1a03005 	mov	r3, r5
   1418c:	e3a02002 	mov	r2, #2
   14190:	e1a00004 	mov	r0, r4
   14194:	e2871040 	add	r1, r7, #64	; 0x40
   14198:	e5875044 	str	r5, [r7, #68]	; 0x44
   1419c:	e5875048 	str	r5, [r7, #72]	; 0x48
   141a0:	e587504c 	str	r5, [r7, #76]	; 0x4c
   141a4:	e5875050 	str	r5, [r7, #80]	; 0x50
   141a8:	e5875054 	str	r5, [r7, #84]	; 0x54
   141ac:	e5875058 	str	r5, [r7, #88]	; 0x58
   141b0:	e587505c 	str	r5, [r7, #92]	; 0x5c
   141b4:	e587c040 	str	ip, [r7, #64]	; 0x40
   141b8:	eb0003d6 	bl	15118 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   141bc:	e2506000 	subs	r6, r0, #0
   141c0:	0a00003e 	beq	142c0 <CUSBGamePadSwitchProDevice::Configure()+0x1e4>
   141c4:	e1a03005 	mov	r3, r5
   141c8:	e1a01008 	mov	r1, r8
   141cc:	e1a00004 	mov	r0, r4
   141d0:	e1d920b0 	ldrh	r2, [r9]
   141d4:	eb00042b 	bl	15288 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   141d8:	e3500000 	cmp	r0, #0
   141dc:	da000047 	ble	14300 <CUSBGamePadSwitchProDevice::Configure()+0x224>
   141e0:	e5d83000 	ldrb	r3, [r8]
   141e4:	e3530081 	cmp	r3, #129	; 0x81
   141e8:	1a000026 	bne	14288 <CUSBGamePadSwitchProDevice::Configure()+0x1ac>
   141ec:	e5d83001 	ldrb	r3, [r8, #1]
   141f0:	e3530003 	cmp	r3, #3
   141f4:	1a000023 	bne	14288 <CUSBGamePadSwitchProDevice::Configure()+0x1ac>
   141f8:	e3a00d0a 	mov	r0, #640	; 0x280
   141fc:	e1a03005 	mov	r3, r5
   14200:	e5870020 	str	r0, [r7, #32]
   14204:	e3a02002 	mov	r2, #2
   14208:	e1a00004 	mov	r0, r4
   1420c:	e2871020 	add	r1, r7, #32
   14210:	e5875024 	str	r5, [r7, #36]	; 0x24
   14214:	e5875028 	str	r5, [r7, #40]	; 0x28
   14218:	e587502c 	str	r5, [r7, #44]	; 0x2c
   1421c:	e5875030 	str	r5, [r7, #48]	; 0x30
   14220:	e5875034 	str	r5, [r7, #52]	; 0x34
   14224:	e5875038 	str	r5, [r7, #56]	; 0x38
   14228:	e587503c 	str	r5, [r7, #60]	; 0x3c
   1422c:	eb0003b9 	bl	15118 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   14230:	e2506000 	subs	r6, r0, #0
   14234:	0a000038 	beq	1431c <CUSBGamePadSwitchProDevice::Configure()+0x240>
   14238:	e1a03005 	mov	r3, r5
   1423c:	e1a01008 	mov	r1, r8
   14240:	e1a00004 	mov	r0, r4
   14244:	e1d920b0 	ldrh	r2, [r9]
   14248:	eb00040e 	bl	15288 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   1424c:	e3500000 	cmp	r0, #0
   14250:	da000059 	ble	143bc <CUSBGamePadSwitchProDevice::Configure()+0x2e0>
   14254:	e5d83000 	ldrb	r3, [r8]
   14258:	e3530081 	cmp	r3, #129	; 0x81
   1425c:	1a000002 	bne	1426c <CUSBGamePadSwitchProDevice::Configure()+0x190>
   14260:	e5d83001 	ldrb	r3, [r8, #1]
   14264:	e3530002 	cmp	r3, #2
   14268:	0a000031 	beq	14334 <CUSBGamePadSwitchProDevice::Configure()+0x258>
   1426c:	eb002e23 	bl	1fb00 <CLogger::Get()>
   14270:	e3a02001 	mov	r2, #1
   14274:	e59f318c 	ldr	r3, [pc, #396]	; 14408 <CUSBGamePadSwitchProDevice::Configure()+0x32c>
   14278:	e59f118c 	ldr	r1, [pc, #396]	; 1440c <CUSBGamePadSwitchProDevice::Configure()+0x330>
   1427c:	eb002d61 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14280:	e3a06000 	mov	r6, #0
   14284:	ea000005 	b	142a0 <CUSBGamePadSwitchProDevice::Configure()+0x1c4>
   14288:	eb002e1c 	bl	1fb00 <CLogger::Get()>
   1428c:	e3a02001 	mov	r2, #1
   14290:	e59f3178 	ldr	r3, [pc, #376]	; 14410 <CUSBGamePadSwitchProDevice::Configure()+0x334>
   14294:	e59f1170 	ldr	r1, [pc, #368]	; 1440c <CUSBGamePadSwitchProDevice::Configure()+0x330>
   14298:	eb002d5a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1429c:	e3a06000 	mov	r6, #0
   142a0:	e1a00006 	mov	r0, r6
   142a4:	e24bd01c 	sub	sp, fp, #28
   142a8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   142ac:	e59f1158 	ldr	r1, [pc, #344]	; 1440c <CUSBGamePadSwitchProDevice::Configure()+0x330>
   142b0:	ebfff8c3 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   142b4:	e1a00006 	mov	r0, r6
   142b8:	e24bd01c 	sub	sp, fp, #28
   142bc:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   142c0:	eb002e0e 	bl	1fb00 <CLogger::Get()>
   142c4:	e3a02001 	mov	r2, #1
   142c8:	e59f3140 	ldr	r3, [pc, #320]	; 14410 <CUSBGamePadSwitchProDevice::Configure()+0x334>
   142cc:	e59f1138 	ldr	r1, [pc, #312]	; 1440c <CUSBGamePadSwitchProDevice::Configure()+0x330>
   142d0:	eb002d4c 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   142d4:	e1a00006 	mov	r0, r6
   142d8:	e24bd01c 	sub	sp, fp, #28
   142dc:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   142e0:	eb002e06 	bl	1fb00 <CLogger::Get()>
   142e4:	e3a02001 	mov	r2, #1
   142e8:	e59f3124 	ldr	r3, [pc, #292]	; 14414 <CUSBGamePadSwitchProDevice::Configure()+0x338>
   142ec:	e59f1118 	ldr	r1, [pc, #280]	; 1440c <CUSBGamePadSwitchProDevice::Configure()+0x330>
   142f0:	eb002d44 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   142f4:	e1a00006 	mov	r0, r6
   142f8:	e24bd01c 	sub	sp, fp, #28
   142fc:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14300:	eb002dfe 	bl	1fb00 <CLogger::Get()>
   14304:	e3a02001 	mov	r2, #1
   14308:	e59f3108 	ldr	r3, [pc, #264]	; 14418 <CUSBGamePadSwitchProDevice::Configure()+0x33c>
   1430c:	e59f10f8 	ldr	r1, [pc, #248]	; 1440c <CUSBGamePadSwitchProDevice::Configure()+0x330>
   14310:	e1a06005 	mov	r6, r5
   14314:	eb002d3b 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14318:	eaffffe0 	b	142a0 <CUSBGamePadSwitchProDevice::Configure()+0x1c4>
   1431c:	eb002df7 	bl	1fb00 <CLogger::Get()>
   14320:	e3a02001 	mov	r2, #1
   14324:	e59f30dc 	ldr	r3, [pc, #220]	; 14408 <CUSBGamePadSwitchProDevice::Configure()+0x32c>
   14328:	e59f10dc 	ldr	r1, [pc, #220]	; 1440c <CUSBGamePadSwitchProDevice::Configure()+0x330>
   1432c:	eb002d35 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14330:	eaffffda 	b	142a0 <CUSBGamePadSwitchProDevice::Configure()+0x1c4>
   14334:	e1a00007 	mov	r0, r7
   14338:	e3a03d12 	mov	r3, #1152	; 0x480
   1433c:	e3a05000 	mov	r5, #0
   14340:	e4803004 	str	r3, [r0], #4
   14344:	e5805004 	str	r5, [r0, #4]
   14348:	e5805008 	str	r5, [r0, #8]
   1434c:	e580500c 	str	r5, [r0, #12]
   14350:	e5805010 	str	r5, [r0, #16]
   14354:	e5805014 	str	r5, [r0, #20]
   14358:	e5805018 	str	r5, [r0, #24]
   1435c:	e1a01007 	mov	r1, r7
   14360:	e1a03005 	mov	r3, r5
   14364:	e3a02002 	mov	r2, #2
   14368:	e1a00004 	mov	r0, r4
   1436c:	e5875004 	str	r5, [r7, #4]
   14370:	eb000368 	bl	15118 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   14374:	e2506000 	subs	r6, r0, #0
   14378:	0a00001c 	beq	143f0 <CUSBGamePadSwitchProDevice::Configure()+0x314>
   1437c:	e5943000 	ldr	r3, [r4]
   14380:	e5d41130 	ldrb	r1, [r4, #304]	; 0x130
   14384:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   14388:	e1a00004 	mov	r0, r4
   1438c:	e12fff33 	blx	r3
   14390:	e1a03005 	mov	r3, r5
   14394:	e1a01008 	mov	r1, r8
   14398:	e1a00004 	mov	r0, r4
   1439c:	e1d920b0 	ldrh	r2, [r9]
   143a0:	eb0003b8 	bl	15288 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   143a4:	e3500000 	cmp	r0, #0
   143a8:	da00000a 	ble	143d8 <CUSBGamePadSwitchProDevice::Configure()+0x2fc>
   143ac:	e1a00004 	mov	r0, r4
   143b0:	eb0003d9 	bl	1531c <CUSBHIDDevice::StartRequest()>
   143b4:	e1a06000 	mov	r6, r0
   143b8:	eaffffb8 	b	142a0 <CUSBGamePadSwitchProDevice::Configure()+0x1c4>
   143bc:	eb002dcf 	bl	1fb00 <CLogger::Get()>
   143c0:	e3a02001 	mov	r2, #1
   143c4:	e59f3050 	ldr	r3, [pc, #80]	; 1441c <CUSBGamePadSwitchProDevice::Configure()+0x340>
   143c8:	e59f103c 	ldr	r1, [pc, #60]	; 1440c <CUSBGamePadSwitchProDevice::Configure()+0x330>
   143cc:	e1a06005 	mov	r6, r5
   143d0:	eb002d0c 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   143d4:	eaffffb1 	b	142a0 <CUSBGamePadSwitchProDevice::Configure()+0x1c4>
   143d8:	eb002dc8 	bl	1fb00 <CLogger::Get()>
   143dc:	e3a02001 	mov	r2, #1
   143e0:	e59f3038 	ldr	r3, [pc, #56]	; 14420 <CUSBGamePadSwitchProDevice::Configure()+0x344>
   143e4:	e59f1020 	ldr	r1, [pc, #32]	; 1440c <CUSBGamePadSwitchProDevice::Configure()+0x330>
   143e8:	eb002d06 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   143ec:	eaffffee 	b	143ac <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   143f0:	eb002dc2 	bl	1fb00 <CLogger::Get()>
   143f4:	e3a02001 	mov	r2, #1
   143f8:	e59f3024 	ldr	r3, [pc, #36]	; 14424 <CUSBGamePadSwitchProDevice::Configure()+0x348>
   143fc:	e59f1008 	ldr	r1, [pc, #8]	; 1440c <CUSBGamePadSwitchProDevice::Configure()+0x330>
   14400:	eb002d00 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14404:	eaffffa5 	b	142a0 <CUSBGamePadSwitchProDevice::Configure()+0x1c4>
   14408:	0002e560 	.word	0x0002e560
   1440c:	0002e620 	.word	0x0002e620
   14410:	0002e520 	.word	0x0002e520
   14414:	0002e220 	.word	0x0002e220
   14418:	0002e540 	.word	0x0002e540
   1441c:	0002e57c 	.word	0x0002e57c
   14420:	0002e5b8 	.word	0x0002e5b8
   14424:	0002e598 	.word	0x0002e598

00014428 <CUSBGamePadSwitchProDevice::GetProperties()>:
   14428:	e3a0004b 	mov	r0, #75	; 0x4b
   1442c:	e12fff1e 	bx	lr

00014430 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   14430:	e92d4010 	push	{r4, lr}
   14434:	e1a04000 	mov	r4, r0
   14438:	e59f300c 	ldr	r3, [pc, #12]	; 1444c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   1443c:	e5803000 	str	r3, [r0]
   14440:	eb001c0a 	bl	1b470 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   14444:	e1a00004 	mov	r0, r4
   14448:	e8bd8010 	pop	{r4, pc}
   1444c:	0002e6b4 	.word	0x0002e6b4

00014450 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   14450:	e92d4010 	push	{r4, lr}
   14454:	e1a04000 	mov	r4, r0
   14458:	e59f3018 	ldr	r3, [pc, #24]	; 14478 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   1445c:	e5803000 	str	r3, [r0]
   14460:	eb001c02 	bl	1b470 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   14464:	e1a00004 	mov	r0, r4
   14468:	e3a01f4d 	mov	r1, #308	; 0x134
   1446c:	eb004cfa 	bl	2785c <operator delete(void*, unsigned int)>
   14470:	e1a00004 	mov	r0, r4
   14474:	e8bd8010 	pop	{r4, pc}
   14478:	0002e6b4 	.word	0x0002e6b4

0001447c <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   1447c:	e242200e 	sub	r2, r2, #14
   14480:	e16f2f12 	clz	r2, r2
   14484:	e3510000 	cmp	r1, #0
   14488:	e1a022a2 	lsr	r2, r2, #5
   1448c:	03a02000 	moveq	r2, #0
   14490:	e3520000 	cmp	r2, #0
   14494:	012fff1e 	bxeq	lr
   14498:	e5d12000 	ldrb	r2, [r1]
   1449c:	e3520000 	cmp	r2, #0
   144a0:	112fff1e 	bxne	lr
   144a4:	e5d13001 	ldrb	r3, [r1, #1]
   144a8:	e3530014 	cmp	r3, #20
   144ac:	112fff1e 	bxne	lr
   144b0:	e5903128 	ldr	r3, [r0, #296]	; 0x128
   144b4:	e92d4070 	push	{r4, r5, r6, lr}
   144b8:	e3530000 	cmp	r3, #0
   144bc:	e1a04000 	mov	r4, r0
   144c0:	08bd8070 	popeq	{r4, r5, r6, pc}
   144c4:	e1a05000 	mov	r5, r0
   144c8:	e4953028 	ldr	r3, [r5], #40	; 0x28
   144cc:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   144d0:	e12fff33 	blx	r3
   144d4:	e5940130 	ldr	r0, [r4, #304]	; 0x130
   144d8:	e1a01005 	mov	r1, r5
   144dc:	e5943128 	ldr	r3, [r4, #296]	; 0x128
   144e0:	e2400001 	sub	r0, r0, #1
   144e4:	e8bd4070 	pop	{r4, r5, r6, lr}
   144e8:	e12fff13 	bx	r3

000144ec <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   144ec:	e3510000 	cmp	r1, #0
   144f0:	e92d4010 	push	{r4, lr}
   144f4:	0a00003e 	beq	145f4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x108>
   144f8:	e5d13000 	ldrb	r3, [r1]
   144fc:	e5d12001 	ldrb	r2, [r1, #1]
   14500:	e1833402 	orr	r3, r3, r2, lsl #8
   14504:	e3530b05 	cmp	r3, #5120	; 0x1400
   14508:	1a00003d 	bne	14604 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x118>
   1450c:	e3a0e000 	mov	lr, #0
   14510:	e5d12002 	ldrb	r2, [r1, #2]
   14514:	e5d1c003 	ldrb	ip, [r1, #3]
   14518:	e59f30f4 	ldr	r3, [pc, #244]	; 14614 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x128>
   1451c:	e580e10c 	str	lr, [r0, #268]	; 0x10c
   14520:	e182240c 	orr	r2, r2, ip, lsl #8
   14524:	e283e040 	add	lr, r3, #64	; 0x40
   14528:	e3120001 	tst	r2, #1
   1452c:	15934000 	ldrne	r4, [r3]
   14530:	1590c10c 	ldrne	ip, [r0, #268]	; 0x10c
   14534:	e2833004 	add	r3, r3, #4
   14538:	118cc004 	orrne	ip, ip, r4
   1453c:	1580c10c 	strne	ip, [r0, #268]	; 0x10c
   14540:	e15e0003 	cmp	lr, r3
   14544:	e1a020a2 	lsr	r2, r2, #1
   14548:	1afffff6 	bne	14528 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x3c>
   1454c:	e3a0c000 	mov	ip, #0
   14550:	e1a0200c 	mov	r2, ip
   14554:	e5d1e007 	ldrb	lr, [r1, #7]
   14558:	e5d13006 	ldrb	r3, [r1, #6]
   1455c:	e183340e 	orr	r3, r3, lr, lsl #8
   14560:	e6bf3073 	sxth	r3, r3
   14564:	e2833902 	add	r3, r3, #32768	; 0x8000
   14568:	e59fe0a8 	ldr	lr, [pc, #168]	; 14618 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x12c>
   1456c:	e1a03423 	lsr	r3, r3, #8
   14570:	e0822082 	add	r2, r2, r2, lsl #1
   14574:	e28cc001 	add	ip, ip, #1
   14578:	e0802102 	add	r2, r0, r2, lsl #2
   1457c:	e35c0004 	cmp	ip, #4
   14580:	e582302c 	str	r3, [r2, #44]	; 0x2c
   14584:	0a00000b 	beq	145b8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xcc>
   14588:	e081208c 	add	r2, r1, ip, lsl #1
   1458c:	e5d24007 	ldrb	r4, [r2, #7]
   14590:	e5d23006 	ldrb	r3, [r2, #6]
   14594:	e49e2004 	ldr	r2, [lr], #4
   14598:	e1833404 	orr	r3, r3, r4, lsl #8
   1459c:	e6bf3073 	sxth	r3, r3
   145a0:	e3c24002 	bic	r4, r2, #2
   145a4:	e2833902 	add	r3, r3, #32768	; 0x8000
   145a8:	e3540001 	cmp	r4, #1
   145ac:	e1a03423 	lsr	r3, r3, #8
   145b0:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   145b4:	eaffffed 	b	14570 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x84>
   145b8:	e5d13004 	ldrb	r3, [r1, #4]
   145bc:	e580305c 	str	r3, [r0, #92]	; 0x5c
   145c0:	e1d130d4 	ldrsb	r3, [r1, #4]
   145c4:	e3530000 	cmp	r3, #0
   145c8:	b590310c 	ldrlt	r3, [r0, #268]	; 0x10c
   145cc:	b3833008 	orrlt	r3, r3, #8
   145d0:	b580310c 	strlt	r3, [r0, #268]	; 0x10c
   145d4:	e5d13005 	ldrb	r3, [r1, #5]
   145d8:	e5803068 	str	r3, [r0, #104]	; 0x68
   145dc:	e1d130d5 	ldrsb	r3, [r1, #5]
   145e0:	e3530000 	cmp	r3, #0
   145e4:	b590310c 	ldrlt	r3, [r0, #268]	; 0x10c
   145e8:	b3833010 	orrlt	r3, r3, #16
   145ec:	b580310c 	strlt	r3, [r0, #268]	; 0x10c
   145f0:	e8bd8010 	pop	{r4, pc}
   145f4:	e3a02078 	mov	r2, #120	; 0x78
   145f8:	e59f101c 	ldr	r1, [pc, #28]	; 1461c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x130>
   145fc:	e59f001c 	ldr	r0, [pc, #28]	; 14620 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x134>
   14600:	eb00243e 	bl	1d700 <assertion_failed>
   14604:	e3a02079 	mov	r2, #121	; 0x79
   14608:	e59f100c 	ldr	r1, [pc, #12]	; 1461c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x130>
   1460c:	e59f0010 	ldr	r0, [pc, #16]	; 14624 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x138>
   14610:	eb00243a 	bl	1d700 <assertion_failed>
   14614:	0002e6f8 	.word	0x0002e6f8
   14618:	0002e73c 	.word	0x0002e73c
   1461c:	0002e670 	.word	0x0002e670
   14620:	0002e27c 	.word	0x0002e27c
   14624:	0002e688 	.word	0x0002e688

00014628 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   14628:	e3510004 	cmp	r1, #4
   1462c:	9a000001 	bls	14638 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   14630:	e3a00000 	mov	r0, #0
   14634:	e12fff1e 	bx	lr
   14638:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1463c:	e59f3034 	ldr	r3, [pc, #52]	; 14678 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x50>
   14640:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   14644:	e0831001 	add	r1, r3, r1
   14648:	e5d120a4 	ldrb	r2, [r1, #164]	; 0xa4
   1464c:	e59fe028 	ldr	lr, [pc, #40]	; 1467c <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x54>
   14650:	e28dc01f 	add	ip, sp, #31
   14654:	e3ccc01f 	bic	ip, ip, #31
   14658:	e5cc2002 	strb	r2, [ip, #2]
   1465c:	e1a0100c 	mov	r1, ip
   14660:	e3a03000 	mov	r3, #0
   14664:	e3a02003 	mov	r2, #3
   14668:	e1cce0b0 	strh	lr, [ip]
   1466c:	eb0002a9 	bl	15118 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   14670:	e28dd03c 	add	sp, sp, #60	; 0x3c
   14674:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   14678:	0002e6ac 	.word	0x0002e6ac
   1467c:	00000301 	.word	0x00000301

00014680 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   14680:	e92d4070 	push	{r4, r5, r6, lr}
   14684:	e24dd038 	sub	sp, sp, #56	; 0x38
   14688:	e28d401f 	add	r4, sp, #31
   1468c:	e3c4401f 	bic	r4, r4, #31
   14690:	e1a05001 	mov	r5, r1
   14694:	e1a06000 	mov	r6, r0
   14698:	e3a02008 	mov	r2, #8
   1469c:	e1a00004 	mov	r0, r4
   146a0:	e3a01000 	mov	r1, #0
   146a4:	eb00482f 	bl	26768 <memset>
   146a8:	e3a03008 	mov	r3, #8
   146ac:	e3550001 	cmp	r5, #1
   146b0:	e5c43001 	strb	r3, [r4, #1]
   146b4:	0a000007 	beq	146d8 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x58>
   146b8:	e3550002 	cmp	r5, #2
   146bc:	0a00000e 	beq	146fc <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   146c0:	e3550000 	cmp	r5, #0
   146c4:	0a000005 	beq	146e0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   146c8:	e3a020e6 	mov	r2, #230	; 0xe6
   146cc:	e59f1034 	ldr	r1, [pc, #52]	; 14708 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x88>
   146d0:	e59f0034 	ldr	r0, [pc, #52]	; 1470c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   146d4:	eb002409 	bl	1d700 <assertion_failed>
   146d8:	e3e03000 	mvn	r3, #0
   146dc:	e5c43004 	strb	r3, [r4, #4]
   146e0:	e1a01004 	mov	r1, r4
   146e4:	e1a00006 	mov	r0, r6
   146e8:	e3a03000 	mov	r3, #0
   146ec:	e3a02008 	mov	r2, #8
   146f0:	eb000288 	bl	15118 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   146f4:	e28dd038 	add	sp, sp, #56	; 0x38
   146f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   146fc:	e3e03000 	mvn	r3, #0
   14700:	e5c43003 	strb	r3, [r4, #3]
   14704:	eafffff5 	b	146e0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   14708:	0002e670 	.word	0x0002e670
   1470c:	0002dbb4 	.word	0x0002dbb4

00014710 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   14710:	e92d4010 	push	{r4, lr}
   14714:	e1a04000 	mov	r4, r0
   14718:	eb001b43 	bl	1b42c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   1471c:	e59f3008 	ldr	r3, [pc, #8]	; 1472c <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   14720:	e1a00004 	mov	r0, r4
   14724:	e5843000 	str	r3, [r4]
   14728:	e8bd8010 	pop	{r4, pc}
   1472c:	0002e6b4 	.word	0x0002e6b4

00014730 <CUSBGamePadXbox360Device::Configure()>:
   14730:	e3a0200e 	mov	r2, #14
   14734:	e2803f4b 	add	r3, r0, #300	; 0x12c
   14738:	e92d4010 	push	{r4, lr}
   1473c:	e1c320b0 	strh	r2, [r3]
   14740:	e1a04000 	mov	r4, r0
   14744:	eb001b06 	bl	1b364 <CUSBGamePadDevice::Configure()>
   14748:	e3500000 	cmp	r0, #0
   1474c:	0a00001e 	beq	147cc <CUSBGamePadXbox360Device::Configure()+0x9c>
   14750:	e3a03000 	mov	r3, #0
   14754:	e3a020ff 	mov	r2, #255	; 0xff
   14758:	e3a0c012 	mov	ip, #18
   1475c:	e3a00006 	mov	r0, #6
   14760:	e5941000 	ldr	r1, [r4]
   14764:	e5840028 	str	r0, [r4, #40]	; 0x28
   14768:	e5843030 	str	r3, [r4, #48]	; 0x30
   1476c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   14770:	e5843048 	str	r3, [r4, #72]	; 0x48
   14774:	e5843054 	str	r3, [r4, #84]	; 0x54
   14778:	e5843060 	str	r3, [r4, #96]	; 0x60
   1477c:	e584306c 	str	r3, [r4, #108]	; 0x6c
   14780:	e58430ec 	str	r3, [r4, #236]	; 0xec
   14784:	e1a00004 	mov	r0, r4
   14788:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   1478c:	e584c108 	str	ip, [r4, #264]	; 0x108
   14790:	e5d41130 	ldrb	r1, [r4, #304]	; 0x130
   14794:	e5842034 	str	r2, [r4, #52]	; 0x34
   14798:	e5842040 	str	r2, [r4, #64]	; 0x40
   1479c:	e584204c 	str	r2, [r4, #76]	; 0x4c
   147a0:	e5842058 	str	r2, [r4, #88]	; 0x58
   147a4:	e5842064 	str	r2, [r4, #100]	; 0x64
   147a8:	e5842070 	str	r2, [r4, #112]	; 0x70
   147ac:	e12fff33 	blx	r3
   147b0:	e3500000 	cmp	r0, #0
   147b4:	1a000001 	bne	147c0 <CUSBGamePadXbox360Device::Configure()+0x90>
   147b8:	e3a00000 	mov	r0, #0
   147bc:	e8bd8010 	pop	{r4, pc}
   147c0:	e1a00004 	mov	r0, r4
   147c4:	e8bd4010 	pop	{r4, lr}
   147c8:	ea0002d3 	b	1531c <CUSBHIDDevice::StartRequest()>
   147cc:	eb002ccb 	bl	1fb00 <CLogger::Get()>
   147d0:	e3a02001 	mov	r2, #1
   147d4:	e59f300c 	ldr	r3, [pc, #12]	; 147e8 <CUSBGamePadXbox360Device::Configure()+0xb8>
   147d8:	e59f100c 	ldr	r1, [pc, #12]	; 147ec <CUSBGamePadXbox360Device::Configure()+0xbc>
   147dc:	eb002c09 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   147e0:	e3a00000 	mov	r0, #0
   147e4:	e8bd8010 	pop	{r4, pc}
   147e8:	0002e220 	.word	0x0002e220
   147ec:	0002e758 	.word	0x0002e758

000147f0 <CUSBGamePadXbox360Device::GetProperties()>:
   147f0:	e3a0000b 	mov	r0, #11
   147f4:	e12fff1e 	bx	lr

000147f8 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   147f8:	e3a02000 	mov	r2, #0
   147fc:	e5d13004 	ldrb	r3, [r1, #4]
   14800:	e580210c 	str	r2, [r0, #268]	; 0x10c
   14804:	e3130004 	tst	r3, #4
   14808:	13a02901 	movne	r2, #16384	; 0x4000
   1480c:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   14810:	e3130008 	tst	r3, #8
   14814:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   14818:	13822b02 	orrne	r2, r2, #2048	; 0x800
   1481c:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   14820:	e3130010 	tst	r3, #16
   14824:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   14828:	13822c02 	orrne	r2, r2, #512	; 0x200
   1482c:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   14830:	e3130020 	tst	r3, #32
   14834:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   14838:	13822c01 	orrne	r2, r2, #256	; 0x100
   1483c:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   14840:	e3130040 	tst	r3, #64	; 0x40
   14844:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   14848:	13822b01 	orrne	r2, r2, #1024	; 0x400
   1484c:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   14850:	e1b033a3 	lsrs	r3, r3, #7
   14854:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   14858:	13833080 	orrne	r3, r3, #128	; 0x80
   1485c:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   14860:	e5d13005 	ldrb	r3, [r1, #5]
   14864:	e3130001 	tst	r3, #1
   14868:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   1486c:	13822902 	orrne	r2, r2, #32768	; 0x8000
   14870:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   14874:	e3130002 	tst	r3, #2
   14878:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   1487c:	13822802 	orrne	r2, r2, #131072	; 0x20000
   14880:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   14884:	e3130004 	tst	r3, #4
   14888:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   1488c:	13822701 	orrne	r2, r2, #262144	; 0x40000
   14890:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   14894:	e3130008 	tst	r3, #8
   14898:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   1489c:	13822801 	orrne	r2, r2, #65536	; 0x10000
   148a0:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   148a4:	e3130010 	tst	r3, #16
   148a8:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   148ac:	13822020 	orrne	r2, r2, #32
   148b0:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   148b4:	e3130020 	tst	r3, #32
   148b8:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   148bc:	13822040 	orrne	r2, r2, #64	; 0x40
   148c0:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   148c4:	e3130040 	tst	r3, #64	; 0x40
   148c8:	1590210c 	ldrne	r2, [r0, #268]	; 0x10c
   148cc:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   148d0:	1580210c 	strne	r2, [r0, #268]	; 0x10c
   148d4:	e1b033a3 	lsrs	r3, r3, #7
   148d8:	1590310c 	ldrne	r3, [r0, #268]	; 0x10c
   148dc:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   148e0:	1580310c 	strne	r3, [r0, #268]	; 0x10c
   148e4:	e5d12007 	ldrb	r2, [r1, #7]
   148e8:	e5d13006 	ldrb	r3, [r1, #6]
   148ec:	e1833402 	orr	r3, r3, r2, lsl #8
   148f0:	e1a03143 	asr	r3, r3, #2
   148f4:	e353007f 	cmp	r3, #127	; 0x7f
   148f8:	e580305c 	str	r3, [r0, #92]	; 0x5c
   148fc:	c590310c 	ldrgt	r3, [r0, #268]	; 0x10c
   14900:	c3833008 	orrgt	r3, r3, #8
   14904:	c580310c 	strgt	r3, [r0, #268]	; 0x10c
   14908:	e5d12009 	ldrb	r2, [r1, #9]
   1490c:	e5d13008 	ldrb	r3, [r1, #8]
   14910:	e1833402 	orr	r3, r3, r2, lsl #8
   14914:	e1a03143 	asr	r3, r3, #2
   14918:	e353007f 	cmp	r3, #127	; 0x7f
   1491c:	e5803068 	str	r3, [r0, #104]	; 0x68
   14920:	c590310c 	ldrgt	r3, [r0, #268]	; 0x10c
   14924:	c3833010 	orrgt	r3, r3, #16
   14928:	c580310c 	strgt	r3, [r0, #268]	; 0x10c
   1492c:	e5d1200b 	ldrb	r2, [r1, #11]
   14930:	e5d1300a 	ldrb	r3, [r1, #10]
   14934:	e1833402 	orr	r3, r3, r2, lsl #8
   14938:	e6bf3073 	sxth	r3, r3
   1493c:	e2833902 	add	r3, r3, #32768	; 0x8000
   14940:	e1a03423 	lsr	r3, r3, #8
   14944:	e580302c 	str	r3, [r0, #44]	; 0x2c
   14948:	e5d1200d 	ldrb	r2, [r1, #13]
   1494c:	e5d1300c 	ldrb	r3, [r1, #12]
   14950:	e1833402 	orr	r3, r3, r2, lsl #8
   14954:	e6bf3073 	sxth	r3, r3
   14958:	e2833902 	add	r3, r3, #32768	; 0x8000
   1495c:	e1a03423 	lsr	r3, r3, #8
   14960:	e22330ff 	eor	r3, r3, #255	; 0xff
   14964:	e5803038 	str	r3, [r0, #56]	; 0x38
   14968:	e5d1200f 	ldrb	r2, [r1, #15]
   1496c:	e5d1300e 	ldrb	r3, [r1, #14]
   14970:	e1833402 	orr	r3, r3, r2, lsl #8
   14974:	e6bf3073 	sxth	r3, r3
   14978:	e2833902 	add	r3, r3, #32768	; 0x8000
   1497c:	e1a03423 	lsr	r3, r3, #8
   14980:	e5803044 	str	r3, [r0, #68]	; 0x44
   14984:	e5d13010 	ldrb	r3, [r1, #16]
   14988:	e5d12011 	ldrb	r2, [r1, #17]
   1498c:	e1833402 	orr	r3, r3, r2, lsl #8
   14990:	e6bf3073 	sxth	r3, r3
   14994:	e2833902 	add	r3, r3, #32768	; 0x8000
   14998:	e1a03423 	lsr	r3, r3, #8
   1499c:	e22330ff 	eor	r3, r3, #255	; 0xff
   149a0:	e5803050 	str	r3, [r0, #80]	; 0x50
   149a4:	e12fff1e 	bx	lr

000149a8 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   149a8:	e92d4010 	push	{r4, lr}
   149ac:	e1a04000 	mov	r4, r0
   149b0:	e59f300c 	ldr	r3, [pc, #12]	; 149c4 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   149b4:	e5803000 	str	r3, [r0]
   149b8:	eb001aac 	bl	1b470 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   149bc:	e1a00004 	mov	r0, r4
   149c0:	e8bd8010 	pop	{r4, pc}
   149c4:	0002e7b4 	.word	0x0002e7b4

000149c8 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   149c8:	e92d4010 	push	{r4, lr}
   149cc:	e1a04000 	mov	r4, r0
   149d0:	e59f3018 	ldr	r3, [pc, #24]	; 149f0 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   149d4:	e5803000 	str	r3, [r0]
   149d8:	eb001aa4 	bl	1b470 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   149dc:	e1a00004 	mov	r0, r4
   149e0:	e3a01f4e 	mov	r1, #312	; 0x138
   149e4:	eb004b9c 	bl	2785c <operator delete(void*, unsigned int)>
   149e8:	e1a00004 	mov	r0, r4
   149ec:	e8bd8010 	pop	{r4, pc}
   149f0:	0002e7b4 	.word	0x0002e7b4

000149f4 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   149f4:	e92d4070 	push	{r4, r5, r6, lr}
   149f8:	e251e000 	subs	lr, r1, #0
   149fc:	e24dd038 	sub	sp, sp, #56	; 0x38
   14a00:	0a00000a 	beq	14a30 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   14a04:	e3520006 	cmp	r2, #6
   14a08:	e1a04000 	mov	r4, r0
   14a0c:	0a000009 	beq	14a38 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   14a10:	e2422012 	sub	r2, r2, #18
   14a14:	e16f2f12 	clz	r2, r2
   14a18:	e5903128 	ldr	r3, [r0, #296]	; 0x128
   14a1c:	e1a022a2 	lsr	r2, r2, #5
   14a20:	e3530000 	cmp	r3, #0
   14a24:	03a02000 	moveq	r2, #0
   14a28:	e3520000 	cmp	r2, #0
   14a2c:	1a000023 	bne	14ac0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xcc>
   14a30:	e28dd038 	add	sp, sp, #56	; 0x38
   14a34:	e8bd8070 	pop	{r4, r5, r6, pc}
   14a38:	e28d301f 	add	r3, sp, #31
   14a3c:	e3c3c01f 	bic	ip, r3, #31
   14a40:	e5de3000 	ldrb	r3, [lr]
   14a44:	e3530007 	cmp	r3, #7
   14a48:	1afffff8 	bne	14a30 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   14a4c:	e5de3001 	ldrb	r3, [lr, #1]
   14a50:	e3530030 	cmp	r3, #48	; 0x30
   14a54:	1afffff5 	bne	14a30 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   14a58:	e1a0500c 	mov	r5, ip
   14a5c:	e3a03000 	mov	r3, #0
   14a60:	e59f608c 	ldr	r6, [pc, #140]	; 14af4 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x100>
   14a64:	e5dee002 	ldrb	lr, [lr, #2]
   14a68:	e8960007 	ldm	r6, {r0, r1, r2}
   14a6c:	e8a50003 	stmia	r5!, {r0, r1}
   14a70:	e1a00004 	mov	r0, r4
   14a74:	e5c52000 	strb	r2, [r5]
   14a78:	e1a0100c 	mov	r1, ip
   14a7c:	e3a0200d 	mov	r2, #13
   14a80:	e58c3019 	str	r3, [ip, #25]
   14a84:	e5cce002 	strb	lr, [ip, #2]
   14a88:	e58c3009 	str	r3, [ip, #9]
   14a8c:	e58c300d 	str	r3, [ip, #13]
   14a90:	e58c3011 	str	r3, [ip, #17]
   14a94:	e58c3015 	str	r3, [ip, #21]
   14a98:	e58c301c 	str	r3, [ip, #28]
   14a9c:	eb0001c1 	bl	151a8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   14aa0:	e3500000 	cmp	r0, #0
   14aa4:	1affffe1 	bne	14a30 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   14aa8:	eb002c14 	bl	1fb00 <CLogger::Get()>
   14aac:	e3a02001 	mov	r2, #1
   14ab0:	e59f3040 	ldr	r3, [pc, #64]	; 14af8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x104>
   14ab4:	e2861020 	add	r1, r6, #32
   14ab8:	eb002b52 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14abc:	eaffffdb 	b	14a30 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   14ac0:	e5de3000 	ldrb	r3, [lr]
   14ac4:	e3530020 	cmp	r3, #32
   14ac8:	1affffd8 	bne	14a30 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   14acc:	e1a05000 	mov	r5, r0
   14ad0:	e4953028 	ldr	r3, [r5], #40	; 0x28
   14ad4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   14ad8:	e12fff33 	blx	r3
   14adc:	e5940130 	ldr	r0, [r4, #304]	; 0x130
   14ae0:	e1a01005 	mov	r1, r5
   14ae4:	e5943128 	ldr	r3, [r4, #296]	; 0x128
   14ae8:	e2400001 	sub	r0, r0, #1
   14aec:	e12fff33 	blx	r3
   14af0:	eaffffce 	b	14a30 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x3c>
   14af4:	0002e7f8 	.word	0x0002e7f8
   14af8:	0002e768 	.word	0x0002e768

00014afc <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   14afc:	e92d4070 	push	{r4, r5, r6, lr}
   14b00:	e24dd038 	sub	sp, sp, #56	; 0x38
   14b04:	e28dc01f 	add	ip, sp, #31
   14b08:	e3ccc01f 	bic	ip, ip, #31
   14b0c:	e1a0e00c 	mov	lr, ip
   14b10:	e3a05000 	mov	r5, #0
   14b14:	e1a06000 	mov	r6, r0
   14b18:	e59f3088 	ldr	r3, [pc, #136]	; 14ba8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0xac>
   14b1c:	e1a04001 	mov	r4, r1
   14b20:	e3510001 	cmp	r1, #1
   14b24:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   14b28:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   14b2c:	e1cc51be 	strh	r5, [ip, #30]
   14b30:	e1a00006 	mov	r0, r6
   14b34:	e1ce30b0 	strh	r3, [lr]
   14b38:	e58c500e 	str	r5, [ip, #14]
   14b3c:	e58c5012 	str	r5, [ip, #18]
   14b40:	e58c5016 	str	r5, [ip, #22]
   14b44:	e58c501a 	str	r5, [ip, #26]
   14b48:	0a000007 	beq	14b6c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x70>
   14b4c:	e3540002 	cmp	r4, #2
   14b50:	0a000011 	beq	14b9c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0xa0>
   14b54:	e1540005 	cmp	r4, r5
   14b58:	0a000005 	beq	14b74 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x78>
   14b5c:	e3a020ef 	mov	r2, #239	; 0xef
   14b60:	e59f1044 	ldr	r1, [pc, #68]	; 14bac <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0xb0>
   14b64:	e59f0044 	ldr	r0, [pc, #68]	; 14bb0 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0xb4>
   14b68:	eb0022e4 	bl	1d700 <assertion_failed>
   14b6c:	e3e03000 	mvn	r3, #0
   14b70:	e5cc3009 	strb	r3, [ip, #9]
   14b74:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
   14b78:	e1a0100c 	mov	r1, ip
   14b7c:	e28e3001 	add	r3, lr, #1
   14b80:	e3a0200d 	mov	r2, #13
   14b84:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   14b88:	e3a03000 	mov	r3, #0
   14b8c:	e5cce002 	strb	lr, [ip, #2]
   14b90:	eb000160 	bl	15118 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   14b94:	e28dd038 	add	sp, sp, #56	; 0x38
   14b98:	e8bd8070 	pop	{r4, r5, r6, pc}
   14b9c:	e3e03000 	mvn	r3, #0
   14ba0:	e5cc3008 	strb	r3, [ip, #8]
   14ba4:	eafffff2 	b	14b74 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x78>
   14ba8:	0002e828 	.word	0x0002e828
   14bac:	0002e77c 	.word	0x0002e77c
   14bb0:	0002dbb4 	.word	0x0002dbb4

00014bb4 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   14bb4:	e92d4010 	push	{r4, lr}
   14bb8:	e1a04000 	mov	r4, r0
   14bbc:	eb001a1a 	bl	1b42c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   14bc0:	e3a02000 	mov	r2, #0
   14bc4:	e59f300c 	ldr	r3, [pc, #12]	; 14bd8 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   14bc8:	e1a00004 	mov	r0, r4
   14bcc:	e5c42134 	strb	r2, [r4, #308]	; 0x134
   14bd0:	e5843000 	str	r3, [r4]
   14bd4:	e8bd8010 	pop	{r4, pc}
   14bd8:	0002e7b4 	.word	0x0002e7b4

00014bdc <CUSBGamePadXboxOneDevice::Configure()>:
   14bdc:	e3a02040 	mov	r2, #64	; 0x40
   14be0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14be4:	e2803f4b 	add	r3, r0, #300	; 0x12c
   14be8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   14bec:	e1c320b0 	strh	r2, [r3]
   14bf0:	e1a04000 	mov	r4, r0
   14bf4:	eb0019da 	bl	1b364 <CUSBGamePadDevice::Configure()>
   14bf8:	e2506000 	subs	r6, r0, #0
   14bfc:	0a000033 	beq	14cd0 <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   14c00:	e3a03000 	mov	r3, #0
   14c04:	e3a020ff 	mov	r2, #255	; 0xff
   14c08:	e3a0e010 	mov	lr, #16
   14c0c:	e3a0c006 	mov	ip, #6
   14c10:	e59f70d8 	ldr	r7, [pc, #216]	; 14cf0 <CUSBGamePadXboxOneDevice::Configure()+0x114>
   14c14:	e28d501f 	add	r5, sp, #31
   14c18:	e3c5501f 	bic	r5, r5, #31
   14c1c:	e8970003 	ldm	r7, {r0, r1}
   14c20:	e5842034 	str	r2, [r4, #52]	; 0x34
   14c24:	e5850000 	str	r0, [r5]
   14c28:	e5c51004 	strb	r1, [r5, #4]
   14c2c:	e5842040 	str	r2, [r4, #64]	; 0x40
   14c30:	e584204c 	str	r2, [r4, #76]	; 0x4c
   14c34:	e5842058 	str	r2, [r4, #88]	; 0x58
   14c38:	e5842064 	str	r2, [r4, #100]	; 0x64
   14c3c:	e5842070 	str	r2, [r4, #112]	; 0x70
   14c40:	e1a01005 	mov	r1, r5
   14c44:	e3a02005 	mov	r2, #5
   14c48:	e1a00004 	mov	r0, r4
   14c4c:	e5843030 	str	r3, [r4, #48]	; 0x30
   14c50:	e584303c 	str	r3, [r4, #60]	; 0x3c
   14c54:	e5843048 	str	r3, [r4, #72]	; 0x48
   14c58:	e5843054 	str	r3, [r4, #84]	; 0x54
   14c5c:	e5843060 	str	r3, [r4, #96]	; 0x60
   14c60:	e584306c 	str	r3, [r4, #108]	; 0x6c
   14c64:	e58430ec 	str	r3, [r4, #236]	; 0xec
   14c68:	e584e108 	str	lr, [r4, #264]	; 0x108
   14c6c:	e584c028 	str	ip, [r4, #40]	; 0x28
   14c70:	e5853019 	str	r3, [r5, #25]
   14c74:	e5853005 	str	r3, [r5, #5]
   14c78:	e5853009 	str	r3, [r5, #9]
   14c7c:	e585300d 	str	r3, [r5, #13]
   14c80:	e5853011 	str	r3, [r5, #17]
   14c84:	e5853015 	str	r3, [r5, #21]
   14c88:	e585301c 	str	r3, [r5, #28]
   14c8c:	eb000121 	bl	15118 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   14c90:	e2506000 	subs	r6, r0, #0
   14c94:	0a000005 	beq	14cb0 <CUSBGamePadXboxOneDevice::Configure()+0xd4>
   14c98:	e1a00004 	mov	r0, r4
   14c9c:	eb00019e 	bl	1531c <CUSBHIDDevice::StartRequest()>
   14ca0:	e1a06000 	mov	r6, r0
   14ca4:	e1a00006 	mov	r0, r6
   14ca8:	e28dd03c 	add	sp, sp, #60	; 0x3c
   14cac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14cb0:	eb002b92 	bl	1fb00 <CLogger::Get()>
   14cb4:	e3a02001 	mov	r2, #1
   14cb8:	e59f3034 	ldr	r3, [pc, #52]	; 14cf4 <CUSBGamePadXboxOneDevice::Configure()+0x118>
   14cbc:	e2471030 	sub	r1, r7, #48	; 0x30
   14cc0:	eb002ad0 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14cc4:	e1a00006 	mov	r0, r6
   14cc8:	e28dd03c 	add	sp, sp, #60	; 0x3c
   14ccc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14cd0:	eb002b8a 	bl	1fb00 <CLogger::Get()>
   14cd4:	e3a02001 	mov	r2, #1
   14cd8:	e59f3018 	ldr	r3, [pc, #24]	; 14cf8 <CUSBGamePadXboxOneDevice::Configure()+0x11c>
   14cdc:	e59f1018 	ldr	r1, [pc, #24]	; 14cfc <CUSBGamePadXboxOneDevice::Configure()+0x120>
   14ce0:	eb002ac8 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ce4:	e1a00006 	mov	r0, r6
   14ce8:	e28dd03c 	add	sp, sp, #60	; 0x3c
   14cec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14cf0:	0002e848 	.word	0x0002e848
   14cf4:	0002e794 	.word	0x0002e794
   14cf8:	0002e220 	.word	0x0002e220
   14cfc:	0002e818 	.word	0x0002e818

00014d00 <CUSBGamePadXboxOneDevice::GetProperties()>:
   14d00:	e3a00009 	mov	r0, #9
   14d04:	e12fff1e 	bx	lr

00014d08 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   14d08:	e92d4070 	push	{r4, r5, r6, lr}
   14d0c:	e2504000 	subs	r4, r0, #0
   14d10:	0a000017 	beq	14d74 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x6c>
   14d14:	e1a05001 	mov	r5, r1
   14d18:	ebffd681 	bl	a724 <CUSBRequest::GetStatus() const>
   14d1c:	e3500000 	cmp	r0, #0
   14d20:	0a00000d 	beq	14d5c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x54>
   14d24:	e1a00004 	mov	r0, r4
   14d28:	ebffd66c 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
   14d2c:	e1a00004 	mov	r0, r4
   14d30:	e3a0102c 	mov	r1, #44	; 0x2c
   14d34:	ebffd6ed 	bl	a8f0 <CUSBRequest::operator delete(void*, unsigned int)>
   14d38:	e3550000 	cmp	r5, #0
   14d3c:	1a000003 	bne	14d50 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x48>
   14d40:	e3a020b8 	mov	r2, #184	; 0xb8
   14d44:	e59f1038 	ldr	r1, [pc, #56]	; 14d84 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   14d48:	e59f0038 	ldr	r0, [pc, #56]	; 14d88 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x80>
   14d4c:	eb00226b 	bl	1d700 <assertion_failed>
   14d50:	e1a00005 	mov	r0, r5
   14d54:	e8bd4070 	pop	{r4, r5, r6, lr}
   14d58:	ea004abe 	b	27858 <operator delete[](void*)>
   14d5c:	eb002b67 	bl	1fb00 <CLogger::Get()>
   14d60:	e3a02002 	mov	r2, #2
   14d64:	e59f3020 	ldr	r3, [pc, #32]	; 14d8c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x84>
   14d68:	e59f1020 	ldr	r1, [pc, #32]	; 14d90 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x88>
   14d6c:	eb002aa5 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14d70:	eaffffeb 	b	14d24 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   14d74:	e3a020af 	mov	r2, #175	; 0xaf
   14d78:	e59f1004 	ldr	r1, [pc, #4]	; 14d84 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   14d7c:	e59f0010 	ldr	r0, [pc, #16]	; 14d94 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x8c>
   14d80:	eb00225e 	bl	1d700 <assertion_failed>
   14d84:	0002e868 	.word	0x0002e868
   14d88:	0002e898 	.word	0x0002e898
   14d8c:	0002e87c 	.word	0x0002e87c
   14d90:	0002e930 	.word	0x0002e930
   14d94:	0002c8e4 	.word	0x0002c8e4

00014d98 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   14d98:	e92d4070 	push	{r4, r5, r6, lr}
   14d9c:	e1a04000 	mov	r4, r0
   14da0:	e1a05002 	mov	r5, r2
   14da4:	ebfff57b 	bl	12398 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   14da8:	e3a03000 	mov	r3, #0
   14dac:	e59f2034 	ldr	r2, [pc, #52]	; 14de8 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x50>
   14db0:	e1550003 	cmp	r5, r3
   14db4:	e5845018 	str	r5, [r4, #24]
   14db8:	e5842000 	str	r2, [r4]
   14dbc:	e584301c 	str	r3, [r4, #28]
   14dc0:	e5843020 	str	r3, [r4, #32]
   14dc4:	e5843024 	str	r3, [r4, #36]	; 0x24
   14dc8:	1a000001 	bne	14dd4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x3c>
   14dcc:	e1a00004 	mov	r0, r4
   14dd0:	e8bd8070 	pop	{r4, r5, r6, pc}
   14dd4:	e1a00005 	mov	r0, r5
   14dd8:	eb004a97 	bl	2783c <operator new[](unsigned int)>
   14ddc:	e5840024 	str	r0, [r4, #36]	; 0x24
   14de0:	e1a00004 	mov	r0, r4
   14de4:	e8bd8070 	pop	{r4, r5, r6, pc}
   14de8:	0002e940 	.word	0x0002e940

00014dec <CUSBHIDDevice::~CUSBHIDDevice()>:
   14dec:	e92d4070 	push	{r4, r5, r6, lr}
   14df0:	e1a04000 	mov	r4, r0
   14df4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   14df8:	e59f3074 	ldr	r3, [pc, #116]	; 14e74 <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   14dfc:	e3500000 	cmp	r0, #0
   14e00:	e5843000 	str	r3, [r4]
   14e04:	0a000000 	beq	14e0c <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   14e08:	eb004a92 	bl	27858 <operator delete[](void*)>
   14e0c:	e3a03000 	mov	r3, #0
   14e10:	e5945020 	ldr	r5, [r4, #32]
   14e14:	e5843024 	str	r3, [r4, #36]	; 0x24
   14e18:	e1550003 	cmp	r5, r3
   14e1c:	0a000004 	beq	14e34 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   14e20:	e1a00005 	mov	r0, r5
   14e24:	ebfff45b 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   14e28:	e1a00005 	mov	r0, r5
   14e2c:	e3a01014 	mov	r1, #20
   14e30:	eb004a89 	bl	2785c <operator delete(void*, unsigned int)>
   14e34:	e3a03000 	mov	r3, #0
   14e38:	e594501c 	ldr	r5, [r4, #28]
   14e3c:	e5843020 	str	r3, [r4, #32]
   14e40:	e1550003 	cmp	r5, r3
   14e44:	0a000004 	beq	14e5c <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   14e48:	e1a00005 	mov	r0, r5
   14e4c:	ebfff451 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   14e50:	e1a00005 	mov	r0, r5
   14e54:	e3a01014 	mov	r1, #20
   14e58:	eb004a7f 	bl	2785c <operator delete(void*, unsigned int)>
   14e5c:	e3a03000 	mov	r3, #0
   14e60:	e1a00004 	mov	r0, r4
   14e64:	e584301c 	str	r3, [r4, #28]
   14e68:	ebfff4b7 	bl	1214c <CUSBFunction::~CUSBFunction()>
   14e6c:	e1a00004 	mov	r0, r4
   14e70:	e8bd8070 	pop	{r4, r5, r6, pc}
   14e74:	0002e940 	.word	0x0002e940

00014e78 <CUSBHIDDevice::~CUSBHIDDevice()>:
   14e78:	e92d4010 	push	{r4, lr}
   14e7c:	e1a04000 	mov	r4, r0
   14e80:	ebffffd9 	bl	14dec <CUSBHIDDevice::~CUSBHIDDevice()>
   14e84:	e1a00004 	mov	r0, r4
   14e88:	e3a01028 	mov	r1, #40	; 0x28
   14e8c:	eb004a72 	bl	2785c <operator delete(void*, unsigned int)>
   14e90:	e1a00004 	mov	r0, r4
   14e94:	e8bd8010 	pop	{r4, pc}

00014e98 <CUSBHIDDevice::Configure(unsigned int)>:
   14e98:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e9c:	e24dd018 	sub	sp, sp, #24
   14ea0:	e1a07001 	mov	r7, r1
   14ea4:	e1a05000 	mov	r5, r0
   14ea8:	ebfff58e 	bl	124e8 <CUSBFunction::GetNumEndpoints() const>
   14eac:	e2506000 	subs	r6, r0, #0
   14eb0:	1a000004 	bne	14ec8 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   14eb4:	ea000052 	b	15004 <CUSBHIDDevice::Configure(unsigned int)+0x16c>
   14eb8:	e5d43003 	ldrb	r3, [r4, #3]
   14ebc:	e203303f 	and	r3, r3, #63	; 0x3f
   14ec0:	e3530003 	cmp	r3, #3
   14ec4:	0a00001e 	beq	14f44 <CUSBHIDDevice::Configure(unsigned int)+0xac>
   14ec8:	e3a01005 	mov	r1, #5
   14ecc:	e1a00005 	mov	r0, r5
   14ed0:	ebfff5b0 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
   14ed4:	e2504000 	subs	r4, r0, #0
   14ed8:	1afffff6 	bne	14eb8 <CUSBHIDDevice::Configure(unsigned int)+0x20>
   14edc:	e595601c 	ldr	r6, [r5, #28]
   14ee0:	e1a00005 	mov	r0, r5
   14ee4:	e3560000 	cmp	r6, #0
   14ee8:	0a00004b 	beq	1501c <CUSBHIDDevice::Configure(unsigned int)+0x184>
   14eec:	ebfff4bf 	bl	121f0 <CUSBFunction::Configure()>
   14ef0:	e2506000 	subs	r6, r0, #0
   14ef4:	0a000033 	beq	14fc8 <CUSBHIDDevice::Configure(unsigned int)+0x130>
   14ef8:	e1a00005 	mov	r0, r5
   14efc:	ebfff602 	bl	1270c <CUSBFunction::GetInterfaceClass() const>
   14f00:	e3500003 	cmp	r0, #3
   14f04:	0a000049 	beq	15030 <CUSBHIDDevice::Configure(unsigned int)+0x198>
   14f08:	e5953018 	ldr	r3, [r5, #24]
   14f0c:	e3530000 	cmp	r3, #0
   14f10:	1a000034 	bne	14fe8 <CUSBHIDDevice::Configure(unsigned int)+0x150>
   14f14:	e3570000 	cmp	r7, #0
   14f18:	e5857018 	str	r7, [r5, #24]
   14f1c:	0a00006a 	beq	150cc <CUSBHIDDevice::Configure(unsigned int)+0x234>
   14f20:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   14f24:	e3530000 	cmp	r3, #0
   14f28:	1a00006f 	bne	150ec <CUSBHIDDevice::Configure(unsigned int)+0x254>
   14f2c:	e1a00007 	mov	r0, r7
   14f30:	eb004a41 	bl	2783c <operator new[](unsigned int)>
   14f34:	e5850024 	str	r0, [r5, #36]	; 0x24
   14f38:	e1a00006 	mov	r0, r6
   14f3c:	e28dd018 	add	sp, sp, #24
   14f40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f44:	e1d430d2 	ldrsb	r3, [r4, #2]
   14f48:	e3530000 	cmp	r3, #0
   14f4c:	ba00000e 	blt	14f8c <CUSBHIDDevice::Configure(unsigned int)+0xf4>
   14f50:	e5953020 	ldr	r3, [r5, #32]
   14f54:	e1a00005 	mov	r0, r5
   14f58:	e3530000 	cmp	r3, #0
   14f5c:	1a00005e 	bne	150dc <CUSBHIDDevice::Configure(unsigned int)+0x244>
   14f60:	ebfff56c 	bl	12518 <CUSBFunction::GetDevice() const>
   14f64:	e1a01000 	mov	r1, r0
   14f68:	e3a00014 	mov	r0, #20
   14f6c:	e58d1014 	str	r1, [sp, #20]
   14f70:	eb004a2b 	bl	27824 <operator new(unsigned int)>
   14f74:	e1a06000 	mov	r6, r0
   14f78:	e1a02004 	mov	r2, r4
   14f7c:	e59d1014 	ldr	r1, [sp, #20]
   14f80:	ebfff3a6 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14f84:	e5856020 	str	r6, [r5, #32]
   14f88:	eaffffce 	b	14ec8 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   14f8c:	e595301c 	ldr	r3, [r5, #28]
   14f90:	e1a00005 	mov	r0, r5
   14f94:	e3530000 	cmp	r3, #0
   14f98:	1a00004f 	bne	150dc <CUSBHIDDevice::Configure(unsigned int)+0x244>
   14f9c:	ebfff55d 	bl	12518 <CUSBFunction::GetDevice() const>
   14fa0:	e1a01000 	mov	r1, r0
   14fa4:	e3a00014 	mov	r0, #20
   14fa8:	e58d1014 	str	r1, [sp, #20]
   14fac:	eb004a1c 	bl	27824 <operator new(unsigned int)>
   14fb0:	e1a06000 	mov	r6, r0
   14fb4:	e1a02004 	mov	r2, r4
   14fb8:	e59d1014 	ldr	r1, [sp, #20]
   14fbc:	ebfff397 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14fc0:	e585601c 	str	r6, [r5, #28]
   14fc4:	eaffffbf 	b	14ec8 <CUSBHIDDevice::Configure(unsigned int)+0x30>
   14fc8:	eb002acc 	bl	1fb00 <CLogger::Get()>
   14fcc:	e3a02001 	mov	r2, #1
   14fd0:	e59f3124 	ldr	r3, [pc, #292]	; 150fc <CUSBHIDDevice::Configure(unsigned int)+0x264>
   14fd4:	e59f1124 	ldr	r1, [pc, #292]	; 15100 <CUSBHIDDevice::Configure(unsigned int)+0x268>
   14fd8:	eb002a0a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14fdc:	e1a00006 	mov	r0, r6
   14fe0:	e28dd018 	add	sp, sp, #24
   14fe4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fe8:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   14fec:	e3530000 	cmp	r3, #0
   14ff0:	1afffff9 	bne	14fdc <CUSBHIDDevice::Configure(unsigned int)+0x144>
   14ff4:	e3a02082 	mov	r2, #130	; 0x82
   14ff8:	e59f1104 	ldr	r1, [pc, #260]	; 15104 <CUSBHIDDevice::Configure(unsigned int)+0x26c>
   14ffc:	e59f0104 	ldr	r0, [pc, #260]	; 15108 <CUSBHIDDevice::Configure(unsigned int)+0x270>
   15000:	eb0021be 	bl	1d700 <assertion_failed>
   15004:	e1a00005 	mov	r0, r5
   15008:	e59f10f0 	ldr	r1, [pc, #240]	; 15100 <CUSBHIDDevice::Configure(unsigned int)+0x268>
   1500c:	ebfff56c 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   15010:	e1a00006 	mov	r0, r6
   15014:	e28dd018 	add	sp, sp, #24
   15018:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1501c:	e59f10dc 	ldr	r1, [pc, #220]	; 15100 <CUSBHIDDevice::Configure(unsigned int)+0x268>
   15020:	ebfff567 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   15024:	e1a00006 	mov	r0, r6
   15028:	e28dd018 	add	sp, sp, #24
   1502c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15030:	e1a00005 	mov	r0, r5
   15034:	ebfff5c0 	bl	1273c <CUSBFunction::GetInterfaceSubClass() const>
   15038:	e3500001 	cmp	r0, #1
   1503c:	e1a08000 	mov	r8, r0
   15040:	1affffb0 	bne	14f08 <CUSBHIDDevice::Configure(unsigned int)+0x70>
   15044:	e1a00005 	mov	r0, r5
   15048:	ebfff547 	bl	1256c <CUSBFunction::GetHost() const>
   1504c:	e1a0a000 	mov	sl, r0
   15050:	e1a00005 	mov	r0, r5
   15054:	ebfff539 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   15058:	e1a01000 	mov	r1, r0
   1505c:	e1a00005 	mov	r0, r5
   15060:	e58d1014 	str	r1, [sp, #20]
   15064:	ebfff5c0 	bl	1276c <CUSBFunction::GetInterfaceProtocol() const>
   15068:	e1a09000 	mov	r9, r0
   1506c:	e1a00005 	mov	r0, r5
   15070:	e2499002 	sub	r9, r9, #2
   15074:	ebfff598 	bl	126dc <CUSBFunction::GetInterfaceNumber() const>
   15078:	e16f9f19 	clz	r9, r9
   1507c:	e6ff3070 	uxth	r3, r0
   15080:	e1a092a9 	lsr	r9, r9, #5
   15084:	e58d3004 	str	r3, [sp, #4]
   15088:	e1a0000a 	mov	r0, sl
   1508c:	e3a0300b 	mov	r3, #11
   15090:	e3a02021 	mov	r2, #33	; 0x21
   15094:	e59d1014 	ldr	r1, [sp, #20]
   15098:	e58d9000 	str	r9, [sp]
   1509c:	e58d400c 	str	r4, [sp, #12]
   150a0:	e58d4008 	str	r4, [sp, #8]
   150a4:	ebffcfd9 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   150a8:	e3500000 	cmp	r0, #0
   150ac:	aaffff95 	bge	14f08 <CUSBHIDDevice::Configure(unsigned int)+0x70>
   150b0:	eb002a92 	bl	1fb00 <CLogger::Get()>
   150b4:	e1a02008 	mov	r2, r8
   150b8:	e59f304c 	ldr	r3, [pc, #76]	; 1510c <CUSBHIDDevice::Configure(unsigned int)+0x274>
   150bc:	e59f103c 	ldr	r1, [pc, #60]	; 15100 <CUSBHIDDevice::Configure(unsigned int)+0x268>
   150c0:	e1a06004 	mov	r6, r4
   150c4:	eb0029cf 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   150c8:	eaffffc3 	b	14fdc <CUSBHIDDevice::Configure(unsigned int)+0x144>
   150cc:	e3a0207d 	mov	r2, #125	; 0x7d
   150d0:	e59f102c 	ldr	r1, [pc, #44]	; 15104 <CUSBHIDDevice::Configure(unsigned int)+0x26c>
   150d4:	e59f0034 	ldr	r0, [pc, #52]	; 15110 <CUSBHIDDevice::Configure(unsigned int)+0x278>
   150d8:	eb002188 	bl	1d700 <assertion_failed>
   150dc:	e59f101c 	ldr	r1, [pc, #28]	; 15100 <CUSBHIDDevice::Configure(unsigned int)+0x268>
   150e0:	ebfff537 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   150e4:	e3a06000 	mov	r6, #0
   150e8:	eaffffbb 	b	14fdc <CUSBHIDDevice::Configure(unsigned int)+0x144>
   150ec:	e3a0207f 	mov	r2, #127	; 0x7f
   150f0:	e59f100c 	ldr	r1, [pc, #12]	; 15104 <CUSBHIDDevice::Configure(unsigned int)+0x26c>
   150f4:	e59f0018 	ldr	r0, [pc, #24]	; 15114 <CUSBHIDDevice::Configure(unsigned int)+0x27c>
   150f8:	eb002180 	bl	1d700 <assertion_failed>
   150fc:	0002c93c 	.word	0x0002c93c
   15100:	0002e930 	.word	0x0002e930
   15104:	0002e868 	.word	0x0002e868
   15108:	0002e8f0 	.word	0x0002e8f0
   1510c:	0002e8ac 	.word	0x0002e8ac
   15110:	0002e8c0 	.word	0x0002e8c0
   15114:	0002e8d8 	.word	0x0002e8d8

00015118 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   15118:	e590c020 	ldr	ip, [r0, #32]
   1511c:	e35c0000 	cmp	ip, #0
   15120:	0a000013 	beq	15174 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x5c>
   15124:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15128:	e3510000 	cmp	r1, #0
   1512c:	e1a05001 	mov	r5, r1
   15130:	e24dd00c 	sub	sp, sp, #12
   15134:	0a000010 	beq	1517c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x64>
   15138:	e3520000 	cmp	r2, #0
   1513c:	e1a06002 	mov	r6, r2
   15140:	0a000011 	beq	1518c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x74>
   15144:	e1a07003 	mov	r7, r3
   15148:	e1a04000 	mov	r4, r0
   1514c:	ebfff506 	bl	1256c <CUSBFunction::GetHost() const>
   15150:	e58d7000 	str	r7, [sp]
   15154:	e1a03006 	mov	r3, r6
   15158:	e1a02005 	mov	r2, r5
   1515c:	e5941020 	ldr	r1, [r4, #32]
   15160:	ebffd010 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   15164:	e1e00000 	mvn	r0, r0
   15168:	e1a00fa0 	lsr	r0, r0, #31
   1516c:	e28dd00c 	add	sp, sp, #12
   15170:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15174:	e1a0000c 	mov	r0, ip
   15178:	e12fff1e 	bx	lr
   1517c:	e3a0208e 	mov	r2, #142	; 0x8e
   15180:	e59f1014 	ldr	r1, [pc, #20]	; 1519c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x84>
   15184:	e59f0014 	ldr	r0, [pc, #20]	; 151a0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   15188:	eb00215c 	bl	1d700 <assertion_failed>
   1518c:	e3a0208f 	mov	r2, #143	; 0x8f
   15190:	e59f1004 	ldr	r1, [pc, #4]	; 1519c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x84>
   15194:	e59f0008 	ldr	r0, [pc, #8]	; 151a4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x8c>
   15198:	eb002158 	bl	1d700 <assertion_failed>
   1519c:	0002e868 	.word	0x0002e868
   151a0:	0002e89c 	.word	0x0002e89c
   151a4:	0002e908 	.word	0x0002e908

000151a8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   151a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   151ac:	e1a04000 	mov	r4, r0
   151b0:	e5900020 	ldr	r0, [r0, #32]
   151b4:	e24dd008 	sub	sp, sp, #8
   151b8:	e3500000 	cmp	r0, #0
   151bc:	0a000023 	beq	15250 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xa8>
   151c0:	e3510000 	cmp	r1, #0
   151c4:	e1a06001 	mov	r6, r1
   151c8:	0a000022 	beq	15258 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb0>
   151cc:	e3520000 	cmp	r2, #0
   151d0:	e1a05002 	mov	r5, r2
   151d4:	0a000023 	beq	15268 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc0>
   151d8:	e1a00002 	mov	r0, r2
   151dc:	e1a07003 	mov	r7, r3
   151e0:	eb004995 	bl	2783c <operator new[](unsigned int)>
   151e4:	e1a01006 	mov	r1, r6
   151e8:	e1a02005 	mov	r2, r5
   151ec:	e1a08000 	mov	r8, r0
   151f0:	eb0047a5 	bl	2708c <memcpy>
   151f4:	e3a0002c 	mov	r0, #44	; 0x2c
   151f8:	ebffd5a7 	bl	a89c <CUSBRequest::operator new(unsigned int)>
   151fc:	e3a01000 	mov	r1, #0
   15200:	e1a06000 	mov	r6, r0
   15204:	e58d1000 	str	r1, [sp]
   15208:	e1a03005 	mov	r3, r5
   1520c:	e1a02008 	mov	r2, r8
   15210:	e5941020 	ldr	r1, [r4, #32]
   15214:	ebffd50f 	bl	a658 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15218:	e1a03004 	mov	r3, r4
   1521c:	e1a02008 	mov	r2, r8
   15220:	e1a00006 	mov	r0, r6
   15224:	e59f104c 	ldr	r1, [pc, #76]	; 15278 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd0>
   15228:	ebffd57c 	bl	a820 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1522c:	e1a00004 	mov	r0, r4
   15230:	ebfff4cd 	bl	1256c <CUSBFunction::GetHost() const>
   15234:	e1a01006 	mov	r1, r6
   15238:	e1a02007 	mov	r2, r7
   1523c:	e5903000 	ldr	r3, [r0]
   15240:	e593300c 	ldr	r3, [r3, #12]
   15244:	e28dd008 	add	sp, sp, #8
   15248:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1524c:	e12fff13 	bx	r3
   15250:	e28dd008 	add	sp, sp, #8
   15254:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15258:	e3a020a0 	mov	r2, #160	; 0xa0
   1525c:	e59f1018 	ldr	r1, [pc, #24]	; 1527c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   15260:	e59f0018 	ldr	r0, [pc, #24]	; 15280 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd8>
   15264:	eb002125 	bl	1d700 <assertion_failed>
   15268:	e3a020a1 	mov	r2, #161	; 0xa1
   1526c:	e59f1008 	ldr	r1, [pc, #8]	; 1527c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   15270:	e59f000c 	ldr	r0, [pc, #12]	; 15284 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   15274:	eb002121 	bl	1d700 <assertion_failed>
   15278:	00014d08 	.word	0x00014d08
   1527c:	0002e868 	.word	0x0002e868
   15280:	0002e89c 	.word	0x0002e89c
   15284:	0002e908 	.word	0x0002e908

00015288 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   15288:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1528c:	e590c01c 	ldr	ip, [r0, #28]
   15290:	e24dd00c 	sub	sp, sp, #12
   15294:	e35c0000 	cmp	ip, #0
   15298:	0a00000f 	beq	152dc <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x54>
   1529c:	e3510000 	cmp	r1, #0
   152a0:	e1a05001 	mov	r5, r1
   152a4:	0a000010 	beq	152ec <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x64>
   152a8:	e3520000 	cmp	r2, #0
   152ac:	e1a06002 	mov	r6, r2
   152b0:	0a000011 	beq	152fc <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x74>
   152b4:	e1a07003 	mov	r7, r3
   152b8:	e1a04000 	mov	r4, r0
   152bc:	ebfff4aa 	bl	1256c <CUSBFunction::GetHost() const>
   152c0:	e58d7000 	str	r7, [sp]
   152c4:	e1a03006 	mov	r3, r6
   152c8:	e1a02005 	mov	r2, r5
   152cc:	e594101c 	ldr	r1, [r4, #28]
   152d0:	ebffcfb4 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   152d4:	e28dd00c 	add	sp, sp, #12
   152d8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   152dc:	e3a020be 	mov	r2, #190	; 0xbe
   152e0:	e59f1024 	ldr	r1, [pc, #36]	; 1530c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x84>
   152e4:	e59f0024 	ldr	r0, [pc, #36]	; 15310 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x88>
   152e8:	eb002104 	bl	1d700 <assertion_failed>
   152ec:	e3a020bf 	mov	r2, #191	; 0xbf
   152f0:	e59f1014 	ldr	r1, [pc, #20]	; 1530c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x84>
   152f4:	e59f0018 	ldr	r0, [pc, #24]	; 15314 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x8c>
   152f8:	eb002100 	bl	1d700 <assertion_failed>
   152fc:	e3a020c0 	mov	r2, #192	; 0xc0
   15300:	e59f1004 	ldr	r1, [pc, #4]	; 1530c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x84>
   15304:	e59f000c 	ldr	r0, [pc, #12]	; 15318 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x90>
   15308:	eb0020fc 	bl	1d700 <assertion_failed>
   1530c:	0002e868 	.word	0x0002e868
   15310:	0002e918 	.word	0x0002e918
   15314:	0002e89c 	.word	0x0002e89c
   15318:	0002e908 	.word	0x0002e908

0001531c <CUSBHIDDevice::StartRequest()>:
   1531c:	e92d4070 	push	{r4, r5, r6, lr}
   15320:	e590301c 	ldr	r3, [r0, #28]
   15324:	e24dd008 	sub	sp, sp, #8
   15328:	e3530000 	cmp	r3, #0
   1532c:	0a00001d 	beq	153a8 <CUSBHIDDevice::StartRequest()+0x8c>
   15330:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   15334:	e1a04000 	mov	r4, r0
   15338:	e3530000 	cmp	r3, #0
   1533c:	0a00001d 	beq	153b8 <CUSBHIDDevice::StartRequest()+0x9c>
   15340:	e5903018 	ldr	r3, [r0, #24]
   15344:	e3530000 	cmp	r3, #0
   15348:	0a00001e 	beq	153c8 <CUSBHIDDevice::StartRequest()+0xac>
   1534c:	e3a0002c 	mov	r0, #44	; 0x2c
   15350:	ebffd551 	bl	a89c <CUSBRequest::operator new(unsigned int)>
   15354:	e3a06000 	mov	r6, #0
   15358:	e1a05000 	mov	r5, r0
   1535c:	e58d6000 	str	r6, [sp]
   15360:	e5943018 	ldr	r3, [r4, #24]
   15364:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   15368:	e594101c 	ldr	r1, [r4, #28]
   1536c:	ebffd4b9 	bl	a658 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15370:	e1a03004 	mov	r3, r4
   15374:	e1a02006 	mov	r2, r6
   15378:	e1a00005 	mov	r0, r5
   1537c:	e59f1054 	ldr	r1, [pc, #84]	; 153d8 <CUSBHIDDevice::StartRequest()+0xbc>
   15380:	ebffd526 	bl	a820 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   15384:	e1a00004 	mov	r0, r4
   15388:	ebfff477 	bl	1256c <CUSBFunction::GetHost() const>
   1538c:	e1a01005 	mov	r1, r5
   15390:	e1a02006 	mov	r2, r6
   15394:	e5903000 	ldr	r3, [r0]
   15398:	e593300c 	ldr	r3, [r3, #12]
   1539c:	e28dd008 	add	sp, sp, #8
   153a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   153a4:	e12fff13 	bx	r3
   153a8:	e3a020c6 	mov	r2, #198	; 0xc6
   153ac:	e59f1028 	ldr	r1, [pc, #40]	; 153dc <CUSBHIDDevice::StartRequest()+0xc0>
   153b0:	e59f0028 	ldr	r0, [pc, #40]	; 153e0 <CUSBHIDDevice::StartRequest()+0xc4>
   153b4:	eb0020d1 	bl	1d700 <assertion_failed>
   153b8:	e3a020c7 	mov	r2, #199	; 0xc7
   153bc:	e59f1018 	ldr	r1, [pc, #24]	; 153dc <CUSBHIDDevice::StartRequest()+0xc0>
   153c0:	e59f001c 	ldr	r0, [pc, #28]	; 153e4 <CUSBHIDDevice::StartRequest()+0xc8>
   153c4:	eb0020cd 	bl	1d700 <assertion_failed>
   153c8:	e3a020c9 	mov	r2, #201	; 0xc9
   153cc:	e59f1008 	ldr	r1, [pc, #8]	; 153dc <CUSBHIDDevice::StartRequest()+0xc0>
   153d0:	e59f0010 	ldr	r0, [pc, #16]	; 153e8 <CUSBHIDDevice::StartRequest()+0xcc>
   153d4:	eb0020c9 	bl	1d700 <assertion_failed>
   153d8:	000154f4 	.word	0x000154f4
   153dc:	0002e868 	.word	0x0002e868
   153e0:	0002e918 	.word	0x0002e918
   153e4:	0002e8f0 	.word	0x0002e8f0
   153e8:	0002e8c0 	.word	0x0002e8c0

000153ec <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   153ec:	e92d4070 	push	{r4, r5, r6, lr}
   153f0:	e2514000 	subs	r4, r1, #0
   153f4:	e24dd008 	sub	sp, sp, #8
   153f8:	0a000035 	beq	154d4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   153fc:	e1a05000 	mov	r5, r0
   15400:	e1a00004 	mov	r0, r4
   15404:	ebffd4c6 	bl	a724 <CUSBRequest::GetStatus() const>
   15408:	e3500000 	cmp	r0, #0
   1540c:	1a000012 	bne	1545c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x70>
   15410:	ebffcf7d 	bl	920c <CUSBHostController::IsPlugAndPlay()>
   15414:	e2502000 	subs	r2, r0, #0
   15418:	1a000021 	bne	154a4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xb8>
   1541c:	e5953000 	ldr	r3, [r5]
   15420:	e1a01002 	mov	r1, r2
   15424:	e1a00005 	mov	r0, r5
   15428:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1542c:	e12fff33 	blx	r3
   15430:	e1a00004 	mov	r0, r4
   15434:	ebffd4a9 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
   15438:	e1a00004 	mov	r0, r4
   1543c:	e3a0102c 	mov	r1, #44	; 0x2c
   15440:	ebffd52a 	bl	a8f0 <CUSBRequest::operator delete(void*, unsigned int)>
   15444:	e1a00005 	mov	r0, r5
   15448:	ebffffb3 	bl	1531c <CUSBHIDDevice::StartRequest()>
   1544c:	e3500000 	cmp	r0, #0
   15450:	0a00000c 	beq	15488 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x9c>
   15454:	e28dd008 	add	sp, sp, #8
   15458:	e8bd8070 	pop	{r4, r5, r6, pc}
   1545c:	e5951024 	ldr	r1, [r5, #36]	; 0x24
   15460:	e5953000 	ldr	r3, [r5]
   15464:	e1a00004 	mov	r0, r4
   15468:	e58d1004 	str	r1, [sp, #4]
   1546c:	e5936024 	ldr	r6, [r3, #36]	; 0x24
   15470:	ebffd4ad 	bl	a72c <CUSBRequest::GetResultLength() const>
   15474:	e59d1004 	ldr	r1, [sp, #4]
   15478:	e1a02000 	mov	r2, r0
   1547c:	e1a00005 	mov	r0, r5
   15480:	e12fff36 	blx	r6
   15484:	eaffffe9 	b	15430 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x44>
   15488:	eb00299c 	bl	1fb00 <CLogger::Get()>
   1548c:	e3a02001 	mov	r2, #1
   15490:	e59f304c 	ldr	r3, [pc, #76]	; 154e4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xf8>
   15494:	e59f104c 	ldr	r1, [pc, #76]	; 154e8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xfc>
   15498:	e28dd008 	add	sp, sp, #8
   1549c:	e8bd4070 	pop	{r4, r5, r6, lr}
   154a0:	ea0028d8 	b	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   154a4:	e1a00004 	mov	r0, r4
   154a8:	ebffd4ab 	bl	a75c <CUSBRequest::GetUSBError() const>
   154ac:	e1a06000 	mov	r6, r0
   154b0:	e1a00004 	mov	r0, r4
   154b4:	ebffd489 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
   154b8:	e1a00004 	mov	r0, r4
   154bc:	e3a0102c 	mov	r1, #44	; 0x2c
   154c0:	ebffd50a 	bl	a8f0 <CUSBRequest::operator delete(void*, unsigned int)>
   154c4:	e3560003 	cmp	r6, #3
   154c8:	0affffdd 	beq	15444 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x58>
   154cc:	e28dd008 	add	sp, sp, #8
   154d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   154d4:	e3a020d3 	mov	r2, #211	; 0xd3
   154d8:	e59f100c 	ldr	r1, [pc, #12]	; 154ec <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x100>
   154dc:	e59f000c 	ldr	r0, [pc, #12]	; 154f0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x104>
   154e0:	eb002086 	bl	1d700 <assertion_failed>
   154e4:	0002ccd0 	.word	0x0002ccd0
   154e8:	0002e930 	.word	0x0002e930
   154ec:	0002e868 	.word	0x0002e868
   154f0:	0002c8e4 	.word	0x0002c8e4

000154f4 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   154f4:	e3520000 	cmp	r2, #0
   154f8:	0a000002 	beq	15508 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   154fc:	e1a01000 	mov	r1, r0
   15500:	e1a00002 	mov	r0, r2
   15504:	eaffffb8 	b	153ec <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   15508:	e3a020f6 	mov	r2, #246	; 0xf6
   1550c:	e92d4010 	push	{r4, lr}
   15510:	e59f1004 	ldr	r1, [pc, #4]	; 1551c <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   15514:	e59f0004 	ldr	r0, [pc, #4]	; 15520 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   15518:	eb002078 	bl	1d700 <assertion_failed>
   1551c:	0002e868 	.word	0x0002e868
   15520:	0002c8c4 	.word	0x0002c8c4

00015524 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   15524:	e92d4010 	push	{r4, lr}
   15528:	e1a04000 	mov	r4, r0
   1552c:	ebfff399 	bl	12398 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15530:	e3a03000 	mov	r3, #0
   15534:	e3a00000 	mov	r0, #0
   15538:	e3a01000 	mov	r1, #0
   1553c:	e59f2024 	ldr	r2, [pc, #36]	; 15568 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x44>
   15540:	e1c402f8 	strd	r0, [r4, #40]	; 0x28
   15544:	e5842000 	str	r2, [r4]
   15548:	e1a00004 	mov	r0, r4
   1554c:	e5843018 	str	r3, [r4, #24]
   15550:	e584301c 	str	r3, [r4, #28]
   15554:	e5843020 	str	r3, [r4, #32]
   15558:	e5843024 	str	r3, [r4, #36]	; 0x24
   1555c:	e5843030 	str	r3, [r4, #48]	; 0x30
   15560:	e5843034 	str	r3, [r4, #52]	; 0x34
   15564:	e8bd8010 	pop	{r4, pc}
   15568:	0002e978 	.word	0x0002e978

0001556c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   1556c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   15570:	e92d4070 	push	{r4, r5, r6, lr}
   15574:	e59f50c0 	ldr	r5, [pc, #192]	; 1563c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xd0>
   15578:	e3530000 	cmp	r3, #0
   1557c:	e1a04000 	mov	r4, r0
   15580:	e5805000 	str	r5, [r0]
   15584:	1a000021 	bne	15610 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xa4>
   15588:	e5945030 	ldr	r5, [r4, #48]	; 0x30
   1558c:	e3550000 	cmp	r5, #0
   15590:	0a000004 	beq	155a8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x3c>
   15594:	e1a00005 	mov	r0, r5
   15598:	eb001e91 	bl	1cfe4 <CPartitionManager::~CPartitionManager()>
   1559c:	e1a00005 	mov	r0, r5
   155a0:	e3a01024 	mov	r1, #36	; 0x24
   155a4:	eb0048ac 	bl	2785c <operator delete(void*, unsigned int)>
   155a8:	e3a03000 	mov	r3, #0
   155ac:	e594501c 	ldr	r5, [r4, #28]
   155b0:	e5843030 	str	r3, [r4, #48]	; 0x30
   155b4:	e1550003 	cmp	r5, r3
   155b8:	0a000004 	beq	155d0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x64>
   155bc:	e1a00005 	mov	r0, r5
   155c0:	ebfff274 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   155c4:	e1a00005 	mov	r0, r5
   155c8:	e3a01014 	mov	r1, #20
   155cc:	eb0048a2 	bl	2785c <operator delete(void*, unsigned int)>
   155d0:	e3a03000 	mov	r3, #0
   155d4:	e5945018 	ldr	r5, [r4, #24]
   155d8:	e584301c 	str	r3, [r4, #28]
   155dc:	e1550003 	cmp	r5, r3
   155e0:	0a000004 	beq	155f8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x8c>
   155e4:	e1a00005 	mov	r0, r5
   155e8:	ebfff26a 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   155ec:	e1a00005 	mov	r0, r5
   155f0:	e3a01014 	mov	r1, #20
   155f4:	eb004898 	bl	2785c <operator delete(void*, unsigned int)>
   155f8:	e3a03000 	mov	r3, #0
   155fc:	e1a00004 	mov	r0, r4
   15600:	e5843018 	str	r3, [r4, #24]
   15604:	ebfff2d0 	bl	1214c <CUSBFunction::~CUSBFunction()>
   15608:	e1a00004 	mov	r0, r4
   1560c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15610:	eb002314 	bl	1e268 <CDeviceNameService::Get()>
   15614:	e3a03001 	mov	r3, #1
   15618:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   1561c:	e2851024 	add	r1, r5, #36	; 0x24
   15620:	eb002336 	bl	1e300 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   15624:	e5941034 	ldr	r1, [r4, #52]	; 0x34
   15628:	e59f0010 	ldr	r0, [pc, #16]	; 15640 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xd4>
   1562c:	eb004a02 	bl	27e3c <CNumberPool::FreeNumber(unsigned int)>
   15630:	e3a03000 	mov	r3, #0
   15634:	e5843034 	str	r3, [r4, #52]	; 0x34
   15638:	eaffffd2 	b	15588 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x1c>
   1563c:	0002e978 	.word	0x0002e978
   15640:	00034bb8 	.word	0x00034bb8

00015644 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   15644:	e92d4010 	push	{r4, lr}
   15648:	e1a04000 	mov	r4, r0
   1564c:	ebffffc6 	bl	1556c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   15650:	e1a00004 	mov	r0, r4
   15654:	e3a01038 	mov	r1, #56	; 0x38
   15658:	eb00487f 	bl	2785c <operator delete(void*, unsigned int)>
   1565c:	e1a00004 	mov	r0, r4
   15660:	e8bd8010 	pop	{r4, pc}

00015664 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   15664:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15668:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   1566c:	e1a05000 	mov	r5, r0
   15670:	ebfff39c 	bl	124e8 <CUSBFunction::GetNumEndpoints() const>
   15674:	e3500001 	cmp	r0, #1
   15678:	8a000004 	bhi	15690 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   1567c:	ea0000c8 	b	159a4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x340>
   15680:	e5d43003 	ldrb	r3, [r4, #3]
   15684:	e203303f 	and	r3, r3, #63	; 0x3f
   15688:	e3530002 	cmp	r3, #2
   1568c:	0a000029 	beq	15738 <CUSBBulkOnlyMassStorageDevice::Configure()+0xd4>
   15690:	e3a01005 	mov	r1, #5
   15694:	e1a00005 	mov	r0, r5
   15698:	ebfff3be 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
   1569c:	e2504000 	subs	r4, r0, #0
   156a0:	1afffff6 	bne	15680 <CUSBBulkOnlyMassStorageDevice::Configure()+0x1c>
   156a4:	e5953018 	ldr	r3, [r5, #24]
   156a8:	e1a00005 	mov	r0, r5
   156ac:	e3530000 	cmp	r3, #0
   156b0:	0a0000ad 	beq	1596c <CUSBBulkOnlyMassStorageDevice::Configure()+0x308>
   156b4:	e595301c 	ldr	r3, [r5, #28]
   156b8:	e3530000 	cmp	r3, #0
   156bc:	0a0000aa 	beq	1596c <CUSBBulkOnlyMassStorageDevice::Configure()+0x308>
   156c0:	ebfff2ca 	bl	121f0 <CUSBFunction::Configure()>
   156c4:	e2506000 	subs	r6, r0, #0
   156c8:	0a0000ad 	beq	15984 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>
   156cc:	e3a00024 	mov	r0, #36	; 0x24
   156d0:	e3a07001 	mov	r7, #1
   156d4:	e3a0c012 	mov	ip, #18
   156d8:	e88d0081 	stm	sp, {r0, r7}
   156dc:	e1cd01b8 	strh	r0, [sp, #24]
   156e0:	e3a02006 	mov	r2, #6
   156e4:	e1a00005 	mov	r0, r5
   156e8:	e28d3044 	add	r3, sp, #68	; 0x44
   156ec:	e28d1014 	add	r1, sp, #20
   156f0:	e58dc014 	str	ip, [sp, #20]
   156f4:	eb0001b6 	bl	15dd4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   156f8:	e3500024 	cmp	r0, #36	; 0x24
   156fc:	1a0000af 	bne	159c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x35c>
   15700:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
   15704:	e213601f 	ands	r6, r3, #31
   15708:	03a04063 	moveq	r4, #99	; 0x63
   1570c:	0a00002a 	beq	157bc <CUSBBulkOnlyMassStorageDevice::Configure()+0x158>
   15710:	eb0028fa 	bl	1fb00 <CLogger::Get()>
   15714:	e5dd1044 	ldrb	r1, [sp, #68]	; 0x44
   15718:	e59f33a4 	ldr	r3, [pc, #932]	; 15ac4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x460>
   1571c:	e201101f 	and	r1, r1, #31
   15720:	e58d1000 	str	r1, [sp]
   15724:	e1a02007 	mov	r2, r7
   15728:	e243106c 	sub	r1, r3, #108	; 0x6c
   1572c:	e1a06004 	mov	r6, r4
   15730:	eb002834 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15734:	ea00008f 	b	15978 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   15738:	e1d430d2 	ldrsb	r3, [r4, #2]
   1573c:	e3530000 	cmp	r3, #0
   15740:	ba00007a 	blt	15930 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2cc>
   15744:	e595301c 	ldr	r3, [r5, #28]
   15748:	e1a00005 	mov	r0, r5
   1574c:	e3530000 	cmp	r3, #0
   15750:	1a000085 	bne	1596c <CUSBBulkOnlyMassStorageDevice::Configure()+0x308>
   15754:	ebfff36f 	bl	12518 <CUSBFunction::GetDevice() const>
   15758:	e1a01000 	mov	r1, r0
   1575c:	e3a00014 	mov	r0, #20
   15760:	e58d100c 	str	r1, [sp, #12]
   15764:	eb00482e 	bl	27824 <operator new(unsigned int)>
   15768:	e1a06000 	mov	r6, r0
   1576c:	e1a02004 	mov	r2, r4
   15770:	e59d100c 	ldr	r1, [sp, #12]
   15774:	ebfff1a9 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15778:	e585601c 	str	r6, [r5, #28]
   1577c:	eaffffc3 	b	15690 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   15780:	e3a00012 	mov	r0, #18
   15784:	e3a07001 	mov	r7, #1
   15788:	e3a0c003 	mov	ip, #3
   1578c:	e88d0081 	stm	sp, {r0, r7}
   15790:	e1cd02b8 	strh	r0, [sp, #40]	; 0x28
   15794:	e3a02006 	mov	r2, #6
   15798:	e1a00005 	mov	r0, r5
   1579c:	e28d3030 	add	r3, sp, #48	; 0x30
   157a0:	e28d1024 	add	r1, sp, #36	; 0x24
   157a4:	e58dc024 	str	ip, [sp, #36]	; 0x24
   157a8:	eb000189 	bl	15dd4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   157ac:	e3500000 	cmp	r0, #0
   157b0:	ba00008b 	blt	159e4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x380>
   157b4:	e2544001 	subs	r4, r4, #1
   157b8:	0a000098 	beq	15a20 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3bc>
   157bc:	eb0043dd 	bl	26738 <CTimer::Get()>
   157c0:	e3a00064 	mov	r0, #100	; 0x64
   157c4:	eb0043a6 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
   157c8:	e3a03000 	mov	r3, #0
   157cc:	e3a02006 	mov	r2, #6
   157d0:	e1a00005 	mov	r0, r5
   157d4:	e58d6004 	str	r6, [sp, #4]
   157d8:	e58d6000 	str	r6, [sp]
   157dc:	e28d101c 	add	r1, sp, #28
   157e0:	e58d601c 	str	r6, [sp, #28]
   157e4:	e1cd62b0 	strh	r6, [sp, #32]
   157e8:	eb000179 	bl	15dd4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   157ec:	e3500000 	cmp	r0, #0
   157f0:	baffffe2 	blt	15780 <CUSBBulkOnlyMassStorageDevice::Configure()+0x11c>
   157f4:	e3a02008 	mov	r2, #8
   157f8:	e3a04001 	mov	r4, #1
   157fc:	e3a0c025 	mov	ip, #37	; 0x25
   15800:	e88d0014 	stm	sp, {r2, r4}
   15804:	e1a00005 	mov	r0, r5
   15808:	e3a0200a 	mov	r2, #10
   1580c:	e28d301c 	add	r3, sp, #28
   15810:	e28d1024 	add	r1, sp, #36	; 0x24
   15814:	e58d6028 	str	r6, [sp, #40]	; 0x28
   15818:	e1cd62bc 	strh	r6, [sp, #44]	; 0x2c
   1581c:	e58dc024 	str	ip, [sp, #36]	; 0x24
   15820:	eb00016b 	bl	15dd4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   15824:	e3500008 	cmp	r0, #8
   15828:	1a000083 	bne	15a3c <CUSBBulkOnlyMassStorageDevice::Configure()+0x3d8>
   1582c:	e59d3020 	ldr	r3, [sp, #32]
   15830:	e3530802 	cmp	r3, #131072	; 0x20000
   15834:	e6bf6f33 	rev	r6, r3
   15838:	1a000070 	bne	15a00 <CUSBBulkOnlyMassStorageDevice::Configure()+0x39c>
   1583c:	e59d301c 	ldr	r3, [sp, #28]
   15840:	e6bf3f33 	rev	r3, r3
   15844:	e3730001 	cmn	r3, #1
   15848:	e5853024 	str	r3, [r5, #36]	; 0x24
   1584c:	0a000086 	beq	15a6c <CUSBBulkOnlyMassStorageDevice::Configure()+0x408>
   15850:	e2833001 	add	r3, r3, #1
   15854:	e5853024 	str	r3, [r5, #36]	; 0x24
   15858:	eb0028a8 	bl	1fb00 <CLogger::Get()>
   1585c:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   15860:	e59f3260 	ldr	r3, [pc, #608]	; 15ac8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x464>
   15864:	e1a025a2 	lsr	r2, r2, #11
   15868:	e24310f4 	sub	r1, r3, #244	; 0xf4
   1586c:	e58d2000 	str	r2, [sp]
   15870:	e3a02004 	mov	r2, #4
   15874:	eb0027e3 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15878:	e3a01000 	mov	r1, #0
   1587c:	e59f2248 	ldr	r2, [pc, #584]	; 15acc <CUSBBulkOnlyMassStorageDevice::Configure()+0x468>
   15880:	e59f0248 	ldr	r0, [pc, #584]	; 15ad0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x46c>
   15884:	eb004931 	bl	27d50 <CNumberPool::AllocateNumber(bool, char const*)>
   15888:	e3500040 	cmp	r0, #64	; 0x40
   1588c:	0a00007d 	beq	15a88 <CUSBBulkOnlyMassStorageDevice::Configure()+0x424>
   15890:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   15894:	e3530000 	cmp	r3, #0
   15898:	1a000085 	bne	15ab4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x450>
   1589c:	e5850034 	str	r0, [r5, #52]	; 0x34
   158a0:	e28d0030 	add	r0, sp, #48	; 0x30
   158a4:	eb003ab2 	bl	24374 <CString::CString()>
   158a8:	e5952034 	ldr	r2, [r5, #52]	; 0x34
   158ac:	e59f1220 	ldr	r1, [pc, #544]	; 15ad4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x470>
   158b0:	e28d0030 	add	r0, sp, #48	; 0x30
   158b4:	eb003ff4 	bl	2588c <CString::Format(char const*, ...)>
   158b8:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   158bc:	e3530000 	cmp	r3, #0
   158c0:	1a000077 	bne	15aa4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x440>
   158c4:	e28d0030 	add	r0, sp, #48	; 0x30
   158c8:	eb003ac1 	bl	243d4 <CString::operator char const*() const>
   158cc:	e1a02000 	mov	r2, r0
   158d0:	e3a00024 	mov	r0, #36	; 0x24
   158d4:	e58d200c 	str	r2, [sp, #12]
   158d8:	eb0047d1 	bl	27824 <operator new(unsigned int)>
   158dc:	e1a06000 	mov	r6, r0
   158e0:	e1a01005 	mov	r1, r5
   158e4:	e59d200c 	ldr	r2, [sp, #12]
   158e8:	eb001db1 	bl	1cfb4 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   158ec:	e1a00006 	mov	r0, r6
   158f0:	e5856030 	str	r6, [r5, #48]	; 0x30
   158f4:	eb001deb 	bl	1d0a8 <CPartitionManager::Initialize()>
   158f8:	e2506000 	subs	r6, r0, #0
   158fc:	0a000055 	beq	15a58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3f4>
   15900:	eb002258 	bl	1e268 <CDeviceNameService::Get()>
   15904:	e1a07000 	mov	r7, r0
   15908:	e28d0030 	add	r0, sp, #48	; 0x30
   1590c:	eb003ab0 	bl	243d4 <CString::operator char const*() const>
   15910:	e1a03004 	mov	r3, r4
   15914:	e1a01000 	mov	r1, r0
   15918:	e1a02005 	mov	r2, r5
   1591c:	e1a00007 	mov	r0, r7
   15920:	eb0021a0 	bl	1dfa8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   15924:	e28d0030 	add	r0, sp, #48	; 0x30
   15928:	eb003a5e 	bl	242a8 <CString::~CString()>
   1592c:	ea000011 	b	15978 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   15930:	e5953018 	ldr	r3, [r5, #24]
   15934:	e1a00005 	mov	r0, r5
   15938:	e3530000 	cmp	r3, #0
   1593c:	1a00000a 	bne	1596c <CUSBBulkOnlyMassStorageDevice::Configure()+0x308>
   15940:	ebfff2f4 	bl	12518 <CUSBFunction::GetDevice() const>
   15944:	e1a01000 	mov	r1, r0
   15948:	e3a00014 	mov	r0, #20
   1594c:	e58d100c 	str	r1, [sp, #12]
   15950:	eb0047b3 	bl	27824 <operator new(unsigned int)>
   15954:	e1a06000 	mov	r6, r0
   15958:	e1a02004 	mov	r2, r4
   1595c:	e59d100c 	ldr	r1, [sp, #12]
   15960:	ebfff12e 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15964:	e5856018 	str	r6, [r5, #24]
   15968:	eaffff48 	b	15690 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   1596c:	e59f1164 	ldr	r1, [pc, #356]	; 15ad8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x474>
   15970:	ebfff313 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   15974:	e3a06000 	mov	r6, #0
   15978:	e1a00006 	mov	r0, r6
   1597c:	e28dd06c 	add	sp, sp, #108	; 0x6c
   15980:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15984:	eb00285d 	bl	1fb00 <CLogger::Get()>
   15988:	e59f314c 	ldr	r3, [pc, #332]	; 15adc <CUSBBulkOnlyMassStorageDevice::Configure()+0x478>
   1598c:	e3a02001 	mov	r2, #1
   15990:	e243103c 	sub	r1, r3, #60	; 0x3c
   15994:	eb00279b 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15998:	e1a00006 	mov	r0, r6
   1599c:	e28dd06c 	add	sp, sp, #108	; 0x6c
   159a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   159a4:	e3a06000 	mov	r6, #0
   159a8:	e1a00005 	mov	r0, r5
   159ac:	e59f1124 	ldr	r1, [pc, #292]	; 15ad8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x474>
   159b0:	ebfff303 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   159b4:	e1a00006 	mov	r0, r6
   159b8:	e28dd06c 	add	sp, sp, #108	; 0x6c
   159bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   159c0:	e1a06004 	mov	r6, r4
   159c4:	eb00284d 	bl	1fb00 <CLogger::Get()>
   159c8:	e59f3110 	ldr	r3, [pc, #272]	; 15ae0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x47c>
   159cc:	e1a02007 	mov	r2, r7
   159d0:	e2431054 	sub	r1, r3, #84	; 0x54
   159d4:	eb00278b 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   159d8:	e1a00006 	mov	r0, r6
   159dc:	e28dd06c 	add	sp, sp, #108	; 0x6c
   159e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   159e4:	eb002845 	bl	1fb00 <CLogger::Get()>
   159e8:	e59f30f4 	ldr	r3, [pc, #244]	; 15ae4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x480>
   159ec:	e1a02007 	mov	r2, r7
   159f0:	e243108c 	sub	r1, r3, #140	; 0x8c
   159f4:	eb002783 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   159f8:	e3a06000 	mov	r6, #0
   159fc:	eaffffdd 	b	15978 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   15a00:	eb00283e 	bl	1fb00 <CLogger::Get()>
   15a04:	e59f30dc 	ldr	r3, [pc, #220]	; 15ae8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x484>
   15a08:	e58d6000 	str	r6, [sp]
   15a0c:	e1a02004 	mov	r2, r4
   15a10:	e24310bc 	sub	r1, r3, #188	; 0xbc
   15a14:	eb00277b 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15a18:	e3a06000 	mov	r6, #0
   15a1c:	eaffffd5 	b	15978 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   15a20:	eb002836 	bl	1fb00 <CLogger::Get()>
   15a24:	e59f30c0 	ldr	r3, [pc, #192]	; 15aec <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
   15a28:	e1a02007 	mov	r2, r7
   15a2c:	e2431f5e 	sub	r1, r3, #376	; 0x178
   15a30:	e1a06004 	mov	r6, r4
   15a34:	eb002773 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15a38:	eaffffce 	b	15978 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   15a3c:	eb00282f 	bl	1fb00 <CLogger::Get()>
   15a40:	e59f30a8 	ldr	r3, [pc, #168]	; 15af0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x48c>
   15a44:	e1a02004 	mov	r2, r4
   15a48:	e24310a4 	sub	r1, r3, #164	; 0xa4
   15a4c:	eb00276d 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15a50:	e3a06000 	mov	r6, #0
   15a54:	eaffffc7 	b	15978 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   15a58:	e5951034 	ldr	r1, [r5, #52]	; 0x34
   15a5c:	e59f006c 	ldr	r0, [pc, #108]	; 15ad0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x46c>
   15a60:	eb0048f5 	bl	27e3c <CNumberPool::FreeNumber(unsigned int)>
   15a64:	e5856034 	str	r6, [r5, #52]	; 0x34
   15a68:	eaffffad 	b	15924 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c0>
   15a6c:	eb002823 	bl	1fb00 <CLogger::Get()>
   15a70:	e59f307c 	ldr	r3, [pc, #124]	; 15af4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x490>
   15a74:	e1a02004 	mov	r2, r4
   15a78:	e24310d8 	sub	r1, r3, #216	; 0xd8
   15a7c:	eb002761 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15a80:	e3a06000 	mov	r6, #0
   15a84:	eaffffbb 	b	15978 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   15a88:	eb00281c 	bl	1fb00 <CLogger::Get()>
   15a8c:	e59f3064 	ldr	r3, [pc, #100]	; 15af8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x494>
   15a90:	e1a02004 	mov	r2, r4
   15a94:	e2431f45 	sub	r1, r3, #276	; 0x114
   15a98:	eb00275a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15a9c:	e3a06000 	mov	r6, #0
   15aa0:	eaffffb4 	b	15978 <CUSBBulkOnlyMassStorageDevice::Configure()+0x314>
   15aa4:	e59f1050 	ldr	r1, [pc, #80]	; 15afc <CUSBBulkOnlyMassStorageDevice::Configure()+0x498>
   15aa8:	e59f2050 	ldr	r2, [pc, #80]	; 15b00 <CUSBBulkOnlyMassStorageDevice::Configure()+0x49c>
   15aac:	e2810034 	add	r0, r1, #52	; 0x34
   15ab0:	eb001f12 	bl	1d700 <assertion_failed>
   15ab4:	e59f1040 	ldr	r1, [pc, #64]	; 15afc <CUSBBulkOnlyMassStorageDevice::Configure()+0x498>
   15ab8:	e59f2044 	ldr	r2, [pc, #68]	; 15b04 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a0>
   15abc:	e2810014 	add	r0, r1, #20
   15ac0:	eb001f0e 	bl	1d700 <assertion_failed>
   15ac4:	0002e9d4 	.word	0x0002e9d4
   15ac8:	0002ea5c 	.word	0x0002ea5c
   15acc:	0002ea74 	.word	0x0002ea74
   15ad0:	00034bb8 	.word	0x00034bb8
   15ad4:	0002eabc 	.word	0x0002eabc
   15ad8:	0002e968 	.word	0x0002e968
   15adc:	0002e9a4 	.word	0x0002e9a4
   15ae0:	0002e9bc 	.word	0x0002e9bc
   15ae4:	0002e9f4 	.word	0x0002e9f4
   15ae8:	0002ea24 	.word	0x0002ea24
   15aec:	0002eae0 	.word	0x0002eae0
   15af0:	0002ea0c 	.word	0x0002ea0c
   15af4:	0002ea40 	.word	0x0002ea40
   15af8:	0002ea7c 	.word	0x0002ea7c
   15afc:	0002ea90 	.word	0x0002ea90
   15b00:	00000193 	.word	0x00000193
   15b04:	0000018d 	.word	0x0000018d

00015b08 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   15b08:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b0c:	e1a05002 	mov	r5, r2
   15b10:	e1a07000 	mov	r7, r0
   15b14:	e1a09001 	mov	r9, r1
   15b18:	e1a08002 	mov	r8, r2
   15b1c:	e3a06004 	mov	r6, #4
   15b20:	e1a02005 	mov	r2, r5
   15b24:	e1a01009 	mov	r1, r9
   15b28:	e1a00007 	mov	r0, r7
   15b2c:	eb00002f 	bl	15bf0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   15b30:	e1500005 	cmp	r0, r5
   15b34:	e1a04000 	mov	r4, r0
   15b38:	1a000001 	bne	15b44 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
   15b3c:	e1a00008 	mov	r0, r8
   15b40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b44:	e1a00007 	mov	r0, r7
   15b48:	eb00017e 	bl	16148 <CUSBBulkOnlyMassStorageDevice::Reset()>
   15b4c:	e3500000 	cmp	r0, #0
   15b50:	1a000004 	bne	15b68 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
   15b54:	e2566001 	subs	r6, r6, #1
   15b58:	1afffff0 	bne	15b20 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
   15b5c:	e1a08004 	mov	r8, r4
   15b60:	e1a00008 	mov	r0, r8
   15b64:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b68:	e1a08000 	mov	r8, r0
   15b6c:	eafffff2 	b	15b3c <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

00015b70 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   15b70:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b74:	e1a05002 	mov	r5, r2
   15b78:	e1a07000 	mov	r7, r0
   15b7c:	e1a09001 	mov	r9, r1
   15b80:	e1a08002 	mov	r8, r2
   15b84:	e3a06004 	mov	r6, #4
   15b88:	e1a02005 	mov	r2, r5
   15b8c:	e1a01009 	mov	r1, r9
   15b90:	e1a00007 	mov	r0, r7
   15b94:	eb000052 	bl	15ce4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   15b98:	e1500005 	cmp	r0, r5
   15b9c:	e1a04000 	mov	r4, r0
   15ba0:	1a000001 	bne	15bac <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
   15ba4:	e1a00008 	mov	r0, r8
   15ba8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15bac:	e1a00007 	mov	r0, r7
   15bb0:	eb000164 	bl	16148 <CUSBBulkOnlyMassStorageDevice::Reset()>
   15bb4:	e3500000 	cmp	r0, #0
   15bb8:	1a000004 	bne	15bd0 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
   15bbc:	e2566001 	subs	r6, r6, #1
   15bc0:	1afffff0 	bne	15b88 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
   15bc4:	e1a08004 	mov	r8, r4
   15bc8:	e1a00008 	mov	r0, r8
   15bcc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15bd0:	e1a08000 	mov	r8, r0
   15bd4:	eafffff2 	b	15ba4 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

00015bd8 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
   15bd8:	e1c022f8 	strd	r2, [r0, #40]	; 0x28
   15bdc:	e1a01003 	mov	r1, r3
   15be0:	e1a00002 	mov	r0, r2
   15be4:	e12fff1e 	bx	lr

00015be8 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   15be8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   15bec:	e12fff1e 	bx	lr

00015bf0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
   15bf0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15bf4:	e2513000 	subs	r3, r1, #0
   15bf8:	e24dd01c 	sub	sp, sp, #28
   15bfc:	0a000027 	beq	15ca0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xb0>
   15c00:	e1c062d8 	ldrd	r6, [r0, #40]	; 0x28
   15c04:	e1a04002 	mov	r4, r2
   15c08:	e59f20c4 	ldr	r2, [pc, #196]	; 15cd4 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe4>
   15c0c:	e1a01000 	mov	r1, r0
   15c10:	e1120006 	tst	r2, r6
   15c14:	13a01001 	movne	r1, #1
   15c18:	03a01000 	moveq	r1, #0
   15c1c:	e3570c02 	cmp	r7, #512	; 0x200
   15c20:	03560000 	cmpeq	r6, #0
   15c24:	23811001 	orrcs	r1, r1, #1
   15c28:	e3510000 	cmp	r1, #0
   15c2c:	1a00001f 	bne	15cb0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc0>
   15c30:	e014c002 	ands	ip, r4, r2
   15c34:	e1a024a6 	lsr	r2, r6, #9
   15c38:	e1822b87 	orr	r2, r2, r7, lsl #23
   15c3c:	1a00001b 	bne	15cb0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc0>
   15c40:	e3a05001 	mov	r5, #1
   15c44:	e3a0e028 	mov	lr, #40	; 0x28
   15c48:	e1a014a4 	lsr	r1, r4, #9
   15c4c:	e6bf1fb1 	rev16	r1, r1
   15c50:	e6bf2f32 	rev	r2, r2
   15c54:	e1cd20be 	strh	r2, [sp, #14]
   15c58:	e5cdc012 	strb	ip, [sp, #18]
   15c5c:	e1a02822 	lsr	r2, r2, #16
   15c60:	e5cdc015 	strb	ip, [sp, #21]
   15c64:	e6ffc071 	uxth	ip, r1
   15c68:	e1cd21b0 	strh	r2, [sp, #16]
   15c6c:	e1a0c42c 	lsr	ip, ip, #8
   15c70:	e5cd1013 	strb	r1, [sp, #19]
   15c74:	e3a0200a 	mov	r2, #10
   15c78:	e1cd40f0 	strd	r4, [sp]
   15c7c:	e28d100c 	add	r1, sp, #12
   15c80:	e5cdc014 	strb	ip, [sp, #20]
   15c84:	e1cde0bc 	strh	lr, [sp, #12]
   15c88:	eb000051 	bl	15dd4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   15c8c:	e1500004 	cmp	r0, r4
   15c90:	1a000008 	bne	15cb8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc8>
   15c94:	e1a00004 	mov	r0, r4
   15c98:	e28dd01c 	add	sp, sp, #28
   15c9c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15ca0:	e59f1030 	ldr	r1, [pc, #48]	; 15cd8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe8>
   15ca4:	e59f2030 	ldr	r2, [pc, #48]	; 15cdc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xec>
   15ca8:	e2810064 	add	r0, r1, #100	; 0x64
   15cac:	eb001e93 	bl	1d700 <assertion_failed>
   15cb0:	e3e04000 	mvn	r4, #0
   15cb4:	eafffff6 	b	15c94 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xa4>
   15cb8:	eb002790 	bl	1fb00 <CLogger::Get()>
   15cbc:	e59f301c 	ldr	r3, [pc, #28]	; 15ce0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf0>
   15cc0:	e1a02005 	mov	r2, r5
   15cc4:	e2431f67 	sub	r1, r3, #412	; 0x19c
   15cc8:	eb0026ce 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15ccc:	e3e04000 	mvn	r4, #0
   15cd0:	eaffffef 	b	15c94 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xa4>
   15cd4:	000001ff 	.word	0x000001ff
   15cd8:	0002ea90 	.word	0x0002ea90
   15cdc:	000001e3 	.word	0x000001e3
   15ce0:	0002eb04 	.word	0x0002eb04

00015ce4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   15ce4:	e92d40d0 	push	{r4, r6, r7, lr}
   15ce8:	e2513000 	subs	r3, r1, #0
   15cec:	e24dd018 	sub	sp, sp, #24
   15cf0:	0a000026 	beq	15d90 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xac>
   15cf4:	e1c062d8 	ldrd	r6, [r0, #40]	; 0x28
   15cf8:	e1a04002 	mov	r4, r2
   15cfc:	e59f20c0 	ldr	r2, [pc, #192]	; 15dc4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe0>
   15d00:	e1a01000 	mov	r1, r0
   15d04:	e1120006 	tst	r2, r6
   15d08:	13a01001 	movne	r1, #1
   15d0c:	03a01000 	moveq	r1, #0
   15d10:	e3570c02 	cmp	r7, #512	; 0x200
   15d14:	03560000 	cmpeq	r6, #0
   15d18:	23811001 	orrcs	r1, r1, #1
   15d1c:	e3510000 	cmp	r1, #0
   15d20:	1a00001e 	bne	15da0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xbc>
   15d24:	e014c002 	ands	ip, r4, r2
   15d28:	e1a024a6 	lsr	r2, r6, #9
   15d2c:	e1822b87 	orr	r2, r2, r7, lsl #23
   15d30:	1a00001a 	bne	15da0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xbc>
   15d34:	e1a014a4 	lsr	r1, r4, #9
   15d38:	e6bf1fb1 	rev16	r1, r1
   15d3c:	e6bf2f32 	rev	r2, r2
   15d40:	e88d1010 	stm	sp, {r4, ip}
   15d44:	e6ffe071 	uxth	lr, r1
   15d48:	e1cd20be 	strh	r2, [sp, #14]
   15d4c:	e5cdc012 	strb	ip, [sp, #18]
   15d50:	e1a02822 	lsr	r2, r2, #16
   15d54:	e5cdc015 	strb	ip, [sp, #21]
   15d58:	e59fc068 	ldr	ip, [pc, #104]	; 15dc8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe4>
   15d5c:	e1a0e42e 	lsr	lr, lr, #8
   15d60:	e1cd21b0 	strh	r2, [sp, #16]
   15d64:	e5cd1013 	strb	r1, [sp, #19]
   15d68:	e3a0200a 	mov	r2, #10
   15d6c:	e28d100c 	add	r1, sp, #12
   15d70:	e5cde014 	strb	lr, [sp, #20]
   15d74:	e1cdc0bc 	strh	ip, [sp, #12]
   15d78:	eb000015 	bl	15dd4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   15d7c:	e3500000 	cmp	r0, #0
   15d80:	a1a00004 	movge	r0, r4
   15d84:	ba000007 	blt	15da8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc4>
   15d88:	e28dd018 	add	sp, sp, #24
   15d8c:	e8bd80d0 	pop	{r4, r6, r7, pc}
   15d90:	e59f1034 	ldr	r1, [pc, #52]	; 15dcc <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xe8>
   15d94:	e3a02f82 	mov	r2, #520	; 0x208
   15d98:	e2810064 	add	r0, r1, #100	; 0x64
   15d9c:	eb001e57 	bl	1d700 <assertion_failed>
   15da0:	e3e00000 	mvn	r0, #0
   15da4:	eafffff7 	b	15d88 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xa4>
   15da8:	eb002754 	bl	1fb00 <CLogger::Get()>
   15dac:	e59f301c 	ldr	r3, [pc, #28]	; 15dd0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xec>
   15db0:	e3a02001 	mov	r2, #1
   15db4:	e2431f6b 	sub	r1, r3, #428	; 0x1ac
   15db8:	eb002692 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15dbc:	e3e00000 	mvn	r0, #0
   15dc0:	eafffff0 	b	15d88 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xa4>
   15dc4:	000001ff 	.word	0x000001ff
   15dc8:	0000082a 	.word	0x0000082a
   15dcc:	0002ea90 	.word	0x0002ea90
   15dd0:	0002eb14 	.word	0x0002eb14

00015dd4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
   15dd4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dd8:	e2518000 	subs	r8, r1, #0
   15ddc:	e24dd064 	sub	sp, sp, #100	; 0x64
   15de0:	e59d9088 	ldr	r9, [sp, #136]	; 0x88
   15de4:	e5dda08c 	ldrb	sl, [sp, #140]	; 0x8c
   15de8:	0a00008e 	beq	16028 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x254>
   15dec:	e1a07003 	mov	r7, r3
   15df0:	e2423006 	sub	r3, r2, #6
   15df4:	e353000a 	cmp	r3, #10
   15df8:	e1a06002 	mov	r6, r2
   15dfc:	8a000092 	bhi	1604c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   15e00:	e2573000 	subs	r3, r7, #0
   15e04:	13a03001 	movne	r3, #1
   15e08:	e3590000 	cmp	r9, #0
   15e0c:	03a03001 	moveq	r3, #1
   15e10:	e3530000 	cmp	r3, #0
   15e14:	0a000090 	beq	1605c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x288>
   15e18:	e1a05000 	mov	r5, r0
   15e1c:	e28d4027 	add	r4, sp, #39	; 0x27
   15e20:	e3c4401f 	bic	r4, r4, #31
   15e24:	e284b020 	add	fp, r4, #32
   15e28:	e3a0201f 	mov	r2, #31
   15e2c:	e3a01000 	mov	r1, #0
   15e30:	e1a0000b 	mov	r0, fp
   15e34:	eb00424b 	bl	26768 <memset>
   15e38:	e35a0000 	cmp	sl, #0
   15e3c:	13a00080 	movne	r0, #128	; 0x80
   15e40:	03a00000 	moveq	r0, #0
   15e44:	e5d4e02e 	ldrb	lr, [r4, #46]	; 0x2e
   15e48:	e5953020 	ldr	r3, [r5, #32]
   15e4c:	e3ce201f 	bic	r2, lr, #31
   15e50:	e206e01f 	and	lr, r6, #31
   15e54:	e2833001 	add	r3, r3, #1
   15e58:	e5d4c02d 	ldrb	ip, [r4, #45]	; 0x2d
   15e5c:	e18ee002 	orr	lr, lr, r2
   15e60:	e5853020 	str	r3, [r5, #32]
   15e64:	e5c4e02e 	strb	lr, [r4, #46]	; 0x2e
   15e68:	e59fe2a8 	ldr	lr, [pc, #680]	; 16118 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x344>
   15e6c:	e3ccc00f 	bic	ip, ip, #15
   15e70:	e1a02006 	mov	r2, r6
   15e74:	e1a01008 	mov	r1, r8
   15e78:	e5c4002c 	strb	r0, [r4, #44]	; 0x2c
   15e7c:	e5843024 	str	r3, [r4, #36]	; 0x24
   15e80:	e5c4c02d 	strb	ip, [r4, #45]	; 0x2d
   15e84:	e584e020 	str	lr, [r4, #32]
   15e88:	e5849028 	str	r9, [r4, #40]	; 0x28
   15e8c:	e284002f 	add	r0, r4, #47	; 0x2f
   15e90:	eb00447d 	bl	2708c <memcpy>
   15e94:	e1a00005 	mov	r0, r5
   15e98:	ebfff1b3 	bl	1256c <CUSBFunction::GetHost() const>
   15e9c:	e2506000 	subs	r6, r0, #0
   15ea0:	0a000071 	beq	1606c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   15ea4:	e3a08000 	mov	r8, #0
   15ea8:	e58d8000 	str	r8, [sp]
   15eac:	e1a0200b 	mov	r2, fp
   15eb0:	e3a0301f 	mov	r3, #31
   15eb4:	e595101c 	ldr	r1, [r5, #28]
   15eb8:	ebffccba 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   15ebc:	e1500008 	cmp	r0, r8
   15ec0:	ba00008d 	blt	160fc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x328>
   15ec4:	e3590000 	cmp	r9, #0
   15ec8:	0a00001b 	beq	15f3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x168>
   15ecc:	e3570000 	cmp	r7, #0
   15ed0:	0a000069 	beq	1607c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   15ed4:	e1873009 	orr	r3, r7, r9
   15ed8:	e213301f 	ands	r3, r3, #31
   15edc:	0a000031 	beq	15fa8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1d4>
   15ee0:	e1a01008 	mov	r1, r8
   15ee4:	e1a00009 	mov	r0, r9
   15ee8:	eb00464c 	bl	27820 <operator new[](unsigned int, int)>
   15eec:	e35a0000 	cmp	sl, #0
   15ef0:	e1a0b000 	mov	fp, r0
   15ef4:	0a00003d 	beq	15ff0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x21c>
   15ef8:	e58d8000 	str	r8, [sp]
   15efc:	e1a02000 	mov	r2, r0
   15f00:	e1a03009 	mov	r3, r9
   15f04:	e1a00006 	mov	r0, r6
   15f08:	e5951018 	ldr	r1, [r5, #24]
   15f0c:	ebffcca5 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   15f10:	e2508000 	subs	r8, r0, #0
   15f14:	aa000047 	bge	16038 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x264>
   15f18:	eb0026f8 	bl	1fb00 <CLogger::Get()>
   15f1c:	e59f31f8 	ldr	r3, [pc, #504]	; 1611c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x348>
   15f20:	e3a02001 	mov	r2, #1
   15f24:	e2431e23 	sub	r1, r3, #560	; 0x230
   15f28:	eb002636 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15f2c:	e1a0000b 	mov	r0, fp
   15f30:	eb004648 	bl	27858 <operator delete[](void*)>
   15f34:	e3e08000 	mvn	r8, #0
   15f38:	ea000017 	b	15f9c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c8>
   15f3c:	e1a08009 	mov	r8, r9
   15f40:	e3a03000 	mov	r3, #0
   15f44:	e58d3000 	str	r3, [sp]
   15f48:	e1a00006 	mov	r0, r6
   15f4c:	e3a0300d 	mov	r3, #13
   15f50:	e1a02004 	mov	r2, r4
   15f54:	e5951018 	ldr	r1, [r5, #24]
   15f58:	ebffcc92 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   15f5c:	e350000d 	cmp	r0, #13
   15f60:	1a000049 	bne	1608c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b8>
   15f64:	e59f31b4 	ldr	r3, [pc, #436]	; 16120 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x34c>
   15f68:	e5942000 	ldr	r2, [r4]
   15f6c:	e1520003 	cmp	r2, r3
   15f70:	1a000053 	bne	160c4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2f0>
   15f74:	e5953020 	ldr	r3, [r5, #32]
   15f78:	e5942004 	ldr	r2, [r4, #4]
   15f7c:	e1520003 	cmp	r2, r3
   15f80:	1a000048 	bne	160a8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2d4>
   15f84:	e5d4300c 	ldrb	r3, [r4, #12]
   15f88:	e3530000 	cmp	r3, #0
   15f8c:	1a000015 	bne	15fe8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x214>
   15f90:	e5943008 	ldr	r3, [r4, #8]
   15f94:	e3530000 	cmp	r3, #0
   15f98:	1a000050 	bne	160e0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x30c>
   15f9c:	e1a00008 	mov	r0, r8
   15fa0:	e28dd064 	add	sp, sp, #100	; 0x64
   15fa4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fa8:	e595001c 	ldr	r0, [r5, #28]
   15fac:	e35a0000 	cmp	sl, #0
   15fb0:	e5951018 	ldr	r1, [r5, #24]
   15fb4:	e1a02007 	mov	r2, r7
   15fb8:	01a01000 	moveq	r1, r0
   15fbc:	e58d3000 	str	r3, [sp]
   15fc0:	e1a00006 	mov	r0, r6
   15fc4:	e1a03009 	mov	r3, r9
   15fc8:	ebffcc76 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   15fcc:	e2508000 	subs	r8, r0, #0
   15fd0:	aaffffda 	bge	15f40 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x16c>
   15fd4:	eb0026c9 	bl	1fb00 <CLogger::Get()>
   15fd8:	e59f313c 	ldr	r3, [pc, #316]	; 1611c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x348>
   15fdc:	e3a02001 	mov	r2, #1
   15fe0:	e2431e23 	sub	r1, r3, #560	; 0x230
   15fe4:	eb002607 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15fe8:	e3e08000 	mvn	r8, #0
   15fec:	eaffffea 	b	15f9c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c8>
   15ff0:	e1a01007 	mov	r1, r7
   15ff4:	e1a02009 	mov	r2, r9
   15ff8:	eb004423 	bl	2708c <memcpy>
   15ffc:	e58da000 	str	sl, [sp]
   16000:	e1a03009 	mov	r3, r9
   16004:	e1a0200b 	mov	r2, fp
   16008:	e1a00006 	mov	r0, r6
   1600c:	e595101c 	ldr	r1, [r5, #28]
   16010:	ebffcc64 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16014:	e2508000 	subs	r8, r0, #0
   16018:	baffffbe 	blt	15f18 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x144>
   1601c:	e1a0000b 	mov	r0, fp
   16020:	eb00460c 	bl	27858 <operator delete[](void*)>
   16024:	eaffffc5 	b	15f40 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x16c>
   16028:	e59f10f4 	ldr	r1, [pc, #244]	; 16124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x350>
   1602c:	e59f20f4 	ldr	r2, [pc, #244]	; 16128 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x354>
   16030:	e2810094 	add	r0, r1, #148	; 0x94
   16034:	eb001db1 	bl	1d700 <assertion_failed>
   16038:	e1a02009 	mov	r2, r9
   1603c:	e1a00007 	mov	r0, r7
   16040:	e1a0100b 	mov	r1, fp
   16044:	eb004410 	bl	2708c <memcpy>
   16048:	eafffff3 	b	1601c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x248>
   1604c:	e59f10d0 	ldr	r1, [pc, #208]	; 16124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x350>
   16050:	e59f20d4 	ldr	r2, [pc, #212]	; 1612c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x358>
   16054:	e28100a4 	add	r0, r1, #164	; 0xa4
   16058:	eb001da8 	bl	1d700 <assertion_failed>
   1605c:	e59f10c0 	ldr	r1, [pc, #192]	; 16124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x350>
   16060:	e3a02e23 	mov	r2, #560	; 0x230
   16064:	e28100c8 	add	r0, r1, #200	; 0xc8
   16068:	eb001da4 	bl	1d700 <assertion_failed>
   1606c:	e59f10b0 	ldr	r1, [pc, #176]	; 16124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x350>
   16070:	e3a02d09 	mov	r2, #576	; 0x240
   16074:	e28100e8 	add	r0, r1, #232	; 0xe8
   16078:	eb001da0 	bl	1d700 <assertion_failed>
   1607c:	e59f10a0 	ldr	r1, [pc, #160]	; 16124 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x350>
   16080:	e59f20a8 	ldr	r2, [pc, #168]	; 16130 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x35c>
   16084:	e2810064 	add	r0, r1, #100	; 0x64
   16088:	eb001d9c 	bl	1d700 <assertion_failed>
   1608c:	eb00269b 	bl	1fb00 <CLogger::Get()>
   16090:	e59f309c 	ldr	r3, [pc, #156]	; 16134 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x360>
   16094:	e3a02001 	mov	r2, #1
   16098:	e2431f92 	sub	r1, r3, #584	; 0x248
   1609c:	eb0025d9 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   160a0:	e3e08000 	mvn	r8, #0
   160a4:	eaffffbc 	b	15f9c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c8>
   160a8:	eb002694 	bl	1fb00 <CLogger::Get()>
   160ac:	e59f3084 	ldr	r3, [pc, #132]	; 16138 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x364>
   160b0:	e3a02001 	mov	r2, #1
   160b4:	e2431f9d 	sub	r1, r3, #628	; 0x274
   160b8:	eb0025d2 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   160bc:	e3e08000 	mvn	r8, #0
   160c0:	eaffffb5 	b	15f9c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c8>
   160c4:	eb00268d 	bl	1fb00 <CLogger::Get()>
   160c8:	e59f306c 	ldr	r3, [pc, #108]	; 1613c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x368>
   160cc:	e3a02001 	mov	r2, #1
   160d0:	e2431f97 	sub	r1, r3, #604	; 0x25c
   160d4:	eb0025cb 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   160d8:	e3e08000 	mvn	r8, #0
   160dc:	eaffffae 	b	15f9c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c8>
   160e0:	eb002686 	bl	1fb00 <CLogger::Get()>
   160e4:	e59f3054 	ldr	r3, [pc, #84]	; 16140 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x36c>
   160e8:	e3a02001 	mov	r2, #1
   160ec:	e2431fa2 	sub	r1, r3, #648	; 0x288
   160f0:	eb0025c4 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   160f4:	e3e08000 	mvn	r8, #0
   160f8:	eaffffa7 	b	15f9c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c8>
   160fc:	eb00267f 	bl	1fb00 <CLogger::Get()>
   16100:	e59f303c 	ldr	r3, [pc, #60]	; 16144 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x370>
   16104:	e3a02001 	mov	r2, #1
   16108:	e2431f87 	sub	r1, r3, #540	; 0x21c
   1610c:	eb0025bd 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16110:	e3e08000 	mvn	r8, #0
   16114:	eaffffa0 	b	15f9c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c8>
   16118:	43425355 	.word	0x43425355
   1611c:	0002eb98 	.word	0x0002eb98
   16120:	53425355 	.word	0x53425355
   16124:	0002ea90 	.word	0x0002ea90
   16128:	0000022e 	.word	0x0000022e
   1612c:	0000022f 	.word	0x0000022f
   16130:	0000024d 	.word	0x0000024d
   16134:	0002ebb0 	.word	0x0002ebb0
   16138:	0002ebdc 	.word	0x0002ebdc
   1613c:	0002ebc4 	.word	0x0002ebc4
   16140:	0002ebf0 	.word	0x0002ebf0
   16144:	0002eb84 	.word	0x0002eb84

00016148 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   16148:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1614c:	e24dd014 	sub	sp, sp, #20
   16150:	e1a05000 	mov	r5, r0
   16154:	ebfff104 	bl	1256c <CUSBFunction::GetHost() const>
   16158:	e2506000 	subs	r6, r0, #0
   1615c:	0a00002e 	beq	1621c <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
   16160:	e1a00005 	mov	r0, r5
   16164:	ebfff0f5 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   16168:	e3a04000 	mov	r4, #0
   1616c:	e1a01000 	mov	r1, r0
   16170:	e3a030ff 	mov	r3, #255	; 0xff
   16174:	e3a02021 	mov	r2, #33	; 0x21
   16178:	e1a00006 	mov	r0, r6
   1617c:	e58d400c 	str	r4, [sp, #12]
   16180:	e58d4008 	str	r4, [sp, #8]
   16184:	e58d4004 	str	r4, [sp, #4]
   16188:	e58d4000 	str	r4, [sp]
   1618c:	ebffcb9f 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16190:	e1500004 	cmp	r0, r4
   16194:	ba000024 	blt	1622c <CUSBBulkOnlyMassStorageDevice::Reset()+0xe4>
   16198:	e1a00005 	mov	r0, r5
   1619c:	ebfff0e7 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   161a0:	e3a07001 	mov	r7, #1
   161a4:	e1a01000 	mov	r1, r0
   161a8:	e1a03007 	mov	r3, r7
   161ac:	e3a02002 	mov	r2, #2
   161b0:	e1a00006 	mov	r0, r6
   161b4:	e88d0090 	stm	sp, {r4, r7}
   161b8:	e58d400c 	str	r4, [sp, #12]
   161bc:	e58d4008 	str	r4, [sp, #8]
   161c0:	ebffcb92 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   161c4:	e3500000 	cmp	r0, #0
   161c8:	ba000025 	blt	16264 <CUSBBulkOnlyMassStorageDevice::Reset()+0x11c>
   161cc:	e1a00005 	mov	r0, r5
   161d0:	ebfff0da 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   161d4:	e3a02002 	mov	r2, #2
   161d8:	e1a01000 	mov	r1, r0
   161dc:	e1a03007 	mov	r3, r7
   161e0:	e1a00006 	mov	r0, r6
   161e4:	e58d400c 	str	r4, [sp, #12]
   161e8:	e58d4008 	str	r4, [sp, #8]
   161ec:	e58d4000 	str	r4, [sp]
   161f0:	e58d2004 	str	r2, [sp, #4]
   161f4:	ebffcb85 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   161f8:	e3500000 	cmp	r0, #0
   161fc:	ba000011 	blt	16248 <CUSBBulkOnlyMassStorageDevice::Reset()+0x100>
   16200:	e5950018 	ldr	r0, [r5, #24]
   16204:	ebffefc0 	bl	1210c <CUSBEndpoint::ResetPID()>
   16208:	e595001c 	ldr	r0, [r5, #28]
   1620c:	ebffefbe 	bl	1210c <CUSBEndpoint::ResetPID()>
   16210:	e1a00004 	mov	r0, r4
   16214:	e28dd014 	add	sp, sp, #20
   16218:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1621c:	e59f105c 	ldr	r1, [pc, #92]	; 16280 <CUSBBulkOnlyMassStorageDevice::Reset()+0x138>
   16220:	e59f205c 	ldr	r2, [pc, #92]	; 16284 <CUSBBulkOnlyMassStorageDevice::Reset()+0x13c>
   16224:	e28100e8 	add	r0, r1, #232	; 0xe8
   16228:	eb001d34 	bl	1d700 <assertion_failed>
   1622c:	eb002633 	bl	1fb00 <CLogger::Get()>
   16230:	e59f3050 	ldr	r3, [pc, #80]	; 16288 <CUSBBulkOnlyMassStorageDevice::Reset()+0x140>
   16234:	e3a02004 	mov	r2, #4
   16238:	e2431e2a 	sub	r1, r3, #672	; 0x2a0
   1623c:	eb002571 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16240:	e3e00000 	mvn	r0, #0
   16244:	eafffff2 	b	16214 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   16248:	eb00262c 	bl	1fb00 <CLogger::Get()>
   1624c:	e59f3038 	ldr	r3, [pc, #56]	; 1628c <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   16250:	e3a02004 	mov	r2, #4
   16254:	e2431fb5 	sub	r1, r3, #724	; 0x2d4
   16258:	eb00256a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1625c:	e3e00000 	mvn	r0, #0
   16260:	eaffffeb 	b	16214 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   16264:	eb002625 	bl	1fb00 <CLogger::Get()>
   16268:	e59f3020 	ldr	r3, [pc, #32]	; 16290 <CUSBBulkOnlyMassStorageDevice::Reset()+0x148>
   1626c:	e3a02004 	mov	r2, #4
   16270:	e2431fad 	sub	r1, r3, #692	; 0x2b4
   16274:	eb002563 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16278:	e3e00000 	mvn	r0, #0
   1627c:	eaffffe4 	b	16214 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   16280:	0002ea90 	.word	0x0002ea90
   16284:	0000029b 	.word	0x0000029b
   16288:	0002ec08 	.word	0x0002ec08
   1628c:	0002ec3c 	.word	0x0002ec3c
   16290:	0002ec1c 	.word	0x0002ec1c

00016294 <__static_initialization_and_destruction_0(int, int)>:
   16294:	e59f300c 	ldr	r3, [pc, #12]	; 162a8 <__static_initialization_and_destruction_0(int, int)+0x14>
   16298:	e1510003 	cmp	r1, r3
   1629c:	03500001 	cmpeq	r0, #1
   162a0:	112fff1e 	bxne	lr
   162a4:	ea000000 	b	162ac <__static_initialization_and_destruction_0(int, int) [clone .part.0]>
   162a8:	0000ffff 	.word	0x0000ffff

000162ac <__static_initialization_and_destruction_0(int, int) [clone .part.0]>:
   162ac:	e92d4010 	push	{r4, lr}
   162b0:	e59f4020 	ldr	r4, [pc, #32]	; 162d8 <__static_initialization_and_destruction_0(int, int) [clone .part.0]+0x2c>
   162b4:	e3a0203f 	mov	r2, #63	; 0x3f
   162b8:	e1a00004 	mov	r0, r4
   162bc:	e3a01001 	mov	r1, #1
   162c0:	eb00468d 	bl	27cfc <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   162c4:	e1a00004 	mov	r0, r4
   162c8:	e8bd4010 	pop	{r4, lr}
   162cc:	e59f2008 	ldr	r2, [pc, #8]	; 162dc <__static_initialization_and_destruction_0(int, int) [clone .part.0]+0x30>
   162d0:	e59f1008 	ldr	r1, [pc, #8]	; 162e0 <__static_initialization_and_destruction_0(int, int) [clone .part.0]+0x34>
   162d4:	ea003d77 	b	258b8 <__aeabi_atexit>
   162d8:	00034bb8 	.word	0x00034bb8
   162dc:	00034c44 	.word	0x00034c44
   162e0:	00027d4c 	.word	0x00027d4c

000162e4 <_GLOBAL__sub_I__ZN29CUSBBulkOnlyMassStorageDevice18s_DeviceNumberPoolE>:
   162e4:	eafffff0 	b	162ac <__static_initialization_and_destruction_0(int, int) [clone .part.0]>

000162e8 <CUSBMouseDevice::~CUSBMouseDevice()>:
   162e8:	e92d4010 	push	{r4, lr}
   162ec:	e1a04000 	mov	r4, r0
   162f0:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   162f4:	e59f3044 	ldr	r3, [pc, #68]	; 16340 <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   162f8:	e3500000 	cmp	r0, #0
   162fc:	e5843000 	str	r3, [r4]
   16300:	0a000002 	beq	16310 <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   16304:	e5903000 	ldr	r3, [r0]
   16308:	e5933004 	ldr	r3, [r3, #4]
   1630c:	e12fff33 	blx	r3
   16310:	e3a03000 	mov	r3, #0
   16314:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   16318:	e5843028 	str	r3, [r4, #40]	; 0x28
   1631c:	e1500003 	cmp	r0, r3
   16320:	0a000000 	beq	16328 <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   16324:	eb00454b 	bl	27858 <operator delete[](void*)>
   16328:	e3a03000 	mov	r3, #0
   1632c:	e1a00004 	mov	r0, r4
   16330:	e584302c 	str	r3, [r4, #44]	; 0x2c
   16334:	ebfffaac 	bl	14dec <CUSBHIDDevice::~CUSBHIDDevice()>
   16338:	e1a00004 	mov	r0, r4
   1633c:	e8bd8010 	pop	{r4, pc}
   16340:	0002ecc4 	.word	0x0002ecc4

00016344 <CUSBMouseDevice::~CUSBMouseDevice()>:
   16344:	e92d4010 	push	{r4, lr}
   16348:	e1a04000 	mov	r4, r0
   1634c:	ebffffe5 	bl	162e8 <CUSBMouseDevice::~CUSBMouseDevice()>
   16350:	e1a00004 	mov	r0, r4
   16354:	e3a0105c 	mov	r1, #92	; 0x5c
   16358:	eb00453f 	bl	2785c <operator delete(void*, unsigned int)>
   1635c:	e1a00004 	mov	r0, r4
   16360:	e8bd8010 	pop	{r4, pc}

00016364 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   16364:	e92d4010 	push	{r4, lr}
   16368:	e3a02000 	mov	r2, #0
   1636c:	e1a04000 	mov	r4, r0
   16370:	ebfffa88 	bl	14d98 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   16374:	e3a03000 	mov	r3, #0
   16378:	e59f2010 	ldr	r2, [pc, #16]	; 16390 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   1637c:	e1a00004 	mov	r0, r4
   16380:	e5843028 	str	r3, [r4, #40]	; 0x28
   16384:	e5842000 	str	r2, [r4]
   16388:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1638c:	e8bd8010 	pop	{r4, pc}
   16390:	0002ecc4 	.word	0x0002ecc4

00016394 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)>:
   16394:	e3510000 	cmp	r1, #0
   16398:	e92d4010 	push	{r4, lr}
   1639c:	0a000017 	beq	16400 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x6c>
   163a0:	e3530020 	cmp	r3, #32
   163a4:	8a000019 	bhi	16410 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x7c>
   163a8:	e3530000 	cmp	r3, #0
   163ac:	0a000011 	beq	163f8 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x64>
   163b0:	e3530018 	cmp	r3, #24
   163b4:	e202c007 	and	ip, r2, #7
   163b8:	e081e1a2 	add	lr, r1, r2, lsr #3
   163bc:	e79121a2 	ldr	r2, [r1, r2, lsr #3]
   163c0:	9a000008 	bls	163e8 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x54>
   163c4:	e3e04000 	mvn	r4, #0
   163c8:	e59e1003 	ldr	r1, [lr, #3]
   163cc:	e1a00c32 	lsr	r0, r2, ip
   163d0:	e2433018 	sub	r3, r3, #24
   163d4:	e1a02c31 	lsr	r2, r1, ip
   163d8:	e1c23314 	bic	r3, r2, r4, lsl r3
   163dc:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
   163e0:	e1800c03 	orr	r0, r0, r3, lsl #24
   163e4:	e8bd8010 	pop	{r4, pc}
   163e8:	e3e01000 	mvn	r1, #0
   163ec:	e1a00c32 	lsr	r0, r2, ip
   163f0:	e1c00311 	bic	r0, r0, r1, lsl r3
   163f4:	e8bd8010 	pop	{r4, pc}
   163f8:	e1a00003 	mov	r0, r3
   163fc:	e8bd8010 	pop	{r4, pc}
   16400:	e3a020ac 	mov	r2, #172	; 0xac
   16404:	e59f1014 	ldr	r1, [pc, #20]	; 16420 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x8c>
   16408:	e59f0014 	ldr	r0, [pc, #20]	; 16424 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x90>
   1640c:	eb001cbb 	bl	1d700 <assertion_failed>
   16410:	e3a020ad 	mov	r2, #173	; 0xad
   16414:	e59f1004 	ldr	r1, [pc, #4]	; 16420 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x8c>
   16418:	e59f0008 	ldr	r0, [pc, #8]	; 16428 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x94>
   1641c:	eb001cb7 	bl	1d700 <assertion_failed>
   16420:	0002ec5c 	.word	0x0002ec5c
   16424:	0002ec6c 	.word	0x0002ec6c
   16428:	0002ec78 	.word	0x0002ec78

0001642c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>:
   1642c:	e3510000 	cmp	r1, #0
   16430:	e92d4010 	push	{r4, lr}
   16434:	0a00000c 	beq	1646c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x40>
   16438:	e3530020 	cmp	r3, #32
   1643c:	e1a04003 	mov	r4, r3
   16440:	8a00000d 	bhi	1647c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x50>
   16444:	ebffffd2 	bl	16394 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)>
   16448:	e3d43020 	bics	r3, r4, #32
   1644c:	08bd8010 	popeq	{r4, pc}
   16450:	e3a03001 	mov	r3, #1
   16454:	e2442001 	sub	r2, r4, #1
   16458:	e0102213 	ands	r2, r0, r3, lsl r2
   1645c:	11a03413 	lslne	r3, r3, r4
   16460:	12633000 	rsbne	r3, r3, #0
   16464:	11800003 	orrne	r0, r0, r3
   16468:	e8bd8010 	pop	{r4, pc}
   1646c:	e3a020cf 	mov	r2, #207	; 0xcf
   16470:	e59f1014 	ldr	r1, [pc, #20]	; 1648c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x60>
   16474:	e59f0014 	ldr	r0, [pc, #20]	; 16490 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x64>
   16478:	eb001ca0 	bl	1d700 <assertion_failed>
   1647c:	e3a020d0 	mov	r2, #208	; 0xd0
   16480:	e59f1004 	ldr	r1, [pc, #4]	; 1648c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x60>
   16484:	e59f0008 	ldr	r0, [pc, #8]	; 16494 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x68>
   16488:	eb001c9c 	bl	1d700 <assertion_failed>
   1648c:	0002ec5c 	.word	0x0002ec5c
   16490:	0002ec6c 	.word	0x0002ec6c
   16494:	0002ec78 	.word	0x0002ec78

00016498 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   16498:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1649c:	e2515000 	subs	r5, r1, #0
   164a0:	e24dd00c 	sub	sp, sp, #12
   164a4:	0a000003 	beq	164b8 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x20>
   164a8:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   164ac:	e1a04000 	mov	r4, r0
   164b0:	e1530002 	cmp	r3, r2
   164b4:	0a000001 	beq	164c0 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x28>
   164b8:	e28dd00c 	add	sp, sp, #12
   164bc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   164c0:	e5907028 	ldr	r7, [r0, #40]	; 0x28
   164c4:	e3570000 	cmp	r7, #0
   164c8:	0afffffa 	beq	164b8 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x20>
   164cc:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   164d0:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   164d4:	ebffffae 	bl	16394 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)>
   164d8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   164dc:	e1a06000 	mov	r6, r0
   164e0:	e5942048 	ldr	r2, [r4, #72]	; 0x48
   164e4:	e1a00004 	mov	r0, r4
   164e8:	e1a01005 	mov	r1, r5
   164ec:	ebffffce 	bl	1642c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   164f0:	e3e0907e 	mvn	r9, #126	; 0x7e
   164f4:	e1500009 	cmp	r0, r9
   164f8:	b1a0c009 	movlt	ip, r9
   164fc:	a1a0c000 	movge	ip, r0
   16500:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   16504:	e35c007f 	cmp	ip, #127	; 0x7f
   16508:	e5942050 	ldr	r2, [r4, #80]	; 0x50
   1650c:	e1a00004 	mov	r0, r4
   16510:	e1a01005 	mov	r1, r5
   16514:	b1a0800c 	movlt	r8, ip
   16518:	a3a0807f 	movge	r8, #127	; 0x7f
   1651c:	ebffffc2 	bl	1642c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   16520:	e1500009 	cmp	r0, r9
   16524:	a1a0c000 	movge	ip, r0
   16528:	b1a0c009 	movlt	ip, r9
   1652c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   16530:	e5942058 	ldr	r2, [r4, #88]	; 0x58
   16534:	e35c007f 	cmp	ip, #127	; 0x7f
   16538:	e1a00004 	mov	r0, r4
   1653c:	e1a01005 	mov	r1, r5
   16540:	b1a0400c 	movlt	r4, ip
   16544:	a3a0407f 	movge	r4, #127	; 0x7f
   16548:	ebffffb7 	bl	1642c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   1654c:	e2061001 	and	r1, r6, #1
   16550:	e3160002 	tst	r6, #2
   16554:	13811002 	orrne	r1, r1, #2
   16558:	e3160004 	tst	r6, #4
   1655c:	13811004 	orrne	r1, r1, #4
   16560:	e3160008 	tst	r6, #8
   16564:	13811008 	orrne	r1, r1, #8
   16568:	e3160010 	tst	r6, #16
   1656c:	e58d0000 	str	r0, [sp]
   16570:	e1a03004 	mov	r3, r4
   16574:	e1a02008 	mov	r2, r8
   16578:	e1a00007 	mov	r0, r7
   1657c:	13811010 	orrne	r1, r1, #16
   16580:	eb001920 	bl	1ca08 <CMouseDevice::ReportHandler(unsigned int, int, int, int)>
   16584:	e28dd00c 	add	sp, sp, #12
   16588:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0001658c <CUSBMouseDevice::DecodeReport()>:
   1658c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16590:	e3a05000 	mov	r5, #0
   16594:	e24dd01c 	sub	sp, sp, #28
   16598:	e58d0000 	str	r0, [sp]
   1659c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   165a0:	e58d5008 	str	r5, [sp, #8]
   165a4:	e1500005 	cmp	r0, r5
   165a8:	e58d500c 	str	r5, [sp, #12]
   165ac:	e58d5010 	str	r5, [sp, #16]
   165b0:	e58d5014 	str	r5, [sp, #20]
   165b4:	0a0000b6 	beq	16894 <CUSBMouseDevice::DecodeReport()+0x308>
   165b8:	e59d3000 	ldr	r3, [sp]
   165bc:	e1d313b0 	ldrh	r1, [r3, #48]	; 0x30
   165c0:	e3510000 	cmp	r1, #0
   165c4:	0a0000b6 	beq	168a4 <CUSBMouseDevice::DecodeReport()+0x318>
   165c8:	e1a0e005 	mov	lr, r5
   165cc:	e1a06005 	mov	r6, r5
   165d0:	e1a04005 	mov	r4, r5
   165d4:	e1a0a005 	mov	sl, r5
   165d8:	e1a0c005 	mov	ip, r5
   165dc:	e1a0b005 	mov	fp, r5
   165e0:	e1a07005 	mov	r7, r5
   165e4:	ea00000c 	b	1661c <CUSBMouseDevice::DecodeReport()+0x90>
   165e8:	e3530084 	cmp	r3, #132	; 0x84
   165ec:	1a00004e 	bne	1672c <CUSBMouseDevice::DecodeReport()+0x1a0>
   165f0:	e3550000 	cmp	r5, #0
   165f4:	0a00004c 	beq	1672c <CUSBMouseDevice::DecodeReport()+0x1a0>
   165f8:	e35a0000 	cmp	sl, #0
   165fc:	1042e00a 	subne	lr, r2, sl
   16600:	116fef1e 	clzne	lr, lr
   16604:	01a0a002 	moveq	sl, r2
   16608:	01a0e005 	moveq	lr, r5
   1660c:	02877008 	addeq	r7, r7, #8
   16610:	11a0e2ae 	lsrne	lr, lr, #5
   16614:	e3510000 	cmp	r1, #0
   16618:	0a000035 	beq	166f4 <CUSBMouseDevice::DecodeReport()+0x168>
   1661c:	e1d030d0 	ldrsb	r3, [r0]
   16620:	e2032003 	and	r2, r3, #3
   16624:	e3520001 	cmp	r2, #1
   16628:	0a00005f 	beq	167ac <CUSBMouseDevice::DecodeReport()+0x220>
   1662c:	e3520002 	cmp	r2, #2
   16630:	0a000056 	beq	16790 <CUSBMouseDevice::DecodeReport()+0x204>
   16634:	e3520000 	cmp	r2, #0
   16638:	02411001 	subeq	r1, r1, #1
   1663c:	06ff1071 	uxtheq	r1, r1
   16640:	02800001 	addeq	r0, r0, #1
   16644:	0a00000a 	beq	16674 <CUSBMouseDevice::DecodeReport()+0xe8>
   16648:	e1d020d3 	ldrsb	r2, [r0, #3]
   1664c:	e1d080d2 	ldrsb	r8, [r0, #2]
   16650:	e1d090d1 	ldrsb	r9, [r0, #1]
   16654:	e1a02802 	lsl	r2, r2, #16
   16658:	e1822408 	orr	r2, r2, r8, lsl #8
   1665c:	e1d080d4 	ldrsb	r8, [r0, #4]
   16660:	e2411005 	sub	r1, r1, #5
   16664:	e1822009 	orr	r2, r2, r9
   16668:	e6ff1071 	uxth	r1, r1
   1666c:	e1822c08 	orr	r2, r2, r8, lsl #24
   16670:	e2800005 	add	r0, r0, #5
   16674:	e20330fc 	and	r3, r3, #252	; 0xfc
   16678:	e35300a0 	cmp	r3, #160	; 0xa0
   1667c:	0a000029 	beq	16728 <CUSBMouseDevice::DecodeReport()+0x19c>
   16680:	ca000022 	bgt	16710 <CUSBMouseDevice::DecodeReport()+0x184>
   16684:	e3530008 	cmp	r3, #8
   16688:	1affffd6 	bne	165e8 <CUSBMouseDevice::DecodeReport()+0x5c>
   1668c:	e3520002 	cmp	r2, #2
   16690:	0a00004f 	beq	167d4 <CUSBMouseDevice::DecodeReport()+0x248>
   16694:	e2423001 	sub	r3, r2, #1
   16698:	e16f3f13 	clz	r3, r3
   1669c:	e35a0000 	cmp	sl, #0
   166a0:	e1a032a3 	lsr	r3, r3, #5
   166a4:	13a03000 	movne	r3, #0
   166a8:	e3530000 	cmp	r3, #0
   166ac:	1a000058 	bne	16814 <CUSBMouseDevice::DecodeReport()+0x288>
   166b0:	e35e0000 	cmp	lr, #0
   166b4:	0affffd6 	beq	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   166b8:	e3520031 	cmp	r2, #49	; 0x31
   166bc:	0a000046 	beq	167dc <CUSBMouseDevice::DecodeReport()+0x250>
   166c0:	e3520038 	cmp	r2, #56	; 0x38
   166c4:	0a00004b 	beq	167f8 <CUSBMouseDevice::DecodeReport()+0x26c>
   166c8:	e3520030 	cmp	r2, #48	; 0x30
   166cc:	13a0e001 	movne	lr, #1
   166d0:	1affffcf 	bne	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   166d4:	e3a02001 	mov	r2, #1
   166d8:	e28d3018 	add	r3, sp, #24
   166dc:	e0833106 	add	r3, r3, r6, lsl #2
   166e0:	e3510000 	cmp	r1, #0
   166e4:	e1a0e002 	mov	lr, r2
   166e8:	e5032010 	str	r2, [r3, #-16]
   166ec:	e0866002 	add	r6, r6, r2
   166f0:	1affffc9 	bne	1661c <CUSBMouseDevice::DecodeReport()+0x90>
   166f4:	e2871007 	add	r1, r7, #7
   166f8:	e1a011a1 	lsr	r1, r1, #3
   166fc:	e59d3000 	ldr	r3, [sp]
   16700:	e583a034 	str	sl, [r3, #52]	; 0x34
   16704:	e5831038 	str	r1, [r3, #56]	; 0x38
   16708:	e28dd01c 	add	sp, sp, #28
   1670c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16710:	e35300c0 	cmp	r3, #192	; 0xc0
   16714:	1a000004 	bne	1672c <CUSBMouseDevice::DecodeReport()+0x1a0>
   16718:	e2544001 	subs	r4, r4, #1
   1671c:	1a000002 	bne	1672c <CUSBMouseDevice::DecodeReport()+0x1a0>
   16720:	e1a0e004 	mov	lr, r4
   16724:	eaffffba 	b	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   16728:	e2844001 	add	r4, r4, #1
   1672c:	e35e0000 	cmp	lr, #0
   16730:	0affffb7 	beq	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   16734:	e3530080 	cmp	r3, #128	; 0x80
   16738:	0a000020 	beq	167c0 <CUSBMouseDevice::DecodeReport()+0x234>
   1673c:	ca000010 	bgt	16784 <CUSBMouseDevice::DecodeReport()+0x1f8>
   16740:	e3530074 	cmp	r3, #116	; 0x74
   16744:	01a0b002 	moveq	fp, r2
   16748:	0affffb1 	beq	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   1674c:	caffffb0 	bgt	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   16750:	e3530004 	cmp	r3, #4
   16754:	1a000007 	bne	16778 <CUSBMouseDevice::DecodeReport()+0x1ec>
   16758:	e3520009 	cmp	r2, #9
   1675c:	1affffac 	bne	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   16760:	e3a02000 	mov	r2, #0
   16764:	e28d3018 	add	r3, sp, #24
   16768:	e0833106 	add	r3, r3, r6, lsl #2
   1676c:	e5032010 	str	r2, [r3, #-16]
   16770:	e2866001 	add	r6, r6, #1
   16774:	eaffffa6 	b	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   16778:	e3530008 	cmp	r3, #8
   1677c:	1affffa4 	bne	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   16780:	eaffffcc 	b	166b8 <CUSBMouseDevice::DecodeReport()+0x12c>
   16784:	e3530094 	cmp	r3, #148	; 0x94
   16788:	01a0c002 	moveq	ip, r2
   1678c:	eaffffa0 	b	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   16790:	e5d02001 	ldrb	r2, [r0, #1]
   16794:	e1d080d2 	ldrsb	r8, [r0, #2]
   16798:	e2411003 	sub	r1, r1, #3
   1679c:	e6ff1071 	uxth	r1, r1
   167a0:	e1822408 	orr	r2, r2, r8, lsl #8
   167a4:	e2800003 	add	r0, r0, #3
   167a8:	eaffffb1 	b	16674 <CUSBMouseDevice::DecodeReport()+0xe8>
   167ac:	e2411002 	sub	r1, r1, #2
   167b0:	e1d020d1 	ldrsb	r2, [r0, #1]
   167b4:	e6ff1071 	uxth	r1, r1
   167b8:	e2800002 	add	r0, r0, #2
   167bc:	eaffffac 	b	16674 <CUSBMouseDevice::DecodeReport()+0xe8>
   167c0:	e2022003 	and	r2, r2, #3
   167c4:	e3520002 	cmp	r2, #2
   167c8:	0a000014 	beq	16820 <CUSBMouseDevice::DecodeReport()+0x294>
   167cc:	e0277b9c 	mla	r7, ip, fp, r7
   167d0:	eaffff8f 	b	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   167d4:	e3a05001 	mov	r5, #1
   167d8:	eaffffb4 	b	166b0 <CUSBMouseDevice::DecodeReport()+0x124>
   167dc:	e3a02002 	mov	r2, #2
   167e0:	e28d3018 	add	r3, sp, #24
   167e4:	e0833106 	add	r3, r3, r6, lsl #2
   167e8:	e3a0e001 	mov	lr, #1
   167ec:	e5032010 	str	r2, [r3, #-16]
   167f0:	e2866001 	add	r6, r6, #1
   167f4:	eaffff86 	b	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   167f8:	e3a02003 	mov	r2, #3
   167fc:	e28d3018 	add	r3, sp, #24
   16800:	e0833106 	add	r3, r3, r6, lsl #2
   16804:	e3a0e001 	mov	lr, #1
   16808:	e5032010 	str	r2, [r3, #-16]
   1680c:	e2866001 	add	r6, r6, #1
   16810:	eaffff7f 	b	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   16814:	e1a0e003 	mov	lr, r3
   16818:	e3a0a000 	mov	sl, #0
   1681c:	eaffff7c 	b	16614 <CUSBMouseDevice::DecodeReport()+0x88>
   16820:	e3560003 	cmp	r6, #3
   16824:	8a000020 	bhi	168ac <CUSBMouseDevice::DecodeReport()+0x320>
   16828:	e3560000 	cmp	r6, #0
   1682c:	0a000016 	beq	1688c <CUSBMouseDevice::DecodeReport()+0x300>
   16830:	e28d2008 	add	r2, sp, #8
   16834:	e1a08007 	mov	r8, r7
   16838:	e59d9000 	ldr	r9, [sp]
   1683c:	e0826106 	add	r6, r2, r6, lsl #2
   16840:	e58de004 	str	lr, [sp, #4]
   16844:	ea000008 	b	1686c <CUSBMouseDevice::DecodeReport()+0x2e0>
   16848:	e3530000 	cmp	r3, #0
   1684c:	11a0e00b 	movne	lr, fp
   16850:	01a0e00c 	moveq	lr, ip
   16854:	e0893183 	add	r3, r9, r3, lsl #3
   16858:	e1560002 	cmp	r6, r2
   1685c:	e5838040 	str	r8, [r3, #64]	; 0x40
   16860:	e583e03c 	str	lr, [r3, #60]	; 0x3c
   16864:	e088800e 	add	r8, r8, lr
   16868:	0a000006 	beq	16888 <CUSBMouseDevice::DecodeReport()+0x2fc>
   1686c:	e4923004 	ldr	r3, [r2], #4
   16870:	e3530003 	cmp	r3, #3
   16874:	9afffff3 	bls	16848 <CUSBMouseDevice::DecodeReport()+0x2bc>
   16878:	e59f203c 	ldr	r2, [pc, #60]	; 168bc <CUSBMouseDevice::DecodeReport()+0x330>
   1687c:	e59f103c 	ldr	r1, [pc, #60]	; 168c0 <CUSBMouseDevice::DecodeReport()+0x334>
   16880:	e59f003c 	ldr	r0, [pc, #60]	; 168c4 <CUSBMouseDevice::DecodeReport()+0x338>
   16884:	eb001b9d 	bl	1d700 <assertion_failed>
   16888:	e59de004 	ldr	lr, [sp, #4]
   1688c:	e3a06000 	mov	r6, #0
   16890:	eaffffcd 	b	167cc <CUSBMouseDevice::DecodeReport()+0x240>
   16894:	e3a020eb 	mov	r2, #235	; 0xeb
   16898:	e59f1020 	ldr	r1, [pc, #32]	; 168c0 <CUSBMouseDevice::DecodeReport()+0x334>
   1689c:	e59f0024 	ldr	r0, [pc, #36]	; 168c8 <CUSBMouseDevice::DecodeReport()+0x33c>
   168a0:	eb001b96 	bl	1d700 <assertion_failed>
   168a4:	e1a0a001 	mov	sl, r1
   168a8:	eaffff93 	b	166fc <CUSBMouseDevice::DecodeReport()+0x170>
   168ac:	e59f2018 	ldr	r2, [pc, #24]	; 168cc <CUSBMouseDevice::DecodeReport()+0x340>
   168b0:	e59f1008 	ldr	r1, [pc, #8]	; 168c0 <CUSBMouseDevice::DecodeReport()+0x334>
   168b4:	e59f0014 	ldr	r0, [pc, #20]	; 168d0 <CUSBMouseDevice::DecodeReport()+0x344>
   168b8:	eb001b90 	bl	1d700 <assertion_failed>
   168bc:	00000169 	.word	0x00000169
   168c0:	0002ec5c 	.word	0x0002ec5c
   168c4:	0002eca4 	.word	0x0002eca4
   168c8:	0002e42c 	.word	0x0002e42c
   168cc:	00000165 	.word	0x00000165
   168d0:	0002ec88 	.word	0x0002ec88

000168d4 <CUSBMouseDevice::Configure()>:
   168d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   168d8:	e3a01021 	mov	r1, #33	; 0x21
   168dc:	e24dd01c 	sub	sp, sp, #28
   168e0:	e1a04000 	mov	r4, r0
   168e4:	ebffef2b 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
   168e8:	e2505000 	subs	r5, r0, #0
   168ec:	0a000003 	beq	16900 <CUSBMouseDevice::Configure()+0x2c>
   168f0:	e5d50007 	ldrb	r0, [r5, #7]
   168f4:	e5d53008 	ldrb	r3, [r5, #8]
   168f8:	e1900403 	orrs	r0, r0, r3, lsl #8
   168fc:	1a000005 	bne	16918 <CUSBMouseDevice::Configure()+0x44>
   16900:	e1a00004 	mov	r0, r4
   16904:	e59f1114 	ldr	r1, [pc, #276]	; 16a20 <CUSBMouseDevice::Configure()+0x14c>
   16908:	ebffef2d 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   1690c:	e3a00000 	mov	r0, #0
   16910:	e28dd01c 	add	sp, sp, #28
   16914:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16918:	e1c403b0 	strh	r0, [r4, #48]	; 0x30
   1691c:	eb0043c6 	bl	2783c <operator new[](unsigned int)>
   16920:	e1a03000 	mov	r3, r0
   16924:	e1a00004 	mov	r0, r4
   16928:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1692c:	ebffef0e 	bl	1256c <CUSBFunction::GetHost() const>
   16930:	e1a06000 	mov	r6, r0
   16934:	e1a00004 	mov	r0, r4
   16938:	ebffef00 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   1693c:	e1a01000 	mov	r1, r0
   16940:	e5d52006 	ldrb	r2, [r5, #6]
   16944:	e1a00004 	mov	r0, r4
   16948:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
   1694c:	e1d473b0 	ldrh	r7, [r4, #48]	; 0x30
   16950:	e58d1014 	str	r1, [sp, #20]
   16954:	e58d2010 	str	r2, [sp, #16]
   16958:	ebffef5f 	bl	126dc <CUSBFunction::GetInterfaceNumber() const>
   1695c:	e3a0c081 	mov	ip, #129	; 0x81
   16960:	e6ff3070 	uxth	r3, r0
   16964:	e58d300c 	str	r3, [sp, #12]
   16968:	e1a00006 	mov	r0, r6
   1696c:	e3a03000 	mov	r3, #0
   16970:	e88d00a0 	stm	sp, {r5, r7}
   16974:	e59d1014 	ldr	r1, [sp, #20]
   16978:	e59d2010 	ldr	r2, [sp, #16]
   1697c:	e58dc008 	str	ip, [sp, #8]
   16980:	ebffc9d4 	bl	90d8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   16984:	e1d433b0 	ldrh	r3, [r4, #48]	; 0x30
   16988:	e1500003 	cmp	r0, r3
   1698c:	0a000007 	beq	169b0 <CUSBMouseDevice::Configure()+0xdc>
   16990:	eb00245a 	bl	1fb00 <CLogger::Get()>
   16994:	e3a02001 	mov	r2, #1
   16998:	e59f3084 	ldr	r3, [pc, #132]	; 16a24 <CUSBMouseDevice::Configure()+0x150>
   1699c:	e59f107c 	ldr	r1, [pc, #124]	; 16a20 <CUSBMouseDevice::Configure()+0x14c>
   169a0:	eb002398 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   169a4:	e3a00000 	mov	r0, #0
   169a8:	e28dd01c 	add	sp, sp, #28
   169ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   169b0:	e1a00004 	mov	r0, r4
   169b4:	ebfffef4 	bl	1658c <CUSBMouseDevice::DecodeReport()>
   169b8:	e5941038 	ldr	r1, [r4, #56]	; 0x38
   169bc:	e3510000 	cmp	r1, #0
   169c0:	0affffd1 	beq	1690c <CUSBMouseDevice::Configure()+0x38>
   169c4:	e1a00004 	mov	r0, r4
   169c8:	ebfff932 	bl	14e98 <CUSBHIDDevice::Configure(unsigned int)>
   169cc:	e3500000 	cmp	r0, #0
   169d0:	0a00000c 	beq	16a08 <CUSBMouseDevice::Configure()+0x134>
   169d4:	e3a00038 	mov	r0, #56	; 0x38
   169d8:	eb004391 	bl	27824 <operator new(unsigned int)>
   169dc:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   169e0:	e594103c 	ldr	r1, [r4, #60]	; 0x3c
   169e4:	e2522000 	subs	r2, r2, #0
   169e8:	13a02001 	movne	r2, #1
   169ec:	e1a05000 	mov	r5, r0
   169f0:	eb0017c6 	bl	1c910 <CMouseDevice::CMouseDevice(unsigned int, bool)>
   169f4:	e1a00004 	mov	r0, r4
   169f8:	e5845028 	str	r5, [r4, #40]	; 0x28
   169fc:	e28dd01c 	add	sp, sp, #28
   16a00:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   16a04:	eafffa44 	b	1531c <CUSBHIDDevice::StartRequest()>
   16a08:	eb00243c 	bl	1fb00 <CLogger::Get()>
   16a0c:	e3a02001 	mov	r2, #1
   16a10:	e59f3010 	ldr	r3, [pc, #16]	; 16a28 <CUSBMouseDevice::Configure()+0x154>
   16a14:	e59f1004 	ldr	r1, [pc, #4]	; 16a20 <CUSBMouseDevice::Configure()+0x14c>
   16a18:	eb00237a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16a1c:	eaffffba 	b	1690c <CUSBMouseDevice::Configure()+0x38>
   16a20:	0002ecec 	.word	0x0002ecec
   16a24:	0002e448 	.word	0x0002e448
   16a28:	0002c75c 	.word	0x0002c75c

00016a2c <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   16a2c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   16a30:	e92d4070 	push	{r4, r5, r6, lr}
   16a34:	e59f5090 	ldr	r5, [pc, #144]	; 16acc <CUSBPrinterDevice::~CUSBPrinterDevice()+0xa0>
   16a38:	e3530000 	cmp	r3, #0
   16a3c:	e1a04000 	mov	r4, r0
   16a40:	e5805000 	str	r5, [r0]
   16a44:	1a000017 	bne	16aa8 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x7c>
   16a48:	e5945020 	ldr	r5, [r4, #32]
   16a4c:	e3550000 	cmp	r5, #0
   16a50:	0a000004 	beq	16a68 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x3c>
   16a54:	e1a00005 	mov	r0, r5
   16a58:	ebffed4e 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   16a5c:	e1a00005 	mov	r0, r5
   16a60:	e3a01014 	mov	r1, #20
   16a64:	eb00437c 	bl	2785c <operator delete(void*, unsigned int)>
   16a68:	e3a03000 	mov	r3, #0
   16a6c:	e594501c 	ldr	r5, [r4, #28]
   16a70:	e5843020 	str	r3, [r4, #32]
   16a74:	e1550003 	cmp	r5, r3
   16a78:	0a000004 	beq	16a90 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x64>
   16a7c:	e1a00005 	mov	r0, r5
   16a80:	ebffed44 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   16a84:	e1a00005 	mov	r0, r5
   16a88:	e3a01014 	mov	r1, #20
   16a8c:	eb004372 	bl	2785c <operator delete(void*, unsigned int)>
   16a90:	e3a03000 	mov	r3, #0
   16a94:	e1a00004 	mov	r0, r4
   16a98:	e584301c 	str	r3, [r4, #28]
   16a9c:	ebffedaa 	bl	1214c <CUSBFunction::~CUSBFunction()>
   16aa0:	e1a00004 	mov	r0, r4
   16aa4:	e8bd8070 	pop	{r4, r5, r6, pc}
   16aa8:	eb001dee 	bl	1e268 <CDeviceNameService::Get()>
   16aac:	e2851024 	add	r1, r5, #36	; 0x24
   16ab0:	e3a03000 	mov	r3, #0
   16ab4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   16ab8:	eb001e10 	bl	1e300 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   16abc:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   16ac0:	e59f0008 	ldr	r0, [pc, #8]	; 16ad0 <CUSBPrinterDevice::~CUSBPrinterDevice()+0xa4>
   16ac4:	eb0044dc 	bl	27e3c <CNumberPool::FreeNumber(unsigned int)>
   16ac8:	eaffffde 	b	16a48 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x1c>
   16acc:	0002ed38 	.word	0x0002ed38
   16ad0:	00034bc8 	.word	0x00034bc8

00016ad4 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   16ad4:	e92d4010 	push	{r4, lr}
   16ad8:	e1a04000 	mov	r4, r0
   16adc:	ebffffd2 	bl	16a2c <CUSBPrinterDevice::~CUSBPrinterDevice()>
   16ae0:	e1a00004 	mov	r0, r4
   16ae4:	e3a01028 	mov	r1, #40	; 0x28
   16ae8:	eb00435b 	bl	2785c <operator delete(void*, unsigned int)>
   16aec:	e1a00004 	mov	r0, r4
   16af0:	e8bd8010 	pop	{r4, pc}

00016af4 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   16af4:	e92d4070 	push	{r4, r5, r6, lr}
   16af8:	e2515000 	subs	r5, r1, #0
   16afc:	e24dd008 	sub	sp, sp, #8
   16b00:	0a000011 	beq	16b4c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x58>
   16b04:	e3520000 	cmp	r2, #0
   16b08:	e1a04002 	mov	r4, r2
   16b0c:	0a000012 	beq	16b5c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x68>
   16b10:	e1a06000 	mov	r6, r0
   16b14:	ebffee94 	bl	1256c <CUSBFunction::GetHost() const>
   16b18:	e3500000 	cmp	r0, #0
   16b1c:	0a000012 	beq	16b6c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x78>
   16b20:	e3a03000 	mov	r3, #0
   16b24:	e5961020 	ldr	r1, [r6, #32]
   16b28:	e1a02005 	mov	r2, r5
   16b2c:	e58d3000 	str	r3, [sp]
   16b30:	e1a03004 	mov	r3, r4
   16b34:	ebffc99b 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16b38:	e3500000 	cmp	r0, #0
   16b3c:	a1a00004 	movge	r0, r4
   16b40:	b3e00000 	mvnlt	r0, #0
   16b44:	e28dd008 	add	sp, sp, #8
   16b48:	e8bd8070 	pop	{r4, r5, r6, pc}
   16b4c:	e3a02088 	mov	r2, #136	; 0x88
   16b50:	e59f1024 	ldr	r1, [pc, #36]	; 16b7c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   16b54:	e59f0024 	ldr	r0, [pc, #36]	; 16b80 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x8c>
   16b58:	eb001ae8 	bl	1d700 <assertion_failed>
   16b5c:	e3a02089 	mov	r2, #137	; 0x89
   16b60:	e59f1014 	ldr	r1, [pc, #20]	; 16b7c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   16b64:	e59f0018 	ldr	r0, [pc, #24]	; 16b84 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x90>
   16b68:	eb001ae4 	bl	1d700 <assertion_failed>
   16b6c:	e3a0208c 	mov	r2, #140	; 0x8c
   16b70:	e59f1004 	ldr	r1, [pc, #4]	; 16b7c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   16b74:	e59f000c 	ldr	r0, [pc, #12]	; 16b88 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x94>
   16b78:	eb001ae0 	bl	1d700 <assertion_failed>
   16b7c:	0002ecf4 	.word	0x0002ecf4
   16b80:	0002e89c 	.word	0x0002e89c
   16b84:	0002ed04 	.word	0x0002ed04
   16b88:	0002cd28 	.word	0x0002cd28

00016b8c <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   16b8c:	e92d4010 	push	{r4, lr}
   16b90:	e1a04000 	mov	r4, r0
   16b94:	ebffedff 	bl	12398 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   16b98:	e3a03000 	mov	r3, #0
   16b9c:	e59f2018 	ldr	r2, [pc, #24]	; 16bbc <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x30>
   16ba0:	e1a00004 	mov	r0, r4
   16ba4:	e5c43018 	strb	r3, [r4, #24]
   16ba8:	e5842000 	str	r2, [r4]
   16bac:	e584301c 	str	r3, [r4, #28]
   16bb0:	e5843020 	str	r3, [r4, #32]
   16bb4:	e5843024 	str	r3, [r4, #36]	; 0x24
   16bb8:	e8bd8010 	pop	{r4, pc}
   16bbc:	0002ed38 	.word	0x0002ed38

00016bc0 <CUSBPrinterDevice::Configure()>:
   16bc0:	e92d4070 	push	{r4, r5, r6, lr}
   16bc4:	e24dd010 	sub	sp, sp, #16
   16bc8:	e1a05000 	mov	r5, r0
   16bcc:	ebffeee6 	bl	1276c <CUSBFunction::GetInterfaceProtocol() const>
   16bd0:	e2403001 	sub	r3, r0, #1
   16bd4:	e3530001 	cmp	r3, #1
   16bd8:	e5c50018 	strb	r0, [r5, #24]
   16bdc:	8a000035 	bhi	16cb8 <CUSBPrinterDevice::Configure()+0xf8>
   16be0:	e1a00005 	mov	r0, r5
   16be4:	ebffee3f 	bl	124e8 <CUSBFunction::GetNumEndpoints() const>
   16be8:	e5d53018 	ldrb	r3, [r5, #24]
   16bec:	e3530001 	cmp	r3, #1
   16bf0:	03a03001 	moveq	r3, #1
   16bf4:	13a03002 	movne	r3, #2
   16bf8:	e1500003 	cmp	r0, r3
   16bfc:	aa00000a 	bge	16c2c <CUSBPrinterDevice::Configure()+0x6c>
   16c00:	e3a04000 	mov	r4, #0
   16c04:	e1a00005 	mov	r0, r5
   16c08:	e59f11ac 	ldr	r1, [pc, #428]	; 16dbc <CUSBPrinterDevice::Configure()+0x1fc>
   16c0c:	ebffee6c 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   16c10:	e1a00004 	mov	r0, r4
   16c14:	e28dd010 	add	sp, sp, #16
   16c18:	e8bd8070 	pop	{r4, r5, r6, pc}
   16c1c:	e5d41003 	ldrb	r1, [r4, #3]
   16c20:	e201103f 	and	r1, r1, #63	; 0x3f
   16c24:	e3510002 	cmp	r1, #2
   16c28:	0a00002d 	beq	16ce4 <CUSBPrinterDevice::Configure()+0x124>
   16c2c:	e3a01005 	mov	r1, #5
   16c30:	e1a00005 	mov	r0, r5
   16c34:	ebffee57 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
   16c38:	e2504000 	subs	r4, r0, #0
   16c3c:	1afffff6 	bne	16c1c <CUSBPrinterDevice::Configure()+0x5c>
   16c40:	e5954020 	ldr	r4, [r5, #32]
   16c44:	e3540000 	cmp	r4, #0
   16c48:	0a00004c 	beq	16d80 <CUSBPrinterDevice::Configure()+0x1c0>
   16c4c:	e5d53018 	ldrb	r3, [r5, #24]
   16c50:	e1a00005 	mov	r0, r5
   16c54:	e3530001 	cmp	r3, #1
   16c58:	0a000002 	beq	16c68 <CUSBPrinterDevice::Configure()+0xa8>
   16c5c:	e595401c 	ldr	r4, [r5, #28]
   16c60:	e3540000 	cmp	r4, #0
   16c64:	0a000049 	beq	16d90 <CUSBPrinterDevice::Configure()+0x1d0>
   16c68:	ebffed60 	bl	121f0 <CUSBFunction::Configure()>
   16c6c:	e2504000 	subs	r4, r0, #0
   16c70:	0a00003c 	beq	16d68 <CUSBPrinterDevice::Configure()+0x1a8>
   16c74:	e5956024 	ldr	r6, [r5, #36]	; 0x24
   16c78:	e3560000 	cmp	r6, #0
   16c7c:	1a000046 	bne	16d9c <CUSBPrinterDevice::Configure()+0x1dc>
   16c80:	e3a01001 	mov	r1, #1
   16c84:	e59f2130 	ldr	r2, [pc, #304]	; 16dbc <CUSBPrinterDevice::Configure()+0x1fc>
   16c88:	e59f0130 	ldr	r0, [pc, #304]	; 16dc0 <CUSBPrinterDevice::Configure()+0x200>
   16c8c:	eb00442f 	bl	27d50 <CNumberPool::AllocateNumber(bool, char const*)>
   16c90:	e5850024 	str	r0, [r5, #36]	; 0x24
   16c94:	eb001d73 	bl	1e268 <CDeviceNameService::Get()>
   16c98:	e58d6000 	str	r6, [sp]
   16c9c:	e1a03005 	mov	r3, r5
   16ca0:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   16ca4:	e59f1118 	ldr	r1, [pc, #280]	; 16dc4 <CUSBPrinterDevice::Configure()+0x204>
   16ca8:	eb001d7a 	bl	1e298 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   16cac:	e1a00004 	mov	r0, r4
   16cb0:	e28dd010 	add	sp, sp, #16
   16cb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   16cb8:	e3a04000 	mov	r4, #0
   16cbc:	eb00238f 	bl	1fb00 <CLogger::Get()>
   16cc0:	e5d52018 	ldrb	r2, [r5, #24]
   16cc4:	e59f30fc 	ldr	r3, [pc, #252]	; 16dc8 <CUSBPrinterDevice::Configure()+0x208>
   16cc8:	e58d2000 	str	r2, [sp]
   16ccc:	e59f10e8 	ldr	r1, [pc, #232]	; 16dbc <CUSBPrinterDevice::Configure()+0x1fc>
   16cd0:	e3a02001 	mov	r2, #1
   16cd4:	eb0022cb 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16cd8:	e1a00004 	mov	r0, r4
   16cdc:	e28dd010 	add	sp, sp, #16
   16ce0:	e8bd8070 	pop	{r4, r5, r6, pc}
   16ce4:	e1d430d2 	ldrsb	r3, [r4, #2]
   16ce8:	e3530000 	cmp	r3, #0
   16cec:	ba00000e 	blt	16d2c <CUSBPrinterDevice::Configure()+0x16c>
   16cf0:	e5953020 	ldr	r3, [r5, #32]
   16cf4:	e1a00005 	mov	r0, r5
   16cf8:	e3530000 	cmp	r3, #0
   16cfc:	1a00002a 	bne	16dac <CUSBPrinterDevice::Configure()+0x1ec>
   16d00:	ebffee04 	bl	12518 <CUSBFunction::GetDevice() const>
   16d04:	e1a01000 	mov	r1, r0
   16d08:	e3a00014 	mov	r0, #20
   16d0c:	e58d100c 	str	r1, [sp, #12]
   16d10:	eb0042c3 	bl	27824 <operator new(unsigned int)>
   16d14:	e1a06000 	mov	r6, r0
   16d18:	e1a02004 	mov	r2, r4
   16d1c:	e59d100c 	ldr	r1, [sp, #12]
   16d20:	ebffec3e 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16d24:	e5856020 	str	r6, [r5, #32]
   16d28:	eaffffbf 	b	16c2c <CUSBPrinterDevice::Configure()+0x6c>
   16d2c:	e595301c 	ldr	r3, [r5, #28]
   16d30:	e1a00005 	mov	r0, r5
   16d34:	e3530000 	cmp	r3, #0
   16d38:	1a00001b 	bne	16dac <CUSBPrinterDevice::Configure()+0x1ec>
   16d3c:	ebffedf5 	bl	12518 <CUSBFunction::GetDevice() const>
   16d40:	e1a01000 	mov	r1, r0
   16d44:	e3a00014 	mov	r0, #20
   16d48:	e58d100c 	str	r1, [sp, #12]
   16d4c:	eb0042b4 	bl	27824 <operator new(unsigned int)>
   16d50:	e1a06000 	mov	r6, r0
   16d54:	e1a02004 	mov	r2, r4
   16d58:	e59d100c 	ldr	r1, [sp, #12]
   16d5c:	ebffec2f 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16d60:	e585601c 	str	r6, [r5, #28]
   16d64:	eaffffb0 	b	16c2c <CUSBPrinterDevice::Configure()+0x6c>
   16d68:	eb002364 	bl	1fb00 <CLogger::Get()>
   16d6c:	e3a02001 	mov	r2, #1
   16d70:	e59f3054 	ldr	r3, [pc, #84]	; 16dcc <CUSBPrinterDevice::Configure()+0x20c>
   16d74:	e59f1040 	ldr	r1, [pc, #64]	; 16dbc <CUSBPrinterDevice::Configure()+0x1fc>
   16d78:	eb0022a2 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16d7c:	eaffffca 	b	16cac <CUSBPrinterDevice::Configure()+0xec>
   16d80:	e1a00005 	mov	r0, r5
   16d84:	e59f1030 	ldr	r1, [pc, #48]	; 16dbc <CUSBPrinterDevice::Configure()+0x1fc>
   16d88:	ebffee0d 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   16d8c:	eaffffc6 	b	16cac <CUSBPrinterDevice::Configure()+0xec>
   16d90:	e59f1024 	ldr	r1, [pc, #36]	; 16dbc <CUSBPrinterDevice::Configure()+0x1fc>
   16d94:	ebffee0a 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   16d98:	eaffffc3 	b	16cac <CUSBPrinterDevice::Configure()+0xec>
   16d9c:	e3a0207e 	mov	r2, #126	; 0x7e
   16da0:	e59f1028 	ldr	r1, [pc, #40]	; 16dd0 <CUSBPrinterDevice::Configure()+0x210>
   16da4:	e59f0028 	ldr	r0, [pc, #40]	; 16dd4 <CUSBPrinterDevice::Configure()+0x214>
   16da8:	eb001a54 	bl	1d700 <assertion_failed>
   16dac:	e59f1008 	ldr	r1, [pc, #8]	; 16dbc <CUSBPrinterDevice::Configure()+0x1fc>
   16db0:	ebffee03 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   16db4:	e3a04000 	mov	r4, #0
   16db8:	eaffffbb 	b	16cac <CUSBPrinterDevice::Configure()+0xec>
   16dbc:	0002ed64 	.word	0x0002ed64
   16dc0:	00034bc8 	.word	0x00034bc8
   16dc4:	0002ed5c 	.word	0x0002ed5c
   16dc8:	0002ed10 	.word	0x0002ed10
   16dcc:	0002c93c 	.word	0x0002c93c
   16dd0:	0002ecf4 	.word	0x0002ecf4
   16dd4:	0002c954 	.word	0x0002c954

00016dd8 <_GLOBAL__sub_I__ZN17CUSBPrinterDevice18s_DeviceNumberPoolE>:
   16dd8:	e92d4010 	push	{r4, lr}
   16ddc:	e59f4020 	ldr	r4, [pc, #32]	; 16e04 <_GLOBAL__sub_I__ZN17CUSBPrinterDevice18s_DeviceNumberPoolE+0x2c>
   16de0:	e3a0203f 	mov	r2, #63	; 0x3f
   16de4:	e1a00004 	mov	r0, r4
   16de8:	e3a01001 	mov	r1, #1
   16dec:	eb0043c2 	bl	27cfc <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   16df0:	e1a00004 	mov	r0, r4
   16df4:	e8bd4010 	pop	{r4, lr}
   16df8:	e59f2008 	ldr	r2, [pc, #8]	; 16e08 <_GLOBAL__sub_I__ZN17CUSBPrinterDevice18s_DeviceNumberPoolE+0x30>
   16dfc:	e59f1008 	ldr	r1, [pc, #8]	; 16e0c <_GLOBAL__sub_I__ZN17CUSBPrinterDevice18s_DeviceNumberPoolE+0x34>
   16e00:	ea003aac 	b	258b8 <__aeabi_atexit>
   16e04:	00034bc8 	.word	0x00034bc8
   16e08:	00034c44 	.word	0x00034c44
   16e0c:	00027d4c 	.word	0x00027d4c

00016e10 <CUSBSerialCH341Device::~CUSBSerialCH341Device()>:
   16e10:	e92d4010 	push	{r4, lr}
   16e14:	e1a04000 	mov	r4, r0
   16e18:	e59f300c 	ldr	r3, [pc, #12]	; 16e2c <CUSBSerialCH341Device::~CUSBSerialCH341Device()+0x1c>
   16e1c:	e5803000 	str	r3, [r0]
   16e20:	eb001316 	bl	1ba80 <CUSBSerialDevice::~CUSBSerialDevice()>
   16e24:	e1a00004 	mov	r0, r4
   16e28:	e8bd8010 	pop	{r4, pc}
   16e2c:	0002eea4 	.word	0x0002eea4

00016e30 <CUSBSerialCH341Device::~CUSBSerialCH341Device()>:
   16e30:	e92d4010 	push	{r4, lr}
   16e34:	e1a04000 	mov	r4, r0
   16e38:	e59f3018 	ldr	r3, [pc, #24]	; 16e58 <CUSBSerialCH341Device::~CUSBSerialCH341Device()+0x28>
   16e3c:	e5803000 	str	r3, [r0]
   16e40:	eb00130e 	bl	1ba80 <CUSBSerialDevice::~CUSBSerialDevice()>
   16e44:	e1a00004 	mov	r0, r4
   16e48:	e3a01044 	mov	r1, #68	; 0x44
   16e4c:	eb004282 	bl	2785c <operator delete(void*, unsigned int)>
   16e50:	e1a00004 	mov	r0, r4
   16e54:	e8bd8010 	pop	{r4, pc}
   16e58:	0002eea4 	.word	0x0002eea4

00016e5c <CUSBSerialCH341Device::SetBaudRate(unsigned int)>:
   16e5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16e60:	e1a04000 	mov	r4, r0
   16e64:	e24dd010 	sub	sp, sp, #16
   16e68:	e59f00ec 	ldr	r0, [pc, #236]	; 16f5c <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x100>
   16e6c:	e1a05001 	mov	r5, r1
   16e70:	eb004f03 	bl	2aa84 <__udivsi3>
   16e74:	e59f20e4 	ldr	r2, [pc, #228]	; 16f60 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x104>
   16e78:	e3a03003 	mov	r3, #3
   16e7c:	e1500002 	cmp	r0, r2
   16e80:	9a000007 	bls	16ea4 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x48>
   16e84:	e2433001 	sub	r3, r3, #1
   16e88:	e6ff3073 	uxth	r3, r3
   16e8c:	e1a001a0 	lsr	r0, r0, #3
   16e90:	e3530000 	cmp	r3, #0
   16e94:	11500002 	cmpne	r0, r2
   16e98:	8afffff9 	bhi	16e84 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x28>
   16e9c:	e1500002 	cmp	r0, r2
   16ea0:	8a00001a 	bhi	16f10 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xb4>
   16ea4:	e2600801 	rsb	r0, r0, #65536	; 0x10000
   16ea8:	e2002cff 	and	r2, r0, #65280	; 0xff00
   16eac:	e1823003 	orr	r3, r2, r3
   16eb0:	e1a00004 	mov	r0, r4
   16eb4:	e3836080 	orr	r6, r3, #128	; 0x80
   16eb8:	ebffedab 	bl	1256c <CUSBFunction::GetHost() const>
   16ebc:	e2508000 	subs	r8, r0, #0
   16ec0:	0a000021 	beq	16f4c <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xf0>
   16ec4:	e1a00004 	mov	r0, r4
   16ec8:	ebffed9c 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   16ecc:	e3a07000 	mov	r7, #0
   16ed0:	e59f308c 	ldr	r3, [pc, #140]	; 16f64 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x108>
   16ed4:	e1a01000 	mov	r1, r0
   16ed8:	e58d3000 	str	r3, [sp]
   16edc:	e1a00008 	mov	r0, r8
   16ee0:	e3a0309a 	mov	r3, #154	; 0x9a
   16ee4:	e3a02040 	mov	r2, #64	; 0x40
   16ee8:	e58d6004 	str	r6, [sp, #4]
   16eec:	e58d700c 	str	r7, [sp, #12]
   16ef0:	e58d7008 	str	r7, [sp, #8]
   16ef4:	ebffc845 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16ef8:	e1500007 	cmp	r0, r7
   16efc:	a3a00001 	movge	r0, #1
   16f00:	a5845018 	strge	r5, [r4, #24]
   16f04:	ba000009 	blt	16f30 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xd4>
   16f08:	e28dd010 	add	sp, sp, #16
   16f0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16f10:	eb0022fa 	bl	1fb00 <CLogger::Get()>
   16f14:	e3a02001 	mov	r2, #1
   16f18:	e59f3048 	ldr	r3, [pc, #72]	; 16f68 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x10c>
   16f1c:	e59f1048 	ldr	r1, [pc, #72]	; 16f6c <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x110>
   16f20:	eb002238 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16f24:	e3a00000 	mov	r0, #0
   16f28:	e28dd010 	add	sp, sp, #16
   16f2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16f30:	eb0022f2 	bl	1fb00 <CLogger::Get()>
   16f34:	e3a02001 	mov	r2, #1
   16f38:	e59f3030 	ldr	r3, [pc, #48]	; 16f70 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x114>
   16f3c:	e59f1028 	ldr	r1, [pc, #40]	; 16f6c <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x110>
   16f40:	eb002230 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16f44:	e1a00007 	mov	r0, r7
   16f48:	eaffffee 	b	16f08 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xac>
   16f4c:	e3a02087 	mov	r2, #135	; 0x87
   16f50:	e59f101c 	ldr	r1, [pc, #28]	; 16f74 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x118>
   16f54:	e59f001c 	ldr	r0, [pc, #28]	; 16f78 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x11c>
   16f58:	eb0019e8 	bl	1d700 <assertion_failed>
   16f5c:	5b59f000 	.word	0x5b59f000
   16f60:	0000fff0 	.word	0x0000fff0
   16f64:	00001312 	.word	0x00001312
   16f68:	0002ed6c 	.word	0x0002ed6c
   16f6c:	0002eed0 	.word	0x0002eed0
   16f70:	0002ed90 	.word	0x0002ed90
   16f74:	0002ed7c 	.word	0x0002ed7c
   16f78:	0002cd28 	.word	0x0002cd28

00016f7c <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)>:
   16f7c:	e92d4010 	push	{r4, lr}
   16f80:	e1a04000 	mov	r4, r0
   16f84:	e3a02000 	mov	r2, #0
   16f88:	eb0013bb 	bl	1be7c <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   16f8c:	e59f3008 	ldr	r3, [pc, #8]	; 16f9c <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)+0x20>
   16f90:	e1a00004 	mov	r0, r4
   16f94:	e5843000 	str	r3, [r4]
   16f98:	e8bd8010 	pop	{r4, pc}
   16f9c:	0002eea4 	.word	0x0002eea4

00016fa0 <CUSBSerialCH341Device::GetDeviceIDTable()>:
   16fa0:	e59f0000 	ldr	r0, [pc]	; 16fa8 <CUSBSerialCH341Device::GetDeviceIDTable()+0x8>
   16fa4:	e12fff1e 	bx	lr
   16fa8:	0002eed8 	.word	0x0002eed8

00016fac <CUSBSerialCH341Device::Configure()>:
   16fac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16fb0:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   16fb4:	e1a06000 	mov	r6, r0
   16fb8:	eb001415 	bl	1c014 <CUSBSerialDevice::Configure()>
   16fbc:	e2505000 	subs	r5, r0, #0
   16fc0:	0a00004c 	beq	170f8 <CUSBSerialCH341Device::Configure()+0x14c>
   16fc4:	e1a00006 	mov	r0, r6
   16fc8:	ebffed67 	bl	1256c <CUSBFunction::GetHost() const>
   16fcc:	e2505000 	subs	r5, r0, #0
   16fd0:	0a000050 	beq	17118 <CUSBSerialCH341Device::Configure()+0x16c>
   16fd4:	e28d702f 	add	r7, sp, #47	; 0x2f
   16fd8:	e3c7701f 	bic	r7, r7, #31
   16fdc:	e3a04000 	mov	r4, #0
   16fe0:	e1a03007 	mov	r3, r7
   16fe4:	e1a00006 	mov	r0, r6
   16fe8:	e4834004 	str	r4, [r3], #4
   16fec:	e5834004 	str	r4, [r3, #4]
   16ff0:	e5834008 	str	r4, [r3, #8]
   16ff4:	e583400c 	str	r4, [r3, #12]
   16ff8:	e5834010 	str	r4, [r3, #16]
   16ffc:	e5834014 	str	r4, [r3, #20]
   17000:	e5834018 	str	r4, [r3, #24]
   17004:	e5874004 	str	r4, [r7, #4]
   17008:	ebffed4c 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   1700c:	e3a03002 	mov	r3, #2
   17010:	e1a01000 	mov	r1, r0
   17014:	e58d300c 	str	r3, [sp, #12]
   17018:	e3a020c0 	mov	r2, #192	; 0xc0
   1701c:	e3a0305f 	mov	r3, #95	; 0x5f
   17020:	e1a00005 	mov	r0, r5
   17024:	e58d4004 	str	r4, [sp, #4]
   17028:	e58d4000 	str	r4, [sp]
   1702c:	e58d7008 	str	r7, [sp, #8]
   17030:	ebffc7f6 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17034:	e3500002 	cmp	r0, #2
   17038:	0a000008 	beq	17060 <CUSBSerialCH341Device::Configure()+0xb4>
   1703c:	eb0022af 	bl	1fb00 <CLogger::Get()>
   17040:	e3a02001 	mov	r2, #1
   17044:	e59f30f8 	ldr	r3, [pc, #248]	; 17144 <CUSBSerialCH341Device::Configure()+0x198>
   17048:	e59f10f8 	ldr	r1, [pc, #248]	; 17148 <CUSBSerialCH341Device::Configure()+0x19c>
   1704c:	e1a05004 	mov	r5, r4
   17050:	eb0021ec 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17054:	e1a00005 	mov	r0, r5
   17058:	e28dd04c 	add	sp, sp, #76	; 0x4c
   1705c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17060:	eb0022a6 	bl	1fb00 <CLogger::Get()>
   17064:	e5d72000 	ldrb	r2, [r7]
   17068:	e59f30dc 	ldr	r3, [pc, #220]	; 1714c <CUSBSerialCH341Device::Configure()+0x1a0>
   1706c:	e59f10d4 	ldr	r1, [pc, #212]	; 17148 <CUSBSerialCH341Device::Configure()+0x19c>
   17070:	e58d2000 	str	r2, [sp]
   17074:	e3a02003 	mov	r2, #3
   17078:	eb0021e2 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1707c:	e1a00006 	mov	r0, r6
   17080:	ebffed2e 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17084:	e3a030a1 	mov	r3, #161	; 0xa1
   17088:	e1a01000 	mov	r1, r0
   1708c:	e3a02040 	mov	r2, #64	; 0x40
   17090:	e1a00005 	mov	r0, r5
   17094:	e58d400c 	str	r4, [sp, #12]
   17098:	e58d4008 	str	r4, [sp, #8]
   1709c:	e58d4004 	str	r4, [sp, #4]
   170a0:	e58d4000 	str	r4, [sp]
   170a4:	ebffc7d9 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   170a8:	e3500000 	cmp	r0, #0
   170ac:	ba00001d 	blt	17128 <CUSBSerialCH341Device::Configure()+0x17c>
   170b0:	e5963000 	ldr	r3, [r6]
   170b4:	e3a01d96 	mov	r1, #9600	; 0x2580
   170b8:	e1a00006 	mov	r0, r6
   170bc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   170c0:	e12fff33 	blx	r3
   170c4:	e2505000 	subs	r5, r0, #0
   170c8:	0affffe1 	beq	17054 <CUSBSerialCH341Device::Configure()+0xa8>
   170cc:	e5963000 	ldr	r3, [r6]
   170d0:	e1a02004 	mov	r2, r4
   170d4:	e1a00006 	mov	r0, r6
   170d8:	e5934028 	ldr	r4, [r3, #40]	; 0x28
   170dc:	e3a01008 	mov	r1, #8
   170e0:	e3a03001 	mov	r3, #1
   170e4:	e12fff34 	blx	r4
   170e8:	e1a05000 	mov	r5, r0
   170ec:	e1a00005 	mov	r0, r5
   170f0:	e28dd04c 	add	sp, sp, #76	; 0x4c
   170f4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   170f8:	eb002280 	bl	1fb00 <CLogger::Get()>
   170fc:	e3a02001 	mov	r2, #1
   17100:	e59f3048 	ldr	r3, [pc, #72]	; 17150 <CUSBSerialCH341Device::Configure()+0x1a4>
   17104:	e59f103c 	ldr	r1, [pc, #60]	; 17148 <CUSBSerialCH341Device::Configure()+0x19c>
   17108:	eb0021be 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1710c:	e1a00005 	mov	r0, r5
   17110:	e28dd04c 	add	sp, sp, #76	; 0x4c
   17114:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17118:	e3a02044 	mov	r2, #68	; 0x44
   1711c:	e59f1030 	ldr	r1, [pc, #48]	; 17154 <CUSBSerialCH341Device::Configure()+0x1a8>
   17120:	e59f0030 	ldr	r0, [pc, #48]	; 17158 <CUSBSerialCH341Device::Configure()+0x1ac>
   17124:	eb001975 	bl	1d700 <assertion_failed>
   17128:	eb002274 	bl	1fb00 <CLogger::Get()>
   1712c:	e3a02001 	mov	r2, #1
   17130:	e59f3024 	ldr	r3, [pc, #36]	; 1715c <CUSBSerialCH341Device::Configure()+0x1b0>
   17134:	e59f100c 	ldr	r1, [pc, #12]	; 17148 <CUSBSerialCH341Device::Configure()+0x19c>
   17138:	e1a05004 	mov	r5, r4
   1713c:	eb0021b1 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17140:	eaffffc3 	b	17054 <CUSBSerialCH341Device::Configure()+0xa8>
   17144:	0002edc8 	.word	0x0002edc8
   17148:	0002eed0 	.word	0x0002eed0
   1714c:	0002ede4 	.word	0x0002ede4
   17150:	0002eda8 	.word	0x0002eda8
   17154:	0002ed7c 	.word	0x0002ed7c
   17158:	0002cd28 	.word	0x0002cd28
   1715c:	0002edf8 	.word	0x0002edf8

00017160 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   17160:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17164:	e24dd020 	sub	sp, sp, #32
   17168:	e1a04001 	mov	r4, r1
   1716c:	e1a05002 	mov	r5, r2
   17170:	e1a08003 	mov	r8, r3
   17174:	e1a09000 	mov	r9, r0
   17178:	ebffecfb 	bl	1256c <CUSBFunction::GetHost() const>
   1717c:	e2507000 	subs	r7, r0, #0
   17180:	0a000068 	beq	17328 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1c8>
   17184:	e28d0010 	add	r0, sp, #16
   17188:	eb003479 	bl	24374 <CString::CString()>
   1718c:	e2443005 	sub	r3, r4, #5
   17190:	e3530003 	cmp	r3, #3
   17194:	8a000013 	bhi	171e8 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x88>
   17198:	e1a02004 	mov	r2, r4
   1719c:	e59f11c4 	ldr	r1, [pc, #452]	; 17368 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x208>
   171a0:	e28d0010 	add	r0, sp, #16
   171a4:	eb0039b8 	bl	2588c <CString::Format(char const*, ...)>
   171a8:	e2446045 	sub	r6, r4, #69	; 0x45
   171ac:	e3550001 	cmp	r5, #1
   171b0:	e6ef6076 	uxtb	r6, r6
   171b4:	0a000017 	beq	17218 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xb8>
   171b8:	e3550002 	cmp	r5, #2
   171bc:	0a00002e 	beq	1727c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x11c>
   171c0:	e3550000 	cmp	r5, #0
   171c4:	0a000023 	beq	17258 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf8>
   171c8:	eb00224c 	bl	1fb00 <CLogger::Get()>
   171cc:	e3a02001 	mov	r2, #1
   171d0:	e59f3194 	ldr	r3, [pc, #404]	; 1736c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>
   171d4:	e59f1194 	ldr	r1, [pc, #404]	; 17370 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x210>
   171d8:	e58d5000 	str	r5, [sp]
   171dc:	eb002189 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   171e0:	e3a0a000 	mov	sl, #0
   171e4:	ea000006 	b	17204 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa4>
   171e8:	eb002244 	bl	1fb00 <CLogger::Get()>
   171ec:	e3a02001 	mov	r2, #1
   171f0:	e59f317c 	ldr	r3, [pc, #380]	; 17374 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x214>
   171f4:	e59f1174 	ldr	r1, [pc, #372]	; 17370 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x210>
   171f8:	e58d4000 	str	r4, [sp]
   171fc:	eb002181 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17200:	e3a0a000 	mov	sl, #0
   17204:	e28d0010 	add	r0, sp, #16
   17208:	eb003426 	bl	242a8 <CString::~CString()>
   1720c:	e1a0000a 	mov	r0, sl
   17210:	e28dd020 	add	sp, sp, #32
   17214:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17218:	e59f1158 	ldr	r1, [pc, #344]	; 17378 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x218>
   1721c:	e28d0010 	add	r0, sp, #16
   17220:	e3866008 	orr	r6, r6, #8
   17224:	eb0034a0 	bl	244ac <CString::Append(char const*)>
   17228:	e3580001 	cmp	r8, #1
   1722c:	0a00000e 	beq	1726c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x10c>
   17230:	e3580002 	cmp	r8, #2
   17234:	0a000015 	beq	17290 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x130>
   17238:	eb002230 	bl	1fb00 <CLogger::Get()>
   1723c:	e3a02001 	mov	r2, #1
   17240:	e59f3134 	ldr	r3, [pc, #308]	; 1737c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x21c>
   17244:	e59f1124 	ldr	r1, [pc, #292]	; 17370 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x210>
   17248:	e58d8000 	str	r8, [sp]
   1724c:	eb00216d 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17250:	e3a0a000 	mov	sl, #0
   17254:	eaffffea 	b	17204 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa4>
   17258:	e59f1120 	ldr	r1, [pc, #288]	; 17380 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x220>
   1725c:	e28d0010 	add	r0, sp, #16
   17260:	eb003491 	bl	244ac <CString::Append(char const*)>
   17264:	e3580001 	cmp	r8, #1
   17268:	1afffff0 	bne	17230 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xd0>
   1726c:	e59f1110 	ldr	r1, [pc, #272]	; 17384 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x224>
   17270:	e28d0010 	add	r0, sp, #16
   17274:	eb00348c 	bl	244ac <CString::Append(char const*)>
   17278:	ea000008 	b	172a0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x140>
   1727c:	e59f1104 	ldr	r1, [pc, #260]	; 17388 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x228>
   17280:	e28d0010 	add	r0, sp, #16
   17284:	e3866018 	orr	r6, r6, #24
   17288:	eb003487 	bl	244ac <CString::Append(char const*)>
   1728c:	eaffffe5 	b	17228 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc8>
   17290:	e59f10f4 	ldr	r1, [pc, #244]	; 1738c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x22c>
   17294:	e28d0010 	add	r0, sp, #16
   17298:	e3866004 	orr	r6, r6, #4
   1729c:	eb003482 	bl	244ac <CString::Append(char const*)>
   172a0:	e1a00009 	mov	r0, r9
   172a4:	ebffeca5 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   172a8:	e3a0a000 	mov	sl, #0
   172ac:	e59f30dc 	ldr	r3, [pc, #220]	; 17390 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x230>
   172b0:	e1a01000 	mov	r1, r0
   172b4:	e58d3000 	str	r3, [sp]
   172b8:	e3a02040 	mov	r2, #64	; 0x40
   172bc:	e3a0309a 	mov	r3, #154	; 0x9a
   172c0:	e1a00007 	mov	r0, r7
   172c4:	e58d6004 	str	r6, [sp, #4]
   172c8:	e58da00c 	str	sl, [sp, #12]
   172cc:	e58da008 	str	sl, [sp, #8]
   172d0:	ebffc74e 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   172d4:	e150000a 	cmp	r0, sl
   172d8:	ba000016 	blt	17338 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1d8>
   172dc:	e1a00009 	mov	r0, r9
   172e0:	ebffec96 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   172e4:	e59f30a8 	ldr	r3, [pc, #168]	; 17394 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x234>
   172e8:	e1a01000 	mov	r1, r0
   172ec:	e58d3000 	str	r3, [sp]
   172f0:	e1a00007 	mov	r0, r7
   172f4:	e3a030a4 	mov	r3, #164	; 0xa4
   172f8:	e3a02040 	mov	r2, #64	; 0x40
   172fc:	e58da00c 	str	sl, [sp, #12]
   17300:	e58da008 	str	sl, [sp, #8]
   17304:	e58da004 	str	sl, [sp, #4]
   17308:	ebffc740 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1730c:	e3500000 	cmp	r0, #0
   17310:	ba00000e 	blt	17350 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1f0>
   17314:	e3a0a001 	mov	sl, #1
   17318:	e5c9401c 	strb	r4, [r9, #28]
   1731c:	e5c9501d 	strb	r5, [r9, #29]
   17320:	e5c9801e 	strb	r8, [r9, #30]
   17324:	eaffffb6 	b	17204 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa4>
   17328:	e3a020a0 	mov	r2, #160	; 0xa0
   1732c:	e59f1064 	ldr	r1, [pc, #100]	; 17398 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x238>
   17330:	e59f0064 	ldr	r0, [pc, #100]	; 1739c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x23c>
   17334:	eb0018f1 	bl	1d700 <assertion_failed>
   17338:	eb0021f0 	bl	1fb00 <CLogger::Get()>
   1733c:	e3a02001 	mov	r2, #1
   17340:	e59f3058 	ldr	r3, [pc, #88]	; 173a0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x240>
   17344:	e59f1024 	ldr	r1, [pc, #36]	; 17370 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x210>
   17348:	eb00212e 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1734c:	eaffffac 	b	17204 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa4>
   17350:	eb0021ea 	bl	1fb00 <CLogger::Get()>
   17354:	e3a02001 	mov	r2, #1
   17358:	e59f3044 	ldr	r3, [pc, #68]	; 173a4 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x244>
   1735c:	e59f100c 	ldr	r1, [pc, #12]	; 17370 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x210>
   17360:	eb002128 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17364:	eaffffa6 	b	17204 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa4>
   17368:	0002ee10 	.word	0x0002ee10
   1736c:	0002ee38 	.word	0x0002ee38
   17370:	0002eed0 	.word	0x0002eed0
   17374:	0002ee14 	.word	0x0002ee14
   17378:	0002ee30 	.word	0x0002ee30
   1737c:	0002ee4c 	.word	0x0002ee4c
   17380:	0002ee2c 	.word	0x0002ee2c
   17384:	0002dfcc 	.word	0x0002dfcc
   17388:	0002ee34 	.word	0x0002ee34
   1738c:	0002f948 	.word	0x0002f948
   17390:	00002518 	.word	0x00002518
   17394:	0000ffff 	.word	0x0000ffff
   17398:	0002ed7c 	.word	0x0002ed7c
   1739c:	0002cd28 	.word	0x0002cd28
   173a0:	0002ee64 	.word	0x0002ee64
   173a4:	0002ee80 	.word	0x0002ee80

000173a8 <CUSBSerialCP2102Device::~CUSBSerialCP2102Device()>:
   173a8:	e92d4010 	push	{r4, lr}
   173ac:	e1a04000 	mov	r4, r0
   173b0:	e59f300c 	ldr	r3, [pc, #12]	; 173c4 <CUSBSerialCP2102Device::~CUSBSerialCP2102Device()+0x1c>
   173b4:	e5803000 	str	r3, [r0]
   173b8:	eb0011b0 	bl	1ba80 <CUSBSerialDevice::~CUSBSerialDevice()>
   173bc:	e1a00004 	mov	r0, r4
   173c0:	e8bd8010 	pop	{r4, pc}
   173c4:	0002efb4 	.word	0x0002efb4

000173c8 <CUSBSerialCP2102Device::~CUSBSerialCP2102Device()>:
   173c8:	e92d4010 	push	{r4, lr}
   173cc:	e1a04000 	mov	r4, r0
   173d0:	e59f3018 	ldr	r3, [pc, #24]	; 173f0 <CUSBSerialCP2102Device::~CUSBSerialCP2102Device()+0x28>
   173d4:	e5803000 	str	r3, [r0]
   173d8:	eb0011a8 	bl	1ba80 <CUSBSerialDevice::~CUSBSerialDevice()>
   173dc:	e1a00004 	mov	r0, r4
   173e0:	e3a01044 	mov	r1, #68	; 0x44
   173e4:	eb00411c 	bl	2785c <operator delete(void*, unsigned int)>
   173e8:	e1a00004 	mov	r0, r4
   173ec:	e8bd8010 	pop	{r4, pc}
   173f0:	0002efb4 	.word	0x0002efb4

000173f4 <CUSBSerialCP2102Device::SetBaudRate(unsigned int)>:
   173f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   173f8:	e24dd01c 	sub	sp, sp, #28
   173fc:	e1a04000 	mov	r4, r0
   17400:	e58d1014 	str	r1, [sp, #20]
   17404:	ebffec58 	bl	1256c <CUSBFunction::GetHost() const>
   17408:	e2505000 	subs	r5, r0, #0
   1740c:	0a000023 	beq	174a0 <CUSBSerialCP2102Device::SetBaudRate(unsigned int)+0xac>
   17410:	e1a00004 	mov	r0, r4
   17414:	ebffec49 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17418:	e3a06000 	mov	r6, #0
   1741c:	e3a07004 	mov	r7, #4
   17420:	e28d3014 	add	r3, sp, #20
   17424:	e1a01000 	mov	r1, r0
   17428:	e58d3008 	str	r3, [sp, #8]
   1742c:	e1a00005 	mov	r0, r5
   17430:	e3a0301e 	mov	r3, #30
   17434:	e3a02041 	mov	r2, #65	; 0x41
   17438:	e58d700c 	str	r7, [sp, #12]
   1743c:	e58d6004 	str	r6, [sp, #4]
   17440:	e58d6000 	str	r6, [sp]
   17444:	ebffc6f1 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17448:	e1500006 	cmp	r0, r6
   1744c:	ba00000b 	blt	17480 <CUSBSerialCP2102Device::SetBaudRate(unsigned int)+0x8c>
   17450:	e59d3014 	ldr	r3, [sp, #20]
   17454:	e5843018 	str	r3, [r4, #24]
   17458:	eb0021a8 	bl	1fb00 <CLogger::Get()>
   1745c:	e5943018 	ldr	r3, [r4, #24]
   17460:	e1a02007 	mov	r2, r7
   17464:	e58d3000 	str	r3, [sp]
   17468:	e59f1040 	ldr	r1, [pc, #64]	; 174b0 <CUSBSerialCP2102Device::SetBaudRate(unsigned int)+0xbc>
   1746c:	e59f3040 	ldr	r3, [pc, #64]	; 174b4 <CUSBSerialCP2102Device::SetBaudRate(unsigned int)+0xc0>
   17470:	eb0020e4 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17474:	e3a00001 	mov	r0, #1
   17478:	e28dd01c 	add	sp, sp, #28
   1747c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17480:	eb00219e 	bl	1fb00 <CLogger::Get()>
   17484:	e3a02001 	mov	r2, #1
   17488:	e59f3028 	ldr	r3, [pc, #40]	; 174b8 <CUSBSerialCP2102Device::SetBaudRate(unsigned int)+0xc4>
   1748c:	e59f101c 	ldr	r1, [pc, #28]	; 174b0 <CUSBSerialCP2102Device::SetBaudRate(unsigned int)+0xbc>
   17490:	eb0020dc 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17494:	e1a00006 	mov	r0, r6
   17498:	e28dd01c 	add	sp, sp, #28
   1749c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   174a0:	e3a02082 	mov	r2, #130	; 0x82
   174a4:	e59f1010 	ldr	r1, [pc, #16]	; 174bc <CUSBSerialCP2102Device::SetBaudRate(unsigned int)+0xc8>
   174a8:	e59f0010 	ldr	r0, [pc, #16]	; 174c0 <CUSBSerialCP2102Device::SetBaudRate(unsigned int)+0xcc>
   174ac:	eb001893 	bl	1d700 <assertion_failed>
   174b0:	0002efe0 	.word	0x0002efe0
   174b4:	0002ef18 	.word	0x0002ef18
   174b8:	0002ef00 	.word	0x0002ef00
   174bc:	0002eeec 	.word	0x0002eeec
   174c0:	0002cd28 	.word	0x0002cd28

000174c4 <CUSBSerialCP2102Device::CUSBSerialCP2102Device(CUSBFunction*)>:
   174c4:	e92d4010 	push	{r4, lr}
   174c8:	e1a04000 	mov	r4, r0
   174cc:	e3a02000 	mov	r2, #0
   174d0:	eb001269 	bl	1be7c <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   174d4:	e59f3008 	ldr	r3, [pc, #8]	; 174e4 <CUSBSerialCP2102Device::CUSBSerialCP2102Device(CUSBFunction*)+0x20>
   174d8:	e1a00004 	mov	r0, r4
   174dc:	e5843000 	str	r3, [r4]
   174e0:	e8bd8010 	pop	{r4, pc}
   174e4:	0002efb4 	.word	0x0002efb4

000174e8 <CUSBSerialCP2102Device::GetDeviceIDTable()>:
   174e8:	e59f0000 	ldr	r0, [pc]	; 174f0 <CUSBSerialCP2102Device::GetDeviceIDTable()+0x8>
   174ec:	e12fff1e 	bx	lr
   174f0:	0002efe8 	.word	0x0002efe8

000174f4 <CUSBSerialCP2102Device::Configure()>:
   174f4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   174f8:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   174fc:	e1a07000 	mov	r7, r0
   17500:	eb0012c3 	bl	1c014 <CUSBSerialDevice::Configure()>
   17504:	e2505000 	subs	r5, r0, #0
   17508:	0a000045 	beq	17624 <CUSBSerialCP2102Device::Configure()+0x130>
   1750c:	e1a00007 	mov	r0, r7
   17510:	ebffec15 	bl	1256c <CUSBFunction::GetHost() const>
   17514:	e2505000 	subs	r5, r0, #0
   17518:	0a00005b 	beq	1768c <CUSBSerialCP2102Device::Configure()+0x198>
   1751c:	e28d602f 	add	r6, sp, #47	; 0x2f
   17520:	e3c6601f 	bic	r6, r6, #31
   17524:	e3a04000 	mov	r4, #0
   17528:	e1a03006 	mov	r3, r6
   1752c:	e1a00007 	mov	r0, r7
   17530:	e4834004 	str	r4, [r3], #4
   17534:	e3a09001 	mov	r9, #1
   17538:	e5834004 	str	r4, [r3, #4]
   1753c:	e5834008 	str	r4, [r3, #8]
   17540:	e583400c 	str	r4, [r3, #12]
   17544:	e5834010 	str	r4, [r3, #16]
   17548:	e5834014 	str	r4, [r3, #20]
   1754c:	e5834018 	str	r4, [r3, #24]
   17550:	e5864004 	str	r4, [r6, #4]
   17554:	ebffebf9 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17558:	e59f3158 	ldr	r3, [pc, #344]	; 176b8 <CUSBSerialCP2102Device::Configure()+0x1c4>
   1755c:	e1a01000 	mov	r1, r0
   17560:	e88d0258 	stm	sp, {r3, r4, r6, r9}
   17564:	e3a020c0 	mov	r2, #192	; 0xc0
   17568:	e3a030ff 	mov	r3, #255	; 0xff
   1756c:	e1a00005 	mov	r0, r5
   17570:	ebffc6a6 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17574:	e1500009 	cmp	r0, r9
   17578:	e1a08000 	mov	r8, r0
   1757c:	1a000039 	bne	17668 <CUSBSerialCP2102Device::Configure()+0x174>
   17580:	e5d63000 	ldrb	r3, [r6]
   17584:	e3530002 	cmp	r3, #2
   17588:	1a00002d 	bne	17644 <CUSBSerialCP2102Device::Configure()+0x150>
   1758c:	eb00215b 	bl	1fb00 <CLogger::Get()>
   17590:	e5d62000 	ldrb	r2, [r6]
   17594:	e59f3120 	ldr	r3, [pc, #288]	; 176bc <CUSBSerialCP2102Device::Configure()+0x1c8>
   17598:	e59f1120 	ldr	r1, [pc, #288]	; 176c0 <CUSBSerialCP2102Device::Configure()+0x1cc>
   1759c:	e58d2000 	str	r2, [sp]
   175a0:	e3a02003 	mov	r2, #3
   175a4:	eb002097 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   175a8:	e1a00007 	mov	r0, r7
   175ac:	ebffebe3 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   175b0:	e1a03004 	mov	r3, r4
   175b4:	e1a01000 	mov	r1, r0
   175b8:	e3a02041 	mov	r2, #65	; 0x41
   175bc:	e1a00005 	mov	r0, r5
   175c0:	e58d400c 	str	r4, [sp, #12]
   175c4:	e58d4008 	str	r4, [sp, #8]
   175c8:	e58d4004 	str	r4, [sp, #4]
   175cc:	e58d8000 	str	r8, [sp]
   175d0:	ebffc68e 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   175d4:	e3500000 	cmp	r0, #0
   175d8:	ba00002f 	blt	1769c <CUSBSerialCP2102Device::Configure()+0x1a8>
   175dc:	e5973000 	ldr	r3, [r7]
   175e0:	e3a01d96 	mov	r1, #9600	; 0x2580
   175e4:	e1a00007 	mov	r0, r7
   175e8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   175ec:	e12fff33 	blx	r3
   175f0:	e2505000 	subs	r5, r0, #0
   175f4:	0a00000f 	beq	17638 <CUSBSerialCP2102Device::Configure()+0x144>
   175f8:	e5971000 	ldr	r1, [r7]
   175fc:	e1a02004 	mov	r2, r4
   17600:	e1a03008 	mov	r3, r8
   17604:	e5914028 	ldr	r4, [r1, #40]	; 0x28
   17608:	e1a00007 	mov	r0, r7
   1760c:	e3a01008 	mov	r1, #8
   17610:	e12fff34 	blx	r4
   17614:	e1a05000 	mov	r5, r0
   17618:	e1a00005 	mov	r0, r5
   1761c:	e28dd04c 	add	sp, sp, #76	; 0x4c
   17620:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17624:	eb002135 	bl	1fb00 <CLogger::Get()>
   17628:	e3a02001 	mov	r2, #1
   1762c:	e59f3090 	ldr	r3, [pc, #144]	; 176c4 <CUSBSerialCP2102Device::Configure()+0x1d0>
   17630:	e59f1088 	ldr	r1, [pc, #136]	; 176c0 <CUSBSerialCP2102Device::Configure()+0x1cc>
   17634:	eb002073 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17638:	e1a00005 	mov	r0, r5
   1763c:	e28dd04c 	add	sp, sp, #76	; 0x4c
   17640:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17644:	e1a05004 	mov	r5, r4
   17648:	eb00212c 	bl	1fb00 <CLogger::Get()>
   1764c:	e1a02008 	mov	r2, r8
   17650:	e59f3070 	ldr	r3, [pc, #112]	; 176c8 <CUSBSerialCP2102Device::Configure()+0x1d4>
   17654:	e59f1064 	ldr	r1, [pc, #100]	; 176c0 <CUSBSerialCP2102Device::Configure()+0x1cc>
   17658:	eb00206a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1765c:	e1a00005 	mov	r0, r5
   17660:	e28dd04c 	add	sp, sp, #76	; 0x4c
   17664:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17668:	e1a05004 	mov	r5, r4
   1766c:	eb002123 	bl	1fb00 <CLogger::Get()>
   17670:	e1a02009 	mov	r2, r9
   17674:	e59f3050 	ldr	r3, [pc, #80]	; 176cc <CUSBSerialCP2102Device::Configure()+0x1d8>
   17678:	e59f1040 	ldr	r1, [pc, #64]	; 176c0 <CUSBSerialCP2102Device::Configure()+0x1cc>
   1767c:	eb002061 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17680:	e1a00005 	mov	r0, r5
   17684:	e28dd04c 	add	sp, sp, #76	; 0x4c
   17688:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1768c:	e3a0204f 	mov	r2, #79	; 0x4f
   17690:	e59f1038 	ldr	r1, [pc, #56]	; 176d0 <CUSBSerialCP2102Device::Configure()+0x1dc>
   17694:	e59f0038 	ldr	r0, [pc, #56]	; 176d4 <CUSBSerialCP2102Device::Configure()+0x1e0>
   17698:	eb001818 	bl	1d700 <assertion_failed>
   1769c:	eb002117 	bl	1fb00 <CLogger::Get()>
   176a0:	e1a02008 	mov	r2, r8
   176a4:	e59f302c 	ldr	r3, [pc, #44]	; 176d8 <CUSBSerialCP2102Device::Configure()+0x1e4>
   176a8:	e59f1010 	ldr	r1, [pc, #16]	; 176c0 <CUSBSerialCP2102Device::Configure()+0x1cc>
   176ac:	e1a05004 	mov	r5, r4
   176b0:	eb002054 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   176b4:	eaffffdf 	b	17638 <CUSBSerialCP2102Device::Configure()+0x144>
   176b8:	0000370b 	.word	0x0000370b
   176bc:	0002ef5c 	.word	0x0002ef5c
   176c0:	0002efe0 	.word	0x0002efe0
   176c4:	0002eda8 	.word	0x0002eda8
   176c8:	0002ef44 	.word	0x0002ef44
   176cc:	0002ef28 	.word	0x0002ef28
   176d0:	0002eeec 	.word	0x0002eeec
   176d4:	0002cd28 	.word	0x0002cd28
   176d8:	0002ef74 	.word	0x0002ef74

000176dc <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   176dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   176e0:	e24dd020 	sub	sp, sp, #32
   176e4:	e1a04001 	mov	r4, r1
   176e8:	e1a05002 	mov	r5, r2
   176ec:	e1a07003 	mov	r7, r3
   176f0:	e1a09000 	mov	r9, r0
   176f4:	ebffeb9c 	bl	1256c <CUSBFunction::GetHost() const>
   176f8:	e2506000 	subs	r6, r0, #0
   176fc:	0a000058 	beq	17864 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x188>
   17700:	e28d0010 	add	r0, sp, #16
   17704:	eb00331a 	bl	24374 <CString::CString()>
   17708:	e2443005 	sub	r3, r4, #5
   1770c:	e3530003 	cmp	r3, #3
   17710:	8a000012 	bhi	17760 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x84>
   17714:	e1a02004 	mov	r2, r4
   17718:	e59f116c 	ldr	r1, [pc, #364]	; 1788c <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1b0>
   1771c:	e28d0010 	add	r0, sp, #16
   17720:	eb003859 	bl	2588c <CString::Format(char const*, ...)>
   17724:	e3550001 	cmp	r5, #1
   17728:	e1a0a404 	lsl	sl, r4, #8
   1772c:	0a000017 	beq	17790 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xb4>
   17730:	e3550002 	cmp	r5, #2
   17734:	0a00002e 	beq	177f4 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x118>
   17738:	e3550000 	cmp	r5, #0
   1773c:	0a000023 	beq	177d0 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf4>
   17740:	eb0020ee 	bl	1fb00 <CLogger::Get()>
   17744:	e3a02001 	mov	r2, #1
   17748:	e59f3140 	ldr	r3, [pc, #320]	; 17890 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1b4>
   1774c:	e59f1140 	ldr	r1, [pc, #320]	; 17894 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1b8>
   17750:	e58d5000 	str	r5, [sp]
   17754:	eb00202b 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17758:	e3a08000 	mov	r8, #0
   1775c:	ea000006 	b	1777c <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa0>
   17760:	eb0020e6 	bl	1fb00 <CLogger::Get()>
   17764:	e3a02001 	mov	r2, #1
   17768:	e59f3128 	ldr	r3, [pc, #296]	; 17898 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1bc>
   1776c:	e59f1120 	ldr	r1, [pc, #288]	; 17894 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1b8>
   17770:	e58d4000 	str	r4, [sp]
   17774:	eb002023 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17778:	e3a08000 	mov	r8, #0
   1777c:	e28d0010 	add	r0, sp, #16
   17780:	eb0032c8 	bl	242a8 <CString::~CString()>
   17784:	e1a00008 	mov	r0, r8
   17788:	e28dd020 	add	sp, sp, #32
   1778c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17790:	e59f1104 	ldr	r1, [pc, #260]	; 1789c <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1c0>
   17794:	e28d0010 	add	r0, sp, #16
   17798:	e38aa010 	orr	sl, sl, #16
   1779c:	eb003342 	bl	244ac <CString::Append(char const*)>
   177a0:	e3570001 	cmp	r7, #1
   177a4:	0a00000e 	beq	177e4 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x108>
   177a8:	e3570002 	cmp	r7, #2
   177ac:	0a000015 	beq	17808 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x12c>
   177b0:	eb0020d2 	bl	1fb00 <CLogger::Get()>
   177b4:	e3a02001 	mov	r2, #1
   177b8:	e59f30e0 	ldr	r3, [pc, #224]	; 178a0 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1c4>
   177bc:	e59f10d0 	ldr	r1, [pc, #208]	; 17894 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1b8>
   177c0:	e58d7000 	str	r7, [sp]
   177c4:	eb00200f 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   177c8:	e3a08000 	mov	r8, #0
   177cc:	eaffffea 	b	1777c <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa0>
   177d0:	e59f10cc 	ldr	r1, [pc, #204]	; 178a4 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1c8>
   177d4:	e28d0010 	add	r0, sp, #16
   177d8:	eb003333 	bl	244ac <CString::Append(char const*)>
   177dc:	e3570001 	cmp	r7, #1
   177e0:	1afffff0 	bne	177a8 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xcc>
   177e4:	e59f10bc 	ldr	r1, [pc, #188]	; 178a8 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1cc>
   177e8:	e28d0010 	add	r0, sp, #16
   177ec:	eb00332e 	bl	244ac <CString::Append(char const*)>
   177f0:	ea000008 	b	17818 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x13c>
   177f4:	e59f10b0 	ldr	r1, [pc, #176]	; 178ac <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1d0>
   177f8:	e28d0010 	add	r0, sp, #16
   177fc:	e38aa020 	orr	sl, sl, #32
   17800:	eb003329 	bl	244ac <CString::Append(char const*)>
   17804:	eaffffe5 	b	177a0 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc4>
   17808:	e59f10a0 	ldr	r1, [pc, #160]	; 178b0 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1d4>
   1780c:	e28d0010 	add	r0, sp, #16
   17810:	e38aa002 	orr	sl, sl, #2
   17814:	eb003324 	bl	244ac <CString::Append(char const*)>
   17818:	e1a00009 	mov	r0, r9
   1781c:	ebffeb47 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17820:	e3a08000 	mov	r8, #0
   17824:	e1a01000 	mov	r1, r0
   17828:	e3a03003 	mov	r3, #3
   1782c:	e1a00006 	mov	r0, r6
   17830:	e3a02041 	mov	r2, #65	; 0x41
   17834:	e58da000 	str	sl, [sp]
   17838:	e58d800c 	str	r8, [sp, #12]
   1783c:	e58d8008 	str	r8, [sp, #8]
   17840:	e58d8004 	str	r8, [sp, #4]
   17844:	ebffc5f1 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17848:	e1500008 	cmp	r0, r8
   1784c:	ba000008 	blt	17874 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x198>
   17850:	e3a08001 	mov	r8, #1
   17854:	e5c9401c 	strb	r4, [r9, #28]
   17858:	e5c9501d 	strb	r5, [r9, #29]
   1785c:	e5c9701e 	strb	r7, [r9, #30]
   17860:	eaffffc5 	b	1777c <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa0>
   17864:	e3a0209b 	mov	r2, #155	; 0x9b
   17868:	e59f1044 	ldr	r1, [pc, #68]	; 178b4 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1d8>
   1786c:	e59f0044 	ldr	r0, [pc, #68]	; 178b8 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1dc>
   17870:	eb0017a2 	bl	1d700 <assertion_failed>
   17874:	eb0020a1 	bl	1fb00 <CLogger::Get()>
   17878:	e3a02001 	mov	r2, #1
   1787c:	e59f3038 	ldr	r3, [pc, #56]	; 178bc <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e0>
   17880:	e59f100c 	ldr	r1, [pc, #12]	; 17894 <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1b8>
   17884:	eb001fdf 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17888:	eaffffbb 	b	1777c <CUSBSerialCP2102Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa0>
   1788c:	0002ee10 	.word	0x0002ee10
   17890:	0002ee38 	.word	0x0002ee38
   17894:	0002efe0 	.word	0x0002efe0
   17898:	0002ee14 	.word	0x0002ee14
   1789c:	0002ee30 	.word	0x0002ee30
   178a0:	0002ee4c 	.word	0x0002ee4c
   178a4:	0002ee2c 	.word	0x0002ee2c
   178a8:	0002dfcc 	.word	0x0002dfcc
   178ac:	0002ee34 	.word	0x0002ee34
   178b0:	0002f948 	.word	0x0002f948
   178b4:	0002eeec 	.word	0x0002eeec
   178b8:	0002cd28 	.word	0x0002cd28
   178bc:	0002ef90 	.word	0x0002ef90

000178c0 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()>:
   178c0:	e92d4010 	push	{r4, lr}
   178c4:	e1a04000 	mov	r4, r0
   178c8:	e59f300c 	ldr	r3, [pc, #12]	; 178dc <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()+0x1c>
   178cc:	e5803000 	str	r3, [r0]
   178d0:	eb00106a 	bl	1ba80 <CUSBSerialDevice::~CUSBSerialDevice()>
   178d4:	e1a00004 	mov	r0, r4
   178d8:	e8bd8010 	pop	{r4, pc}
   178dc:	0002f0cc 	.word	0x0002f0cc

000178e0 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()>:
   178e0:	e92d4010 	push	{r4, lr}
   178e4:	e1a04000 	mov	r4, r0
   178e8:	e59f3018 	ldr	r3, [pc, #24]	; 17908 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()+0x28>
   178ec:	e5803000 	str	r3, [r0]
   178f0:	eb001062 	bl	1ba80 <CUSBSerialDevice::~CUSBSerialDevice()>
   178f4:	e1a00004 	mov	r0, r4
   178f8:	e3a01044 	mov	r1, #68	; 0x44
   178fc:	eb003fd6 	bl	2785c <operator delete(void*, unsigned int)>
   17900:	e1a00004 	mov	r0, r4
   17904:	e8bd8010 	pop	{r4, pc}
   17908:	0002f0cc 	.word	0x0002f0cc

0001790c <CUSBSerialPL2303Device::SetBaudRate(unsigned int)>:
   1790c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17910:	e24dd050 	sub	sp, sp, #80	; 0x50
   17914:	e1a07000 	mov	r7, r0
   17918:	e58d1014 	str	r1, [sp, #20]
   1791c:	ebffeb12 	bl	1256c <CUSBFunction::GetHost() const>
   17920:	e2508000 	subs	r8, r0, #0
   17924:	0a000036 	beq	17a04 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xf8>
   17928:	e28d5037 	add	r5, sp, #55	; 0x37
   1792c:	e3c5501f 	bic	r5, r5, #31
   17930:	e3a04000 	mov	r4, #0
   17934:	e1a03005 	mov	r3, r5
   17938:	e1a00007 	mov	r0, r7
   1793c:	e4834004 	str	r4, [r3], #4
   17940:	e5834004 	str	r4, [r3, #4]
   17944:	e5834008 	str	r4, [r3, #8]
   17948:	e583400c 	str	r4, [r3, #12]
   1794c:	e5834010 	str	r4, [r3, #16]
   17950:	e5834014 	str	r4, [r3, #20]
   17954:	e5834018 	str	r4, [r3, #24]
   17958:	e5854004 	str	r4, [r5, #4]
   1795c:	ebffeaf7 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17960:	e3a03007 	mov	r3, #7
   17964:	e1a01000 	mov	r1, r0
   17968:	e58d300c 	str	r3, [sp, #12]
   1796c:	e3a020a1 	mov	r2, #161	; 0xa1
   17970:	e3a03021 	mov	r3, #33	; 0x21
   17974:	e1a00008 	mov	r0, r8
   17978:	e58d4004 	str	r4, [sp, #4]
   1797c:	e58d4000 	str	r4, [sp]
   17980:	e58d5008 	str	r5, [sp, #8]
   17984:	ebffc5a1 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17988:	e3500007 	cmp	r0, #7
   1798c:	e1a06000 	mov	r6, r0
   17990:	1a000013 	bne	179e4 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xd8>
   17994:	e3a02004 	mov	r2, #4
   17998:	e28d1014 	add	r1, sp, #20
   1799c:	e1a00005 	mov	r0, r5
   179a0:	eb003db9 	bl	2708c <memcpy>
   179a4:	e1a00007 	mov	r0, r7
   179a8:	ebffeae4 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   179ac:	e3a03020 	mov	r3, #32
   179b0:	e1a01000 	mov	r1, r0
   179b4:	e3a02021 	mov	r2, #33	; 0x21
   179b8:	e1a00008 	mov	r0, r8
   179bc:	e98d0070 	stmib	sp, {r4, r5, r6}
   179c0:	e58d4000 	str	r4, [sp]
   179c4:	ebffc591 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   179c8:	e3500000 	cmp	r0, #0
   179cc:	ba000010 	blt	17a14 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x108>
   179d0:	e3a00001 	mov	r0, #1
   179d4:	e59d3014 	ldr	r3, [sp, #20]
   179d8:	e5873018 	str	r3, [r7, #24]
   179dc:	e28dd050 	add	sp, sp, #80	; 0x50
   179e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   179e4:	eb002045 	bl	1fb00 <CLogger::Get()>
   179e8:	e3a02001 	mov	r2, #1
   179ec:	e59f303c 	ldr	r3, [pc, #60]	; 17a30 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x124>
   179f0:	e59f103c 	ldr	r1, [pc, #60]	; 17a34 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x128>
   179f4:	eb001f83 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   179f8:	e1a00004 	mov	r0, r4
   179fc:	e28dd050 	add	sp, sp, #80	; 0x50
   17a00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17a04:	e3a020ed 	mov	r2, #237	; 0xed
   17a08:	e59f1028 	ldr	r1, [pc, #40]	; 17a38 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x12c>
   17a0c:	e59f0028 	ldr	r0, [pc, #40]	; 17a3c <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x130>
   17a10:	eb00173a 	bl	1d700 <assertion_failed>
   17a14:	eb002039 	bl	1fb00 <CLogger::Get()>
   17a18:	e3a02001 	mov	r2, #1
   17a1c:	e59f301c 	ldr	r3, [pc, #28]	; 17a40 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x134>
   17a20:	e59f100c 	ldr	r1, [pc, #12]	; 17a34 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x128>
   17a24:	eb001f77 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17a28:	e1a00004 	mov	r0, r4
   17a2c:	eaffffea 	b	179dc <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xd0>
   17a30:	0002f004 	.word	0x0002f004
   17a34:	0002f0f8 	.word	0x0002f0f8
   17a38:	0002eff0 	.word	0x0002eff0
   17a3c:	0002cd28 	.word	0x0002cd28
   17a40:	0002ef00 	.word	0x0002ef00

00017a44 <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)>:
   17a44:	e92d4010 	push	{r4, lr}
   17a48:	e1a04000 	mov	r4, r0
   17a4c:	e3a02000 	mov	r2, #0
   17a50:	eb001109 	bl	1be7c <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   17a54:	e59f3008 	ldr	r3, [pc, #8]	; 17a64 <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)+0x20>
   17a58:	e1a00004 	mov	r0, r4
   17a5c:	e5843000 	str	r3, [r4]
   17a60:	e8bd8010 	pop	{r4, pc}
   17a64:	0002f0cc 	.word	0x0002f0cc

00017a68 <CUSBSerialPL2303Device::GetDeviceIDTable()>:
   17a68:	e59f0000 	ldr	r0, [pc]	; 17a70 <CUSBSerialPL2303Device::GetDeviceIDTable()+0x8>
   17a6c:	e12fff1e 	bx	lr
   17a70:	0002f100 	.word	0x0002f100

00017a74 <CUSBSerialPL2303Device::Configure()>:
   17a74:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a78:	e24dd05c 	sub	sp, sp, #92	; 0x5c
   17a7c:	e1a05000 	mov	r5, r0
   17a80:	eb001163 	bl	1c014 <CUSBSerialDevice::Configure()>
   17a84:	e2504000 	subs	r4, r0, #0
   17a88:	0a000066 	beq	17c28 <CUSBSerialPL2303Device::Configure()+0x1b4>
   17a8c:	e1a00005 	mov	r0, r5
   17a90:	ebffeaa0 	bl	12518 <CUSBFunction::GetDevice() const>
   17a94:	ebffe481 	bl	10ca0 <CUSBDevice::GetDeviceDescriptor() const>
   17a98:	e1a04000 	mov	r4, r0
   17a9c:	e59f14bc 	ldr	r1, [pc, #1212]	; 17f60 <CUSBSerialPL2303Device::Configure()+0x4ec>
   17aa0:	e28d0010 	add	r0, sp, #16
   17aa4:	eb003238 	bl	2438c <CString::CString(char const*)>
   17aa8:	e5d43004 	ldrb	r3, [r4, #4]
   17aac:	e28d603f 	add	r6, sp, #63	; 0x3f
   17ab0:	e3530002 	cmp	r3, #2
   17ab4:	e3c6601f 	bic	r6, r6, #31
   17ab8:	0a000086 	beq	17cd8 <CUSBSerialPL2303Device::Configure()+0x264>
   17abc:	e5d42007 	ldrb	r2, [r4, #7]
   17ac0:	e3520040 	cmp	r2, #64	; 0x40
   17ac4:	0a00007b 	beq	17cb8 <CUSBSerialPL2303Device::Configure()+0x244>
   17ac8:	e2433001 	sub	r3, r3, #1
   17acc:	e6ef3073 	uxtb	r3, r3
   17ad0:	e35300fd 	cmp	r3, #253	; 0xfd
   17ad4:	8a00007b 	bhi	17cc8 <CUSBSerialPL2303Device::Configure()+0x254>
   17ad8:	eb002008 	bl	1fb00 <CLogger::Get()>
   17adc:	e1a04000 	mov	r4, r0
   17ae0:	e28d0010 	add	r0, sp, #16
   17ae4:	eb00323a 	bl	243d4 <CString::operator char const*() const>
   17ae8:	e1a02000 	mov	r2, r0
   17aec:	e59f3470 	ldr	r3, [pc, #1136]	; 17f64 <CUSBSerialPL2303Device::Configure()+0x4f0>
   17af0:	e1a00004 	mov	r0, r4
   17af4:	e59f146c 	ldr	r1, [pc, #1132]	; 17f68 <CUSBSerialPL2303Device::Configure()+0x4f4>
   17af8:	e58d2000 	str	r2, [sp]
   17afc:	e3a02003 	mov	r2, #3
   17b00:	eb001f40 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17b04:	e1a00005 	mov	r0, r5
   17b08:	ebffea97 	bl	1256c <CUSBFunction::GetHost() const>
   17b0c:	e2507000 	subs	r7, r0, #0
   17b10:	0a00007a 	beq	17d00 <CUSBSerialPL2303Device::Configure()+0x28c>
   17b14:	e3a04000 	mov	r4, #0
   17b18:	e1a03006 	mov	r3, r6
   17b1c:	e1a00005 	mov	r0, r5
   17b20:	e4834004 	str	r4, [r3], #4
   17b24:	e3a09001 	mov	r9, #1
   17b28:	e5834004 	str	r4, [r3, #4]
   17b2c:	e5834008 	str	r4, [r3, #8]
   17b30:	e583400c 	str	r4, [r3, #12]
   17b34:	e5834010 	str	r4, [r3, #16]
   17b38:	e5834014 	str	r4, [r3, #20]
   17b3c:	e5834018 	str	r4, [r3, #24]
   17b40:	e5864004 	str	r4, [r6, #4]
   17b44:	ebffea7d 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17b48:	e59fa41c 	ldr	sl, [pc, #1052]	; 17f6c <CUSBSerialPL2303Device::Configure()+0x4f8>
   17b4c:	e1a01000 	mov	r1, r0
   17b50:	e1a03009 	mov	r3, r9
   17b54:	e3a020c0 	mov	r2, #192	; 0xc0
   17b58:	e1a00007 	mov	r0, r7
   17b5c:	e98d0250 	stmib	sp, {r4, r6, r9}
   17b60:	e58da000 	str	sl, [sp]
   17b64:	ebffc529 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17b68:	e1500009 	cmp	r0, r9
   17b6c:	e1a08000 	mov	r8, r0
   17b70:	1a000034 	bne	17c48 <CUSBSerialPL2303Device::Configure()+0x1d4>
   17b74:	e1a00005 	mov	r0, r5
   17b78:	ebffea70 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17b7c:	e59fb3ec 	ldr	fp, [pc, #1004]	; 17f70 <CUSBSerialPL2303Device::Configure()+0x4fc>
   17b80:	e1a01000 	mov	r1, r0
   17b84:	e1a03008 	mov	r3, r8
   17b88:	e3a02040 	mov	r2, #64	; 0x40
   17b8c:	e1a00007 	mov	r0, r7
   17b90:	e58d400c 	str	r4, [sp, #12]
   17b94:	e58d4008 	str	r4, [sp, #8]
   17b98:	e58d4004 	str	r4, [sp, #4]
   17b9c:	e58db000 	str	fp, [sp]
   17ba0:	ebffc51a 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17ba4:	e3500000 	cmp	r0, #0
   17ba8:	ba00004e 	blt	17ce8 <CUSBSerialPL2303Device::Configure()+0x274>
   17bac:	e1a00005 	mov	r0, r5
   17bb0:	ebffea62 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17bb4:	e1a03008 	mov	r3, r8
   17bb8:	e1a01000 	mov	r1, r0
   17bbc:	e3a020c0 	mov	r2, #192	; 0xc0
   17bc0:	e1a00007 	mov	r0, r7
   17bc4:	e98d0150 	stmib	sp, {r4, r6, r8}
   17bc8:	e58da000 	str	sl, [sp]
   17bcc:	ebffc50f 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17bd0:	e3500001 	cmp	r0, #1
   17bd4:	e1a09000 	mov	r9, r0
   17bd8:	1a000030 	bne	17ca0 <CUSBSerialPL2303Device::Configure()+0x22c>
   17bdc:	e1a00005 	mov	r0, r5
   17be0:	ebffea56 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17be4:	e59f3388 	ldr	r3, [pc, #904]	; 17f74 <CUSBSerialPL2303Device::Configure()+0x500>
   17be8:	e1a01000 	mov	r1, r0
   17bec:	e58d3000 	str	r3, [sp]
   17bf0:	e3a020c0 	mov	r2, #192	; 0xc0
   17bf4:	e1a03009 	mov	r3, r9
   17bf8:	e1a00007 	mov	r0, r7
   17bfc:	e98d0250 	stmib	sp, {r4, r6, r9}
   17c00:	ebffc502 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17c04:	e3500001 	cmp	r0, #1
   17c08:	e1a08000 	mov	r8, r0
   17c0c:	0a000017 	beq	17c70 <CUSBSerialPL2303Device::Configure()+0x1fc>
   17c10:	eb001fba 	bl	1fb00 <CLogger::Get()>
   17c14:	e1a02009 	mov	r2, r9
   17c18:	e59f3358 	ldr	r3, [pc, #856]	; 17f78 <CUSBSerialPL2303Device::Configure()+0x504>
   17c1c:	e59f1344 	ldr	r1, [pc, #836]	; 17f68 <CUSBSerialPL2303Device::Configure()+0x4f4>
   17c20:	eb001ef8 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17c24:	ea00000c 	b	17c5c <CUSBSerialPL2303Device::Configure()+0x1e8>
   17c28:	eb001fb4 	bl	1fb00 <CLogger::Get()>
   17c2c:	e3a02001 	mov	r2, #1
   17c30:	e59f3344 	ldr	r3, [pc, #836]	; 17f7c <CUSBSerialPL2303Device::Configure()+0x508>
   17c34:	e59f132c 	ldr	r1, [pc, #812]	; 17f68 <CUSBSerialPL2303Device::Configure()+0x4f4>
   17c38:	eb001ef2 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17c3c:	e1a00004 	mov	r0, r4
   17c40:	e28dd05c 	add	sp, sp, #92	; 0x5c
   17c44:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c48:	eb001fac 	bl	1fb00 <CLogger::Get()>
   17c4c:	e1a02009 	mov	r2, r9
   17c50:	e59f3328 	ldr	r3, [pc, #808]	; 17f80 <CUSBSerialPL2303Device::Configure()+0x50c>
   17c54:	e59f130c 	ldr	r1, [pc, #780]	; 17f68 <CUSBSerialPL2303Device::Configure()+0x4f4>
   17c58:	eb001eea 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17c5c:	e28d0010 	add	r0, sp, #16
   17c60:	eb003190 	bl	242a8 <CString::~CString()>
   17c64:	e1a00004 	mov	r0, r4
   17c68:	e28dd05c 	add	sp, sp, #92	; 0x5c
   17c6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c70:	e1a00005 	mov	r0, r5
   17c74:	ebffea31 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17c78:	e1a03008 	mov	r3, r8
   17c7c:	e1a01000 	mov	r1, r0
   17c80:	e3a020c0 	mov	r2, #192	; 0xc0
   17c84:	e1a00007 	mov	r0, r7
   17c88:	e98d0150 	stmib	sp, {r4, r6, r8}
   17c8c:	e58da000 	str	sl, [sp]
   17c90:	ebffc4de 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17c94:	e3500001 	cmp	r0, #1
   17c98:	e1a09000 	mov	r9, r0
   17c9c:	0a00001b 	beq	17d10 <CUSBSerialPL2303Device::Configure()+0x29c>
   17ca0:	eb001f96 	bl	1fb00 <CLogger::Get()>
   17ca4:	e1a02008 	mov	r2, r8
   17ca8:	e59f32d0 	ldr	r3, [pc, #720]	; 17f80 <CUSBSerialPL2303Device::Configure()+0x50c>
   17cac:	e59f12b4 	ldr	r1, [pc, #692]	; 17f68 <CUSBSerialPL2303Device::Configure()+0x4f4>
   17cb0:	eb001ed4 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17cb4:	eaffffe8 	b	17c5c <CUSBSerialPL2303Device::Configure()+0x1e8>
   17cb8:	e59f12c4 	ldr	r1, [pc, #708]	; 17f84 <CUSBSerialPL2303Device::Configure()+0x510>
   17cbc:	e28d0010 	add	r0, sp, #16
   17cc0:	eb0031c9 	bl	243ec <CString::operator=(char const*)>
   17cc4:	eaffff83 	b	17ad8 <CUSBSerialPL2303Device::Configure()+0x64>
   17cc8:	e59f12b8 	ldr	r1, [pc, #696]	; 17f88 <CUSBSerialPL2303Device::Configure()+0x514>
   17ccc:	e28d0010 	add	r0, sp, #16
   17cd0:	eb0031c5 	bl	243ec <CString::operator=(char const*)>
   17cd4:	eaffff7f 	b	17ad8 <CUSBSerialPL2303Device::Configure()+0x64>
   17cd8:	e59f1280 	ldr	r1, [pc, #640]	; 17f60 <CUSBSerialPL2303Device::Configure()+0x4ec>
   17cdc:	e28d0010 	add	r0, sp, #16
   17ce0:	eb0031c1 	bl	243ec <CString::operator=(char const*)>
   17ce4:	eaffff7b 	b	17ad8 <CUSBSerialPL2303Device::Configure()+0x64>
   17ce8:	eb001f84 	bl	1fb00 <CLogger::Get()>
   17cec:	e1a02008 	mov	r2, r8
   17cf0:	e59f3294 	ldr	r3, [pc, #660]	; 17f8c <CUSBSerialPL2303Device::Configure()+0x518>
   17cf4:	e59f126c 	ldr	r1, [pc, #620]	; 17f68 <CUSBSerialPL2303Device::Configure()+0x4f4>
   17cf8:	eb001ec2 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17cfc:	eaffffd6 	b	17c5c <CUSBSerialPL2303Device::Configure()+0x1e8>
   17d00:	e3a0204a 	mov	r2, #74	; 0x4a
   17d04:	e59f1284 	ldr	r1, [pc, #644]	; 17f90 <CUSBSerialPL2303Device::Configure()+0x51c>
   17d08:	e59f0284 	ldr	r0, [pc, #644]	; 17f94 <CUSBSerialPL2303Device::Configure()+0x520>
   17d0c:	eb00167b 	bl	1d700 <assertion_failed>
   17d10:	e1a00005 	mov	r0, r5
   17d14:	ebffea09 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17d18:	e1a03009 	mov	r3, r9
   17d1c:	e1a01000 	mov	r1, r0
   17d20:	e3a02040 	mov	r2, #64	; 0x40
   17d24:	e1a00007 	mov	r0, r7
   17d28:	e58d400c 	str	r4, [sp, #12]
   17d2c:	e58d4008 	str	r4, [sp, #8]
   17d30:	e58d9004 	str	r9, [sp, #4]
   17d34:	e58db000 	str	fp, [sp]
   17d38:	ebffc4b4 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17d3c:	e3500000 	cmp	r0, #0
   17d40:	ba00001e 	blt	17dc0 <CUSBSerialPL2303Device::Configure()+0x34c>
   17d44:	e1a00005 	mov	r0, r5
   17d48:	ebffe9fc 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17d4c:	e58da000 	str	sl, [sp]
   17d50:	e1a01000 	mov	r1, r0
   17d54:	e1a03009 	mov	r3, r9
   17d58:	e3a020c0 	mov	r2, #192	; 0xc0
   17d5c:	e1a00007 	mov	r0, r7
   17d60:	e98d0250 	stmib	sp, {r4, r6, r9}
   17d64:	ebffc4a9 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17d68:	e3500001 	cmp	r0, #1
   17d6c:	e1a0a000 	mov	sl, r0
   17d70:	1affffb4 	bne	17c48 <CUSBSerialPL2303Device::Configure()+0x1d4>
   17d74:	e1a00005 	mov	r0, r5
   17d78:	ebffe9f0 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17d7c:	e59f31f0 	ldr	r3, [pc, #496]	; 17f74 <CUSBSerialPL2303Device::Configure()+0x500>
   17d80:	e1a01000 	mov	r1, r0
   17d84:	e98d0450 	stmib	sp, {r4, r6, sl}
   17d88:	e58d3000 	str	r3, [sp]
   17d8c:	e3a020c0 	mov	r2, #192	; 0xc0
   17d90:	e1a0300a 	mov	r3, sl
   17d94:	e1a00007 	mov	r0, r7
   17d98:	ebffc49c 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17d9c:	e3500001 	cmp	r0, #1
   17da0:	e1a06000 	mov	r6, r0
   17da4:	0a00000b 	beq	17dd8 <CUSBSerialPL2303Device::Configure()+0x364>
   17da8:	eb001f54 	bl	1fb00 <CLogger::Get()>
   17dac:	e1a0200a 	mov	r2, sl
   17db0:	e59f31c0 	ldr	r3, [pc, #448]	; 17f78 <CUSBSerialPL2303Device::Configure()+0x504>
   17db4:	e59f11ac 	ldr	r1, [pc, #428]	; 17f68 <CUSBSerialPL2303Device::Configure()+0x4f4>
   17db8:	eb001e92 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17dbc:	eaffffa6 	b	17c5c <CUSBSerialPL2303Device::Configure()+0x1e8>
   17dc0:	eb001f4e 	bl	1fb00 <CLogger::Get()>
   17dc4:	e1a02009 	mov	r2, r9
   17dc8:	e59f31bc 	ldr	r3, [pc, #444]	; 17f8c <CUSBSerialPL2303Device::Configure()+0x518>
   17dcc:	e59f1194 	ldr	r1, [pc, #404]	; 17f68 <CUSBSerialPL2303Device::Configure()+0x4f4>
   17dd0:	eb001e8c 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17dd4:	eaffffa0 	b	17c5c <CUSBSerialPL2303Device::Configure()+0x1e8>
   17dd8:	e1a00005 	mov	r0, r5
   17ddc:	ebffe9d7 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17de0:	e1a03006 	mov	r3, r6
   17de4:	e1a01000 	mov	r1, r0
   17de8:	e3a02040 	mov	r2, #64	; 0x40
   17dec:	e1a00007 	mov	r0, r7
   17df0:	e88d0050 	stm	sp, {r4, r6}
   17df4:	e58d400c 	str	r4, [sp, #12]
   17df8:	e58d4008 	str	r4, [sp, #8]
   17dfc:	ebffc483 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17e00:	e3500000 	cmp	r0, #0
   17e04:	ba000039 	blt	17ef0 <CUSBSerialPL2303Device::Configure()+0x47c>
   17e08:	e1a00005 	mov	r0, r5
   17e0c:	ebffe9cb 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17e10:	e3a06000 	mov	r6, #0
   17e14:	e3a08001 	mov	r8, #1
   17e18:	e1a01000 	mov	r1, r0
   17e1c:	e1a03008 	mov	r3, r8
   17e20:	e3a02040 	mov	r2, #64	; 0x40
   17e24:	e1a00007 	mov	r0, r7
   17e28:	e58d600c 	str	r6, [sp, #12]
   17e2c:	e58d6008 	str	r6, [sp, #8]
   17e30:	e58d6004 	str	r6, [sp, #4]
   17e34:	e58d8000 	str	r8, [sp]
   17e38:	ebffc474 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17e3c:	e1500006 	cmp	r0, r6
   17e40:	ba000031 	blt	17f0c <CUSBSerialPL2303Device::Configure()+0x498>
   17e44:	e1a00005 	mov	r0, r5
   17e48:	ebffe9bc 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17e4c:	e3a02044 	mov	r2, #68	; 0x44
   17e50:	e3a03002 	mov	r3, #2
   17e54:	e1a01000 	mov	r1, r0
   17e58:	e98d0044 	stmib	sp, {r2, r6}
   17e5c:	e58d3000 	str	r3, [sp]
   17e60:	e3a02040 	mov	r2, #64	; 0x40
   17e64:	e1a03008 	mov	r3, r8
   17e68:	e1a00007 	mov	r0, r7
   17e6c:	e58d600c 	str	r6, [sp, #12]
   17e70:	ebffc466 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17e74:	e3500000 	cmp	r0, #0
   17e78:	ba00002a 	blt	17f28 <CUSBSerialPL2303Device::Configure()+0x4b4>
   17e7c:	e1a00005 	mov	r0, r5
   17e80:	ebffe9ae 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   17e84:	e1a03008 	mov	r3, r8
   17e88:	e1a01000 	mov	r1, r0
   17e8c:	e3a02040 	mov	r2, #64	; 0x40
   17e90:	e1a00007 	mov	r0, r7
   17e94:	e58d600c 	str	r6, [sp, #12]
   17e98:	e58d6008 	str	r6, [sp, #8]
   17e9c:	e58d6004 	str	r6, [sp, #4]
   17ea0:	e58d6000 	str	r6, [sp]
   17ea4:	ebffc459 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17ea8:	e3500000 	cmp	r0, #0
   17eac:	ba000024 	blt	17f44 <CUSBSerialPL2303Device::Configure()+0x4d0>
   17eb0:	e5953000 	ldr	r3, [r5]
   17eb4:	e3a01d96 	mov	r1, #9600	; 0x2580
   17eb8:	e1a00005 	mov	r0, r5
   17ebc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   17ec0:	e12fff33 	blx	r3
   17ec4:	e2504000 	subs	r4, r0, #0
   17ec8:	0affff63 	beq	17c5c <CUSBSerialPL2303Device::Configure()+0x1e8>
   17ecc:	e5951000 	ldr	r1, [r5]
   17ed0:	e1a03008 	mov	r3, r8
   17ed4:	e5914028 	ldr	r4, [r1, #40]	; 0x28
   17ed8:	e1a02006 	mov	r2, r6
   17edc:	e1a00005 	mov	r0, r5
   17ee0:	e3a01008 	mov	r1, #8
   17ee4:	e12fff34 	blx	r4
   17ee8:	e1a04000 	mov	r4, r0
   17eec:	eaffff5a 	b	17c5c <CUSBSerialPL2303Device::Configure()+0x1e8>
   17ef0:	eb001f02 	bl	1fb00 <CLogger::Get()>
   17ef4:	e3a02001 	mov	r2, #1
   17ef8:	e59f3098 	ldr	r3, [pc, #152]	; 17f98 <CUSBSerialPL2303Device::Configure()+0x524>
   17efc:	e59f1064 	ldr	r1, [pc, #100]	; 17f68 <CUSBSerialPL2303Device::Configure()+0x4f4>
   17f00:	eb001e40 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17f04:	e3a04000 	mov	r4, #0
   17f08:	eaffff53 	b	17c5c <CUSBSerialPL2303Device::Configure()+0x1e8>
   17f0c:	eb001efb 	bl	1fb00 <CLogger::Get()>
   17f10:	e1a02008 	mov	r2, r8
   17f14:	e59f3080 	ldr	r3, [pc, #128]	; 17f9c <CUSBSerialPL2303Device::Configure()+0x528>
   17f18:	e59f1048 	ldr	r1, [pc, #72]	; 17f68 <CUSBSerialPL2303Device::Configure()+0x4f4>
   17f1c:	e1a04006 	mov	r4, r6
   17f20:	eb001e38 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17f24:	eaffff4c 	b	17c5c <CUSBSerialPL2303Device::Configure()+0x1e8>
   17f28:	eb001ef4 	bl	1fb00 <CLogger::Get()>
   17f2c:	e1a02008 	mov	r2, r8
   17f30:	e59f3068 	ldr	r3, [pc, #104]	; 17fa0 <CUSBSerialPL2303Device::Configure()+0x52c>
   17f34:	e59f102c 	ldr	r1, [pc, #44]	; 17f68 <CUSBSerialPL2303Device::Configure()+0x4f4>
   17f38:	e1a04006 	mov	r4, r6
   17f3c:	eb001e31 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17f40:	eaffff45 	b	17c5c <CUSBSerialPL2303Device::Configure()+0x1e8>
   17f44:	eb001eed 	bl	1fb00 <CLogger::Get()>
   17f48:	e1a02008 	mov	r2, r8
   17f4c:	e59f3044 	ldr	r3, [pc, #68]	; 17f98 <CUSBSerialPL2303Device::Configure()+0x524>
   17f50:	e59f1010 	ldr	r1, [pc, #16]	; 17f68 <CUSBSerialPL2303Device::Configure()+0x4f4>
   17f54:	e1a04006 	mov	r4, r6
   17f58:	eb001e2a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17f5c:	eaffff3e 	b	17c5c <CUSBSerialPL2303Device::Configure()+0x1e8>
   17f60:	0002dbb4 	.word	0x0002dbb4
   17f64:	0002f020 	.word	0x0002f020
   17f68:	0002f0f8 	.word	0x0002f0f8
   17f6c:	00008484 	.word	0x00008484
   17f70:	00000404 	.word	0x00000404
   17f74:	00008383 	.word	0x00008383
   17f78:	0002f064 	.word	0x0002f064
   17f7c:	0002eda8 	.word	0x0002eda8
   17f80:	0002f03c 	.word	0x0002f03c
   17f84:	0002f01c 	.word	0x0002f01c
   17f88:	0002dfcc 	.word	0x0002dfcc
   17f8c:	0002f050 	.word	0x0002f050
   17f90:	0002eff0 	.word	0x0002eff0
   17f94:	0002cd28 	.word	0x0002cd28
   17f98:	0002f078 	.word	0x0002f078
   17f9c:	0002f088 	.word	0x0002f088
   17fa0:	0002f098 	.word	0x0002f098

00017fa4 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   17fa4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17fa8:	e24dd058 	sub	sp, sp, #88	; 0x58
   17fac:	e1a08001 	mov	r8, r1
   17fb0:	e1a06002 	mov	r6, r2
   17fb4:	e1a09003 	mov	r9, r3
   17fb8:	e1a07000 	mov	r7, r0
   17fbc:	ebffe96a 	bl	1256c <CUSBFunction::GetHost() const>
   17fc0:	e250a000 	subs	sl, r0, #0
   17fc4:	0a00004c 	beq	180fc <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x158>
   17fc8:	e28d503f 	add	r5, sp, #63	; 0x3f
   17fcc:	e3c5501f 	bic	r5, r5, #31
   17fd0:	e3a04000 	mov	r4, #0
   17fd4:	e1a03005 	mov	r3, r5
   17fd8:	e1a00007 	mov	r0, r7
   17fdc:	e4834004 	str	r4, [r3], #4
   17fe0:	e5834004 	str	r4, [r3, #4]
   17fe4:	e5834008 	str	r4, [r3, #8]
   17fe8:	e583400c 	str	r4, [r3, #12]
   17fec:	e5834010 	str	r4, [r3, #16]
   17ff0:	e5834014 	str	r4, [r3, #20]
   17ff4:	e5834018 	str	r4, [r3, #24]
   17ff8:	e5854004 	str	r4, [r5, #4]
   17ffc:	ebffe94f 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   18000:	e3a03007 	mov	r3, #7
   18004:	e1a01000 	mov	r1, r0
   18008:	e58d300c 	str	r3, [sp, #12]
   1800c:	e3a020a1 	mov	r2, #161	; 0xa1
   18010:	e3a03021 	mov	r3, #33	; 0x21
   18014:	e1a0000a 	mov	r0, sl
   18018:	e58d4004 	str	r4, [sp, #4]
   1801c:	e58d4000 	str	r4, [sp]
   18020:	e58d5008 	str	r5, [sp, #8]
   18024:	ebffc3f9 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18028:	e3500007 	cmp	r0, #7
   1802c:	0a000007 	beq	18050 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xac>
   18030:	eb001eb2 	bl	1fb00 <CLogger::Get()>
   18034:	e3a02001 	mov	r2, #1
   18038:	e59f31e4 	ldr	r3, [pc, #484]	; 18224 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x280>
   1803c:	e59f11e4 	ldr	r1, [pc, #484]	; 18228 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x284>
   18040:	eb001df0 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18044:	e1a00004 	mov	r0, r4
   18048:	e28dd058 	add	sp, sp, #88	; 0x58
   1804c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18050:	e28d0010 	add	r0, sp, #16
   18054:	eb0030c6 	bl	24374 <CString::CString()>
   18058:	e2483005 	sub	r3, r8, #5
   1805c:	e3530003 	cmp	r3, #3
   18060:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   18064:	ea000066 	b	18204 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x260>
   18068:	000180f0 	.word	0x000180f0
   1806c:	000180e4 	.word	0x000180e4
   18070:	000180d8 	.word	0x000180d8
   18074:	00018078 	.word	0x00018078
   18078:	e3a03008 	mov	r3, #8
   1807c:	e5c53006 	strb	r3, [r5, #6]
   18080:	e1a02008 	mov	r2, r8
   18084:	e59f11a0 	ldr	r1, [pc, #416]	; 1822c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x288>
   18088:	e28d0010 	add	r0, sp, #16
   1808c:	eb0035fe 	bl	2588c <CString::Format(char const*, ...)>
   18090:	e3560001 	cmp	r6, #1
   18094:	0a000031 	beq	18160 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1bc>
   18098:	e3560002 	cmp	r6, #2
   1809c:	0a00002a 	beq	1814c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1a8>
   180a0:	e3560000 	cmp	r6, #0
   180a4:	0a000018 	beq	1810c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x168>
   180a8:	eb001e94 	bl	1fb00 <CLogger::Get()>
   180ac:	e3a02001 	mov	r2, #1
   180b0:	e59f3178 	ldr	r3, [pc, #376]	; 18230 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x28c>
   180b4:	e59f116c 	ldr	r1, [pc, #364]	; 18228 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x284>
   180b8:	e58d6000 	str	r6, [sp]
   180bc:	eb001dd1 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   180c0:	e3a04000 	mov	r4, #0
   180c4:	e28d0010 	add	r0, sp, #16
   180c8:	eb003076 	bl	242a8 <CString::~CString()>
   180cc:	e1a00004 	mov	r0, r4
   180d0:	e28dd058 	add	sp, sp, #88	; 0x58
   180d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   180d8:	e3a03007 	mov	r3, #7
   180dc:	e5c53006 	strb	r3, [r5, #6]
   180e0:	eaffffe6 	b	18080 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xdc>
   180e4:	e3a03006 	mov	r3, #6
   180e8:	e5c53006 	strb	r3, [r5, #6]
   180ec:	eaffffe3 	b	18080 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xdc>
   180f0:	e3a03005 	mov	r3, #5
   180f4:	e5c53006 	strb	r3, [r5, #6]
   180f8:	eaffffe0 	b	18080 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xdc>
   180fc:	e59f2130 	ldr	r2, [pc, #304]	; 18234 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x290>
   18100:	e59f1130 	ldr	r1, [pc, #304]	; 18238 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x294>
   18104:	e59f0130 	ldr	r0, [pc, #304]	; 1823c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x298>
   18108:	eb00157c 	bl	1d700 <assertion_failed>
   1810c:	e59f112c 	ldr	r1, [pc, #300]	; 18240 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x29c>
   18110:	e28d0010 	add	r0, sp, #16
   18114:	e5c56005 	strb	r6, [r5, #5]
   18118:	eb0030e3 	bl	244ac <CString::Append(char const*)>
   1811c:	e3590001 	cmp	r9, #1
   18120:	0a00002b 	beq	181d4 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x230>
   18124:	e3590002 	cmp	r9, #2
   18128:	0a000011 	beq	18174 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1d0>
   1812c:	eb001e73 	bl	1fb00 <CLogger::Get()>
   18130:	e3a02001 	mov	r2, #1
   18134:	e59f3108 	ldr	r3, [pc, #264]	; 18244 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x2a0>
   18138:	e59f10e8 	ldr	r1, [pc, #232]	; 18228 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x284>
   1813c:	e58d9000 	str	r9, [sp]
   18140:	eb001db0 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18144:	e3a04000 	mov	r4, #0
   18148:	eaffffdd 	b	180c4 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x120>
   1814c:	e59f10f4 	ldr	r1, [pc, #244]	; 18248 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x2a4>
   18150:	e28d0010 	add	r0, sp, #16
   18154:	e5c56005 	strb	r6, [r5, #5]
   18158:	eb0030d3 	bl	244ac <CString::Append(char const*)>
   1815c:	eaffffee 	b	1811c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x178>
   18160:	e59f10e4 	ldr	r1, [pc, #228]	; 1824c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x2a8>
   18164:	e28d0010 	add	r0, sp, #16
   18168:	e5c56005 	strb	r6, [r5, #5]
   1816c:	eb0030ce 	bl	244ac <CString::Append(char const*)>
   18170:	eaffffe9 	b	1811c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x178>
   18174:	e59f10d4 	ldr	r1, [pc, #212]	; 18250 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x2ac>
   18178:	e28d0010 	add	r0, sp, #16
   1817c:	e5c59004 	strb	r9, [r5, #4]
   18180:	eb0030c9 	bl	244ac <CString::Append(char const*)>
   18184:	e1a00007 	mov	r0, r7
   18188:	ebffe8ec 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   1818c:	e3a04000 	mov	r4, #0
   18190:	e3a03007 	mov	r3, #7
   18194:	e1a01000 	mov	r1, r0
   18198:	e58d300c 	str	r3, [sp, #12]
   1819c:	e1a0000a 	mov	r0, sl
   181a0:	e3a03020 	mov	r3, #32
   181a4:	e3a02021 	mov	r2, #33	; 0x21
   181a8:	e58d5008 	str	r5, [sp, #8]
   181ac:	e58d4004 	str	r4, [sp, #4]
   181b0:	e58d4000 	str	r4, [sp]
   181b4:	ebffc395 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   181b8:	e1500004 	cmp	r0, r4
   181bc:	ba00000a 	blt	181ec <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x248>
   181c0:	e3a04001 	mov	r4, #1
   181c4:	e5c7801c 	strb	r8, [r7, #28]
   181c8:	e5c7601d 	strb	r6, [r7, #29]
   181cc:	e5c7901e 	strb	r9, [r7, #30]
   181d0:	eaffffbb 	b	180c4 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x120>
   181d4:	e3a03000 	mov	r3, #0
   181d8:	e59f1074 	ldr	r1, [pc, #116]	; 18254 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x2b0>
   181dc:	e28d0010 	add	r0, sp, #16
   181e0:	e5c53004 	strb	r3, [r5, #4]
   181e4:	eb0030b0 	bl	244ac <CString::Append(char const*)>
   181e8:	eaffffe5 	b	18184 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e0>
   181ec:	eb001e43 	bl	1fb00 <CLogger::Get()>
   181f0:	e3a02001 	mov	r2, #1
   181f4:	e59f305c 	ldr	r3, [pc, #92]	; 18258 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x2b4>
   181f8:	e59f1028 	ldr	r1, [pc, #40]	; 18228 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x284>
   181fc:	eb001d81 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18200:	eaffffaf 	b	180c4 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x120>
   18204:	eb001e3d 	bl	1fb00 <CLogger::Get()>
   18208:	e3a02001 	mov	r2, #1
   1820c:	e59f3048 	ldr	r3, [pc, #72]	; 1825c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x2b8>
   18210:	e59f1010 	ldr	r1, [pc, #16]	; 18228 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x284>
   18214:	e58d8000 	str	r8, [sp]
   18218:	eb001d7a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1821c:	e3a04000 	mov	r4, #0
   18220:	eaffffa7 	b	180c4 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x120>
   18224:	0002f0a8 	.word	0x0002f0a8
   18228:	0002f0f8 	.word	0x0002f0f8
   1822c:	0002ee10 	.word	0x0002ee10
   18230:	0002ee38 	.word	0x0002ee38
   18234:	00000115 	.word	0x00000115
   18238:	0002eff0 	.word	0x0002eff0
   1823c:	0002cd28 	.word	0x0002cd28
   18240:	0002ee2c 	.word	0x0002ee2c
   18244:	0002ee4c 	.word	0x0002ee4c
   18248:	0002ee34 	.word	0x0002ee34
   1824c:	0002ee30 	.word	0x0002ee30
   18250:	0002f948 	.word	0x0002f948
   18254:	0002dfcc 	.word	0x0002dfcc
   18258:	0002ef90 	.word	0x0002ef90
   1825c:	0002ee14 	.word	0x0002ee14

00018260 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()>:
   18260:	e92d4010 	push	{r4, lr}
   18264:	e1a04000 	mov	r4, r0
   18268:	e59f300c 	ldr	r3, [pc, #12]	; 1827c <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()+0x1c>
   1826c:	e5803000 	str	r3, [r0]
   18270:	eb000e02 	bl	1ba80 <CUSBSerialDevice::~CUSBSerialDevice()>
   18274:	e1a00004 	mov	r0, r4
   18278:	e8bd8010 	pop	{r4, pc}
   1827c:	0002f1a8 	.word	0x0002f1a8

00018280 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()>:
   18280:	e92d4010 	push	{r4, lr}
   18284:	e1a04000 	mov	r4, r0
   18288:	e59f3018 	ldr	r3, [pc, #24]	; 182a8 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()+0x28>
   1828c:	e5803000 	str	r3, [r0]
   18290:	eb000dfa 	bl	1ba80 <CUSBSerialDevice::~CUSBSerialDevice()>
   18294:	e1a00004 	mov	r0, r4
   18298:	e3a01044 	mov	r1, #68	; 0x44
   1829c:	eb003d6e 	bl	2785c <operator delete(void*, unsigned int)>
   182a0:	e1a00004 	mov	r0, r4
   182a4:	e8bd8010 	pop	{r4, pc}
   182a8:	0002f1a8 	.word	0x0002f1a8

000182ac <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)>:
   182ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   182b0:	e24dd01c 	sub	sp, sp, #28
   182b4:	e1a08001 	mov	r8, r1
   182b8:	e1a05000 	mov	r5, r0
   182bc:	ebffe8aa 	bl	1256c <CUSBFunction::GetHost() const>
   182c0:	e2506000 	subs	r6, r0, #0
   182c4:	0a00003a 	beq	183b4 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x108>
   182c8:	e59f30f4 	ldr	r3, [pc, #244]	; 183c4 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x118>
   182cc:	e8930003 	ldm	r3, {r0, r1}
   182d0:	e28d3018 	add	r3, sp, #24
   182d4:	e9030003 	stmdb	r3, {r0, r1}
   182d8:	e1a01008 	mov	r1, r8
   182dc:	e59f00e4 	ldr	r0, [pc, #228]	; 183c8 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x11c>
   182e0:	eb0049e7 	bl	2aa84 <__udivsi3>
   182e4:	e28d2018 	add	r2, sp, #24
   182e8:	e2003007 	and	r3, r0, #7
   182ec:	e0823003 	add	r3, r2, r3
   182f0:	e5532008 	ldrb	r2, [r3, #-8]
   182f4:	e1a02702 	lsl	r2, r2, #14
   182f8:	e18231c0 	orr	r3, r2, r0, asr #3
   182fc:	e3530001 	cmp	r3, #1
   18300:	0a000020 	beq	18388 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xdc>
   18304:	e59f20c0 	ldr	r2, [pc, #192]	; 183cc <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x120>
   18308:	e1530002 	cmp	r3, r2
   1830c:	0a00001a 	beq	1837c <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xd0>
   18310:	e6ff9073 	uxth	r9, r3
   18314:	e1a04823 	lsr	r4, r3, #16
   18318:	e1a00005 	mov	r0, r5
   1831c:	ebffe887 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   18320:	e3a07000 	mov	r7, #0
   18324:	e1a01000 	mov	r1, r0
   18328:	e3a03003 	mov	r3, #3
   1832c:	e1a00006 	mov	r0, r6
   18330:	e3a02040 	mov	r2, #64	; 0x40
   18334:	e58d4004 	str	r4, [sp, #4]
   18338:	e58d9000 	str	r9, [sp]
   1833c:	e58d700c 	str	r7, [sp, #12]
   18340:	e58d7008 	str	r7, [sp, #8]
   18344:	ebffc331 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18348:	e1500007 	cmp	r0, r7
   1834c:	ba000010 	blt	18394 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xe8>
   18350:	e5858018 	str	r8, [r5, #24]
   18354:	eb001de9 	bl	1fb00 <CLogger::Get()>
   18358:	e5952018 	ldr	r2, [r5, #24]
   1835c:	e59f306c 	ldr	r3, [pc, #108]	; 183d0 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x124>
   18360:	e58d2000 	str	r2, [sp]
   18364:	e59f1068 	ldr	r1, [pc, #104]	; 183d4 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x128>
   18368:	e3a02004 	mov	r2, #4
   1836c:	eb001d25 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18370:	e3a00001 	mov	r0, #1
   18374:	e28dd01c 	add	sp, sp, #28
   18378:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1837c:	e3a04000 	mov	r4, #0
   18380:	e3a09001 	mov	r9, #1
   18384:	eaffffe3 	b	18318 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x6c>
   18388:	e3a04000 	mov	r4, #0
   1838c:	e1a09004 	mov	r9, r4
   18390:	eaffffe0 	b	18318 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x6c>
   18394:	eb001dd9 	bl	1fb00 <CLogger::Get()>
   18398:	e3a02001 	mov	r2, #1
   1839c:	e59f3034 	ldr	r3, [pc, #52]	; 183d8 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x12c>
   183a0:	e59f102c 	ldr	r1, [pc, #44]	; 183d4 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x128>
   183a4:	eb001d17 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   183a8:	e1a00007 	mov	r0, r7
   183ac:	e28dd01c 	add	sp, sp, #28
   183b0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   183b4:	e3a0207b 	mov	r2, #123	; 0x7b
   183b8:	e59f101c 	ldr	r1, [pc, #28]	; 183dc <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x130>
   183bc:	e59f001c 	ldr	r0, [pc, #28]	; 183e0 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x134>
   183c0:	eb0014ce 	bl	1d700 <assertion_failed>
   183c4:	0002f1d4 	.word	0x0002f1d4
   183c8:	016e3600 	.word	0x016e3600
   183cc:	00004001 	.word	0x00004001
   183d0:	0002ef18 	.word	0x0002ef18
   183d4:	0002f1dc 	.word	0x0002f1dc
   183d8:	0002ef00 	.word	0x0002ef00
   183dc:	0002f108 	.word	0x0002f108
   183e0:	0002cd28 	.word	0x0002cd28

000183e4 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)>:
   183e4:	e92d4010 	push	{r4, lr}
   183e8:	e1a04000 	mov	r4, r0
   183ec:	e3a02002 	mov	r2, #2
   183f0:	eb000ea1 	bl	1be7c <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   183f4:	e59f3008 	ldr	r3, [pc, #8]	; 18404 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)+0x20>
   183f8:	e1a00004 	mov	r0, r4
   183fc:	e5843000 	str	r3, [r4]
   18400:	e8bd8010 	pop	{r4, pc}
   18404:	0002f1a8 	.word	0x0002f1a8

00018408 <CUSBSerialFT231XDevice::GetDeviceIDTable()>:
   18408:	e59f0000 	ldr	r0, [pc]	; 18410 <CUSBSerialFT231XDevice::GetDeviceIDTable()+0x8>
   1840c:	e12fff1e 	bx	lr
   18410:	0002f1e4 	.word	0x0002f1e4

00018414 <CUSBSerialFT231XDevice::Configure()>:
   18414:	e92d4070 	push	{r4, r5, r6, lr}
   18418:	e24dd020 	sub	sp, sp, #32
   1841c:	e1a05000 	mov	r5, r0
   18420:	eb000efb 	bl	1c014 <CUSBSerialDevice::Configure()>
   18424:	e2504000 	subs	r4, r0, #0
   18428:	0a00004d 	beq	18564 <CUSBSerialFT231XDevice::Configure()+0x150>
   1842c:	e1a00005 	mov	r0, r5
   18430:	ebffe838 	bl	12518 <CUSBFunction::GetDevice() const>
   18434:	ebffe219 	bl	10ca0 <CUSBDevice::GetDeviceDescriptor() const>
   18438:	e1a04000 	mov	r4, r0
   1843c:	e59f11b8 	ldr	r1, [pc, #440]	; 185fc <CUSBSerialFT231XDevice::Configure()+0x1e8>
   18440:	e28d0010 	add	r0, sp, #16
   18444:	eb002fd0 	bl	2438c <CString::CString(char const*)>
   18448:	e5d4300c 	ldrb	r3, [r4, #12]
   1844c:	e5d4200d 	ldrb	r2, [r4, #13]
   18450:	e1833402 	orr	r3, r3, r2, lsl #8
   18454:	e3530a01 	cmp	r3, #4096	; 0x1000
   18458:	0a000054 	beq	185b0 <CUSBSerialFT231XDevice::Configure()+0x19c>
   1845c:	e3530c06 	cmp	r3, #1536	; 0x600
   18460:	0a000047 	beq	18584 <CUSBSerialFT231XDevice::Configure()+0x170>
   18464:	e3530c09 	cmp	r3, #2304	; 0x900
   18468:	0a000054 	beq	185c0 <CUSBSerialFT231XDevice::Configure()+0x1ac>
   1846c:	eb001da3 	bl	1fb00 <CLogger::Get()>
   18470:	e1a04000 	mov	r4, r0
   18474:	e28d0010 	add	r0, sp, #16
   18478:	eb002fd5 	bl	243d4 <CString::operator char const*() const>
   1847c:	e1a02000 	mov	r2, r0
   18480:	e59f3178 	ldr	r3, [pc, #376]	; 18600 <CUSBSerialFT231XDevice::Configure()+0x1ec>
   18484:	e1a00004 	mov	r0, r4
   18488:	e59f1174 	ldr	r1, [pc, #372]	; 18604 <CUSBSerialFT231XDevice::Configure()+0x1f0>
   1848c:	e58d2000 	str	r2, [sp]
   18490:	e3a02003 	mov	r2, #3
   18494:	eb001cdb 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18498:	e1a00005 	mov	r0, r5
   1849c:	ebffe832 	bl	1256c <CUSBFunction::GetHost() const>
   184a0:	e2504000 	subs	r4, r0, #0
   184a4:	0a000049 	beq	185d0 <CUSBSerialFT231XDevice::Configure()+0x1bc>
   184a8:	e1a00005 	mov	r0, r5
   184ac:	ebffe823 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   184b0:	e3a06000 	mov	r6, #0
   184b4:	e1a01000 	mov	r1, r0
   184b8:	e1a03006 	mov	r3, r6
   184bc:	e3a02040 	mov	r2, #64	; 0x40
   184c0:	e1a00004 	mov	r0, r4
   184c4:	e58d600c 	str	r6, [sp, #12]
   184c8:	e58d6008 	str	r6, [sp, #8]
   184cc:	e58d6004 	str	r6, [sp, #4]
   184d0:	e58d6000 	str	r6, [sp]
   184d4:	ebffc2cd 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   184d8:	e1500006 	cmp	r0, r6
   184dc:	ba00002c 	blt	18594 <CUSBSerialFT231XDevice::Configure()+0x180>
   184e0:	e1a00005 	mov	r0, r5
   184e4:	ebffe815 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   184e8:	e3a03002 	mov	r3, #2
   184ec:	e1a01000 	mov	r1, r0
   184f0:	e3a02040 	mov	r2, #64	; 0x40
   184f4:	e1a00004 	mov	r0, r4
   184f8:	e58d600c 	str	r6, [sp, #12]
   184fc:	e58d6008 	str	r6, [sp, #8]
   18500:	e58d6004 	str	r6, [sp, #4]
   18504:	e58d6000 	str	r6, [sp]
   18508:	ebffc2c0 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1850c:	e3500000 	cmp	r0, #0
   18510:	ba000032 	blt	185e0 <CUSBSerialFT231XDevice::Configure()+0x1cc>
   18514:	e5953000 	ldr	r3, [r5]
   18518:	e3a01d96 	mov	r1, #9600	; 0x2580
   1851c:	e1a00005 	mov	r0, r5
   18520:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   18524:	e12fff33 	blx	r3
   18528:	e2504000 	subs	r4, r0, #0
   1852c:	0a000007 	beq	18550 <CUSBSerialFT231XDevice::Configure()+0x13c>
   18530:	e5953000 	ldr	r3, [r5]
   18534:	e1a02006 	mov	r2, r6
   18538:	e5934028 	ldr	r4, [r3, #40]	; 0x28
   1853c:	e1a00005 	mov	r0, r5
   18540:	e3a03001 	mov	r3, #1
   18544:	e3a01008 	mov	r1, #8
   18548:	e12fff34 	blx	r4
   1854c:	e1a04000 	mov	r4, r0
   18550:	e28d0010 	add	r0, sp, #16
   18554:	eb002f53 	bl	242a8 <CString::~CString()>
   18558:	e1a00004 	mov	r0, r4
   1855c:	e28dd020 	add	sp, sp, #32
   18560:	e8bd8070 	pop	{r4, r5, r6, pc}
   18564:	eb001d65 	bl	1fb00 <CLogger::Get()>
   18568:	e3a02001 	mov	r2, #1
   1856c:	e59f3094 	ldr	r3, [pc, #148]	; 18608 <CUSBSerialFT231XDevice::Configure()+0x1f4>
   18570:	e59f108c 	ldr	r1, [pc, #140]	; 18604 <CUSBSerialFT231XDevice::Configure()+0x1f0>
   18574:	eb001ca3 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18578:	e1a00004 	mov	r0, r4
   1857c:	e28dd020 	add	sp, sp, #32
   18580:	e8bd8070 	pop	{r4, r5, r6, pc}
   18584:	e59f1080 	ldr	r1, [pc, #128]	; 1860c <CUSBSerialFT231XDevice::Configure()+0x1f8>
   18588:	e28d0010 	add	r0, sp, #16
   1858c:	eb002f96 	bl	243ec <CString::operator=(char const*)>
   18590:	eaffffb5 	b	1846c <CUSBSerialFT231XDevice::Configure()+0x58>
   18594:	eb001d59 	bl	1fb00 <CLogger::Get()>
   18598:	e3a02001 	mov	r2, #1
   1859c:	e59f306c 	ldr	r3, [pc, #108]	; 18610 <CUSBSerialFT231XDevice::Configure()+0x1fc>
   185a0:	e59f105c 	ldr	r1, [pc, #92]	; 18604 <CUSBSerialFT231XDevice::Configure()+0x1f0>
   185a4:	e1a04006 	mov	r4, r6
   185a8:	eb001c96 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   185ac:	eaffffe7 	b	18550 <CUSBSerialFT231XDevice::Configure()+0x13c>
   185b0:	e59f105c 	ldr	r1, [pc, #92]	; 18614 <CUSBSerialFT231XDevice::Configure()+0x200>
   185b4:	e28d0010 	add	r0, sp, #16
   185b8:	eb002f8b 	bl	243ec <CString::operator=(char const*)>
   185bc:	eaffffaa 	b	1846c <CUSBSerialFT231XDevice::Configure()+0x58>
   185c0:	e59f1050 	ldr	r1, [pc, #80]	; 18618 <CUSBSerialFT231XDevice::Configure()+0x204>
   185c4:	e28d0010 	add	r0, sp, #16
   185c8:	eb002f87 	bl	243ec <CString::operator=(char const*)>
   185cc:	eaffffa6 	b	1846c <CUSBSerialFT231XDevice::Configure()+0x58>
   185d0:	e3a02051 	mov	r2, #81	; 0x51
   185d4:	e59f1040 	ldr	r1, [pc, #64]	; 1861c <CUSBSerialFT231XDevice::Configure()+0x208>
   185d8:	e59f0040 	ldr	r0, [pc, #64]	; 18620 <CUSBSerialFT231XDevice::Configure()+0x20c>
   185dc:	eb001447 	bl	1d700 <assertion_failed>
   185e0:	eb001d46 	bl	1fb00 <CLogger::Get()>
   185e4:	e3a02001 	mov	r2, #1
   185e8:	e59f3034 	ldr	r3, [pc, #52]	; 18624 <CUSBSerialFT231XDevice::Configure()+0x210>
   185ec:	e59f1010 	ldr	r1, [pc, #16]	; 18604 <CUSBSerialFT231XDevice::Configure()+0x1f0>
   185f0:	e1a04006 	mov	r4, r6
   185f4:	eb001c83 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   185f8:	eaffffd4 	b	18550 <CUSBSerialFT231XDevice::Configure()+0x13c>
   185fc:	0002f11c 	.word	0x0002f11c
   18600:	0002f138 	.word	0x0002f138
   18604:	0002f1dc 	.word	0x0002f1dc
   18608:	0002eda8 	.word	0x0002eda8
   1860c:	0002f128 	.word	0x0002f128
   18610:	0002f148 	.word	0x0002f148
   18614:	0002f120 	.word	0x0002f120
   18618:	0002f130 	.word	0x0002f130
   1861c:	0002f108 	.word	0x0002f108
   18620:	0002cd28 	.word	0x0002cd28
   18624:	0002f15c 	.word	0x0002f15c

00018628 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   18628:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1862c:	e24dd020 	sub	sp, sp, #32
   18630:	e1a04001 	mov	r4, r1
   18634:	e1a05002 	mov	r5, r2
   18638:	e1a09003 	mov	r9, r3
   1863c:	e1a08000 	mov	r8, r0
   18640:	ebffe7c9 	bl	1256c <CUSBFunction::GetHost() const>
   18644:	e2506000 	subs	r6, r0, #0
   18648:	0a000064 	beq	187e0 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1b8>
   1864c:	e28d0010 	add	r0, sp, #16
   18650:	eb002f47 	bl	24374 <CString::CString()>
   18654:	e3540007 	cmp	r4, #7
   18658:	0a00000d 	beq	18694 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x6c>
   1865c:	e3540008 	cmp	r4, #8
   18660:	0a00000b 	beq	18694 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x6c>
   18664:	eb001d25 	bl	1fb00 <CLogger::Get()>
   18668:	e3a02001 	mov	r2, #1
   1866c:	e59f3194 	ldr	r3, [pc, #404]	; 18808 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e0>
   18670:	e59f1194 	ldr	r1, [pc, #404]	; 1880c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e4>
   18674:	e58d4000 	str	r4, [sp]
   18678:	eb001c62 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1867c:	e3a07000 	mov	r7, #0
   18680:	e28d0010 	add	r0, sp, #16
   18684:	eb002f07 	bl	242a8 <CString::~CString()>
   18688:	e1a00007 	mov	r0, r7
   1868c:	e28dd020 	add	sp, sp, #32
   18690:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18694:	e1a02004 	mov	r2, r4
   18698:	e59f1170 	ldr	r1, [pc, #368]	; 18810 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e8>
   1869c:	e28d0010 	add	r0, sp, #16
   186a0:	eb003479 	bl	2588c <CString::Format(char const*, ...)>
   186a4:	e3550001 	cmp	r5, #1
   186a8:	e1a0a004 	mov	sl, r4
   186ac:	0a00000b 	beq	186e0 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xb8>
   186b0:	e3550002 	cmp	r5, #2
   186b4:	0a000044 	beq	187cc <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1a4>
   186b8:	e3550000 	cmp	r5, #0
   186bc:	0a000017 	beq	18720 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf8>
   186c0:	eb001d0e 	bl	1fb00 <CLogger::Get()>
   186c4:	e3a02001 	mov	r2, #1
   186c8:	e59f3144 	ldr	r3, [pc, #324]	; 18814 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1ec>
   186cc:	e59f1138 	ldr	r1, [pc, #312]	; 1880c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e4>
   186d0:	e58d5000 	str	r5, [sp]
   186d4:	eb001c4b 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   186d8:	e3a07000 	mov	r7, #0
   186dc:	eaffffe7 	b	18680 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x58>
   186e0:	e59f1130 	ldr	r1, [pc, #304]	; 18818 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1f0>
   186e4:	e28d0010 	add	r0, sp, #16
   186e8:	e384ac01 	orr	sl, r4, #256	; 0x100
   186ec:	eb002f6e 	bl	244ac <CString::Append(char const*)>
   186f0:	e3590001 	cmp	r9, #1
   186f4:	0a00000e 	beq	18734 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x10c>
   186f8:	e3590002 	cmp	r9, #2
   186fc:	0a000010 	beq	18744 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x11c>
   18700:	eb001cfe 	bl	1fb00 <CLogger::Get()>
   18704:	e3a02001 	mov	r2, #1
   18708:	e59f310c 	ldr	r3, [pc, #268]	; 1881c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1f4>
   1870c:	e59f10f8 	ldr	r1, [pc, #248]	; 1880c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e4>
   18710:	e58d9000 	str	r9, [sp]
   18714:	eb001c3b 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18718:	e3a07000 	mov	r7, #0
   1871c:	eaffffd7 	b	18680 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x58>
   18720:	e59f10f8 	ldr	r1, [pc, #248]	; 18820 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1f8>
   18724:	e28d0010 	add	r0, sp, #16
   18728:	eb002f5f 	bl	244ac <CString::Append(char const*)>
   1872c:	e3590001 	cmp	r9, #1
   18730:	1afffff0 	bne	186f8 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xd0>
   18734:	e59f10e8 	ldr	r1, [pc, #232]	; 18824 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1fc>
   18738:	e28d0010 	add	r0, sp, #16
   1873c:	eb002f5a 	bl	244ac <CString::Append(char const*)>
   18740:	ea000003 	b	18754 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x12c>
   18744:	e59f10dc 	ldr	r1, [pc, #220]	; 18828 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x200>
   18748:	e28d0010 	add	r0, sp, #16
   1874c:	e38aaa01 	orr	sl, sl, #4096	; 0x1000
   18750:	eb002f55 	bl	244ac <CString::Append(char const*)>
   18754:	e1a00008 	mov	r0, r8
   18758:	ebffe778 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   1875c:	e3a07000 	mov	r7, #0
   18760:	e1a01000 	mov	r1, r0
   18764:	e3a03004 	mov	r3, #4
   18768:	e1a00006 	mov	r0, r6
   1876c:	e3a02040 	mov	r2, #64	; 0x40
   18770:	e58da000 	str	sl, [sp]
   18774:	e58d700c 	str	r7, [sp, #12]
   18778:	e58d7008 	str	r7, [sp, #8]
   1877c:	e58d7004 	str	r7, [sp, #4]
   18780:	ebffc222 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18784:	e1500007 	cmp	r0, r7
   18788:	ba000018 	blt	187f0 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1c8>
   1878c:	e5c8401c 	strb	r4, [r8, #28]
   18790:	e5c8501d 	strb	r5, [r8, #29]
   18794:	e5c8901e 	strb	r9, [r8, #30]
   18798:	eb001cd8 	bl	1fb00 <CLogger::Get()>
   1879c:	e1a04000 	mov	r4, r0
   187a0:	e28d0010 	add	r0, sp, #16
   187a4:	eb002f0a 	bl	243d4 <CString::operator char const*() const>
   187a8:	e1a02000 	mov	r2, r0
   187ac:	e59f3078 	ldr	r3, [pc, #120]	; 1882c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x204>
   187b0:	e58d2000 	str	r2, [sp]
   187b4:	e1a00004 	mov	r0, r4
   187b8:	e3a02004 	mov	r2, #4
   187bc:	e59f1048 	ldr	r1, [pc, #72]	; 1880c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e4>
   187c0:	eb001c10 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   187c4:	e3a07001 	mov	r7, #1
   187c8:	eaffffac 	b	18680 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x58>
   187cc:	e59f105c 	ldr	r1, [pc, #92]	; 18830 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x208>
   187d0:	e28d0010 	add	r0, sp, #16
   187d4:	e384ac02 	orr	sl, r4, #512	; 0x200
   187d8:	eb002f33 	bl	244ac <CString::Append(char const*)>
   187dc:	eaffffc3 	b	186f0 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc8>
   187e0:	e3a020a1 	mov	r2, #161	; 0xa1
   187e4:	e59f1048 	ldr	r1, [pc, #72]	; 18834 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>
   187e8:	e59f0048 	ldr	r0, [pc, #72]	; 18838 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x210>
   187ec:	eb0013c3 	bl	1d700 <assertion_failed>
   187f0:	eb001cc2 	bl	1fb00 <CLogger::Get()>
   187f4:	e3a02001 	mov	r2, #1
   187f8:	e59f303c 	ldr	r3, [pc, #60]	; 1883c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x214>
   187fc:	e59f1008 	ldr	r1, [pc, #8]	; 1880c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e4>
   18800:	eb001c00 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18804:	eaffff9d 	b	18680 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x58>
   18808:	0002f178 	.word	0x0002f178
   1880c:	0002f1dc 	.word	0x0002f1dc
   18810:	0002ee10 	.word	0x0002ee10
   18814:	0002ee38 	.word	0x0002ee38
   18818:	0002ee30 	.word	0x0002ee30
   1881c:	0002ee4c 	.word	0x0002ee4c
   18820:	0002ee2c 	.word	0x0002ee2c
   18824:	0002dfcc 	.word	0x0002dfcc
   18828:	0002f948 	.word	0x0002f948
   1882c:	0002f194 	.word	0x0002f194
   18830:	0002ee34 	.word	0x0002ee34
   18834:	0002f108 	.word	0x0002f108
   18838:	0002cd28 	.word	0x0002cd28
   1883c:	0002ef90 	.word	0x0002ef90

00018840 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()>:
   18840:	e92d4010 	push	{r4, lr}
   18844:	e1a04000 	mov	r4, r0
   18848:	e59f300c 	ldr	r3, [pc, #12]	; 1885c <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()+0x1c>
   1884c:	e5803000 	str	r3, [r0]
   18850:	eb000c8a 	bl	1ba80 <CUSBSerialDevice::~CUSBSerialDevice()>
   18854:	e1a00004 	mov	r0, r4
   18858:	e8bd8010 	pop	{r4, pc}
   1885c:	0002f228 	.word	0x0002f228

00018860 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()>:
   18860:	e92d4010 	push	{r4, lr}
   18864:	e1a04000 	mov	r4, r0
   18868:	e59f3018 	ldr	r3, [pc, #24]	; 18888 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()+0x28>
   1886c:	e5803000 	str	r3, [r0]
   18870:	eb000c82 	bl	1ba80 <CUSBSerialDevice::~CUSBSerialDevice()>
   18874:	e1a00004 	mov	r0, r4
   18878:	e3a01048 	mov	r1, #72	; 0x48
   1887c:	eb003bf6 	bl	2785c <operator delete(void*, unsigned int)>
   18880:	e1a00004 	mov	r0, r4
   18884:	e8bd8010 	pop	{r4, pc}
   18888:	0002f228 	.word	0x0002f228

0001888c <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)>:
   1888c:	e92d4010 	push	{r4, lr}
   18890:	e3a02000 	mov	r2, #0
   18894:	e1a04000 	mov	r4, r0
   18898:	eb000d77 	bl	1be7c <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   1889c:	e3a03000 	mov	r3, #0
   188a0:	e59f2020 	ldr	r2, [pc, #32]	; 188c8 <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)+0x3c>
   188a4:	e1a00004 	mov	r0, r4
   188a8:	e5842000 	str	r2, [r4]
   188ac:	e3a0100a 	mov	r1, #10
   188b0:	e1a02003 	mov	r2, r3
   188b4:	ebffe755 	bl	12610 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   188b8:	e1a03000 	mov	r3, r0
   188bc:	e1a00004 	mov	r0, r4
   188c0:	e5c43044 	strb	r3, [r4, #68]	; 0x44
   188c4:	e8bd8010 	pop	{r4, pc}
   188c8:	0002f228 	.word	0x0002f228

000188cc <CUSBSerialCDCDevice::SetLineCoding()>:
   188cc:	e5d0201e 	ldrb	r2, [r0, #30]
   188d0:	e92d4070 	push	{r4, r5, r6, lr}
   188d4:	e1a04000 	mov	r4, r0
   188d8:	e3520001 	cmp	r2, #1
   188dc:	e5d0301d 	ldrb	r3, [r0, #29]
   188e0:	03a00000 	moveq	r0, #0
   188e4:	13a00002 	movne	r0, #2
   188e8:	e24dd050 	sub	sp, sp, #80	; 0x50
   188ec:	e5941018 	ldr	r1, [r4, #24]
   188f0:	e5d4201c 	ldrb	r2, [r4, #28]
   188f4:	e28d5037 	add	r5, sp, #55	; 0x37
   188f8:	e3c5501f 	bic	r5, r5, #31
   188fc:	e3530001 	cmp	r3, #1
   18900:	e5c50004 	strb	r0, [r5, #4]
   18904:	e5851000 	str	r1, [r5]
   18908:	e5c52006 	strb	r2, [r5, #6]
   1890c:	0a000007 	beq	18930 <CUSBSerialCDCDevice::SetLineCoding()+0x64>
   18910:	e3530002 	cmp	r3, #2
   18914:	0a000005 	beq	18930 <CUSBSerialCDCDevice::SetLineCoding()+0x64>
   18918:	e3530000 	cmp	r3, #0
   1891c:	0a000003 	beq	18930 <CUSBSerialCDCDevice::SetLineCoding()+0x64>
   18920:	e3a02076 	mov	r2, #118	; 0x76
   18924:	e59f108c 	ldr	r1, [pc, #140]	; 189b8 <CUSBSerialCDCDevice::SetLineCoding()+0xec>
   18928:	e59f008c 	ldr	r0, [pc, #140]	; 189bc <CUSBSerialCDCDevice::SetLineCoding()+0xf0>
   1892c:	eb001373 	bl	1d700 <assertion_failed>
   18930:	e5c53005 	strb	r3, [r5, #5]
   18934:	e1a00004 	mov	r0, r4
   18938:	ebffe70b 	bl	1256c <CUSBFunction::GetHost() const>
   1893c:	e1a06000 	mov	r6, r0
   18940:	e1a00004 	mov	r0, r4
   18944:	ebffe6fd 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   18948:	e1a01000 	mov	r1, r0
   1894c:	e1a00004 	mov	r0, r4
   18950:	e58d1014 	str	r1, [sp, #20]
   18954:	ebffe760 	bl	126dc <CUSBFunction::GetInterfaceNumber() const>
   18958:	e3a04000 	mov	r4, #0
   1895c:	e3a02007 	mov	r2, #7
   18960:	e6ff3070 	uxth	r3, r0
   18964:	e98d0028 	stmib	sp, {r3, r5}
   18968:	e58d200c 	str	r2, [sp, #12]
   1896c:	e1a00006 	mov	r0, r6
   18970:	e3a03020 	mov	r3, #32
   18974:	e3a02021 	mov	r2, #33	; 0x21
   18978:	e59d1014 	ldr	r1, [sp, #20]
   1897c:	e58d4000 	str	r4, [sp]
   18980:	ebffc1a2 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18984:	e1500004 	cmp	r0, r4
   18988:	a3a00001 	movge	r0, #1
   1898c:	ba000001 	blt	18998 <CUSBSerialCDCDevice::SetLineCoding()+0xcc>
   18990:	e28dd050 	add	sp, sp, #80	; 0x50
   18994:	e8bd8070 	pop	{r4, r5, r6, pc}
   18998:	eb001c58 	bl	1fb00 <CLogger::Get()>
   1899c:	e3a02002 	mov	r2, #2
   189a0:	e59f3018 	ldr	r3, [pc, #24]	; 189c0 <CUSBSerialCDCDevice::SetLineCoding()+0xf4>
   189a4:	e59f1018 	ldr	r1, [pc, #24]	; 189c4 <CUSBSerialCDCDevice::SetLineCoding()+0xf8>
   189a8:	eb001b96 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   189ac:	e1a00004 	mov	r0, r4
   189b0:	e28dd050 	add	sp, sp, #80	; 0x50
   189b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   189b8:	0002f1f4 	.word	0x0002f1f4
   189bc:	0002dbb4 	.word	0x0002dbb4
   189c0:	0002f208 	.word	0x0002f208
   189c4:	0002f254 	.word	0x0002f254

000189c8 <CUSBSerialCDCDevice::SetBaudRate(unsigned int)>:
   189c8:	e5801018 	str	r1, [r0, #24]
   189cc:	eaffffbe 	b	188cc <CUSBSerialCDCDevice::SetLineCoding()>

000189d0 <CUSBSerialCDCDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   189d0:	e5c0101c 	strb	r1, [r0, #28]
   189d4:	e5c0201d 	strb	r2, [r0, #29]
   189d8:	e5c0301e 	strb	r3, [r0, #30]
   189dc:	eaffffba 	b	188cc <CUSBSerialCDCDevice::SetLineCoding()>

000189e0 <CUSBSerialCDCDevice::Configure()>:
   189e0:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
   189e4:	e92d4010 	push	{r4, lr}
   189e8:	e3530000 	cmp	r3, #0
   189ec:	0a00000d 	beq	18a28 <CUSBSerialCDCDevice::Configure()+0x48>
   189f0:	e1a04000 	mov	r4, r0
   189f4:	eb000d86 	bl	1c014 <CUSBSerialDevice::Configure()>
   189f8:	e3500000 	cmp	r0, #0
   189fc:	0a000002 	beq	18a0c <CUSBSerialCDCDevice::Configure()+0x2c>
   18a00:	e1a00004 	mov	r0, r4
   18a04:	e8bd4010 	pop	{r4, lr}
   18a08:	eaffffaf 	b	188cc <CUSBSerialCDCDevice::SetLineCoding()>
   18a0c:	eb001c3b 	bl	1fb00 <CLogger::Get()>
   18a10:	e3a02001 	mov	r2, #1
   18a14:	e59f301c 	ldr	r3, [pc, #28]	; 18a38 <CUSBSerialCDCDevice::Configure()+0x58>
   18a18:	e59f101c 	ldr	r1, [pc, #28]	; 18a3c <CUSBSerialCDCDevice::Configure()+0x5c>
   18a1c:	eb001b79 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18a20:	e3a00000 	mov	r0, #0
   18a24:	e8bd8010 	pop	{r4, pc}
   18a28:	e59f100c 	ldr	r1, [pc, #12]	; 18a3c <CUSBSerialCDCDevice::Configure()+0x5c>
   18a2c:	ebffe6e4 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   18a30:	e3a00000 	mov	r0, #0
   18a34:	e8bd8010 	pop	{r4, pc}
   18a38:	0002eda8 	.word	0x0002eda8
   18a3c:	0002f254 	.word	0x0002f254

00018a40 <CLAN7800Device::GetMACAddress() const>:
   18a40:	e2800024 	add	r0, r0, #36	; 0x24
   18a44:	e12fff1e 	bx	lr

00018a48 <CLAN7800Device::~CLAN7800Device()>:
   18a48:	e92d4070 	push	{r4, r5, r6, lr}
   18a4c:	e59f3074 	ldr	r3, [pc, #116]	; 18ac8 <CLAN7800Device::~CLAN7800Device()+0x80>
   18a50:	e5905020 	ldr	r5, [r0, #32]
   18a54:	e2832040 	add	r2, r3, #64	; 0x40
   18a58:	e3550000 	cmp	r5, #0
   18a5c:	e1a04000 	mov	r4, r0
   18a60:	e5803000 	str	r3, [r0]
   18a64:	e5802018 	str	r2, [r0, #24]
   18a68:	0a000004 	beq	18a80 <CLAN7800Device::~CLAN7800Device()+0x38>
   18a6c:	e1a00005 	mov	r0, r5
   18a70:	ebffe548 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   18a74:	e1a00005 	mov	r0, r5
   18a78:	e3a01014 	mov	r1, #20
   18a7c:	eb003b76 	bl	2785c <operator delete(void*, unsigned int)>
   18a80:	e3a03000 	mov	r3, #0
   18a84:	e594501c 	ldr	r5, [r4, #28]
   18a88:	e5843020 	str	r3, [r4, #32]
   18a8c:	e1550003 	cmp	r5, r3
   18a90:	0a000004 	beq	18aa8 <CLAN7800Device::~CLAN7800Device()+0x60>
   18a94:	e1a00005 	mov	r0, r5
   18a98:	ebffe53e 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   18a9c:	e1a00005 	mov	r0, r5
   18aa0:	e3a01014 	mov	r1, #20
   18aa4:	eb003b6c 	bl	2785c <operator delete(void*, unsigned int)>
   18aa8:	e3a03000 	mov	r3, #0
   18aac:	e2840024 	add	r0, r4, #36	; 0x24
   18ab0:	e584301c 	str	r3, [r4, #28]
   18ab4:	eb003a78 	bl	2749c <CMACAddress::~CMACAddress()>
   18ab8:	e1a00004 	mov	r0, r4
   18abc:	ebffe5a2 	bl	1214c <CUSBFunction::~CUSBFunction()>
   18ac0:	e1a00004 	mov	r0, r4
   18ac4:	e8bd8070 	pop	{r4, r5, r6, pc}
   18ac8:	0002f410 	.word	0x0002f410

00018acc <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   18acc:	e2400018 	sub	r0, r0, #24
   18ad0:	eaffffdc 	b	18a48 <CLAN7800Device::~CLAN7800Device()>

00018ad4 <CLAN7800Device::~CLAN7800Device()>:
   18ad4:	e92d4010 	push	{r4, lr}
   18ad8:	e1a04000 	mov	r4, r0
   18adc:	ebffffd9 	bl	18a48 <CLAN7800Device::~CLAN7800Device()>
   18ae0:	e1a00004 	mov	r0, r4
   18ae4:	e3a0102c 	mov	r1, #44	; 0x2c
   18ae8:	eb003b5b 	bl	2785c <operator delete(void*, unsigned int)>
   18aec:	e1a00004 	mov	r0, r4
   18af0:	e8bd8010 	pop	{r4, pc}

00018af4 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   18af4:	e2400018 	sub	r0, r0, #24
   18af8:	eafffff5 	b	18ad4 <CLAN7800Device::~CLAN7800Device()>

00018afc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   18afc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18b00:	e590301c 	ldr	r3, [r0, #28]
   18b04:	e24dd038 	sub	sp, sp, #56	; 0x38
   18b08:	e3530000 	cmp	r3, #0
   18b0c:	0a000034 	beq	18be4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   18b10:	e3510000 	cmp	r1, #0
   18b14:	e1a04001 	mov	r4, r1
   18b18:	0a000035 	beq	18bf4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xf8>
   18b1c:	e3a07000 	mov	r7, #0
   18b20:	e1a05000 	mov	r5, r0
   18b24:	e1a01003 	mov	r1, r3
   18b28:	e1a06002 	mov	r6, r2
   18b2c:	e3a03d19 	mov	r3, #1600	; 0x640
   18b30:	e1a02004 	mov	r2, r4
   18b34:	e58d7000 	str	r7, [sp]
   18b38:	e28d000c 	add	r0, sp, #12
   18b3c:	ebffc6c5 	bl	a658 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   18b40:	e1a00005 	mov	r0, r5
   18b44:	ebffe688 	bl	1256c <CUSBFunction::GetHost() const>
   18b48:	e5903000 	ldr	r3, [r0]
   18b4c:	e1a02007 	mov	r2, r7
   18b50:	e5933008 	ldr	r3, [r3, #8]
   18b54:	e28d100c 	add	r1, sp, #12
   18b58:	e12fff33 	blx	r3
   18b5c:	e2505000 	subs	r5, r0, #0
   18b60:	1a000005 	bne	18b7c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x80>
   18b64:	e3a05000 	mov	r5, #0
   18b68:	e28d000c 	add	r0, sp, #12
   18b6c:	ebffc6db 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
   18b70:	e1a00005 	mov	r0, r5
   18b74:	e28dd038 	add	sp, sp, #56	; 0x38
   18b78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18b7c:	e28d000c 	add	r0, sp, #12
   18b80:	ebffc6e9 	bl	a72c <CUSBRequest::GetResultLength() const>
   18b84:	e3500009 	cmp	r0, #9
   18b88:	9afffff5 	bls	18b64 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   18b8c:	e5948000 	ldr	r8, [r4]
   18b90:	e3180501 	tst	r8, #4194304	; 0x400000
   18b94:	1a00001a 	bne	18c04 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x108>
   18b98:	e1a03908 	lsl	r3, r8, #18
   18b9c:	e1a03923 	lsr	r3, r3, #18
   18ba0:	e240200a 	sub	r2, r0, #10
   18ba4:	e1520003 	cmp	r2, r3
   18ba8:	1a00001d 	bne	18c24 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x128>
   18bac:	e3520004 	cmp	r2, #4
   18bb0:	9a00001f 	bls	18c34 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x138>
   18bb4:	e240700e 	sub	r7, r0, #14
   18bb8:	e1a02007 	mov	r2, r7
   18bbc:	e1a00004 	mov	r0, r4
   18bc0:	e284100a 	add	r1, r4, #10
   18bc4:	eb003930 	bl	2708c <memcpy>
   18bc8:	e3560000 	cmp	r6, #0
   18bcc:	15867000 	strne	r7, [r6]
   18bd0:	1affffe4 	bne	18b68 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   18bd4:	e3a02f79 	mov	r2, #484	; 0x1e4
   18bd8:	e59f1064 	ldr	r1, [pc, #100]	; 18c44 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   18bdc:	e59f0064 	ldr	r0, [pc, #100]	; 18c48 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   18be0:	eb0012c6 	bl	1d700 <assertion_failed>
   18be4:	e3a02d07 	mov	r2, #448	; 0x1c0
   18be8:	e59f1054 	ldr	r1, [pc, #84]	; 18c44 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   18bec:	e59f0058 	ldr	r0, [pc, #88]	; 18c4c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x150>
   18bf0:	eb0012c2 	bl	1d700 <assertion_failed>
   18bf4:	e59f2054 	ldr	r2, [pc, #84]	; 18c50 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x154>
   18bf8:	e59f1044 	ldr	r1, [pc, #68]	; 18c44 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   18bfc:	e59f0050 	ldr	r0, [pc, #80]	; 18c54 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x158>
   18c00:	eb0012be 	bl	1d700 <assertion_failed>
   18c04:	eb001bbd 	bl	1fb00 <CLogger::Get()>
   18c08:	e3a02002 	mov	r2, #2
   18c0c:	e59f3044 	ldr	r3, [pc, #68]	; 18c58 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x15c>
   18c10:	e59f1044 	ldr	r1, [pc, #68]	; 18c5c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   18c14:	e58d8000 	str	r8, [sp]
   18c18:	e1a05007 	mov	r5, r7
   18c1c:	eb001af9 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18c20:	eaffffd0 	b	18b68 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x6c>
   18c24:	e3a02f76 	mov	r2, #472	; 0x1d8
   18c28:	e59f1014 	ldr	r1, [pc, #20]	; 18c44 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   18c2c:	e59f002c 	ldr	r0, [pc, #44]	; 18c60 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x164>
   18c30:	eb0012b2 	bl	1d700 <assertion_failed>
   18c34:	e59f2028 	ldr	r2, [pc, #40]	; 18c64 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   18c38:	e59f1004 	ldr	r1, [pc, #4]	; 18c44 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   18c3c:	e59f0024 	ldr	r0, [pc, #36]	; 18c68 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>
   18c40:	eb0012ae 	bl	1d700 <assertion_failed>
   18c44:	0002f25c 	.word	0x0002f25c
   18c48:	0002f2dc 	.word	0x0002f2dc
   18c4c:	0002f268 	.word	0x0002f268
   18c50:	000001c1 	.word	0x000001c1
   18c54:	0002e89c 	.word	0x0002e89c
   18c58:	0002f280 	.word	0x0002f280
   18c5c:	0002f478 	.word	0x0002f478
   18c60:	0002f298 	.word	0x0002f298
   18c64:	000001d9 	.word	0x000001d9
   18c68:	0002f2c8 	.word	0x0002f2c8

00018c6c <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   18c6c:	e2400018 	sub	r0, r0, #24
   18c70:	eaffffa1 	b	18afc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>

00018c74 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   18c74:	e3520d19 	cmp	r2, #1600	; 0x640
   18c78:	8a00001c 	bhi	18cf0 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x7c>
   18c7c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   18c80:	e3510000 	cmp	r1, #0
   18c84:	e24ddd1a 	sub	sp, sp, #1664	; 0x680
   18c88:	e24dd004 	sub	sp, sp, #4
   18c8c:	0a000019 	beq	18cf8 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x84>
   18c90:	e1a06000 	mov	r6, r0
   18c94:	e1a05002 	mov	r5, r2
   18c98:	e3a07000 	mov	r7, #0
   18c9c:	e28d4027 	add	r4, sp, #39	; 0x27
   18ca0:	e3c4401f 	bic	r4, r4, #31
   18ca4:	e2840008 	add	r0, r4, #8
   18ca8:	eb0038f7 	bl	2708c <memcpy>
   18cac:	e5962020 	ldr	r2, [r6, #32]
   18cb0:	e3853501 	orr	r3, r5, #4194304	; 0x400000
   18cb4:	e1520007 	cmp	r2, r7
   18cb8:	e8840088 	stm	r4, {r3, r7}
   18cbc:	0a000011 	beq	18d08 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x94>
   18cc0:	e1a00006 	mov	r0, r6
   18cc4:	ebffe628 	bl	1256c <CUSBFunction::GetHost() const>
   18cc8:	e58d7000 	str	r7, [sp]
   18ccc:	e1a02004 	mov	r2, r4
   18cd0:	e5961020 	ldr	r1, [r6, #32]
   18cd4:	e2853008 	add	r3, r5, #8
   18cd8:	ebffc132 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   18cdc:	e1e00000 	mvn	r0, r0
   18ce0:	e1a00fa0 	lsr	r0, r0, #31
   18ce4:	e28ddd1a 	add	sp, sp, #1664	; 0x680
   18ce8:	e28dd004 	add	sp, sp, #4
   18cec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18cf0:	e3a00000 	mov	r0, #0
   18cf4:	e12fff1e 	bx	lr
   18cf8:	e59f2018 	ldr	r2, [pc, #24]	; 18d18 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xa4>
   18cfc:	e59f1018 	ldr	r1, [pc, #24]	; 18d1c <CLAN7800Device::SendFrame(void const*, unsigned int)+0xa8>
   18d00:	e59f0018 	ldr	r0, [pc, #24]	; 18d20 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   18d04:	eb00127d 	bl	1d700 <assertion_failed>
   18d08:	e59f2014 	ldr	r2, [pc, #20]	; 18d24 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb0>
   18d0c:	e59f1008 	ldr	r1, [pc, #8]	; 18d1c <CLAN7800Device::SendFrame(void const*, unsigned int)+0xa8>
   18d10:	e59f0010 	ldr	r0, [pc, #16]	; 18d28 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb4>
   18d14:	eb001279 	bl	1d700 <assertion_failed>
   18d18:	000001b3 	.word	0x000001b3
   18d1c:	0002f25c 	.word	0x0002f25c
   18d20:	0002e89c 	.word	0x0002e89c
   18d24:	000001ba 	.word	0x000001ba
   18d28:	0002f2f0 	.word	0x0002f2f0

00018d2c <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   18d2c:	e2400018 	sub	r0, r0, #24
   18d30:	eaffffcf 	b	18c74 <CLAN7800Device::SendFrame(void const*, unsigned int)>

00018d34 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   18d34:	e280000c 	add	r0, r0, #12
   18d38:	e12fff1e 	bx	lr

00018d3c <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   18d3c:	e92d4010 	push	{r4, lr}
   18d40:	e1a04000 	mov	r4, r0
   18d44:	ebffe593 	bl	12398 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   18d48:	e3a02000 	mov	r2, #0
   18d4c:	e59f3024 	ldr	r3, [pc, #36]	; 18d78 <CLAN7800Device::CLAN7800Device(CUSBFunction*)+0x3c>
   18d50:	e584201c 	str	r2, [r4, #28]
   18d54:	e2831008 	add	r1, r3, #8
   18d58:	e2833048 	add	r3, r3, #72	; 0x48
   18d5c:	e5841000 	str	r1, [r4]
   18d60:	e5843018 	str	r3, [r4, #24]
   18d64:	e5842020 	str	r2, [r4, #32]
   18d68:	e2840024 	add	r0, r4, #36	; 0x24
   18d6c:	eb0039c7 	bl	27490 <CMACAddress::CMACAddress()>
   18d70:	e1a00004 	mov	r0, r4
   18d74:	e8bd8010 	pop	{r4, pc}
   18d78:	0002f408 	.word	0x0002f408

00018d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   18d7c:	e92d4070 	push	{r4, r5, r6, lr}
   18d80:	e24dd018 	sub	sp, sp, #24
   18d84:	e1a04001 	mov	r4, r1
   18d88:	e1a05000 	mov	r5, r0
   18d8c:	e58d2014 	str	r2, [sp, #20]
   18d90:	ebffe5f5 	bl	1256c <CUSBFunction::GetHost() const>
   18d94:	e1a06000 	mov	r6, r0
   18d98:	e1a00005 	mov	r0, r5
   18d9c:	ebffe5e7 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   18da0:	e3a05000 	mov	r5, #0
   18da4:	e3a02004 	mov	r2, #4
   18da8:	e6ffc074 	uxth	ip, r4
   18dac:	e28d3014 	add	r3, sp, #20
   18db0:	e1a01000 	mov	r1, r0
   18db4:	e58d200c 	str	r2, [sp, #12]
   18db8:	e58d3008 	str	r3, [sp, #8]
   18dbc:	e1a00006 	mov	r0, r6
   18dc0:	e3a030a0 	mov	r3, #160	; 0xa0
   18dc4:	e3a02040 	mov	r2, #64	; 0x40
   18dc8:	e58dc004 	str	ip, [sp, #4]
   18dcc:	e58d5000 	str	r5, [sp]
   18dd0:	ebffc08e 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18dd4:	e1500005 	cmp	r0, r5
   18dd8:	a3a00001 	movge	r0, #1
   18ddc:	ba000001 	blt	18de8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   18de0:	e28dd018 	add	sp, sp, #24
   18de4:	e8bd8070 	pop	{r4, r5, r6, pc}
   18de8:	eb001b44 	bl	1fb00 <CLogger::Get()>
   18dec:	e3a02002 	mov	r2, #2
   18df0:	e59f3014 	ldr	r3, [pc, #20]	; 18e0c <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x90>
   18df4:	e59f1014 	ldr	r1, [pc, #20]	; 18e10 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   18df8:	e58d4000 	str	r4, [sp]
   18dfc:	eb001a81 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18e00:	e1a00005 	mov	r0, r5
   18e04:	e28dd018 	add	sp, sp, #24
   18e08:	e8bd8070 	pop	{r4, r5, r6, pc}
   18e0c:	0002f308 	.word	0x0002f308
   18e10:	0002f478 	.word	0x0002f478

00018e14 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   18e14:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   18e18:	e24dd014 	sub	sp, sp, #20
   18e1c:	e1a05001 	mov	r5, r1
   18e20:	e1a07002 	mov	r7, r2
   18e24:	e1a04000 	mov	r4, r0
   18e28:	ebffe5cf 	bl	1256c <CUSBFunction::GetHost() const>
   18e2c:	e1a06000 	mov	r6, r0
   18e30:	e1a00004 	mov	r0, r4
   18e34:	ebffe5c1 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   18e38:	e3a04000 	mov	r4, #0
   18e3c:	e3a03004 	mov	r3, #4
   18e40:	e6ff2075 	uxth	r2, r5
   18e44:	e1a01000 	mov	r1, r0
   18e48:	e58d2004 	str	r2, [sp, #4]
   18e4c:	e58d300c 	str	r3, [sp, #12]
   18e50:	e1a00006 	mov	r0, r6
   18e54:	e3a030a1 	mov	r3, #161	; 0xa1
   18e58:	e3a020c0 	mov	r2, #192	; 0xc0
   18e5c:	e58d7008 	str	r7, [sp, #8]
   18e60:	e58d4000 	str	r4, [sp]
   18e64:	ebffc069 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18e68:	e3500004 	cmp	r0, #4
   18e6c:	03a00001 	moveq	r0, #1
   18e70:	1a000001 	bne	18e7c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x68>
   18e74:	e28dd014 	add	sp, sp, #20
   18e78:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18e7c:	eb001b1f 	bl	1fb00 <CLogger::Get()>
   18e80:	e3a02002 	mov	r2, #2
   18e84:	e59f3014 	ldr	r3, [pc, #20]	; 18ea0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x8c>
   18e88:	e59f1014 	ldr	r1, [pc, #20]	; 18ea4 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x90>
   18e8c:	e58d5000 	str	r5, [sp]
   18e90:	eb001a5c 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18e94:	e1a00004 	mov	r0, r4
   18e98:	e28dd014 	add	sp, sp, #20
   18e9c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18ea0:	0002f324 	.word	0x0002f324
   18ea4:	0002f478 	.word	0x0002f478

00018ea8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   18ea8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eac:	e24dd00c 	sub	sp, sp, #12
   18eb0:	e1a07000 	mov	r7, r0
   18eb4:	e1a08001 	mov	r8, r1
   18eb8:	e1a09002 	mov	r9, r2
   18ebc:	e1a0a003 	mov	sl, r3
   18ec0:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   18ec4:	e59db034 	ldr	fp, [sp, #52]	; 0x34
   18ec8:	eb00361a 	bl	26738 <CTimer::Get()>
   18ecc:	e2504000 	subs	r4, r0, #0
   18ed0:	0a000019 	beq	18f3c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x94>
   18ed4:	eb003365 	bl	25c70 <CTimer::GetTicks() const>
   18ed8:	e1a06000 	mov	r6, r0
   18edc:	ea00000e 	b	18f1c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   18ee0:	e1a00004 	mov	r0, r4
   18ee4:	eb003361 	bl	25c70 <CTimer::GetTicks() const>
   18ee8:	e0400006 	sub	r0, r0, r6
   18eec:	e150000b 	cmp	r0, fp
   18ef0:	2a00000e 	bcs	18f30 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   18ef4:	e1a01008 	mov	r1, r8
   18ef8:	e1a00007 	mov	r0, r7
   18efc:	e28d2004 	add	r2, sp, #4
   18f00:	ebffffc3 	bl	18e14 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   18f04:	e3500000 	cmp	r0, #0
   18f08:	0a000008 	beq	18f30 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   18f0c:	e59d3004 	ldr	r3, [sp, #4]
   18f10:	e0033009 	and	r3, r3, r9
   18f14:	e153000a 	cmp	r3, sl
   18f18:	0a000005 	beq	18f34 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   18f1c:	e3550000 	cmp	r5, #0
   18f20:	0affffee 	beq	18ee0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   18f24:	e1a00005 	mov	r0, r5
   18f28:	eb0035d4 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
   18f2c:	eaffffeb 	b	18ee0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   18f30:	e3a00000 	mov	r0, #0
   18f34:	e28dd00c 	add	sp, sp, #12
   18f38:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f3c:	e59f2008 	ldr	r2, [pc, #8]	; 18f4c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa4>
   18f40:	e59f1008 	ldr	r1, [pc, #8]	; 18f50 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa8>
   18f44:	e59f0008 	ldr	r0, [pc, #8]	; 18f54 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   18f48:	eb0011ec 	bl	1d700 <assertion_failed>
   18f4c:	0000028f 	.word	0x0000028f
   18f50:	0002f25c 	.word	0x0002f25c
   18f54:	0002f340 	.word	0x0002f340

00018f58 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   18f58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18f5c:	e351001f 	cmp	r1, #31
   18f60:	e24dd008 	sub	sp, sp, #8
   18f64:	8a000023 	bhi	18ff8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xa0>
   18f68:	e3a06000 	mov	r6, #0
   18f6c:	e3a08064 	mov	r8, #100	; 0x64
   18f70:	e1a04001 	mov	r4, r1
   18f74:	e1a05002 	mov	r5, r2
   18f78:	e1a03006 	mov	r3, r6
   18f7c:	e3a02001 	mov	r2, #1
   18f80:	e3a01e12 	mov	r1, #288	; 0x120
   18f84:	e88d0140 	stm	sp, {r6, r8}
   18f88:	e1a07000 	mov	r7, r0
   18f8c:	ebffffc5 	bl	18ea8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18f90:	e1500006 	cmp	r0, r6
   18f94:	1a000002 	bne	18fa4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x4c>
   18f98:	e3a00000 	mov	r0, #0
   18f9c:	e28dd008 	add	sp, sp, #8
   18fa0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18fa4:	e1a02005 	mov	r2, r5
   18fa8:	e3a01f49 	mov	r1, #292	; 0x124
   18fac:	e1a00007 	mov	r0, r7
   18fb0:	ebffff71 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18fb4:	e3500000 	cmp	r0, #0
   18fb8:	0afffff6 	beq	18f98 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   18fbc:	e59f2044 	ldr	r2, [pc, #68]	; 19008 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb0>
   18fc0:	e3a01e12 	mov	r1, #288	; 0x120
   18fc4:	e1a00007 	mov	r0, r7
   18fc8:	e1822304 	orr	r2, r2, r4, lsl #6
   18fcc:	ebffff6a 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   18fd0:	e3500000 	cmp	r0, #0
   18fd4:	0affffef 	beq	18f98 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   18fd8:	e1a03006 	mov	r3, r6
   18fdc:	e1a00007 	mov	r0, r7
   18fe0:	e3a02001 	mov	r2, #1
   18fe4:	e3a01e12 	mov	r1, #288	; 0x120
   18fe8:	e88d0140 	stm	sp, {r6, r8}
   18fec:	ebffffad 	bl	18ea8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   18ff0:	e28dd008 	add	sp, sp, #8
   18ff4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18ff8:	e59f200c 	ldr	r2, [pc, #12]	; 1900c <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb4>
   18ffc:	e59f100c 	ldr	r1, [pc, #12]	; 19010 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb8>
   19000:	e59f000c 	ldr	r0, [pc, #12]	; 19014 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xbc>
   19004:	eb0011bd 	bl	1d700 <assertion_failed>
   19008:	00000803 	.word	0x00000803
   1900c:	0000025a 	.word	0x0000025a
   19010:	0002f25c 	.word	0x0002f25c
   19014:	0002f34c 	.word	0x0002f34c

00019018 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   19018:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1901c:	e351001f 	cmp	r1, #31
   19020:	e24dd010 	sub	sp, sp, #16
   19024:	8a00002d 	bhi	190e0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xc8>
   19028:	e3a05000 	mov	r5, #0
   1902c:	e3a08064 	mov	r8, #100	; 0x64
   19030:	e1a04001 	mov	r4, r1
   19034:	e1a07002 	mov	r7, r2
   19038:	e1a03005 	mov	r3, r5
   1903c:	e3a02001 	mov	r2, #1
   19040:	e3a01e12 	mov	r1, #288	; 0x120
   19044:	e88d0120 	stm	sp, {r5, r8}
   19048:	e1a06000 	mov	r6, r0
   1904c:	ebffff95 	bl	18ea8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   19050:	e3500000 	cmp	r0, #0
   19054:	1a000001 	bne	19060 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   19058:	e28dd010 	add	sp, sp, #16
   1905c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19060:	e59f2088 	ldr	r2, [pc, #136]	; 190f0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd8>
   19064:	e3a01e12 	mov	r1, #288	; 0x120
   19068:	e1a00006 	mov	r0, r6
   1906c:	e1822304 	orr	r2, r2, r4, lsl #6
   19070:	ebffff41 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   19074:	e1500005 	cmp	r0, r5
   19078:	0a000007 	beq	1909c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x84>
   1907c:	e1a03005 	mov	r3, r5
   19080:	e3a02001 	mov	r2, #1
   19084:	e3a01e12 	mov	r1, #288	; 0x120
   19088:	e1a00006 	mov	r0, r6
   1908c:	e88d0120 	stm	sp, {r5, r8}
   19090:	ebffff84 	bl	18ea8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   19094:	e3500000 	cmp	r0, #0
   19098:	1a000002 	bne	190a8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x90>
   1909c:	e3a00000 	mov	r0, #0
   190a0:	e28dd010 	add	sp, sp, #16
   190a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   190a8:	e1a00006 	mov	r0, r6
   190ac:	e3a01f49 	mov	r1, #292	; 0x124
   190b0:	e28d200c 	add	r2, sp, #12
   190b4:	ebffff56 	bl	18e14 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   190b8:	e3500000 	cmp	r0, #0
   190bc:	0afffff6 	beq	1909c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x84>
   190c0:	e3570000 	cmp	r7, #0
   190c4:	159d300c 	ldrne	r3, [sp, #12]
   190c8:	11c730b0 	strhne	r3, [r7]
   190cc:	1affffe1 	bne	19058 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x40>
   190d0:	e59f201c 	ldr	r2, [pc, #28]	; 190f4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xdc>
   190d4:	e59f101c 	ldr	r1, [pc, #28]	; 190f8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   190d8:	e59f001c 	ldr	r0, [pc, #28]	; 190fc <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe4>
   190dc:	eb001187 	bl	1d700 <assertion_failed>
   190e0:	e59f2018 	ldr	r2, [pc, #24]	; 19100 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe8>
   190e4:	e59f100c 	ldr	r1, [pc, #12]	; 190f8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   190e8:	e59f0014 	ldr	r0, [pc, #20]	; 19104 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xec>
   190ec:	eb001183 	bl	1d700 <assertion_failed>
   190f0:	00000801 	.word	0x00000801
   190f4:	00000285 	.word	0x00000285
   190f8:	0002f25c 	.word	0x0002f25c
   190fc:	0002f35c 	.word	0x0002f35c
   19100:	00000271 	.word	0x00000271
   19104:	0002f34c 	.word	0x0002f34c

00019108 <CLAN7800Device::IsLinkUp()>:
   19108:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1910c:	e24dd00c 	sub	sp, sp, #12
   19110:	e3a01001 	mov	r1, #1
   19114:	e28d2006 	add	r2, sp, #6
   19118:	ebffffbe 	bl	19018 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   1911c:	e3500000 	cmp	r0, #0
   19120:	11dd00b6 	ldrhne	r0, [sp, #6]
   19124:	11a00140 	asrne	r0, r0, #2
   19128:	12000001 	andne	r0, r0, #1
   1912c:	e28dd00c 	add	sp, sp, #12
   19130:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00019134 <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   19134:	e2400018 	sub	r0, r0, #24
   19138:	eafffff2 	b	19108 <CLAN7800Device::IsLinkUp()>

0001913c <CLAN7800Device::GetLinkSpeed()>:
   1913c:	e92d4010 	push	{r4, lr}
   19140:	e3a02000 	mov	r2, #0
   19144:	e3a0101f 	mov	r1, #31
   19148:	e24dd008 	sub	sp, sp, #8
   1914c:	e1a04000 	mov	r4, r0
   19150:	ebffff80 	bl	18f58 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   19154:	e3500000 	cmp	r0, #0
   19158:	0a00000e 	beq	19198 <CLAN7800Device::GetLinkSpeed()+0x5c>
   1915c:	e1a00004 	mov	r0, r4
   19160:	e3a0101c 	mov	r1, #28
   19164:	e28d2006 	add	r2, sp, #6
   19168:	ebffffaa 	bl	19018 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   1916c:	e3500000 	cmp	r0, #0
   19170:	0a000008 	beq	19198 <CLAN7800Device::GetLinkSpeed()+0x5c>
   19174:	e1dd30b6 	ldrh	r3, [sp, #6]
   19178:	e3130901 	tst	r3, #16384	; 0x4000
   1917c:	1a00000d 	bne	191b8 <CLAN7800Device::GetLinkSpeed()+0x7c>
   19180:	e3130902 	tst	r3, #32768	; 0x8000
   19184:	0a000003 	beq	19198 <CLAN7800Device::GetLinkSpeed()+0x5c>
   19188:	e1a031c3 	asr	r3, r3, #3
   1918c:	e2033007 	and	r3, r3, #7
   19190:	e3530007 	cmp	r3, #7
   19194:	1a000002 	bne	191a4 <CLAN7800Device::GetLinkSpeed()+0x68>
   19198:	e3a00006 	mov	r0, #6
   1919c:	e28dd008 	add	sp, sp, #8
   191a0:	e8bd8010 	pop	{r4, pc}
   191a4:	e59f201c 	ldr	r2, [pc, #28]	; 191c8 <CLAN7800Device::GetLinkSpeed()+0x8c>
   191a8:	e0823003 	add	r3, r2, r3
   191ac:	e5d30078 	ldrb	r0, [r3, #120]	; 0x78
   191b0:	e28dd008 	add	sp, sp, #8
   191b4:	e8bd8010 	pop	{r4, pc}
   191b8:	e3a02f81 	mov	r2, #516	; 0x204
   191bc:	e59f1008 	ldr	r1, [pc, #8]	; 191cc <CLAN7800Device::GetLinkSpeed()+0x90>
   191c0:	e59f0008 	ldr	r0, [pc, #8]	; 191d0 <CLAN7800Device::GetLinkSpeed()+0x94>
   191c4:	eb00114d 	bl	1d700 <assertion_failed>
   191c8:	0002f408 	.word	0x0002f408
   191cc:	0002f25c 	.word	0x0002f25c
   191d0:	0002f368 	.word	0x0002f368

000191d4 <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   191d4:	e2400018 	sub	r0, r0, #24
   191d8:	eaffffd7 	b	1913c <CLAN7800Device::GetLinkSpeed()>

000191dc <CLAN7800Device::InitPHY()>:
   191dc:	e92d4010 	push	{r4, lr}
   191e0:	e3a02000 	mov	r2, #0
   191e4:	e3a0101f 	mov	r1, #31
   191e8:	e24dd008 	sub	sp, sp, #8
   191ec:	e1a04000 	mov	r4, r0
   191f0:	ebffff58 	bl	18f58 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   191f4:	e3500000 	cmp	r0, #0
   191f8:	1a000001 	bne	19204 <CLAN7800Device::InitPHY()+0x28>
   191fc:	e28dd008 	add	sp, sp, #8
   19200:	e8bd8010 	pop	{r4, pc}
   19204:	e3a0101d 	mov	r1, #29
   19208:	e1a00004 	mov	r0, r4
   1920c:	e28d2006 	add	r2, sp, #6
   19210:	ebffff80 	bl	19018 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   19214:	e3500000 	cmp	r0, #0
   19218:	0afffff7 	beq	191fc <CLAN7800Device::InitPHY()+0x20>
   1921c:	e1dd20b6 	ldrh	r2, [sp, #6]
   19220:	e1a00004 	mov	r0, r4
   19224:	e3c220ff 	bic	r2, r2, #255	; 0xff
   19228:	e3822061 	orr	r2, r2, #97	; 0x61
   1922c:	e3a0101d 	mov	r1, #29
   19230:	e1cd20b6 	strh	r2, [sp, #6]
   19234:	ebffff47 	bl	18f58 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   19238:	e28dd008 	add	sp, sp, #8
   1923c:	e8bd8010 	pop	{r4, pc}

00019240 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   19240:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   19244:	e24dd00c 	sub	sp, sp, #12
   19248:	e1a05002 	mov	r5, r2
   1924c:	e28d2004 	add	r2, sp, #4
   19250:	e1a07003 	mov	r7, r3
   19254:	e1a06000 	mov	r6, r0
   19258:	e1a04001 	mov	r4, r1
   1925c:	ebfffeec 	bl	18e14 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   19260:	e3500000 	cmp	r0, #0
   19264:	0a000006 	beq	19284 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x44>
   19268:	e59d2004 	ldr	r2, [sp, #4]
   1926c:	e1a01004 	mov	r1, r4
   19270:	e0073002 	and	r3, r7, r2
   19274:	e1832005 	orr	r2, r3, r5
   19278:	e1a00006 	mov	r0, r6
   1927c:	e58d2004 	str	r2, [sp, #4]
   19280:	ebfffebd 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   19284:	e28dd00c 	add	sp, sp, #12
   19288:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001928c <CLAN7800Device::InitMACAddress()>:
   1928c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   19290:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   19294:	e3a01000 	mov	r1, #0
   19298:	e1a04000 	mov	r4, r0
   1929c:	e28d000c 	add	r0, sp, #12
   192a0:	eb001137 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   192a4:	e3a03000 	mov	r3, #0
   192a8:	e59f10f4 	ldr	r1, [pc, #244]	; 193a4 <CLAN7800Device::InitMACAddress()+0x118>
   192ac:	e58d3000 	str	r3, [sp]
   192b0:	e28d000c 	add	r0, sp, #12
   192b4:	e3a03014 	mov	r3, #20
   192b8:	e28d2024 	add	r2, sp, #36	; 0x24
   192bc:	eb00113c 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   192c0:	e3500000 	cmp	r0, #0
   192c4:	1a000005 	bne	192e0 <CLAN7800Device::InitMACAddress()+0x54>
   192c8:	e3a04000 	mov	r4, #0
   192cc:	e28d000c 	add	r0, sp, #12
   192d0:	eb001132 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   192d4:	e1a00004 	mov	r0, r4
   192d8:	e28dd03c 	add	sp, sp, #60	; 0x3c
   192dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   192e0:	e2846024 	add	r6, r4, #36	; 0x24
   192e4:	e1a00006 	mov	r0, r6
   192e8:	e28d1030 	add	r1, sp, #48	; 0x30
   192ec:	eb003888 	bl	27514 <CMACAddress::Set(unsigned char const*)>
   192f0:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   192f4:	e3a01f47 	mov	r1, #284	; 0x11c
   192f8:	e1a02005 	mov	r2, r5
   192fc:	e1a00004 	mov	r0, r4
   19300:	e1dd73b4 	ldrh	r7, [sp, #52]	; 0x34
   19304:	ebfffe9c 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   19308:	e3500000 	cmp	r0, #0
   1930c:	0affffed 	beq	192c8 <CLAN7800Device::InitMACAddress()+0x3c>
   19310:	e1a02007 	mov	r2, r7
   19314:	e3a01f46 	mov	r1, #280	; 0x118
   19318:	e1a00004 	mov	r0, r4
   1931c:	ebfffe96 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   19320:	e3500000 	cmp	r0, #0
   19324:	0affffe7 	beq	192c8 <CLAN7800Device::InitMACAddress()+0x3c>
   19328:	e1a02005 	mov	r2, r5
   1932c:	e1a00004 	mov	r0, r4
   19330:	e59f1070 	ldr	r1, [pc, #112]	; 193a8 <CLAN7800Device::InitMACAddress()+0x11c>
   19334:	ebfffe90 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   19338:	e3500000 	cmp	r0, #0
   1933c:	0affffe1 	beq	192c8 <CLAN7800Device::InitMACAddress()+0x3c>
   19340:	e1a00004 	mov	r0, r4
   19344:	e3a01b01 	mov	r1, #1024	; 0x400
   19348:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   1934c:	ebfffe8a 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   19350:	e2504000 	subs	r4, r0, #0
   19354:	0affffdb 	beq	192c8 <CLAN7800Device::InitMACAddress()+0x3c>
   19358:	e28d0014 	add	r0, sp, #20
   1935c:	eb002c04 	bl	24374 <CString::CString()>
   19360:	e28d1014 	add	r1, sp, #20
   19364:	e1a00006 	mov	r0, r6
   19368:	eb0038c3 	bl	2767c <CMACAddress::Format(CString*) const>
   1936c:	eb0019e3 	bl	1fb00 <CLogger::Get()>
   19370:	e1a05000 	mov	r5, r0
   19374:	e28d0014 	add	r0, sp, #20
   19378:	eb002c15 	bl	243d4 <CString::operator char const*() const>
   1937c:	e1a02000 	mov	r2, r0
   19380:	e59f3024 	ldr	r3, [pc, #36]	; 193ac <CLAN7800Device::InitMACAddress()+0x120>
   19384:	e1a00005 	mov	r0, r5
   19388:	e58d2000 	str	r2, [sp]
   1938c:	e59f101c 	ldr	r1, [pc, #28]	; 193b0 <CLAN7800Device::InitMACAddress()+0x124>
   19390:	e3a02004 	mov	r2, #4
   19394:	eb00191b 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19398:	e28d0014 	add	r0, sp, #20
   1939c:	eb002bc1 	bl	242a8 <CString::~CString()>
   193a0:	eaffffc9 	b	192cc <CLAN7800Device::InitMACAddress()+0x40>
   193a4:	00010003 	.word	0x00010003
   193a8:	00000404 	.word	0x00000404
   193ac:	0002f390 	.word	0x0002f390
   193b0:	0002f478 	.word	0x0002f478

000193b4 <CLAN7800Device::Configure()>:
   193b4:	e92d4070 	push	{r4, r5, r6, lr}
   193b8:	e24dd018 	sub	sp, sp, #24
   193bc:	e1a05000 	mov	r5, r0
   193c0:	ebffe448 	bl	124e8 <CUSBFunction::GetNumEndpoints() const>
   193c4:	e3500003 	cmp	r0, #3
   193c8:	0a000004 	beq	193e0 <CLAN7800Device::Configure()+0x2c>
   193cc:	ea00004d 	b	19508 <CLAN7800Device::Configure()+0x154>
   193d0:	e5d43003 	ldrb	r3, [r4, #3]
   193d4:	e203303f 	and	r3, r3, #63	; 0x3f
   193d8:	e3530002 	cmp	r3, #2
   193dc:	0a000022 	beq	1946c <CLAN7800Device::Configure()+0xb8>
   193e0:	e3a01005 	mov	r1, #5
   193e4:	e1a00005 	mov	r0, r5
   193e8:	ebffe46a 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
   193ec:	e2504000 	subs	r4, r0, #0
   193f0:	1afffff6 	bne	193d0 <CLAN7800Device::Configure()+0x1c>
   193f4:	e595301c 	ldr	r3, [r5, #28]
   193f8:	e1a00005 	mov	r0, r5
   193fc:	e3530000 	cmp	r3, #0
   19400:	0a00003a 	beq	194f0 <CLAN7800Device::Configure()+0x13c>
   19404:	e5953020 	ldr	r3, [r5, #32]
   19408:	e3530000 	cmp	r3, #0
   1940c:	0a000037 	beq	194f0 <CLAN7800Device::Configure()+0x13c>
   19410:	ebffe376 	bl	121f0 <CUSBFunction::Configure()>
   19414:	e2506000 	subs	r6, r0, #0
   19418:	0a0000d7 	beq	1977c <CLAN7800Device::Configure()+0x3c8>
   1941c:	e1a01004 	mov	r1, r4
   19420:	e1a00005 	mov	r0, r5
   19424:	e28d2014 	add	r2, sp, #20
   19428:	ebfffe79 	bl	18e14 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1942c:	e3500000 	cmp	r0, #0
   19430:	0a000002 	beq	19440 <CLAN7800Device::Configure()+0x8c>
   19434:	e1dd31b6 	ldrh	r3, [sp, #22]
   19438:	e3530b1e 	cmp	r3, #30720	; 0x7800
   1943c:	0a000038 	beq	19524 <CLAN7800Device::Configure()+0x170>
   19440:	e3a06000 	mov	r6, #0
   19444:	eb0019ad 	bl	1fb00 <CLogger::Get()>
   19448:	e1dd21b6 	ldrh	r2, [sp, #22]
   1944c:	e59f33b0 	ldr	r3, [pc, #944]	; 19804 <CLAN7800Device::Configure()+0x450>
   19450:	e58d2000 	str	r2, [sp]
   19454:	e59f13ac 	ldr	r1, [pc, #940]	; 19808 <CLAN7800Device::Configure()+0x454>
   19458:	e3a02001 	mov	r2, #1
   1945c:	eb0018e9 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19460:	e1a00006 	mov	r0, r6
   19464:	e28dd018 	add	sp, sp, #24
   19468:	e8bd8070 	pop	{r4, r5, r6, pc}
   1946c:	e1d430d2 	ldrsb	r3, [r4, #2]
   19470:	e3530000 	cmp	r3, #0
   19474:	ba00000e 	blt	194b4 <CLAN7800Device::Configure()+0x100>
   19478:	e5953020 	ldr	r3, [r5, #32]
   1947c:	e1a00005 	mov	r0, r5
   19480:	e3530000 	cmp	r3, #0
   19484:	1a000019 	bne	194f0 <CLAN7800Device::Configure()+0x13c>
   19488:	ebffe422 	bl	12518 <CUSBFunction::GetDevice() const>
   1948c:	e1a01000 	mov	r1, r0
   19490:	e3a00014 	mov	r0, #20
   19494:	e58d100c 	str	r1, [sp, #12]
   19498:	eb0038e1 	bl	27824 <operator new(unsigned int)>
   1949c:	e1a06000 	mov	r6, r0
   194a0:	e1a02004 	mov	r2, r4
   194a4:	e59d100c 	ldr	r1, [sp, #12]
   194a8:	ebffe25c 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   194ac:	e5856020 	str	r6, [r5, #32]
   194b0:	eaffffca 	b	193e0 <CLAN7800Device::Configure()+0x2c>
   194b4:	e595301c 	ldr	r3, [r5, #28]
   194b8:	e1a00005 	mov	r0, r5
   194bc:	e3530000 	cmp	r3, #0
   194c0:	1a00000a 	bne	194f0 <CLAN7800Device::Configure()+0x13c>
   194c4:	ebffe413 	bl	12518 <CUSBFunction::GetDevice() const>
   194c8:	e1a01000 	mov	r1, r0
   194cc:	e3a00014 	mov	r0, #20
   194d0:	e58d100c 	str	r1, [sp, #12]
   194d4:	eb0038d2 	bl	27824 <operator new(unsigned int)>
   194d8:	e1a06000 	mov	r6, r0
   194dc:	e1a02004 	mov	r2, r4
   194e0:	e59d100c 	ldr	r1, [sp, #12]
   194e4:	ebffe24d 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   194e8:	e585601c 	str	r6, [r5, #28]
   194ec:	eaffffbb 	b	193e0 <CLAN7800Device::Configure()+0x2c>
   194f0:	e59f1310 	ldr	r1, [pc, #784]	; 19808 <CLAN7800Device::Configure()+0x454>
   194f4:	ebffe432 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   194f8:	e3a06000 	mov	r6, #0
   194fc:	e1a00006 	mov	r0, r6
   19500:	e28dd018 	add	sp, sp, #24
   19504:	e8bd8070 	pop	{r4, r5, r6, pc}
   19508:	e3a06000 	mov	r6, #0
   1950c:	e1a00005 	mov	r0, r5
   19510:	e59f12f0 	ldr	r1, [pc, #752]	; 19808 <CLAN7800Device::Configure()+0x454>
   19514:	ebffe42a 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   19518:	e1a00006 	mov	r0, r6
   1951c:	e28dd018 	add	sp, sp, #24
   19520:	e8bd8070 	pop	{r4, r5, r6, pc}
   19524:	e3e03000 	mvn	r3, #0
   19528:	e3a02002 	mov	r2, #2
   1952c:	e3a01010 	mov	r1, #16
   19530:	e1a00005 	mov	r0, r5
   19534:	ebffff41 	bl	19240 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   19538:	e3500000 	cmp	r0, #0
   1953c:	0a000096 	beq	1979c <CLAN7800Device::Configure()+0x3e8>
   19540:	e3a01064 	mov	r1, #100	; 0x64
   19544:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   19548:	e58d1004 	str	r1, [sp, #4]
   1954c:	e58d2000 	str	r2, [sp]
   19550:	e1a03004 	mov	r3, r4
   19554:	e3a02002 	mov	r2, #2
   19558:	e3a01010 	mov	r1, #16
   1955c:	e1a00005 	mov	r0, r5
   19560:	ebfffe50 	bl	18ea8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   19564:	e3500000 	cmp	r0, #0
   19568:	0a00008b 	beq	1979c <CLAN7800Device::Configure()+0x3e8>
   1956c:	e1a00005 	mov	r0, r5
   19570:	ebffff45 	bl	1928c <CLAN7800Device::InitMACAddress()>
   19574:	e2506000 	subs	r6, r0, #0
   19578:	0a000095 	beq	197d4 <CLAN7800Device::Configure()+0x420>
   1957c:	e3a02018 	mov	r2, #24
   19580:	e3a01090 	mov	r1, #144	; 0x90
   19584:	e1a00005 	mov	r0, r5
   19588:	ebfffdfb 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1958c:	e3500000 	cmp	r0, #0
   19590:	0a00008d 	beq	197cc <CLAN7800Device::Configure()+0x418>
   19594:	e3a02b02 	mov	r2, #2048	; 0x800
   19598:	e3a01094 	mov	r1, #148	; 0x94
   1959c:	e1a00005 	mov	r0, r5
   195a0:	ebfffdf5 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   195a4:	e3500000 	cmp	r0, #0
   195a8:	0a000087 	beq	197cc <CLAN7800Device::Configure()+0x418>
   195ac:	e3e03010 	mvn	r3, #16
   195b0:	e3a02603 	mov	r2, #3145728	; 0x300000
   195b4:	e3a01010 	mov	r1, #16
   195b8:	e1a00005 	mov	r0, r5
   195bc:	ebffff1f 	bl	19240 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   195c0:	e3500000 	cmp	r0, #0
   195c4:	0a000080 	beq	197cc <CLAN7800Device::Configure()+0x418>
   195c8:	e3e03040 	mvn	r3, #64	; 0x40
   195cc:	e3a02020 	mov	r2, #32
   195d0:	e3a01080 	mov	r1, #128	; 0x80
   195d4:	e1a00005 	mov	r0, r5
   195d8:	ebffff18 	bl	19240 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   195dc:	e3500000 	cmp	r0, #0
   195e0:	0a000079 	beq	197cc <CLAN7800Device::Configure()+0x418>
   195e4:	e3a02017 	mov	r2, #23
   195e8:	e3a010c8 	mov	r1, #200	; 0xc8
   195ec:	e1a00005 	mov	r0, r5
   195f0:	ebfffde1 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   195f4:	e3500000 	cmp	r0, #0
   195f8:	0a000073 	beq	197cc <CLAN7800Device::Configure()+0x418>
   195fc:	e3a02017 	mov	r2, #23
   19600:	e3a010cc 	mov	r1, #204	; 0xcc
   19604:	e1a00005 	mov	r0, r5
   19608:	ebfffddb 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1960c:	e3500000 	cmp	r0, #0
   19610:	0a00006d 	beq	197cc <CLAN7800Device::Configure()+0x418>
   19614:	e3a02000 	mov	r2, #0
   19618:	e3a01098 	mov	r1, #152	; 0x98
   1961c:	e1a00005 	mov	r0, r5
   19620:	ebfffdd5 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   19624:	e3500000 	cmp	r0, #0
   19628:	0a000067 	beq	197cc <CLAN7800Device::Configure()+0x418>
   1962c:	e3e02000 	mvn	r2, #0
   19630:	e3a0100c 	mov	r1, #12
   19634:	e1a00005 	mov	r0, r5
   19638:	ebfffdcf 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1963c:	e3500000 	cmp	r0, #0
   19640:	0a000061 	beq	197cc <CLAN7800Device::Configure()+0x418>
   19644:	e3a02000 	mov	r2, #0
   19648:	e3a01f43 	mov	r1, #268	; 0x10c
   1964c:	e1a00005 	mov	r0, r5
   19650:	ebfffdc9 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   19654:	e3500000 	cmp	r0, #0
   19658:	0a00005b 	beq	197cc <CLAN7800Device::Configure()+0x418>
   1965c:	e3a02000 	mov	r2, #0
   19660:	e3a010d0 	mov	r1, #208	; 0xd0
   19664:	e1a00005 	mov	r0, r5
   19668:	ebfffdc3 	bl	18d7c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1966c:	e3500000 	cmp	r0, #0
   19670:	0a000055 	beq	197cc <CLAN7800Device::Configure()+0x418>
   19674:	e3e03000 	mvn	r3, #0
   19678:	e3a010b0 	mov	r1, #176	; 0xb0
   1967c:	e1a00005 	mov	r0, r5
   19680:	e59f2184 	ldr	r2, [pc, #388]	; 1980c <CLAN7800Device::Configure()+0x458>
   19684:	ebfffeed 	bl	19240 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   19688:	e3500000 	cmp	r0, #0
   1968c:	0a00004e 	beq	197cc <CLAN7800Device::Configure()+0x418>
   19690:	e3e03000 	mvn	r3, #0
   19694:	e3a02010 	mov	r2, #16
   19698:	e3a01014 	mov	r1, #20
   1969c:	e1a00005 	mov	r0, r5
   196a0:	ebfffee6 	bl	19240 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   196a4:	e3500000 	cmp	r0, #0
   196a8:	0a000042 	beq	197b8 <CLAN7800Device::Configure()+0x404>
   196ac:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   196b0:	e3a03064 	mov	r3, #100	; 0x64
   196b4:	e3a01014 	mov	r1, #20
   196b8:	e1cd20f0 	strd	r2, [sp]
   196bc:	e1a00005 	mov	r0, r5
   196c0:	e3a03080 	mov	r3, #128	; 0x80
   196c4:	e3a02090 	mov	r2, #144	; 0x90
   196c8:	ebfffdf6 	bl	18ea8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   196cc:	e3500000 	cmp	r0, #0
   196d0:	0a000038 	beq	197b8 <CLAN7800Device::Configure()+0x404>
   196d4:	e3e03000 	mvn	r3, #0
   196d8:	e3a02b06 	mov	r2, #6144	; 0x1800
   196dc:	e3a01c01 	mov	r1, #256	; 0x100
   196e0:	e1a00005 	mov	r0, r5
   196e4:	ebfffed5 	bl	19240 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   196e8:	e3500000 	cmp	r0, #0
   196ec:	0a000036 	beq	197cc <CLAN7800Device::Configure()+0x418>
   196f0:	e3e03000 	mvn	r3, #0
   196f4:	e3a02001 	mov	r2, #1
   196f8:	e3a01f42 	mov	r1, #264	; 0x108
   196fc:	e1a00005 	mov	r0, r5
   19700:	ebfffece 	bl	19240 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   19704:	e3500000 	cmp	r0, #0
   19708:	0a00002f 	beq	197cc <CLAN7800Device::Configure()+0x418>
   1970c:	e3e03000 	mvn	r3, #0
   19710:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   19714:	e3a010c4 	mov	r1, #196	; 0xc4
   19718:	e1a00005 	mov	r0, r5
   1971c:	ebfffec7 	bl	19240 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   19720:	e3500000 	cmp	r0, #0
   19724:	0a000028 	beq	197cc <CLAN7800Device::Configure()+0x418>
   19728:	e3a01f41 	mov	r1, #260	; 0x104
   1972c:	e1a00005 	mov	r0, r5
   19730:	e59f30d8 	ldr	r3, [pc, #216]	; 19810 <CLAN7800Device::Configure()+0x45c>
   19734:	e59f20d8 	ldr	r2, [pc, #216]	; 19814 <CLAN7800Device::Configure()+0x460>
   19738:	ebfffec0 	bl	19240 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1973c:	e3500000 	cmp	r0, #0
   19740:	0a000021 	beq	197cc <CLAN7800Device::Configure()+0x418>
   19744:	e3e03000 	mvn	r3, #0
   19748:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   1974c:	e3a010c0 	mov	r1, #192	; 0xc0
   19750:	e1a00005 	mov	r0, r5
   19754:	ebfffeb9 	bl	19240 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   19758:	e3500000 	cmp	r0, #0
   1975c:	0a00001a 	beq	197cc <CLAN7800Device::Configure()+0x418>
   19760:	e1a00005 	mov	r0, r5
   19764:	ebfffe9c 	bl	191dc <CLAN7800Device::InitPHY()>
   19768:	e2506000 	subs	r6, r0, #0
   1976c:	0a00001e 	beq	197ec <CLAN7800Device::Configure()+0x438>
   19770:	e2850018 	add	r0, r5, #24
   19774:	eb0037e1 	bl	27700 <CNetDevice::AddNetDevice()>
   19778:	eaffff5f 	b	194fc <CLAN7800Device::Configure()+0x148>
   1977c:	eb0018df 	bl	1fb00 <CLogger::Get()>
   19780:	e3a02001 	mov	r2, #1
   19784:	e59f308c 	ldr	r3, [pc, #140]	; 19818 <CLAN7800Device::Configure()+0x464>
   19788:	e59f1078 	ldr	r1, [pc, #120]	; 19808 <CLAN7800Device::Configure()+0x454>
   1978c:	eb00181d 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19790:	e1a00006 	mov	r0, r6
   19794:	e28dd018 	add	sp, sp, #24
   19798:	e8bd8070 	pop	{r4, r5, r6, pc}
   1979c:	eb0018d7 	bl	1fb00 <CLogger::Get()>
   197a0:	e3a02001 	mov	r2, #1
   197a4:	e59f3070 	ldr	r3, [pc, #112]	; 1981c <CLAN7800Device::Configure()+0x468>
   197a8:	e59f1058 	ldr	r1, [pc, #88]	; 19808 <CLAN7800Device::Configure()+0x454>
   197ac:	eb001815 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   197b0:	e3a06000 	mov	r6, #0
   197b4:	eaffff50 	b	194fc <CLAN7800Device::Configure()+0x148>
   197b8:	eb0018d0 	bl	1fb00 <CLogger::Get()>
   197bc:	e3a02001 	mov	r2, #1
   197c0:	e59f3058 	ldr	r3, [pc, #88]	; 19820 <CLAN7800Device::Configure()+0x46c>
   197c4:	e59f103c 	ldr	r1, [pc, #60]	; 19808 <CLAN7800Device::Configure()+0x454>
   197c8:	eb00180e 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   197cc:	e3a06000 	mov	r6, #0
   197d0:	eaffff49 	b	194fc <CLAN7800Device::Configure()+0x148>
   197d4:	eb0018c9 	bl	1fb00 <CLogger::Get()>
   197d8:	e3a02001 	mov	r2, #1
   197dc:	e59f3040 	ldr	r3, [pc, #64]	; 19824 <CLAN7800Device::Configure()+0x470>
   197e0:	e59f1020 	ldr	r1, [pc, #32]	; 19808 <CLAN7800Device::Configure()+0x454>
   197e4:	eb001807 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   197e8:	eaffff43 	b	194fc <CLAN7800Device::Configure()+0x148>
   197ec:	eb0018c3 	bl	1fb00 <CLogger::Get()>
   197f0:	e3a02001 	mov	r2, #1
   197f4:	e59f302c 	ldr	r3, [pc, #44]	; 19828 <CLAN7800Device::Configure()+0x474>
   197f8:	e59f1008 	ldr	r1, [pc, #8]	; 19808 <CLAN7800Device::Configure()+0x454>
   197fc:	eb001801 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19800:	eaffff3d 	b	194fc <CLAN7800Device::Configure()+0x148>
   19804:	0002f3a4 	.word	0x0002f3a4
   19808:	0002f478 	.word	0x0002f478
   1980c:	00000402 	.word	0x00000402
   19810:	c000ffff 	.word	0xc000ffff
   19814:	05ee0001 	.word	0x05ee0001
   19818:	0002c93c 	.word	0x0002c93c
   1981c:	0002f3bc 	.word	0x0002f3bc
   19820:	0002f3e4 	.word	0x0002f3e4
   19824:	0002f3cc 	.word	0x0002f3cc
   19828:	0002f3f8 	.word	0x0002f3f8

0001982c <CNetDevice::GetType()>:
   1982c:	e3a00000 	mov	r0, #0
   19830:	e12fff1e 	bx	lr

00019834 <CNetDevice::IsSendFrameAdvisable()>:
   19834:	e3a00001 	mov	r0, #1
   19838:	e12fff1e 	bx	lr

0001983c <CNetDevice::UpdatePHY()>:
   1983c:	e3a00000 	mov	r0, #0
   19840:	e12fff1e 	bx	lr

00019844 <CSMSC951xDevice::GetMACAddress() const>:
   19844:	e2800024 	add	r0, r0, #36	; 0x24
   19848:	e12fff1e 	bx	lr

0001984c <CSMSC951xDevice::~CSMSC951xDevice()>:
   1984c:	e92d4070 	push	{r4, r5, r6, lr}
   19850:	e59f3074 	ldr	r3, [pc, #116]	; 198cc <CSMSC951xDevice::~CSMSC951xDevice()+0x80>
   19854:	e5905020 	ldr	r5, [r0, #32]
   19858:	e2832040 	add	r2, r3, #64	; 0x40
   1985c:	e3550000 	cmp	r5, #0
   19860:	e1a04000 	mov	r4, r0
   19864:	e5803000 	str	r3, [r0]
   19868:	e5802018 	str	r2, [r0, #24]
   1986c:	0a000004 	beq	19884 <CSMSC951xDevice::~CSMSC951xDevice()+0x38>
   19870:	e1a00005 	mov	r0, r5
   19874:	ebffe1c7 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   19878:	e1a00005 	mov	r0, r5
   1987c:	e3a01014 	mov	r1, #20
   19880:	eb0037f5 	bl	2785c <operator delete(void*, unsigned int)>
   19884:	e3a03000 	mov	r3, #0
   19888:	e594501c 	ldr	r5, [r4, #28]
   1988c:	e5843020 	str	r3, [r4, #32]
   19890:	e1550003 	cmp	r5, r3
   19894:	0a000004 	beq	198ac <CSMSC951xDevice::~CSMSC951xDevice()+0x60>
   19898:	e1a00005 	mov	r0, r5
   1989c:	ebffe1bd 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   198a0:	e1a00005 	mov	r0, r5
   198a4:	e3a01014 	mov	r1, #20
   198a8:	eb0037eb 	bl	2785c <operator delete(void*, unsigned int)>
   198ac:	e3a03000 	mov	r3, #0
   198b0:	e2840024 	add	r0, r4, #36	; 0x24
   198b4:	e584301c 	str	r3, [r4, #28]
   198b8:	eb0036f7 	bl	2749c <CMACAddress::~CMACAddress()>
   198bc:	e1a00004 	mov	r0, r4
   198c0:	ebffe221 	bl	1214c <CUSBFunction::~CUSBFunction()>
   198c4:	e1a00004 	mov	r0, r4
   198c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   198cc:	0002f5bc 	.word	0x0002f5bc

000198d0 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   198d0:	e2400018 	sub	r0, r0, #24
   198d4:	eaffffdc 	b	1984c <CSMSC951xDevice::~CSMSC951xDevice()>

000198d8 <CSMSC951xDevice::~CSMSC951xDevice()>:
   198d8:	e92d4010 	push	{r4, lr}
   198dc:	e1a04000 	mov	r4, r0
   198e0:	ebffffd9 	bl	1984c <CSMSC951xDevice::~CSMSC951xDevice()>
   198e4:	e1a00004 	mov	r0, r4
   198e8:	e3a0102c 	mov	r1, #44	; 0x2c
   198ec:	eb0037da 	bl	2785c <operator delete(void*, unsigned int)>
   198f0:	e1a00004 	mov	r0, r4
   198f4:	e8bd8010 	pop	{r4, pc}

000198f8 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   198f8:	e2400018 	sub	r0, r0, #24
   198fc:	eafffff5 	b	198d8 <CSMSC951xDevice::~CSMSC951xDevice()>

00019900 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   19900:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19904:	e590301c 	ldr	r3, [r0, #28]
   19908:	e24dd038 	sub	sp, sp, #56	; 0x38
   1990c:	e3530000 	cmp	r3, #0
   19910:	0a000036 	beq	199f0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   19914:	e3510000 	cmp	r1, #0
   19918:	e1a04001 	mov	r4, r1
   1991c:	0a000037 	beq	19a00 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x100>
   19920:	e3a07000 	mov	r7, #0
   19924:	e1a05000 	mov	r5, r0
   19928:	e1a01003 	mov	r1, r3
   1992c:	e1a06002 	mov	r6, r2
   19930:	e3a03d19 	mov	r3, #1600	; 0x640
   19934:	e1a02004 	mov	r2, r4
   19938:	e58d7000 	str	r7, [sp]
   1993c:	e28d000c 	add	r0, sp, #12
   19940:	ebffc344 	bl	a658 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   19944:	e1a00005 	mov	r0, r5
   19948:	ebffe307 	bl	1256c <CUSBFunction::GetHost() const>
   1994c:	e5903000 	ldr	r3, [r0]
   19950:	e1a02007 	mov	r2, r7
   19954:	e5933008 	ldr	r3, [r3, #8]
   19958:	e28d100c 	add	r1, sp, #12
   1995c:	e12fff33 	blx	r3
   19960:	e2508000 	subs	r8, r0, #0
   19964:	1a000005 	bne	19980 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x80>
   19968:	e3a08000 	mov	r8, #0
   1996c:	e28d000c 	add	r0, sp, #12
   19970:	ebffc35a 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
   19974:	e1a00008 	mov	r0, r8
   19978:	e28dd038 	add	sp, sp, #56	; 0x38
   1997c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19980:	e28d000c 	add	r0, sp, #12
   19984:	ebffc368 	bl	a72c <CUSBRequest::GetResultLength() const>
   19988:	e3500003 	cmp	r0, #3
   1998c:	9afffff5 	bls	19968 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   19990:	e5945000 	ldr	r5, [r4]
   19994:	e59f30b4 	ldr	r3, [pc, #180]	; 19a50 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x150>
   19998:	e0033005 	and	r3, r3, r5
   1999c:	e3530000 	cmp	r3, #0
   199a0:	1a00001a 	bne	19a10 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x110>
   199a4:	e59f30a8 	ldr	r3, [pc, #168]	; 19a54 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x154>
   199a8:	e2402004 	sub	r2, r0, #4
   199ac:	e0033825 	and	r3, r3, r5, lsr #16
   199b0:	e1520003 	cmp	r2, r3
   199b4:	1a00001d 	bne	19a30 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>
   199b8:	e3520004 	cmp	r2, #4
   199bc:	9a00001f 	bls	19a40 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x140>
   199c0:	e2425004 	sub	r5, r2, #4
   199c4:	e1a02005 	mov	r2, r5
   199c8:	e1a00004 	mov	r0, r4
   199cc:	e2841004 	add	r1, r4, #4
   199d0:	eb0035ad 	bl	2708c <memcpy>
   199d4:	e3560000 	cmp	r6, #0
   199d8:	15865000 	strne	r5, [r6]
   199dc:	1affffe2 	bne	1996c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   199e0:	e3a02f4e 	mov	r2, #312	; 0x138
   199e4:	e59f106c 	ldr	r1, [pc, #108]	; 19a58 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x158>
   199e8:	e59f006c 	ldr	r0, [pc, #108]	; 19a5c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   199ec:	eb000f43 	bl	1d700 <assertion_failed>
   199f0:	e3a02f45 	mov	r2, #276	; 0x114
   199f4:	e59f105c 	ldr	r1, [pc, #92]	; 19a58 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x158>
   199f8:	e59f0060 	ldr	r0, [pc, #96]	; 19a60 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x160>
   199fc:	eb000f3f 	bl	1d700 <assertion_failed>
   19a00:	e59f205c 	ldr	r2, [pc, #92]	; 19a64 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x164>
   19a04:	e59f104c 	ldr	r1, [pc, #76]	; 19a58 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x158>
   19a08:	e59f0058 	ldr	r0, [pc, #88]	; 19a68 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x168>
   19a0c:	eb000f3b 	bl	1d700 <assertion_failed>
   19a10:	eb00183a 	bl	1fb00 <CLogger::Get()>
   19a14:	e3a02002 	mov	r2, #2
   19a18:	e59f304c 	ldr	r3, [pc, #76]	; 19a6c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x16c>
   19a1c:	e59f104c 	ldr	r1, [pc, #76]	; 19a70 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   19a20:	e58d5000 	str	r5, [sp]
   19a24:	e1a08007 	mov	r8, r7
   19a28:	eb001776 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19a2c:	eaffffce 	b	1996c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   19a30:	e3a02f4b 	mov	r2, #300	; 0x12c
   19a34:	e59f101c 	ldr	r1, [pc, #28]	; 19a58 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x158>
   19a38:	e59f0034 	ldr	r0, [pc, #52]	; 19a74 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   19a3c:	eb000f2f 	bl	1d700 <assertion_failed>
   19a40:	e59f2030 	ldr	r2, [pc, #48]	; 19a78 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>
   19a44:	e59f100c 	ldr	r1, [pc, #12]	; 19a58 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x158>
   19a48:	e59f002c 	ldr	r0, [pc, #44]	; 19a7c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x17c>
   19a4c:	eb000f2b 	bl	1d700 <assertion_failed>
   19a50:	400090de 	.word	0x400090de
   19a54:	00003fff 	.word	0x00003fff
   19a58:	0002f488 	.word	0x0002f488
   19a5c:	0002f2dc 	.word	0x0002f2dc
   19a60:	0002f268 	.word	0x0002f268
   19a64:	00000115 	.word	0x00000115
   19a68:	0002e89c 	.word	0x0002e89c
   19a6c:	0002f280 	.word	0x0002f280
   19a70:	0002f624 	.word	0x0002f624
   19a74:	0002f498 	.word	0x0002f498
   19a78:	0000012d 	.word	0x0000012d
   19a7c:	0002f2c8 	.word	0x0002f2c8

00019a80 <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   19a80:	e2400018 	sub	r0, r0, #24
   19a84:	eaffff9d 	b	19900 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>

00019a88 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   19a88:	e3520d19 	cmp	r2, #1600	; 0x640
   19a8c:	8a00001a 	bhi	19afc <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x74>
   19a90:	e92d4070 	push	{r4, r5, r6, lr}
   19a94:	e3510000 	cmp	r1, #0
   19a98:	e24ddd1a 	sub	sp, sp, #1664	; 0x680
   19a9c:	0a000018 	beq	19b04 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x7c>
   19aa0:	e1a06000 	mov	r6, r0
   19aa4:	e1a04002 	mov	r4, r2
   19aa8:	e28d5027 	add	r5, sp, #39	; 0x27
   19aac:	e3c5501f 	bic	r5, r5, #31
   19ab0:	e2850008 	add	r0, r5, #8
   19ab4:	eb003574 	bl	2708c <memcpy>
   19ab8:	e5962020 	ldr	r2, [r6, #32]
   19abc:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   19ac0:	e3520000 	cmp	r2, #0
   19ac4:	e8850018 	stm	r5, {r3, r4}
   19ac8:	0a000011 	beq	19b14 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x8c>
   19acc:	e1a00006 	mov	r0, r6
   19ad0:	ebffe2a5 	bl	1256c <CUSBFunction::GetHost() const>
   19ad4:	e3a0c000 	mov	ip, #0
   19ad8:	e5961020 	ldr	r1, [r6, #32]
   19adc:	e1a02005 	mov	r2, r5
   19ae0:	e2843008 	add	r3, r4, #8
   19ae4:	e58dc000 	str	ip, [sp]
   19ae8:	ebffbdae 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   19aec:	e1e00000 	mvn	r0, r0
   19af0:	e1a00fa0 	lsr	r0, r0, #31
   19af4:	e28ddd1a 	add	sp, sp, #1664	; 0x680
   19af8:	e8bd8070 	pop	{r4, r5, r6, pc}
   19afc:	e3a00000 	mov	r0, #0
   19b00:	e12fff1e 	bx	lr
   19b04:	e59f2018 	ldr	r2, [pc, #24]	; 19b24 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x9c>
   19b08:	e59f1018 	ldr	r1, [pc, #24]	; 19b28 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa0>
   19b0c:	e59f0018 	ldr	r0, [pc, #24]	; 19b2c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa4>
   19b10:	eb000efa 	bl	1d700 <assertion_failed>
   19b14:	e59f2014 	ldr	r2, [pc, #20]	; 19b30 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa8>
   19b18:	e59f1008 	ldr	r1, [pc, #8]	; 19b28 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa0>
   19b1c:	e59f0010 	ldr	r0, [pc, #16]	; 19b34 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   19b20:	eb000ef6 	bl	1d700 <assertion_failed>
   19b24:	00000107 	.word	0x00000107
   19b28:	0002f488 	.word	0x0002f488
   19b2c:	0002e89c 	.word	0x0002e89c
   19b30:	0000010e 	.word	0x0000010e
   19b34:	0002f2f0 	.word	0x0002f2f0

00019b38 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   19b38:	e2400018 	sub	r0, r0, #24
   19b3c:	eaffffd1 	b	19a88 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>

00019b40 <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   19b40:	e280000c 	add	r0, r0, #12
   19b44:	e12fff1e 	bx	lr

00019b48 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   19b48:	e92d4010 	push	{r4, lr}
   19b4c:	e1a04000 	mov	r4, r0
   19b50:	ebffe210 	bl	12398 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   19b54:	e3a02000 	mov	r2, #0
   19b58:	e59f3024 	ldr	r3, [pc, #36]	; 19b84 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x3c>
   19b5c:	e584201c 	str	r2, [r4, #28]
   19b60:	e2831008 	add	r1, r3, #8
   19b64:	e2833048 	add	r3, r3, #72	; 0x48
   19b68:	e5841000 	str	r1, [r4]
   19b6c:	e5843018 	str	r3, [r4, #24]
   19b70:	e5842020 	str	r2, [r4, #32]
   19b74:	e2840024 	add	r0, r4, #36	; 0x24
   19b78:	eb003644 	bl	27490 <CMACAddress::CMACAddress()>
   19b7c:	e1a00004 	mov	r0, r4
   19b80:	e8bd8010 	pop	{r4, pc}
   19b84:	0002f5b4 	.word	0x0002f5b4

00019b88 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   19b88:	e92d4070 	push	{r4, r5, r6, lr}
   19b8c:	e24dd018 	sub	sp, sp, #24
   19b90:	e1a04001 	mov	r4, r1
   19b94:	e58d2014 	str	r2, [sp, #20]
   19b98:	e1a06000 	mov	r6, r0
   19b9c:	ebffe272 	bl	1256c <CUSBFunction::GetHost() const>
   19ba0:	e1a05000 	mov	r5, r0
   19ba4:	e1a00006 	mov	r0, r6
   19ba8:	ebffe264 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   19bac:	e3a0c004 	mov	ip, #4
   19bb0:	e3a02000 	mov	r2, #0
   19bb4:	e28d3014 	add	r3, sp, #20
   19bb8:	e6ff4074 	uxth	r4, r4
   19bbc:	e1a01000 	mov	r1, r0
   19bc0:	e58d2000 	str	r2, [sp]
   19bc4:	e58d3008 	str	r3, [sp, #8]
   19bc8:	e1a00005 	mov	r0, r5
   19bcc:	e3a030a0 	mov	r3, #160	; 0xa0
   19bd0:	e3a02040 	mov	r2, #64	; 0x40
   19bd4:	e58d4004 	str	r4, [sp, #4]
   19bd8:	e58dc00c 	str	ip, [sp, #12]
   19bdc:	ebffbd0b 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19be0:	e1e00000 	mvn	r0, r0
   19be4:	e1a00fa0 	lsr	r0, r0, #31
   19be8:	e28dd018 	add	sp, sp, #24
   19bec:	e8bd8070 	pop	{r4, r5, r6, pc}

00019bf0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   19bf0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   19bf4:	e24dd014 	sub	sp, sp, #20
   19bf8:	e1a06002 	mov	r6, r2
   19bfc:	e1a04001 	mov	r4, r1
   19c00:	e1a07000 	mov	r7, r0
   19c04:	ebffe258 	bl	1256c <CUSBFunction::GetHost() const>
   19c08:	e1a05000 	mov	r5, r0
   19c0c:	e1a00007 	mov	r0, r7
   19c10:	ebffe24a 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   19c14:	e3a02004 	mov	r2, #4
   19c18:	e3a03000 	mov	r3, #0
   19c1c:	e6ff4074 	uxth	r4, r4
   19c20:	e1a01000 	mov	r1, r0
   19c24:	e58d200c 	str	r2, [sp, #12]
   19c28:	e58d3000 	str	r3, [sp]
   19c2c:	e1a00005 	mov	r0, r5
   19c30:	e3a030a1 	mov	r3, #161	; 0xa1
   19c34:	e3a020c0 	mov	r2, #192	; 0xc0
   19c38:	e98d0050 	stmib	sp, {r4, r6}
   19c3c:	ebffbcf3 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19c40:	e2400004 	sub	r0, r0, #4
   19c44:	e16f0f10 	clz	r0, r0
   19c48:	e1a002a0 	lsr	r0, r0, #5
   19c4c:	e28dd014 	add	sp, sp, #20
   19c50:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00019c54 <CSMSC951xDevice::PHYWaitNotBusy()>:
   19c54:	e92d4070 	push	{r4, r5, r6, lr}
   19c58:	e24dd008 	sub	sp, sp, #8
   19c5c:	e1a06000 	mov	r6, r0
   19c60:	eb0032b4 	bl	26738 <CTimer::Get()>
   19c64:	e2504000 	subs	r4, r0, #0
   19c68:	0a000013 	beq	19cbc <CSMSC951xDevice::PHYWaitNotBusy()+0x68>
   19c6c:	eb002fff 	bl	25c70 <CTimer::GetTicks() const>
   19c70:	e1a05000 	mov	r5, r0
   19c74:	ea000008 	b	19c9c <CSMSC951xDevice::PHYWaitNotBusy()+0x48>
   19c78:	e3a01f45 	mov	r1, #276	; 0x114
   19c7c:	e1a00006 	mov	r0, r6
   19c80:	e28d2004 	add	r2, sp, #4
   19c84:	ebffffd9 	bl	19bf0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   19c88:	e3500000 	cmp	r0, #0
   19c8c:	0a000007 	beq	19cb0 <CSMSC951xDevice::PHYWaitNotBusy()+0x5c>
   19c90:	e59d2004 	ldr	r2, [sp, #4]
   19c94:	e3120001 	tst	r2, #1
   19c98:	0a000005 	beq	19cb4 <CSMSC951xDevice::PHYWaitNotBusy()+0x60>
   19c9c:	e1a00004 	mov	r0, r4
   19ca0:	eb002ff2 	bl	25c70 <CTimer::GetTicks() const>
   19ca4:	e0403005 	sub	r3, r0, r5
   19ca8:	e3530063 	cmp	r3, #99	; 0x63
   19cac:	9afffff1 	bls	19c78 <CSMSC951xDevice::PHYWaitNotBusy()+0x24>
   19cb0:	e3a00000 	mov	r0, #0
   19cb4:	e28dd008 	add	sp, sp, #8
   19cb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   19cbc:	e59f2008 	ldr	r2, [pc, #8]	; 19ccc <CSMSC951xDevice::PHYWaitNotBusy()+0x78>
   19cc0:	e59f1008 	ldr	r1, [pc, #8]	; 19cd0 <CSMSC951xDevice::PHYWaitNotBusy()+0x7c>
   19cc4:	e59f0008 	ldr	r0, [pc, #8]	; 19cd4 <CSMSC951xDevice::PHYWaitNotBusy()+0x80>
   19cc8:	eb000e8c 	bl	1d700 <assertion_failed>
   19ccc:	0000018f 	.word	0x0000018f
   19cd0:	0002f488 	.word	0x0002f488
   19cd4:	0002f340 	.word	0x0002f340

00019cd8 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   19cd8:	e351001f 	cmp	r1, #31
   19cdc:	e92d4070 	push	{r4, r5, r6, lr}
   19ce0:	8a000017 	bhi	19d44 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x6c>
   19ce4:	e1a04001 	mov	r4, r1
   19ce8:	e1a06002 	mov	r6, r2
   19cec:	e1a05000 	mov	r5, r0
   19cf0:	ebffffd7 	bl	19c54 <CSMSC951xDevice::PHYWaitNotBusy()>
   19cf4:	e3500000 	cmp	r0, #0
   19cf8:	1a000001 	bne	19d04 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x2c>
   19cfc:	e3a00000 	mov	r0, #0
   19d00:	e8bd8070 	pop	{r4, r5, r6, pc}
   19d04:	e1a02006 	mov	r2, r6
   19d08:	e3a01f46 	mov	r1, #280	; 0x118
   19d0c:	e1a00005 	mov	r0, r5
   19d10:	ebffff9c 	bl	19b88 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   19d14:	e3500000 	cmp	r0, #0
   19d18:	0afffff7 	beq	19cfc <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   19d1c:	e59f2030 	ldr	r2, [pc, #48]	; 19d54 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x7c>
   19d20:	e3a01f45 	mov	r1, #276	; 0x114
   19d24:	e1a00005 	mov	r0, r5
   19d28:	e1822304 	orr	r2, r2, r4, lsl #6
   19d2c:	ebffff95 	bl	19b88 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   19d30:	e3500000 	cmp	r0, #0
   19d34:	0afffff0 	beq	19cfc <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   19d38:	e1a00005 	mov	r0, r5
   19d3c:	e8bd4070 	pop	{r4, r5, r6, lr}
   19d40:	eaffffc3 	b	19c54 <CSMSC951xDevice::PHYWaitNotBusy()>
   19d44:	e59f200c 	ldr	r2, [pc, #12]	; 19d58 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x80>
   19d48:	e59f100c 	ldr	r1, [pc, #12]	; 19d5c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x84>
   19d4c:	e59f000c 	ldr	r0, [pc, #12]	; 19d60 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x88>
   19d50:	eb000e6a 	bl	1d700 <assertion_failed>
   19d54:	00000803 	.word	0x00000803
   19d58:	00000163 	.word	0x00000163
   19d5c:	0002f488 	.word	0x0002f488
   19d60:	0002f34c 	.word	0x0002f34c

00019d64 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   19d64:	e92d4070 	push	{r4, r5, r6, lr}
   19d68:	e351001f 	cmp	r1, #31
   19d6c:	e24dd008 	sub	sp, sp, #8
   19d70:	8a000023 	bhi	19e04 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa0>
   19d74:	e1a04001 	mov	r4, r1
   19d78:	e1a06002 	mov	r6, r2
   19d7c:	e1a05000 	mov	r5, r0
   19d80:	ebffffb3 	bl	19c54 <CSMSC951xDevice::PHYWaitNotBusy()>
   19d84:	e3500000 	cmp	r0, #0
   19d88:	1a000001 	bne	19d94 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   19d8c:	e28dd008 	add	sp, sp, #8
   19d90:	e8bd8070 	pop	{r4, r5, r6, pc}
   19d94:	e59f2078 	ldr	r2, [pc, #120]	; 19e14 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb0>
   19d98:	e3a01f45 	mov	r1, #276	; 0x114
   19d9c:	e1a00005 	mov	r0, r5
   19da0:	e1822304 	orr	r2, r2, r4, lsl #6
   19da4:	ebffff77 	bl	19b88 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   19da8:	e3500000 	cmp	r0, #0
   19dac:	0a000003 	beq	19dc0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x5c>
   19db0:	e1a00005 	mov	r0, r5
   19db4:	ebffffa6 	bl	19c54 <CSMSC951xDevice::PHYWaitNotBusy()>
   19db8:	e3500000 	cmp	r0, #0
   19dbc:	1a000002 	bne	19dcc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x68>
   19dc0:	e3a00000 	mov	r0, #0
   19dc4:	e28dd008 	add	sp, sp, #8
   19dc8:	e8bd8070 	pop	{r4, r5, r6, pc}
   19dcc:	e1a00005 	mov	r0, r5
   19dd0:	e3a01f46 	mov	r1, #280	; 0x118
   19dd4:	e28d2004 	add	r2, sp, #4
   19dd8:	ebffff84 	bl	19bf0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   19ddc:	e3500000 	cmp	r0, #0
   19de0:	0afffff6 	beq	19dc0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x5c>
   19de4:	e3560000 	cmp	r6, #0
   19de8:	159d3004 	ldrne	r3, [sp, #4]
   19dec:	11c630b0 	strhne	r3, [r6]
   19df0:	1affffe5 	bne	19d8c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   19df4:	e59f201c 	ldr	r2, [pc, #28]	; 19e18 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb4>
   19df8:	e59f101c 	ldr	r1, [pc, #28]	; 19e1c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   19dfc:	e59f001c 	ldr	r0, [pc, #28]	; 19e20 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xbc>
   19e00:	eb000e3e 	bl	1d700 <assertion_failed>
   19e04:	e59f2018 	ldr	r2, [pc, #24]	; 19e24 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc0>
   19e08:	e59f100c 	ldr	r1, [pc, #12]	; 19e1c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   19e0c:	e59f0014 	ldr	r0, [pc, #20]	; 19e28 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc4>
   19e10:	eb000e3a 	bl	1d700 <assertion_failed>
   19e14:	00000801 	.word	0x00000801
   19e18:	00000186 	.word	0x00000186
   19e1c:	0002f488 	.word	0x0002f488
   19e20:	0002f35c 	.word	0x0002f35c
   19e24:	00000176 	.word	0x00000176
   19e28:	0002f34c 	.word	0x0002f34c

00019e2c <CSMSC951xDevice::IsLinkUp()>:
   19e2c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   19e30:	e24dd00c 	sub	sp, sp, #12
   19e34:	e3a01001 	mov	r1, #1
   19e38:	e28d2006 	add	r2, sp, #6
   19e3c:	ebffffc8 	bl	19d64 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   19e40:	e3500000 	cmp	r0, #0
   19e44:	11dd00b6 	ldrhne	r0, [sp, #6]
   19e48:	11a00140 	asrne	r0, r0, #2
   19e4c:	12000001 	andne	r0, r0, #1
   19e50:	e28dd00c 	add	sp, sp, #12
   19e54:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00019e58 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   19e58:	e2400018 	sub	r0, r0, #24
   19e5c:	eafffff2 	b	19e2c <CSMSC951xDevice::IsLinkUp()>

00019e60 <CSMSC951xDevice::GetLinkSpeed()>:
   19e60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   19e64:	e24dd00c 	sub	sp, sp, #12
   19e68:	e3a0101f 	mov	r1, #31
   19e6c:	e28d2006 	add	r2, sp, #6
   19e70:	ebffffbb 	bl	19d64 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   19e74:	e3500000 	cmp	r0, #0
   19e78:	0a000007 	beq	19e9c <CSMSC951xDevice::GetLinkSpeed()+0x3c>
   19e7c:	e1dd30b6 	ldrh	r3, [sp, #6]
   19e80:	e3130a01 	tst	r3, #4096	; 0x1000
   19e84:	0a000004 	beq	19e9c <CSMSC951xDevice::GetLinkSpeed()+0x3c>
   19e88:	e1a03143 	asr	r3, r3, #2
   19e8c:	e2033007 	and	r3, r3, #7
   19e90:	e2433001 	sub	r3, r3, #1
   19e94:	e3530005 	cmp	r3, #5
   19e98:	9a000002 	bls	19ea8 <CSMSC951xDevice::GetLinkSpeed()+0x48>
   19e9c:	e3a00006 	mov	r0, #6
   19ea0:	e28dd00c 	add	sp, sp, #12
   19ea4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19ea8:	e59f200c 	ldr	r2, [pc, #12]	; 19ebc <CSMSC951xDevice::GetLinkSpeed()+0x5c>
   19eac:	e0823003 	add	r3, r2, r3
   19eb0:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
   19eb4:	e28dd00c 	add	sp, sp, #12
   19eb8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   19ebc:	0002f5b4 	.word	0x0002f5b4

00019ec0 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   19ec0:	e2400018 	sub	r0, r0, #24
   19ec4:	eaffffe5 	b	19e60 <CSMSC951xDevice::GetLinkSpeed()>

00019ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   19ec8:	e92d4030 	push	{r4, r5, lr}
   19ecc:	e1a04002 	mov	r4, r2
   19ed0:	e24dd014 	sub	sp, sp, #20
   19ed4:	e1a05001 	mov	r5, r1
   19ed8:	e28d200c 	add	r2, sp, #12
   19edc:	e1a01004 	mov	r1, r4
   19ee0:	ebffff42 	bl	19bf0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   19ee4:	e3500000 	cmp	r0, #0
   19ee8:	0a000008 	beq	19f10 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x48>
   19eec:	eb001703 	bl	1fb00 <CLogger::Get()>
   19ef0:	e59d300c 	ldr	r3, [sp, #12]
   19ef4:	e3a02004 	mov	r2, #4
   19ef8:	e88d0028 	stm	sp, {r3, r5}
   19efc:	e59f102c 	ldr	r1, [pc, #44]	; 19f30 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   19f00:	e59f302c 	ldr	r3, [pc, #44]	; 19f34 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x6c>
   19f04:	eb00163f 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19f08:	e28dd014 	add	sp, sp, #20
   19f0c:	e8bd8030 	pop	{r4, r5, pc}
   19f10:	eb0016fa 	bl	1fb00 <CLogger::Get()>
   19f14:	e3a02001 	mov	r2, #1
   19f18:	e59f3018 	ldr	r3, [pc, #24]	; 19f38 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x70>
   19f1c:	e59f100c 	ldr	r1, [pc, #12]	; 19f30 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   19f20:	e58d4000 	str	r4, [sp]
   19f24:	eb001637 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19f28:	e28dd014 	add	sp, sp, #20
   19f2c:	e8bd8030 	pop	{r4, r5, pc}
   19f30:	0002f624 	.word	0x0002f624
   19f34:	0002f4b8 	.word	0x0002f4b8
   19f38:	0002f324 	.word	0x0002f324

00019f3c <CSMSC951xDevice::DumpRegs()>:
   19f3c:	e92d4010 	push	{r4, lr}
   19f40:	e1a04000 	mov	r4, r0
   19f44:	e3a02000 	mov	r2, #0
   19f48:	e59f1134 	ldr	r1, [pc, #308]	; 1a084 <CSMSC951xDevice::DumpRegs()+0x148>
   19f4c:	ebffffdd 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   19f50:	e1a00004 	mov	r0, r4
   19f54:	e3a02008 	mov	r2, #8
   19f58:	e59f1128 	ldr	r1, [pc, #296]	; 1a088 <CSMSC951xDevice::DumpRegs()+0x14c>
   19f5c:	ebffffd9 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   19f60:	e1a00004 	mov	r0, r4
   19f64:	e3a0200c 	mov	r2, #12
   19f68:	e59f111c 	ldr	r1, [pc, #284]	; 1a08c <CSMSC951xDevice::DumpRegs()+0x150>
   19f6c:	ebffffd5 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   19f70:	e1a00004 	mov	r0, r4
   19f74:	e3a02010 	mov	r2, #16
   19f78:	e59f1110 	ldr	r1, [pc, #272]	; 1a090 <CSMSC951xDevice::DumpRegs()+0x154>
   19f7c:	ebffffd1 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   19f80:	e1a00004 	mov	r0, r4
   19f84:	e3a02014 	mov	r2, #20
   19f88:	e59f1104 	ldr	r1, [pc, #260]	; 1a094 <CSMSC951xDevice::DumpRegs()+0x158>
   19f8c:	ebffffcd 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   19f90:	e1a00004 	mov	r0, r4
   19f94:	e3a02018 	mov	r2, #24
   19f98:	e59f10f8 	ldr	r1, [pc, #248]	; 1a098 <CSMSC951xDevice::DumpRegs()+0x15c>
   19f9c:	ebffffc9 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   19fa0:	e1a00004 	mov	r0, r4
   19fa4:	e3a02020 	mov	r2, #32
   19fa8:	e59f10ec 	ldr	r1, [pc, #236]	; 1a09c <CSMSC951xDevice::DumpRegs()+0x160>
   19fac:	ebffffc5 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   19fb0:	e1a00004 	mov	r0, r4
   19fb4:	e3a02024 	mov	r2, #36	; 0x24
   19fb8:	e59f10e0 	ldr	r1, [pc, #224]	; 1a0a0 <CSMSC951xDevice::DumpRegs()+0x164>
   19fbc:	ebffffc1 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   19fc0:	e1a00004 	mov	r0, r4
   19fc4:	e3a02028 	mov	r2, #40	; 0x28
   19fc8:	e59f10d4 	ldr	r1, [pc, #212]	; 1a0a4 <CSMSC951xDevice::DumpRegs()+0x168>
   19fcc:	ebffffbd 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   19fd0:	e1a00004 	mov	r0, r4
   19fd4:	e3a0202c 	mov	r2, #44	; 0x2c
   19fd8:	e59f10c8 	ldr	r1, [pc, #200]	; 1a0a8 <CSMSC951xDevice::DumpRegs()+0x16c>
   19fdc:	ebffffb9 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   19fe0:	e1a00004 	mov	r0, r4
   19fe4:	e3a02038 	mov	r2, #56	; 0x38
   19fe8:	e59f10bc 	ldr	r1, [pc, #188]	; 1a0ac <CSMSC951xDevice::DumpRegs()+0x170>
   19fec:	ebffffb5 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   19ff0:	e1a00004 	mov	r0, r4
   19ff4:	e3a02068 	mov	r2, #104	; 0x68
   19ff8:	e59f10b0 	ldr	r1, [pc, #176]	; 1a0b0 <CSMSC951xDevice::DumpRegs()+0x174>
   19ffc:	ebffffb1 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1a000:	e1a00004 	mov	r0, r4
   1a004:	e3a0206c 	mov	r2, #108	; 0x6c
   1a008:	e59f10a4 	ldr	r1, [pc, #164]	; 1a0b4 <CSMSC951xDevice::DumpRegs()+0x178>
   1a00c:	ebffffad 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1a010:	e1a00004 	mov	r0, r4
   1a014:	e3a02c01 	mov	r2, #256	; 0x100
   1a018:	e59f1098 	ldr	r1, [pc, #152]	; 1a0b8 <CSMSC951xDevice::DumpRegs()+0x17c>
   1a01c:	ebffffa9 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1a020:	e1a00004 	mov	r0, r4
   1a024:	e3a02f41 	mov	r2, #260	; 0x104
   1a028:	e59f108c 	ldr	r1, [pc, #140]	; 1a0bc <CSMSC951xDevice::DumpRegs()+0x180>
   1a02c:	ebffffa5 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1a030:	e1a00004 	mov	r0, r4
   1a034:	e3a02f42 	mov	r2, #264	; 0x108
   1a038:	e59f1080 	ldr	r1, [pc, #128]	; 1a0c0 <CSMSC951xDevice::DumpRegs()+0x184>
   1a03c:	ebffffa1 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1a040:	e1a00004 	mov	r0, r4
   1a044:	e3a02f43 	mov	r2, #268	; 0x10c
   1a048:	e59f1074 	ldr	r1, [pc, #116]	; 1a0c4 <CSMSC951xDevice::DumpRegs()+0x188>
   1a04c:	ebffff9d 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1a050:	e1a00004 	mov	r0, r4
   1a054:	e3a02e11 	mov	r2, #272	; 0x110
   1a058:	e59f1068 	ldr	r1, [pc, #104]	; 1a0c8 <CSMSC951xDevice::DumpRegs()+0x18c>
   1a05c:	ebffff99 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1a060:	e1a00004 	mov	r0, r4
   1a064:	e3a02f47 	mov	r2, #284	; 0x11c
   1a068:	e59f105c 	ldr	r1, [pc, #92]	; 1a0cc <CSMSC951xDevice::DumpRegs()+0x190>
   1a06c:	ebffff95 	bl	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1a070:	e1a00004 	mov	r0, r4
   1a074:	e8bd4010 	pop	{r4, lr}
   1a078:	e3a02f4b 	mov	r2, #300	; 0x12c
   1a07c:	e59f104c 	ldr	r1, [pc, #76]	; 1a0d0 <CSMSC951xDevice::DumpRegs()+0x194>
   1a080:	eaffff90 	b	19ec8 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1a084:	0002f4c0 	.word	0x0002f4c0
   1a088:	0002f4c8 	.word	0x0002f4c8
   1a08c:	0002f4d0 	.word	0x0002f4d0
   1a090:	0002f4d8 	.word	0x0002f4d8
   1a094:	0002f4e0 	.word	0x0002f4e0
   1a098:	0002f4e8 	.word	0x0002f4e8
   1a09c:	0002f4f4 	.word	0x0002f4f4
   1a0a0:	0002f4fc 	.word	0x0002f4fc
   1a0a4:	0002f500 	.word	0x0002f500
   1a0a8:	0002f50c 	.word	0x0002f50c
   1a0ac:	0002f514 	.word	0x0002f514
   1a0b0:	0002f520 	.word	0x0002f520
   1a0b4:	0002f52c 	.word	0x0002f52c
   1a0b8:	0002f538 	.word	0x0002f538
   1a0bc:	0002f540 	.word	0x0002f540
   1a0c0:	0002f548 	.word	0x0002f548
   1a0c4:	0002f550 	.word	0x0002f550
   1a0c8:	0002f558 	.word	0x0002f558
   1a0cc:	0002f560 	.word	0x0002f560
   1a0d0:	0002f568 	.word	0x0002f568

0001a0d4 <CSMSC951xDevice::Configure()>:
   1a0d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1a0d8:	e3a07000 	mov	r7, #0
   1a0dc:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   1a0e0:	e1a01007 	mov	r1, r7
   1a0e4:	e1a05000 	mov	r5, r0
   1a0e8:	e28d001c 	add	r0, sp, #28
   1a0ec:	eb000da4 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1a0f0:	e3a03014 	mov	r3, #20
   1a0f4:	e59f1284 	ldr	r1, [pc, #644]	; 1a380 <CSMSC951xDevice::Configure()+0x2ac>
   1a0f8:	e28d001c 	add	r0, sp, #28
   1a0fc:	e58d7000 	str	r7, [sp]
   1a100:	e28d2034 	add	r2, sp, #52	; 0x34
   1a104:	eb000daa 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1a108:	e2504000 	subs	r4, r0, #0
   1a10c:	0a00006e 	beq	1a2cc <CSMSC951xDevice::Configure()+0x1f8>
   1a110:	e2856024 	add	r6, r5, #36	; 0x24
   1a114:	e28d1040 	add	r1, sp, #64	; 0x40
   1a118:	e1a00006 	mov	r0, r6
   1a11c:	eb0034fc 	bl	27514 <CMACAddress::Set(unsigned char const*)>
   1a120:	e28d0024 	add	r0, sp, #36	; 0x24
   1a124:	eb002892 	bl	24374 <CString::CString()>
   1a128:	e28d1024 	add	r1, sp, #36	; 0x24
   1a12c:	e1a00006 	mov	r0, r6
   1a130:	eb003551 	bl	2767c <CMACAddress::Format(CString*) const>
   1a134:	eb001671 	bl	1fb00 <CLogger::Get()>
   1a138:	e1a04000 	mov	r4, r0
   1a13c:	e28d0024 	add	r0, sp, #36	; 0x24
   1a140:	eb0028a3 	bl	243d4 <CString::operator char const*() const>
   1a144:	e1a02000 	mov	r2, r0
   1a148:	e59f3234 	ldr	r3, [pc, #564]	; 1a384 <CSMSC951xDevice::Configure()+0x2b0>
   1a14c:	e1a00004 	mov	r0, r4
   1a150:	e59f1230 	ldr	r1, [pc, #560]	; 1a388 <CSMSC951xDevice::Configure()+0x2b4>
   1a154:	e58d2000 	str	r2, [sp]
   1a158:	e3a02004 	mov	r2, #4
   1a15c:	eb0015a9 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a160:	e1a00005 	mov	r0, r5
   1a164:	ebffe0df 	bl	124e8 <CUSBFunction::GetNumEndpoints() const>
   1a168:	e3500003 	cmp	r0, #3
   1a16c:	0a00000e 	beq	1a1ac <CSMSC951xDevice::Configure()+0xd8>
   1a170:	e1a00005 	mov	r0, r5
   1a174:	e59f120c 	ldr	r1, [pc, #524]	; 1a388 <CSMSC951xDevice::Configure()+0x2b4>
   1a178:	e1a04007 	mov	r4, r7
   1a17c:	ebffe110 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   1a180:	e28d0024 	add	r0, sp, #36	; 0x24
   1a184:	eb002847 	bl	242a8 <CString::~CString()>
   1a188:	e28d001c 	add	r0, sp, #28
   1a18c:	eb000d83 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   1a190:	e1a00004 	mov	r0, r4
   1a194:	e28dd04c 	add	sp, sp, #76	; 0x4c
   1a198:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1a19c:	e5d43003 	ldrb	r3, [r4, #3]
   1a1a0:	e203303f 	and	r3, r3, #63	; 0x3f
   1a1a4:	e3530002 	cmp	r3, #2
   1a1a8:	0a000035 	beq	1a284 <CSMSC951xDevice::Configure()+0x1b0>
   1a1ac:	e3a01005 	mov	r1, #5
   1a1b0:	e1a00005 	mov	r0, r5
   1a1b4:	ebffe0f7 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
   1a1b8:	e2504000 	subs	r4, r0, #0
   1a1bc:	1afffff6 	bne	1a19c <CSMSC951xDevice::Configure()+0xc8>
   1a1c0:	e595301c 	ldr	r3, [r5, #28]
   1a1c4:	e1a00005 	mov	r0, r5
   1a1c8:	e3530000 	cmp	r3, #0
   1a1cc:	0a00004a 	beq	1a2fc <CSMSC951xDevice::Configure()+0x228>
   1a1d0:	e5953020 	ldr	r3, [r5, #32]
   1a1d4:	e3530000 	cmp	r3, #0
   1a1d8:	0a000047 	beq	1a2fc <CSMSC951xDevice::Configure()+0x228>
   1a1dc:	ebffe003 	bl	121f0 <CUSBFunction::Configure()>
   1a1e0:	e2504000 	subs	r4, r0, #0
   1a1e4:	0a00003e 	beq	1a2e4 <CSMSC951xDevice::Configure()+0x210>
   1a1e8:	e1a00006 	mov	r0, r6
   1a1ec:	e28d1014 	add	r1, sp, #20
   1a1f0:	eb0034f1 	bl	275bc <CMACAddress::CopyTo(unsigned char*) const>
   1a1f4:	e5dd2019 	ldrb	r2, [sp, #25]
   1a1f8:	e5dd3018 	ldrb	r3, [sp, #24]
   1a1fc:	e3a01f41 	mov	r1, #260	; 0x104
   1a200:	e1a00005 	mov	r0, r5
   1a204:	e1832402 	orr	r2, r3, r2, lsl #8
   1a208:	e59d4014 	ldr	r4, [sp, #20]
   1a20c:	ebfffe5d 	bl	19b88 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   1a210:	e3500000 	cmp	r0, #0
   1a214:	0a00004b 	beq	1a348 <CSMSC951xDevice::Configure()+0x274>
   1a218:	e1a02004 	mov	r2, r4
   1a21c:	e3a01f42 	mov	r1, #264	; 0x108
   1a220:	e1a00005 	mov	r0, r5
   1a224:	ebfffe57 	bl	19b88 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   1a228:	e3500000 	cmp	r0, #0
   1a22c:	0a000045 	beq	1a348 <CSMSC951xDevice::Configure()+0x274>
   1a230:	e3a01024 	mov	r1, #36	; 0x24
   1a234:	e1a00005 	mov	r0, r5
   1a238:	e59f214c 	ldr	r2, [pc, #332]	; 1a38c <CSMSC951xDevice::Configure()+0x2b8>
   1a23c:	ebfffe51 	bl	19b88 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   1a240:	e3500000 	cmp	r0, #0
   1a244:	0a000046 	beq	1a364 <CSMSC951xDevice::Configure()+0x290>
   1a248:	e3a01c01 	mov	r1, #256	; 0x100
   1a24c:	e1a00005 	mov	r0, r5
   1a250:	e59f2138 	ldr	r2, [pc, #312]	; 1a390 <CSMSC951xDevice::Configure()+0x2bc>
   1a254:	ebfffe4b 	bl	19b88 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   1a258:	e3500000 	cmp	r0, #0
   1a25c:	0a000040 	beq	1a364 <CSMSC951xDevice::Configure()+0x290>
   1a260:	e3a02004 	mov	r2, #4
   1a264:	e3a01010 	mov	r1, #16
   1a268:	e1a00005 	mov	r0, r5
   1a26c:	ebfffe45 	bl	19b88 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   1a270:	e2504000 	subs	r4, r0, #0
   1a274:	0a00003a 	beq	1a364 <CSMSC951xDevice::Configure()+0x290>
   1a278:	e2850018 	add	r0, r5, #24
   1a27c:	eb00351f 	bl	27700 <CNetDevice::AddNetDevice()>
   1a280:	eaffffbe 	b	1a180 <CSMSC951xDevice::Configure()+0xac>
   1a284:	e1d430d2 	ldrsb	r3, [r4, #2]
   1a288:	e3530000 	cmp	r3, #0
   1a28c:	ba00001e 	blt	1a30c <CSMSC951xDevice::Configure()+0x238>
   1a290:	e5953020 	ldr	r3, [r5, #32]
   1a294:	e1a00005 	mov	r0, r5
   1a298:	e3530000 	cmp	r3, #0
   1a29c:	1a000016 	bne	1a2fc <CSMSC951xDevice::Configure()+0x228>
   1a2a0:	ebffe09c 	bl	12518 <CUSBFunction::GetDevice() const>
   1a2a4:	e1a01000 	mov	r1, r0
   1a2a8:	e3a00014 	mov	r0, #20
   1a2ac:	e58d100c 	str	r1, [sp, #12]
   1a2b0:	eb00355b 	bl	27824 <operator new(unsigned int)>
   1a2b4:	e1a07000 	mov	r7, r0
   1a2b8:	e1a02004 	mov	r2, r4
   1a2bc:	e59d100c 	ldr	r1, [sp, #12]
   1a2c0:	ebffded6 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1a2c4:	e5857020 	str	r7, [r5, #32]
   1a2c8:	eaffffb7 	b	1a1ac <CSMSC951xDevice::Configure()+0xd8>
   1a2cc:	eb00160b 	bl	1fb00 <CLogger::Get()>
   1a2d0:	e3a02001 	mov	r2, #1
   1a2d4:	e59f30b8 	ldr	r3, [pc, #184]	; 1a394 <CSMSC951xDevice::Configure()+0x2c0>
   1a2d8:	e59f10a8 	ldr	r1, [pc, #168]	; 1a388 <CSMSC951xDevice::Configure()+0x2b4>
   1a2dc:	eb001549 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a2e0:	eaffffa8 	b	1a188 <CSMSC951xDevice::Configure()+0xb4>
   1a2e4:	eb001605 	bl	1fb00 <CLogger::Get()>
   1a2e8:	e3a02001 	mov	r2, #1
   1a2ec:	e59f30a4 	ldr	r3, [pc, #164]	; 1a398 <CSMSC951xDevice::Configure()+0x2c4>
   1a2f0:	e59f1090 	ldr	r1, [pc, #144]	; 1a388 <CSMSC951xDevice::Configure()+0x2b4>
   1a2f4:	eb001543 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a2f8:	eaffffa0 	b	1a180 <CSMSC951xDevice::Configure()+0xac>
   1a2fc:	e59f1084 	ldr	r1, [pc, #132]	; 1a388 <CSMSC951xDevice::Configure()+0x2b4>
   1a300:	ebffe0af 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   1a304:	e3a04000 	mov	r4, #0
   1a308:	eaffff9c 	b	1a180 <CSMSC951xDevice::Configure()+0xac>
   1a30c:	e595301c 	ldr	r3, [r5, #28]
   1a310:	e1a00005 	mov	r0, r5
   1a314:	e3530000 	cmp	r3, #0
   1a318:	1afffff7 	bne	1a2fc <CSMSC951xDevice::Configure()+0x228>
   1a31c:	ebffe07d 	bl	12518 <CUSBFunction::GetDevice() const>
   1a320:	e1a01000 	mov	r1, r0
   1a324:	e3a00014 	mov	r0, #20
   1a328:	e58d100c 	str	r1, [sp, #12]
   1a32c:	eb00353c 	bl	27824 <operator new(unsigned int)>
   1a330:	e1a07000 	mov	r7, r0
   1a334:	e1a02004 	mov	r2, r4
   1a338:	e59d100c 	ldr	r1, [sp, #12]
   1a33c:	ebffdeb7 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1a340:	e585701c 	str	r7, [r5, #28]
   1a344:	eaffff98 	b	1a1ac <CSMSC951xDevice::Configure()+0xd8>
   1a348:	eb0015ec 	bl	1fb00 <CLogger::Get()>
   1a34c:	e3a02001 	mov	r2, #1
   1a350:	e59f3044 	ldr	r3, [pc, #68]	; 1a39c <CSMSC951xDevice::Configure()+0x2c8>
   1a354:	e59f102c 	ldr	r1, [pc, #44]	; 1a388 <CSMSC951xDevice::Configure()+0x2b4>
   1a358:	eb00152a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a35c:	e3a04000 	mov	r4, #0
   1a360:	eaffff86 	b	1a180 <CSMSC951xDevice::Configure()+0xac>
   1a364:	eb0015e5 	bl	1fb00 <CLogger::Get()>
   1a368:	e3a02001 	mov	r2, #1
   1a36c:	e59f302c 	ldr	r3, [pc, #44]	; 1a3a0 <CSMSC951xDevice::Configure()+0x2cc>
   1a370:	e59f1010 	ldr	r1, [pc, #16]	; 1a388 <CSMSC951xDevice::Configure()+0x2b4>
   1a374:	eb001523 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a378:	e3a04000 	mov	r4, #0
   1a37c:	eaffff7f 	b	1a180 <CSMSC951xDevice::Configure()+0xac>
   1a380:	00010003 	.word	0x00010003
   1a384:	0002f390 	.word	0x0002f390
   1a388:	0002f624 	.word	0x0002f624
   1a38c:	01110000 	.word	0x01110000
   1a390:	0080000c 	.word	0x0080000c
   1a394:	0002f570 	.word	0x0002f570
   1a398:	0002c93c 	.word	0x0002c93c
   1a39c:	0002f588 	.word	0x0002f588
   1a3a0:	0002f5a0 	.word	0x0002f5a0

0001a3a4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   1a3a4:	e92d4070 	push	{r4, r5, r6, lr}
   1a3a8:	e3a06000 	mov	r6, #0
   1a3ac:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1a3b0:	e59f50d4 	ldr	r5, [pc, #212]	; 1a48c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xe8>
   1a3b4:	e1530006 	cmp	r3, r6
   1a3b8:	e1a04000 	mov	r4, r0
   1a3bc:	e5805000 	str	r5, [r0]
   1a3c0:	e5806028 	str	r6, [r0, #40]	; 0x28
   1a3c4:	1a000027 	bne	1a468 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xc4>
   1a3c8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   1a3cc:	e3500000 	cmp	r0, #0
   1a3d0:	0a000000 	beq	1a3d8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x34>
   1a3d4:	eb00351f 	bl	27858 <operator delete[](void*)>
   1a3d8:	e3a03000 	mov	r3, #0
   1a3dc:	e5945020 	ldr	r5, [r4, #32]
   1a3e0:	e5843024 	str	r3, [r4, #36]	; 0x24
   1a3e4:	e1550003 	cmp	r5, r3
   1a3e8:	0a000004 	beq	1a400 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x5c>
   1a3ec:	e1a00005 	mov	r0, r5
   1a3f0:	ebffdee8 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   1a3f4:	e1a00005 	mov	r0, r5
   1a3f8:	e3a01014 	mov	r1, #20
   1a3fc:	eb003516 	bl	2785c <operator delete(void*, unsigned int)>
   1a400:	e3a03000 	mov	r3, #0
   1a404:	e594501c 	ldr	r5, [r4, #28]
   1a408:	e5843020 	str	r3, [r4, #32]
   1a40c:	e1550003 	cmp	r5, r3
   1a410:	0a000004 	beq	1a428 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x84>
   1a414:	e1a00005 	mov	r0, r5
   1a418:	ebffdede 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   1a41c:	e1a00005 	mov	r0, r5
   1a420:	e3a01014 	mov	r1, #20
   1a424:	eb00350c 	bl	2785c <operator delete(void*, unsigned int)>
   1a428:	e3a03000 	mov	r3, #0
   1a42c:	e5945018 	ldr	r5, [r4, #24]
   1a430:	e584301c 	str	r3, [r4, #28]
   1a434:	e1550003 	cmp	r5, r3
   1a438:	0a000004 	beq	1a450 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xac>
   1a43c:	e1a00005 	mov	r0, r5
   1a440:	ebffded4 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   1a444:	e1a00005 	mov	r0, r5
   1a448:	e3a01014 	mov	r1, #20
   1a44c:	eb003502 	bl	2785c <operator delete(void*, unsigned int)>
   1a450:	e3a03000 	mov	r3, #0
   1a454:	e1a00004 	mov	r0, r4
   1a458:	e5843018 	str	r3, [r4, #24]
   1a45c:	ebffdf3a 	bl	1214c <CUSBFunction::~CUSBFunction()>
   1a460:	e1a00004 	mov	r0, r4
   1a464:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a468:	eb000f7e 	bl	1e268 <CDeviceNameService::Get()>
   1a46c:	e2851024 	add	r1, r5, #36	; 0x24
   1a470:	e1a03006 	mov	r3, r6
   1a474:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1a478:	eb000fa0 	bl	1e300 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1a47c:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
   1a480:	e59f0008 	ldr	r0, [pc, #8]	; 1a490 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xec>
   1a484:	eb00366c 	bl	27e3c <CNumberPool::FreeNumber(unsigned int)>
   1a488:	eaffffce 	b	1a3c8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x24>
   1a48c:	0002f6d0 	.word	0x0002f6d0
   1a490:	00034bd8 	.word	0x00034bd8

0001a494 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   1a494:	e92d4010 	push	{r4, lr}
   1a498:	e1a04000 	mov	r4, r0
   1a49c:	ebffffc0 	bl	1a3a4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   1a4a0:	e1a00004 	mov	r0, r4
   1a4a4:	e3a01030 	mov	r1, #48	; 0x30
   1a4a8:	eb0034eb 	bl	2785c <operator delete(void*, unsigned int)>
   1a4ac:	e1a00004 	mov	r0, r4
   1a4b0:	e8bd8010 	pop	{r4, pc}

0001a4b4 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   1a4b4:	e92d4010 	push	{r4, lr}
   1a4b8:	e1a04000 	mov	r4, r0
   1a4bc:	ebffdfb5 	bl	12398 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1a4c0:	e3a03000 	mov	r3, #0
   1a4c4:	e59f2020 	ldr	r2, [pc, #32]	; 1a4ec <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   1a4c8:	e1a00004 	mov	r0, r4
   1a4cc:	e5843018 	str	r3, [r4, #24]
   1a4d0:	e5842000 	str	r2, [r4]
   1a4d4:	e584301c 	str	r3, [r4, #28]
   1a4d8:	e5843020 	str	r3, [r4, #32]
   1a4dc:	e5843024 	str	r3, [r4, #36]	; 0x24
   1a4e0:	e5843028 	str	r3, [r4, #40]	; 0x28
   1a4e4:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1a4e8:	e8bd8010 	pop	{r4, pc}
   1a4ec:	0002f6d0 	.word	0x0002f6d0

0001a4f0 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   1a4f0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1a4f4:	e24dd014 	sub	sp, sp, #20
   1a4f8:	e1a06001 	mov	r6, r1
   1a4fc:	e1a04002 	mov	r4, r2
   1a500:	e1a07000 	mov	r7, r0
   1a504:	ebffe018 	bl	1256c <CUSBFunction::GetHost() const>
   1a508:	e1a05000 	mov	r5, r0
   1a50c:	e1a00007 	mov	r0, r7
   1a510:	ebffe00a 	bl	12540 <CUSBFunction::GetEndpoint0() const>
   1a514:	e3a03000 	mov	r3, #0
   1a518:	e6ff4074 	uxth	r4, r4
   1a51c:	e1a01000 	mov	r1, r0
   1a520:	e3a02020 	mov	r2, #32
   1a524:	e1a00005 	mov	r0, r5
   1a528:	e58d6008 	str	r6, [sp, #8]
   1a52c:	e58d400c 	str	r4, [sp, #12]
   1a530:	e58d3004 	str	r3, [sp, #4]
   1a534:	e58d3000 	str	r3, [sp]
   1a538:	ebffbab4 	bl	9010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1a53c:	e1e00000 	mvn	r0, r0
   1a540:	e1a00fa0 	lsr	r0, r0, #31
   1a544:	e28dd014 	add	sp, sp, #20
   1a548:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001a54c <CUSBBluetoothDevice::StartRequest()>:
   1a54c:	e92d4070 	push	{r4, r5, r6, lr}
   1a550:	e1a04000 	mov	r4, r0
   1a554:	e5900018 	ldr	r0, [r0, #24]
   1a558:	e24dd010 	sub	sp, sp, #16
   1a55c:	e3500000 	cmp	r0, #0
   1a560:	0a00001c 	beq	1a5d8 <CUSBBluetoothDevice::StartRequest()+0x8c>
   1a564:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1a568:	e3530000 	cmp	r3, #0
   1a56c:	0a00001d 	beq	1a5e8 <CUSBBluetoothDevice::StartRequest()+0x9c>
   1a570:	ebffde9d 	bl	11fec <CUSBEndpoint::GetMaxPacketSize() const>
   1a574:	e1a03000 	mov	r3, r0
   1a578:	e3a0002c 	mov	r0, #44	; 0x2c
   1a57c:	e58d300c 	str	r3, [sp, #12]
   1a580:	ebffc0c5 	bl	a89c <CUSBRequest::operator new(unsigned int)>
   1a584:	e3a06000 	mov	r6, #0
   1a588:	e1a05000 	mov	r5, r0
   1a58c:	e58d6000 	str	r6, [sp]
   1a590:	e59d300c 	ldr	r3, [sp, #12]
   1a594:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1a598:	e5941018 	ldr	r1, [r4, #24]
   1a59c:	ebffc02d 	bl	a658 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1a5a0:	e1a03004 	mov	r3, r4
   1a5a4:	e1a02006 	mov	r2, r6
   1a5a8:	e1a00005 	mov	r0, r5
   1a5ac:	e59f1044 	ldr	r1, [pc, #68]	; 1a5f8 <CUSBBluetoothDevice::StartRequest()+0xac>
   1a5b0:	ebffc09a 	bl	a820 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1a5b4:	e1a00004 	mov	r0, r4
   1a5b8:	ebffdfeb 	bl	1256c <CUSBFunction::GetHost() const>
   1a5bc:	e1a01005 	mov	r1, r5
   1a5c0:	e1a02006 	mov	r2, r6
   1a5c4:	e5903000 	ldr	r3, [r0]
   1a5c8:	e593300c 	ldr	r3, [r3, #12]
   1a5cc:	e28dd010 	add	sp, sp, #16
   1a5d0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a5d4:	e12fff13 	bx	r3
   1a5d8:	e3a020ac 	mov	r2, #172	; 0xac
   1a5dc:	e59f1018 	ldr	r1, [pc, #24]	; 1a5fc <CUSBBluetoothDevice::StartRequest()+0xb0>
   1a5e0:	e59f0018 	ldr	r0, [pc, #24]	; 1a600 <CUSBBluetoothDevice::StartRequest()+0xb4>
   1a5e4:	eb000c45 	bl	1d700 <assertion_failed>
   1a5e8:	e3a020ad 	mov	r2, #173	; 0xad
   1a5ec:	e59f1008 	ldr	r1, [pc, #8]	; 1a5fc <CUSBBluetoothDevice::StartRequest()+0xb0>
   1a5f0:	e59f000c 	ldr	r0, [pc, #12]	; 1a604 <CUSBBluetoothDevice::StartRequest()+0xb8>
   1a5f4:	eb000c41 	bl	1d700 <assertion_failed>
   1a5f8:	0001a734 	.word	0x0001a734
   1a5fc:	0002f638 	.word	0x0002f638
   1a600:	0002f64c 	.word	0x0002f64c
   1a604:	0002f668 	.word	0x0002f668

0001a608 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   1a608:	e3510000 	cmp	r1, #0
   1a60c:	e5801028 	str	r1, [r0, #40]	; 0x28
   1a610:	0a000000 	beq	1a618 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x10>
   1a614:	eaffffcc 	b	1a54c <CUSBBluetoothDevice::StartRequest()>
   1a618:	e3a020a5 	mov	r2, #165	; 0xa5
   1a61c:	e92d4010 	push	{r4, lr}
   1a620:	e59f1004 	ldr	r1, [pc, #4]	; 1a62c <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x24>
   1a624:	e59f0004 	ldr	r0, [pc, #4]	; 1a630 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x28>
   1a628:	eb000c34 	bl	1d700 <assertion_failed>
   1a62c:	0002f638 	.word	0x0002f638
   1a630:	0002f67c 	.word	0x0002f67c

0001a634 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   1a634:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a638:	e2514000 	subs	r4, r1, #0
   1a63c:	0a00002d 	beq	1a6f8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   1a640:	e1a05000 	mov	r5, r0
   1a644:	e1a00004 	mov	r0, r4
   1a648:	ebffc035 	bl	a724 <CUSBRequest::GetStatus() const>
   1a64c:	e3500000 	cmp	r0, #0
   1a650:	0a000019 	beq	1a6bc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x88>
   1a654:	e5956028 	ldr	r6, [r5, #40]	; 0x28
   1a658:	e3560000 	cmp	r6, #0
   1a65c:	0a000029 	beq	1a708 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   1a660:	e5957024 	ldr	r7, [r5, #36]	; 0x24
   1a664:	e3570000 	cmp	r7, #0
   1a668:	0a00001e 	beq	1a6e8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xb4>
   1a66c:	e1a00004 	mov	r0, r4
   1a670:	ebffc02d 	bl	a72c <CUSBRequest::GetResultLength() const>
   1a674:	e1a01000 	mov	r1, r0
   1a678:	e1a00007 	mov	r0, r7
   1a67c:	e12fff36 	blx	r6
   1a680:	e1a00004 	mov	r0, r4
   1a684:	ebffc015 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
   1a688:	e1a00004 	mov	r0, r4
   1a68c:	e3a0102c 	mov	r1, #44	; 0x2c
   1a690:	ebffc096 	bl	a8f0 <CUSBRequest::operator delete(void*, unsigned int)>
   1a694:	e1a00005 	mov	r0, r5
   1a698:	ebffffab 	bl	1a54c <CUSBBluetoothDevice::StartRequest()>
   1a69c:	e3500000 	cmp	r0, #0
   1a6a0:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   1a6a4:	eb001515 	bl	1fb00 <CLogger::Get()>
   1a6a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a6ac:	e3a02001 	mov	r2, #1
   1a6b0:	e59f3060 	ldr	r3, [pc, #96]	; 1a718 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   1a6b4:	e59f1060 	ldr	r1, [pc, #96]	; 1a71c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   1a6b8:	ea001452 	b	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a6bc:	eb00150f 	bl	1fb00 <CLogger::Get()>
   1a6c0:	e59f1054 	ldr	r1, [pc, #84]	; 1a71c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   1a6c4:	e3a02002 	mov	r2, #2
   1a6c8:	e59f3050 	ldr	r3, [pc, #80]	; 1a720 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xec>
   1a6cc:	eb00144d 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a6d0:	e1a00004 	mov	r0, r4
   1a6d4:	ebffc001 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
   1a6d8:	e1a00004 	mov	r0, r4
   1a6dc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a6e0:	e3a0102c 	mov	r1, #44	; 0x2c
   1a6e4:	eaffc081 	b	a8f0 <CUSBRequest::operator delete(void*, unsigned int)>
   1a6e8:	e3a020c1 	mov	r2, #193	; 0xc1
   1a6ec:	e59f1030 	ldr	r1, [pc, #48]	; 1a724 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   1a6f0:	e59f0030 	ldr	r0, [pc, #48]	; 1a728 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   1a6f4:	eb000c01 	bl	1d700 <assertion_failed>
   1a6f8:	e3a020ba 	mov	r2, #186	; 0xba
   1a6fc:	e59f1020 	ldr	r1, [pc, #32]	; 1a724 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   1a700:	e59f0024 	ldr	r0, [pc, #36]	; 1a72c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf8>
   1a704:	eb000bfd 	bl	1d700 <assertion_failed>
   1a708:	e3a020c0 	mov	r2, #192	; 0xc0
   1a70c:	e59f1010 	ldr	r1, [pc, #16]	; 1a724 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   1a710:	e59f0018 	ldr	r0, [pc, #24]	; 1a730 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xfc>
   1a714:	eb000bf9 	bl	1d700 <assertion_failed>
   1a718:	0002ccd0 	.word	0x0002ccd0
   1a71c:	0002f6f8 	.word	0x0002f6f8
   1a720:	0002f694 	.word	0x0002f694
   1a724:	0002f638 	.word	0x0002f638
   1a728:	0002f668 	.word	0x0002f668
   1a72c:	0002c8e4 	.word	0x0002c8e4
   1a730:	0002f67c 	.word	0x0002f67c

0001a734 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   1a734:	e3520000 	cmp	r2, #0
   1a738:	0a000002 	beq	1a748 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   1a73c:	e1a01000 	mov	r1, r0
   1a740:	e1a00002 	mov	r0, r2
   1a744:	eaffffba 	b	1a634 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   1a748:	e3a020d7 	mov	r2, #215	; 0xd7
   1a74c:	e92d4010 	push	{r4, lr}
   1a750:	e59f1004 	ldr	r1, [pc, #4]	; 1a75c <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   1a754:	e59f0004 	ldr	r0, [pc, #4]	; 1a760 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   1a758:	eb000be8 	bl	1d700 <assertion_failed>
   1a75c:	0002f638 	.word	0x0002f638
   1a760:	0002c8c4 	.word	0x0002c8c4

0001a764 <CUSBBluetoothDevice::Configure()>:
   1a764:	e92d4070 	push	{r4, r5, r6, lr}
   1a768:	e24dd010 	sub	sp, sp, #16
   1a76c:	e1a05000 	mov	r5, r0
   1a770:	ebffdfd9 	bl	126dc <CUSBFunction::GetInterfaceNumber() const>
   1a774:	e2504000 	subs	r4, r0, #0
   1a778:	1a000044 	bne	1a890 <CUSBBluetoothDevice::Configure()+0x12c>
   1a77c:	e1a00005 	mov	r0, r5
   1a780:	ebffdf58 	bl	124e8 <CUSBFunction::GetNumEndpoints() const>
   1a784:	e3500003 	cmp	r0, #3
   1a788:	1a00003a 	bne	1a878 <CUSBBluetoothDevice::Configure()+0x114>
   1a78c:	e3a01005 	mov	r1, #5
   1a790:	e1a00005 	mov	r0, r5
   1a794:	ebffdf7f 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
   1a798:	e2504000 	subs	r4, r0, #0
   1a79c:	0a000044 	beq	1a8b4 <CUSBBluetoothDevice::Configure()+0x150>
   1a7a0:	e5d41003 	ldrb	r1, [r4, #3]
   1a7a4:	e201103f 	and	r1, r1, #63	; 0x3f
   1a7a8:	e3510002 	cmp	r1, #2
   1a7ac:	0a000010 	beq	1a7f4 <CUSBBluetoothDevice::Configure()+0x90>
   1a7b0:	e3510003 	cmp	r1, #3
   1a7b4:	1afffff4 	bne	1a78c <CUSBBluetoothDevice::Configure()+0x28>
   1a7b8:	e5953018 	ldr	r3, [r5, #24]
   1a7bc:	e1a00005 	mov	r0, r5
   1a7c0:	e3530000 	cmp	r3, #0
   1a7c4:	1a000044 	bne	1a8dc <CUSBBluetoothDevice::Configure()+0x178>
   1a7c8:	ebffdf52 	bl	12518 <CUSBFunction::GetDevice() const>
   1a7cc:	e1a01000 	mov	r1, r0
   1a7d0:	e3a00014 	mov	r0, #20
   1a7d4:	e58d100c 	str	r1, [sp, #12]
   1a7d8:	eb003411 	bl	27824 <operator new(unsigned int)>
   1a7dc:	e1a06000 	mov	r6, r0
   1a7e0:	e1a02004 	mov	r2, r4
   1a7e4:	e59d100c 	ldr	r1, [sp, #12]
   1a7e8:	ebffdd8c 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1a7ec:	e5856018 	str	r6, [r5, #24]
   1a7f0:	eaffffe5 	b	1a78c <CUSBBluetoothDevice::Configure()+0x28>
   1a7f4:	e1d430d2 	ldrsb	r3, [r4, #2]
   1a7f8:	e3530000 	cmp	r3, #0
   1a7fc:	ba00000e 	blt	1a83c <CUSBBluetoothDevice::Configure()+0xd8>
   1a800:	e5953020 	ldr	r3, [r5, #32]
   1a804:	e1a00005 	mov	r0, r5
   1a808:	e3530000 	cmp	r3, #0
   1a80c:	1a000032 	bne	1a8dc <CUSBBluetoothDevice::Configure()+0x178>
   1a810:	ebffdf40 	bl	12518 <CUSBFunction::GetDevice() const>
   1a814:	e1a01000 	mov	r1, r0
   1a818:	e3a00014 	mov	r0, #20
   1a81c:	e58d100c 	str	r1, [sp, #12]
   1a820:	eb0033ff 	bl	27824 <operator new(unsigned int)>
   1a824:	e1a06000 	mov	r6, r0
   1a828:	e1a02004 	mov	r2, r4
   1a82c:	e59d100c 	ldr	r1, [sp, #12]
   1a830:	ebffdd7a 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1a834:	e5856020 	str	r6, [r5, #32]
   1a838:	eaffffd3 	b	1a78c <CUSBBluetoothDevice::Configure()+0x28>
   1a83c:	e595301c 	ldr	r3, [r5, #28]
   1a840:	e1a00005 	mov	r0, r5
   1a844:	e3530000 	cmp	r3, #0
   1a848:	1a000023 	bne	1a8dc <CUSBBluetoothDevice::Configure()+0x178>
   1a84c:	ebffdf31 	bl	12518 <CUSBFunction::GetDevice() const>
   1a850:	e1a01000 	mov	r1, r0
   1a854:	e3a00014 	mov	r0, #20
   1a858:	e58d100c 	str	r1, [sp, #12]
   1a85c:	eb0033f0 	bl	27824 <operator new(unsigned int)>
   1a860:	e1a06000 	mov	r6, r0
   1a864:	e1a02004 	mov	r2, r4
   1a868:	e59d100c 	ldr	r1, [sp, #12]
   1a86c:	ebffdd6b 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1a870:	e585601c 	str	r6, [r5, #28]
   1a874:	eaffffc4 	b	1a78c <CUSBBluetoothDevice::Configure()+0x28>
   1a878:	e1a00005 	mov	r0, r5
   1a87c:	e59f10f4 	ldr	r1, [pc, #244]	; 1a978 <CUSBBluetoothDevice::Configure()+0x214>
   1a880:	ebffdf4f 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   1a884:	e1a00004 	mov	r0, r4
   1a888:	e28dd010 	add	sp, sp, #16
   1a88c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a890:	e3a04000 	mov	r4, #0
   1a894:	eb001499 	bl	1fb00 <CLogger::Get()>
   1a898:	e3a02002 	mov	r2, #2
   1a89c:	e59f30d8 	ldr	r3, [pc, #216]	; 1a97c <CUSBBluetoothDevice::Configure()+0x218>
   1a8a0:	e59f10d0 	ldr	r1, [pc, #208]	; 1a978 <CUSBBluetoothDevice::Configure()+0x214>
   1a8a4:	eb0013d7 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a8a8:	e1a00004 	mov	r0, r4
   1a8ac:	e28dd010 	add	sp, sp, #16
   1a8b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a8b4:	e595301c 	ldr	r3, [r5, #28]
   1a8b8:	e3530000 	cmp	r3, #0
   1a8bc:	0a000005 	beq	1a8d8 <CUSBBluetoothDevice::Configure()+0x174>
   1a8c0:	e5953020 	ldr	r3, [r5, #32]
   1a8c4:	e3530000 	cmp	r3, #0
   1a8c8:	0a000002 	beq	1a8d8 <CUSBBluetoothDevice::Configure()+0x174>
   1a8cc:	e5953018 	ldr	r3, [r5, #24]
   1a8d0:	e3530000 	cmp	r3, #0
   1a8d4:	1a000006 	bne	1a8f4 <CUSBBluetoothDevice::Configure()+0x190>
   1a8d8:	e1a00005 	mov	r0, r5
   1a8dc:	e3a04000 	mov	r4, #0
   1a8e0:	e59f1090 	ldr	r1, [pc, #144]	; 1a978 <CUSBBluetoothDevice::Configure()+0x214>
   1a8e4:	ebffdf36 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   1a8e8:	e1a00004 	mov	r0, r4
   1a8ec:	e28dd010 	add	sp, sp, #16
   1a8f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a8f4:	e1a00005 	mov	r0, r5
   1a8f8:	ebffde3c 	bl	121f0 <CUSBFunction::Configure()>
   1a8fc:	e2504000 	subs	r4, r0, #0
   1a900:	0a000012 	beq	1a950 <CUSBBluetoothDevice::Configure()+0x1ec>
   1a904:	e5950018 	ldr	r0, [r5, #24]
   1a908:	ebffddb7 	bl	11fec <CUSBEndpoint::GetMaxPacketSize() const>
   1a90c:	eb0033ca 	bl	2783c <operator new[](unsigned int)>
   1a910:	e595602c 	ldr	r6, [r5, #44]	; 0x2c
   1a914:	e5850024 	str	r0, [r5, #36]	; 0x24
   1a918:	e3560000 	cmp	r6, #0
   1a91c:	1a000011 	bne	1a968 <CUSBBluetoothDevice::Configure()+0x204>
   1a920:	e3a01001 	mov	r1, #1
   1a924:	e59f204c 	ldr	r2, [pc, #76]	; 1a978 <CUSBBluetoothDevice::Configure()+0x214>
   1a928:	e59f0050 	ldr	r0, [pc, #80]	; 1a980 <CUSBBluetoothDevice::Configure()+0x21c>
   1a92c:	eb003507 	bl	27d50 <CNumberPool::AllocateNumber(bool, char const*)>
   1a930:	e585002c 	str	r0, [r5, #44]	; 0x2c
   1a934:	eb000e4b 	bl	1e268 <CDeviceNameService::Get()>
   1a938:	e58d6000 	str	r6, [sp]
   1a93c:	e1a03005 	mov	r3, r5
   1a940:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   1a944:	e59f1038 	ldr	r1, [pc, #56]	; 1a984 <CUSBBluetoothDevice::Configure()+0x220>
   1a948:	eb000e52 	bl	1e298 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1a94c:	eaffffcc 	b	1a884 <CUSBBluetoothDevice::Configure()+0x120>
   1a950:	eb00146a 	bl	1fb00 <CLogger::Get()>
   1a954:	e3a02001 	mov	r2, #1
   1a958:	e59f3028 	ldr	r3, [pc, #40]	; 1a988 <CUSBBluetoothDevice::Configure()+0x224>
   1a95c:	e59f1014 	ldr	r1, [pc, #20]	; 1a978 <CUSBBluetoothDevice::Configure()+0x214>
   1a960:	eb0013a8 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a964:	eaffffc6 	b	1a884 <CUSBBluetoothDevice::Configure()+0x120>
   1a968:	e3a0208f 	mov	r2, #143	; 0x8f
   1a96c:	e59f1018 	ldr	r1, [pc, #24]	; 1a98c <CUSBBluetoothDevice::Configure()+0x228>
   1a970:	e59f0018 	ldr	r0, [pc, #24]	; 1a990 <CUSBBluetoothDevice::Configure()+0x22c>
   1a974:	eb000b61 	bl	1d700 <assertion_failed>
   1a978:	0002f6f8 	.word	0x0002f6f8
   1a97c:	0002f6a4 	.word	0x0002f6a4
   1a980:	00034bd8 	.word	0x00034bd8
   1a984:	0002f6f4 	.word	0x0002f6f4
   1a988:	0002c93c 	.word	0x0002c93c
   1a98c:	0002f638 	.word	0x0002f638
   1a990:	0002c954 	.word	0x0002c954

0001a994 <_GLOBAL__sub_I__ZN19CUSBBluetoothDevice18s_DeviceNumberPoolE>:
   1a994:	e92d4010 	push	{r4, lr}
   1a998:	e59f4020 	ldr	r4, [pc, #32]	; 1a9c0 <_GLOBAL__sub_I__ZN19CUSBBluetoothDevice18s_DeviceNumberPoolE+0x2c>
   1a99c:	e3a0203f 	mov	r2, #63	; 0x3f
   1a9a0:	e1a00004 	mov	r0, r4
   1a9a4:	e3a01001 	mov	r1, #1
   1a9a8:	eb0034d3 	bl	27cfc <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1a9ac:	e1a00004 	mov	r0, r4
   1a9b0:	e8bd4010 	pop	{r4, lr}
   1a9b4:	e59f2008 	ldr	r2, [pc, #8]	; 1a9c4 <_GLOBAL__sub_I__ZN19CUSBBluetoothDevice18s_DeviceNumberPoolE+0x30>
   1a9b8:	e59f1008 	ldr	r1, [pc, #8]	; 1a9c8 <_GLOBAL__sub_I__ZN19CUSBBluetoothDevice18s_DeviceNumberPoolE+0x34>
   1a9bc:	ea002bbd 	b	258b8 <__aeabi_atexit>
   1a9c0:	00034bd8 	.word	0x00034bd8
   1a9c4:	00034c44 	.word	0x00034c44
   1a9c8:	00027d4c 	.word	0x00027d4c

0001a9cc <CUSBCDCEthernetDevice::GetMACAddress() const>:
   1a9cc:	e2800024 	add	r0, r0, #36	; 0x24
   1a9d0:	e12fff1e 	bx	lr

0001a9d4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1a9d4:	e92d4070 	push	{r4, r5, r6, lr}
   1a9d8:	e59f3074 	ldr	r3, [pc, #116]	; 1aa54 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x80>
   1a9dc:	e5905020 	ldr	r5, [r0, #32]
   1a9e0:	e2832038 	add	r2, r3, #56	; 0x38
   1a9e4:	e3550000 	cmp	r5, #0
   1a9e8:	e1a04000 	mov	r4, r0
   1a9ec:	e5803000 	str	r3, [r0]
   1a9f0:	e5802018 	str	r2, [r0, #24]
   1a9f4:	0a000004 	beq	1aa0c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x38>
   1a9f8:	e1a00005 	mov	r0, r5
   1a9fc:	ebffdd65 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   1aa00:	e1a00005 	mov	r0, r5
   1aa04:	e3a01014 	mov	r1, #20
   1aa08:	eb003393 	bl	2785c <operator delete(void*, unsigned int)>
   1aa0c:	e3a03000 	mov	r3, #0
   1aa10:	e594501c 	ldr	r5, [r4, #28]
   1aa14:	e5843020 	str	r3, [r4, #32]
   1aa18:	e1550003 	cmp	r5, r3
   1aa1c:	0a000004 	beq	1aa34 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x60>
   1aa20:	e1a00005 	mov	r0, r5
   1aa24:	ebffdd5b 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   1aa28:	e1a00005 	mov	r0, r5
   1aa2c:	e3a01014 	mov	r1, #20
   1aa30:	eb003389 	bl	2785c <operator delete(void*, unsigned int)>
   1aa34:	e3a03000 	mov	r3, #0
   1aa38:	e2840024 	add	r0, r4, #36	; 0x24
   1aa3c:	e584301c 	str	r3, [r4, #28]
   1aa40:	eb003295 	bl	2749c <CMACAddress::~CMACAddress()>
   1aa44:	e1a00004 	mov	r0, r4
   1aa48:	ebffddbf 	bl	1214c <CUSBFunction::~CUSBFunction()>
   1aa4c:	e1a00004 	mov	r0, r4
   1aa50:	e8bd8070 	pop	{r4, r5, r6, pc}
   1aa54:	0002f74c 	.word	0x0002f74c

0001aa58 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1aa58:	e2400018 	sub	r0, r0, #24
   1aa5c:	eaffffdc 	b	1a9d4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

0001aa60 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1aa60:	e92d4010 	push	{r4, lr}
   1aa64:	e1a04000 	mov	r4, r0
   1aa68:	ebffffd9 	bl	1a9d4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   1aa6c:	e1a00004 	mov	r0, r4
   1aa70:	e3a0102c 	mov	r1, #44	; 0x2c
   1aa74:	eb003378 	bl	2785c <operator delete(void*, unsigned int)>
   1aa78:	e1a00004 	mov	r0, r4
   1aa7c:	e8bd8010 	pop	{r4, pc}

0001aa80 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1aa80:	e2400018 	sub	r0, r0, #24
   1aa84:	eafffff5 	b	1aa60 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

0001aa88 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   1aa88:	e92d4070 	push	{r4, r5, r6, lr}
   1aa8c:	e590301c 	ldr	r3, [r0, #28]
   1aa90:	e24dd038 	sub	sp, sp, #56	; 0x38
   1aa94:	e3530000 	cmp	r3, #0
   1aa98:	0a000026 	beq	1ab38 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xb0>
   1aa9c:	e3510000 	cmp	r1, #0
   1aaa0:	0a000028 	beq	1ab48 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc0>
   1aaa4:	e3a05000 	mov	r5, #0
   1aaa8:	e1a04000 	mov	r4, r0
   1aaac:	e1a06002 	mov	r6, r2
   1aab0:	e58d5000 	str	r5, [sp]
   1aab4:	e1a02001 	mov	r2, r1
   1aab8:	e28d000c 	add	r0, sp, #12
   1aabc:	e1a01003 	mov	r1, r3
   1aac0:	e3a03d19 	mov	r3, #1600	; 0x640
   1aac4:	ebffbee3 	bl	a658 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1aac8:	e28d000c 	add	r0, sp, #12
   1aacc:	ebffbf6d 	bl	a888 <CUSBRequest::SetCompleteOnNAK()>
   1aad0:	e1a00004 	mov	r0, r4
   1aad4:	ebffdea4 	bl	1256c <CUSBFunction::GetHost() const>
   1aad8:	e5903000 	ldr	r3, [r0]
   1aadc:	e1a02005 	mov	r2, r5
   1aae0:	e5933008 	ldr	r3, [r3, #8]
   1aae4:	e28d100c 	add	r1, sp, #12
   1aae8:	e12fff33 	blx	r3
   1aaec:	e2504000 	subs	r4, r0, #0
   1aaf0:	1a000005 	bne	1ab0c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x84>
   1aaf4:	e3a04000 	mov	r4, #0
   1aaf8:	e28d000c 	add	r0, sp, #12
   1aafc:	ebffbef7 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
   1ab00:	e1a00004 	mov	r0, r4
   1ab04:	e28dd038 	add	sp, sp, #56	; 0x38
   1ab08:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ab0c:	e28d000c 	add	r0, sp, #12
   1ab10:	ebffbf05 	bl	a72c <CUSBRequest::GetResultLength() const>
   1ab14:	e3500000 	cmp	r0, #0
   1ab18:	0afffff5 	beq	1aaf4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   1ab1c:	e3560000 	cmp	r6, #0
   1ab20:	15860000 	strne	r0, [r6]
   1ab24:	1afffff3 	bne	1aaf8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x70>
   1ab28:	e3a020c3 	mov	r2, #195	; 0xc3
   1ab2c:	e59f1024 	ldr	r1, [pc, #36]	; 1ab58 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   1ab30:	e59f0024 	ldr	r0, [pc, #36]	; 1ab5c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd4>
   1ab34:	eb000af1 	bl	1d700 <assertion_failed>
   1ab38:	e3a020b2 	mov	r2, #178	; 0xb2
   1ab3c:	e59f1014 	ldr	r1, [pc, #20]	; 1ab58 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   1ab40:	e59f0018 	ldr	r0, [pc, #24]	; 1ab60 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   1ab44:	eb000aed 	bl	1d700 <assertion_failed>
   1ab48:	e3a020b3 	mov	r2, #179	; 0xb3
   1ab4c:	e59f1004 	ldr	r1, [pc, #4]	; 1ab58 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   1ab50:	e59f000c 	ldr	r0, [pc, #12]	; 1ab64 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   1ab54:	eb000ae9 	bl	1d700 <assertion_failed>
   1ab58:	0002f700 	.word	0x0002f700
   1ab5c:	0002f2dc 	.word	0x0002f2dc
   1ab60:	0002f268 	.word	0x0002f268
   1ab64:	0002e89c 	.word	0x0002e89c

0001ab68 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   1ab68:	e2400018 	sub	r0, r0, #24
   1ab6c:	eaffffc5 	b	1aa88 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>

0001ab70 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   1ab70:	e92d4070 	push	{r4, r5, r6, lr}
   1ab74:	e5903020 	ldr	r3, [r0, #32]
   1ab78:	e24dd008 	sub	sp, sp, #8
   1ab7c:	e3530000 	cmp	r3, #0
   1ab80:	0a000011 	beq	1abcc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x5c>
   1ab84:	e3510000 	cmp	r1, #0
   1ab88:	e1a05001 	mov	r5, r1
   1ab8c:	0a000012 	beq	1abdc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x6c>
   1ab90:	e3520d19 	cmp	r2, #1600	; 0x640
   1ab94:	e1a06002 	mov	r6, r2
   1ab98:	8a000013 	bhi	1abec <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x7c>
   1ab9c:	e1a04000 	mov	r4, r0
   1aba0:	ebffde71 	bl	1256c <CUSBFunction::GetHost() const>
   1aba4:	e3a0c000 	mov	ip, #0
   1aba8:	e5941020 	ldr	r1, [r4, #32]
   1abac:	e1a03006 	mov	r3, r6
   1abb0:	e1a02005 	mov	r2, r5
   1abb4:	e58dc000 	str	ip, [sp]
   1abb8:	ebffb97a 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1abbc:	e1e00000 	mvn	r0, r0
   1abc0:	e1a00fa0 	lsr	r0, r0, #31
   1abc4:	e28dd008 	add	sp, sp, #8
   1abc8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1abcc:	e3a020aa 	mov	r2, #170	; 0xaa
   1abd0:	e59f1024 	ldr	r1, [pc, #36]	; 1abfc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   1abd4:	e59f0024 	ldr	r0, [pc, #36]	; 1ac00 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x90>
   1abd8:	eb000ac8 	bl	1d700 <assertion_failed>
   1abdc:	e3a020ab 	mov	r2, #171	; 0xab
   1abe0:	e59f1014 	ldr	r1, [pc, #20]	; 1abfc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   1abe4:	e59f0018 	ldr	r0, [pc, #24]	; 1ac04 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x94>
   1abe8:	eb000ac4 	bl	1d700 <assertion_failed>
   1abec:	e3a020ac 	mov	r2, #172	; 0xac
   1abf0:	e59f1004 	ldr	r1, [pc, #4]	; 1abfc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   1abf4:	e59f000c 	ldr	r0, [pc, #12]	; 1ac08 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   1abf8:	eb000ac0 	bl	1d700 <assertion_failed>
   1abfc:	0002f700 	.word	0x0002f700
   1ac00:	0002f2f0 	.word	0x0002f2f0
   1ac04:	0002e89c 	.word	0x0002e89c
   1ac08:	0002f714 	.word	0x0002f714

0001ac0c <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   1ac0c:	e2400018 	sub	r0, r0, #24
   1ac10:	eaffffd6 	b	1ab70 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>

0001ac14 <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   1ac14:	e280000c 	add	r0, r0, #12
   1ac18:	e12fff1e 	bx	lr

0001ac1c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   1ac1c:	e92d4010 	push	{r4, lr}
   1ac20:	e1a04000 	mov	r4, r0
   1ac24:	ebffdddb 	bl	12398 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1ac28:	e3a02000 	mov	r2, #0
   1ac2c:	e59f3024 	ldr	r3, [pc, #36]	; 1ac58 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x3c>
   1ac30:	e584201c 	str	r2, [r4, #28]
   1ac34:	e2831008 	add	r1, r3, #8
   1ac38:	e2833040 	add	r3, r3, #64	; 0x40
   1ac3c:	e5841000 	str	r1, [r4]
   1ac40:	e5843018 	str	r3, [r4, #24]
   1ac44:	e5842020 	str	r2, [r4, #32]
   1ac48:	e2840024 	add	r0, r4, #36	; 0x24
   1ac4c:	eb00320f 	bl	27490 <CMACAddress::CMACAddress()>
   1ac50:	e1a00004 	mov	r0, r4
   1ac54:	e8bd8010 	pop	{r4, pc}
   1ac58:	0002f744 	.word	0x0002f744

0001ac5c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   1ac5c:	e92d4030 	push	{r4, r5, lr}
   1ac60:	e24dd01c 	sub	sp, sp, #28
   1ac64:	e1a05001 	mov	r5, r1
   1ac68:	e1a04000 	mov	r4, r0
   1ac6c:	ebffde29 	bl	12518 <CUSBFunction::GetDevice() const>
   1ac70:	e1a01000 	mov	r1, r0
   1ac74:	e28d000c 	add	r0, sp, #12
   1ac78:	eb00022a 	bl	1b528 <CUSBString::CUSBString(CUSBDevice*)>
   1ac7c:	e3550000 	cmp	r5, #0
   1ac80:	1a000005 	bne	1ac9c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   1ac84:	e3a05000 	mov	r5, #0
   1ac88:	e28d000c 	add	r0, sp, #12
   1ac8c:	eb000268 	bl	1b634 <CUSBString::~CUSBString()>
   1ac90:	e1a00005 	mov	r0, r5
   1ac94:	e28dd01c 	add	sp, sp, #28
   1ac98:	e8bd8030 	pop	{r4, r5, pc}
   1ac9c:	e28d000c 	add	r0, sp, #12
   1aca0:	eb000307 	bl	1b8c4 <CUSBString::GetLanguageID()>
   1aca4:	e1a01005 	mov	r1, r5
   1aca8:	e1a02000 	mov	r2, r0
   1acac:	e28d000c 	add	r0, sp, #12
   1acb0:	eb00026f 	bl	1b674 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   1acb4:	e2505000 	subs	r5, r0, #0
   1acb8:	0afffff1 	beq	1ac84 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1acbc:	e28d000c 	add	r0, sp, #12
   1acc0:	eb0002fd 	bl	1b8bc <CUSBString::Get() const>
   1acc4:	e3500000 	cmp	r0, #0
   1acc8:	12801002 	addne	r1, r0, #2
   1accc:	128dc003 	addne	ip, sp, #3
   1acd0:	1280000e 	addne	r0, r0, #14
   1acd4:	0a000018 	beq	1ad3c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe0>
   1acd8:	e15130d2 	ldrsb	r3, [r1, #-2]
   1acdc:	e3530039 	cmp	r3, #57	; 0x39
   1ace0:	c2433007 	subgt	r3, r3, #7
   1ace4:	e6ef3073 	uxtb	r3, r3
   1ace8:	e2433030 	sub	r3, r3, #48	; 0x30
   1acec:	e6ef2073 	uxtb	r2, r3
   1acf0:	e352000f 	cmp	r2, #15
   1acf4:	8affffe2 	bhi	1ac84 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1acf8:	e15130d1 	ldrsb	r3, [r1, #-1]
   1acfc:	e3530039 	cmp	r3, #57	; 0x39
   1ad00:	c2433007 	subgt	r3, r3, #7
   1ad04:	e6ef3073 	uxtb	r3, r3
   1ad08:	e2433030 	sub	r3, r3, #48	; 0x30
   1ad0c:	e6ef3073 	uxtb	r3, r3
   1ad10:	e353000f 	cmp	r3, #15
   1ad14:	8affffda 	bhi	1ac84 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1ad18:	e2811002 	add	r1, r1, #2
   1ad1c:	e1833202 	orr	r3, r3, r2, lsl #4
   1ad20:	e1500001 	cmp	r0, r1
   1ad24:	e5ec3001 	strb	r3, [ip, #1]!
   1ad28:	1affffea 	bne	1acd8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   1ad2c:	e2840024 	add	r0, r4, #36	; 0x24
   1ad30:	e28d1004 	add	r1, sp, #4
   1ad34:	eb0031f6 	bl	27514 <CMACAddress::Set(unsigned char const*)>
   1ad38:	eaffffd2 	b	1ac88 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   1ad3c:	e3a020d3 	mov	r2, #211	; 0xd3
   1ad40:	e59f1004 	ldr	r1, [pc, #4]	; 1ad4c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf0>
   1ad44:	e59f0004 	ldr	r0, [pc, #4]	; 1ad50 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf4>
   1ad48:	eb000a6c 	bl	1d700 <assertion_failed>
   1ad4c:	0002f700 	.word	0x0002f700
   1ad50:	0002f734 	.word	0x0002f734

0001ad54 <CUSBCDCEthernetDevice::Configure()>:
   1ad54:	e92d4070 	push	{r4, r5, r6, lr}
   1ad58:	e1a05000 	mov	r5, r0
   1ad5c:	e24dd020 	sub	sp, sp, #32
   1ad60:	ea000002 	b	1ad70 <CUSBCDCEthernetDevice::Configure()+0x1c>
   1ad64:	e5d43002 	ldrb	r3, [r4, #2]
   1ad68:	e353000f 	cmp	r3, #15
   1ad6c:	0a000011 	beq	1adb8 <CUSBCDCEthernetDevice::Configure()+0x64>
   1ad70:	e3a01024 	mov	r1, #36	; 0x24
   1ad74:	e1a00005 	mov	r0, r5
   1ad78:	ebffde06 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
   1ad7c:	e2504000 	subs	r4, r0, #0
   1ad80:	1afffff7 	bne	1ad64 <CUSBCDCEthernetDevice::Configure()+0x10>
   1ad84:	e1a00005 	mov	r0, r5
   1ad88:	e59f11f4 	ldr	r1, [pc, #500]	; 1af84 <CUSBCDCEthernetDevice::Configure()+0x230>
   1ad8c:	ebffde0c 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   1ad90:	ea000046 	b	1aeb0 <CUSBCDCEthernetDevice::Configure()+0x15c>
   1ad94:	e5d32006 	ldrb	r2, [r3, #6]
   1ad98:	e3520000 	cmp	r2, #0
   1ad9c:	1a000005 	bne	1adb8 <CUSBCDCEthernetDevice::Configure()+0x64>
   1ada0:	e5d32007 	ldrb	r2, [r3, #7]
   1ada4:	e3520000 	cmp	r2, #0
   1ada8:	1a000002 	bne	1adb8 <CUSBCDCEthernetDevice::Configure()+0x64>
   1adac:	e5d33004 	ldrb	r3, [r3, #4]
   1adb0:	e3530001 	cmp	r3, #1
   1adb4:	8a000008 	bhi	1addc <CUSBCDCEthernetDevice::Configure()+0x88>
   1adb8:	e3a01004 	mov	r1, #4
   1adbc:	e1a00005 	mov	r0, r5
   1adc0:	ebffddf4 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
   1adc4:	e2503000 	subs	r3, r0, #0
   1adc8:	0a000066 	beq	1af68 <CUSBCDCEthernetDevice::Configure()+0x214>
   1adcc:	e5d32005 	ldrb	r2, [r3, #5]
   1add0:	e352000a 	cmp	r2, #10
   1add4:	1afffff7 	bne	1adb8 <CUSBCDCEthernetDevice::Configure()+0x64>
   1add8:	eaffffed 	b	1ad94 <CUSBCDCEthernetDevice::Configure()+0x40>
   1addc:	e5d41003 	ldrb	r1, [r4, #3]
   1ade0:	e1a00005 	mov	r0, r5
   1ade4:	ebffff9c 	bl	1ac5c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   1ade8:	e2504000 	subs	r4, r0, #0
   1adec:	0a00002a 	beq	1ae9c <CUSBCDCEthernetDevice::Configure()+0x148>
   1adf0:	e28d0010 	add	r0, sp, #16
   1adf4:	eb00255e 	bl	24374 <CString::CString()>
   1adf8:	e28d1010 	add	r1, sp, #16
   1adfc:	e2850024 	add	r0, r5, #36	; 0x24
   1ae00:	eb00321d 	bl	2767c <CMACAddress::Format(CString*) const>
   1ae04:	eb00133d 	bl	1fb00 <CLogger::Get()>
   1ae08:	e1a04000 	mov	r4, r0
   1ae0c:	e28d0010 	add	r0, sp, #16
   1ae10:	eb00256f 	bl	243d4 <CString::operator char const*() const>
   1ae14:	e1a02000 	mov	r2, r0
   1ae18:	e59f3168 	ldr	r3, [pc, #360]	; 1af88 <CUSBCDCEthernetDevice::Configure()+0x234>
   1ae1c:	e58d2000 	str	r2, [sp]
   1ae20:	e1a00004 	mov	r0, r4
   1ae24:	e3a02004 	mov	r2, #4
   1ae28:	e59f1154 	ldr	r1, [pc, #340]	; 1af84 <CUSBCDCEthernetDevice::Configure()+0x230>
   1ae2c:	eb001275 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ae30:	ea000003 	b	1ae44 <CUSBCDCEthernetDevice::Configure()+0xf0>
   1ae34:	e5d43003 	ldrb	r3, [r4, #3]
   1ae38:	e203303f 	and	r3, r3, #63	; 0x3f
   1ae3c:	e3530002 	cmp	r3, #2
   1ae40:	0a00001d 	beq	1aebc <CUSBCDCEthernetDevice::Configure()+0x168>
   1ae44:	e3a01005 	mov	r1, #5
   1ae48:	e1a00005 	mov	r0, r5
   1ae4c:	ebffddd1 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
   1ae50:	e2504000 	subs	r4, r0, #0
   1ae54:	1afffff6 	bne	1ae34 <CUSBCDCEthernetDevice::Configure()+0xe0>
   1ae58:	e595301c 	ldr	r3, [r5, #28]
   1ae5c:	e1a00005 	mov	r0, r5
   1ae60:	e3530000 	cmp	r3, #0
   1ae64:	0a00002c 	beq	1af1c <CUSBCDCEthernetDevice::Configure()+0x1c8>
   1ae68:	e5953020 	ldr	r3, [r5, #32]
   1ae6c:	e3530000 	cmp	r3, #0
   1ae70:	0a000029 	beq	1af1c <CUSBCDCEthernetDevice::Configure()+0x1c8>
   1ae74:	ebffdcdd 	bl	121f0 <CUSBFunction::Configure()>
   1ae78:	e2504000 	subs	r4, r0, #0
   1ae7c:	0a000020 	beq	1af04 <CUSBCDCEthernetDevice::Configure()+0x1b0>
   1ae80:	e2850018 	add	r0, r5, #24
   1ae84:	eb00321d 	bl	27700 <CNetDevice::AddNetDevice()>
   1ae88:	e28d0010 	add	r0, sp, #16
   1ae8c:	eb002505 	bl	242a8 <CString::~CString()>
   1ae90:	e1a00004 	mov	r0, r4
   1ae94:	e28dd020 	add	sp, sp, #32
   1ae98:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ae9c:	eb001317 	bl	1fb00 <CLogger::Get()>
   1aea0:	e3a02001 	mov	r2, #1
   1aea4:	e59f30e0 	ldr	r3, [pc, #224]	; 1af8c <CUSBCDCEthernetDevice::Configure()+0x238>
   1aea8:	e59f10d4 	ldr	r1, [pc, #212]	; 1af84 <CUSBCDCEthernetDevice::Configure()+0x230>
   1aeac:	eb001255 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1aeb0:	e1a00004 	mov	r0, r4
   1aeb4:	e28dd020 	add	sp, sp, #32
   1aeb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1aebc:	e1d430d2 	ldrsb	r3, [r4, #2]
   1aec0:	e3530000 	cmp	r3, #0
   1aec4:	ba000018 	blt	1af2c <CUSBCDCEthernetDevice::Configure()+0x1d8>
   1aec8:	e5953020 	ldr	r3, [r5, #32]
   1aecc:	e1a00005 	mov	r0, r5
   1aed0:	e3530000 	cmp	r3, #0
   1aed4:	1a000010 	bne	1af1c <CUSBCDCEthernetDevice::Configure()+0x1c8>
   1aed8:	ebffdd8e 	bl	12518 <CUSBFunction::GetDevice() const>
   1aedc:	e1a01000 	mov	r1, r0
   1aee0:	e3a00014 	mov	r0, #20
   1aee4:	e58d100c 	str	r1, [sp, #12]
   1aee8:	eb00324d 	bl	27824 <operator new(unsigned int)>
   1aeec:	e1a06000 	mov	r6, r0
   1aef0:	e1a02004 	mov	r2, r4
   1aef4:	e59d100c 	ldr	r1, [sp, #12]
   1aef8:	ebffdbc8 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1aefc:	e5856020 	str	r6, [r5, #32]
   1af00:	eaffffcf 	b	1ae44 <CUSBCDCEthernetDevice::Configure()+0xf0>
   1af04:	eb0012fd 	bl	1fb00 <CLogger::Get()>
   1af08:	e3a02001 	mov	r2, #1
   1af0c:	e59f307c 	ldr	r3, [pc, #124]	; 1af90 <CUSBCDCEthernetDevice::Configure()+0x23c>
   1af10:	e59f106c 	ldr	r1, [pc, #108]	; 1af84 <CUSBCDCEthernetDevice::Configure()+0x230>
   1af14:	eb00123b 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1af18:	eaffffda 	b	1ae88 <CUSBCDCEthernetDevice::Configure()+0x134>
   1af1c:	e59f1060 	ldr	r1, [pc, #96]	; 1af84 <CUSBCDCEthernetDevice::Configure()+0x230>
   1af20:	ebffdda7 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   1af24:	e3a04000 	mov	r4, #0
   1af28:	eaffffd6 	b	1ae88 <CUSBCDCEthernetDevice::Configure()+0x134>
   1af2c:	e595301c 	ldr	r3, [r5, #28]
   1af30:	e1a00005 	mov	r0, r5
   1af34:	e3530000 	cmp	r3, #0
   1af38:	1afffff7 	bne	1af1c <CUSBCDCEthernetDevice::Configure()+0x1c8>
   1af3c:	ebffdd75 	bl	12518 <CUSBFunction::GetDevice() const>
   1af40:	e1a01000 	mov	r1, r0
   1af44:	e3a00014 	mov	r0, #20
   1af48:	e58d100c 	str	r1, [sp, #12]
   1af4c:	eb003234 	bl	27824 <operator new(unsigned int)>
   1af50:	e1a06000 	mov	r6, r0
   1af54:	e1a02004 	mov	r2, r4
   1af58:	e59d100c 	ldr	r1, [sp, #12]
   1af5c:	ebffdbaf 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1af60:	e585601c 	str	r6, [r5, #28]
   1af64:	eaffffb6 	b	1ae44 <CUSBCDCEthernetDevice::Configure()+0xf0>
   1af68:	e1a04003 	mov	r4, r3
   1af6c:	e1a00005 	mov	r0, r5
   1af70:	e59f100c 	ldr	r1, [pc, #12]	; 1af84 <CUSBCDCEthernetDevice::Configure()+0x230>
   1af74:	ebffdd92 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   1af78:	e1a00004 	mov	r0, r4
   1af7c:	e28dd020 	add	sp, sp, #32
   1af80:	e8bd8070 	pop	{r4, r5, r6, pc}
   1af84:	0002f7ac 	.word	0x0002f7ac
   1af88:	0002f390 	.word	0x0002f390
   1af8c:	0002f570 	.word	0x0002f570
   1af90:	0002c93c 	.word	0x0002c93c

0001af94 <CNetDevice::IsLinkUp()>:
   1af94:	e3a00001 	mov	r0, #1
   1af98:	e12fff1e 	bx	lr

0001af9c <CNetDevice::GetLinkSpeed()>:
   1af9c:	e3a00006 	mov	r0, #6
   1afa0:	e12fff1e 	bx	lr

0001afa4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   1afa4:	e3a03000 	mov	r3, #0
   1afa8:	e92d4070 	push	{r4, r5, r6, lr}
   1afac:	e1510003 	cmp	r1, r3
   1afb0:	e0814002 	add	r4, r1, r2
   1afb4:	e8800006 	stm	r0, {r1, r2}
   1afb8:	e5801010 	str	r1, [r0, #16]
   1afbc:	e5801018 	str	r1, [r0, #24]
   1afc0:	e580400c 	str	r4, [r0, #12]
   1afc4:	e5c03008 	strb	r3, [r0, #8]
   1afc8:	e5803014 	str	r3, [r0, #20]
   1afcc:	0a00003f 	beq	1b0d0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x12c>
   1afd0:	e2423004 	sub	r3, r2, #4
   1afd4:	e3530f7f 	cmp	r3, #508	; 0x1fc
   1afd8:	88bd8070 	pophi	{r4, r5, r6, pc}
   1afdc:	e5d13000 	ldrb	r3, [r1]
   1afe0:	e3530009 	cmp	r3, #9
   1afe4:	18bd8070 	popne	{r4, r5, r6, pc}
   1afe8:	e5d1c001 	ldrb	ip, [r1, #1]
   1afec:	e35c0002 	cmp	ip, #2
   1aff0:	18bd8070 	popne	{r4, r5, r6, pc}
   1aff4:	e5d13002 	ldrb	r3, [r1, #2]
   1aff8:	e5d1e003 	ldrb	lr, [r1, #3]
   1affc:	e183340e 	orr	r3, r3, lr, lsl #8
   1b000:	e1530002 	cmp	r3, r2
   1b004:	88bd8070 	pophi	{r4, r5, r6, pc}
   1b008:	30814003 	addcc	r4, r1, r3
   1b00c:	e2813002 	add	r3, r1, #2
   1b010:	3580400c 	strcc	r4, [r0, #12]
   1b014:	e1540003 	cmp	r4, r3
   1b018:	9a000030 	bls	1b0e0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x13c>
   1b01c:	e3a05000 	mov	r5, #0
   1b020:	e3a02009 	mov	r2, #9
   1b024:	e1a0e005 	mov	lr, r5
   1b028:	ea000008 	b	1b050 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xac>
   1b02c:	e35c0002 	cmp	ip, #2
   1b030:	0a000020 	beq	1b0b8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x114>
   1b034:	e2832002 	add	r2, r3, #2
   1b038:	e1540002 	cmp	r4, r2
   1b03c:	9a000028 	bls	1b0e4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x140>
   1b040:	e1a01003 	mov	r1, r3
   1b044:	e1a0e00c 	mov	lr, ip
   1b048:	e5d32000 	ldrb	r2, [r3]
   1b04c:	e5d3c001 	ldrb	ip, [r3, #1]
   1b050:	e0813002 	add	r3, r1, r2
   1b054:	e1530004 	cmp	r3, r4
   1b058:	8a00000a 	bhi	1b088 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   1b05c:	e35c0004 	cmp	ip, #4
   1b060:	0a00000a 	beq	1b090 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xec>
   1b064:	e35c0005 	cmp	ip, #5
   1b068:	1affffef 	bne	1b02c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x88>
   1b06c:	e31e00fd 	tst	lr, #253	; 0xfd
   1b070:	0a000004 	beq	1b088 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   1b074:	e3550000 	cmp	r5, #0
   1b078:	0a000012 	beq	1b0c8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x124>
   1b07c:	e2422007 	sub	r2, r2, #7
   1b080:	e31200fd 	tst	r2, #253	; 0xfd
   1b084:	0affffea 	beq	1b034 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x90>
   1b088:	e5801018 	str	r1, [r0, #24]
   1b08c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b090:	e35e0000 	cmp	lr, #0
   1b094:	0afffffb 	beq	1b088 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   1b098:	e5d15005 	ldrb	r5, [r1, #5]
   1b09c:	e3a0e009 	mov	lr, #9
   1b0a0:	e2455001 	sub	r5, r5, #1
   1b0a4:	e16f5f15 	clz	r5, r5
   1b0a8:	e1a052a5 	lsr	r5, r5, #5
   1b0ac:	e152000e 	cmp	r2, lr
   1b0b0:	0affffdf 	beq	1b034 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x90>
   1b0b4:	eafffff3 	b	1b088 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   1b0b8:	e35e0000 	cmp	lr, #0
   1b0bc:	1afffff1 	bne	1b088 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe4>
   1b0c0:	e3a0e009 	mov	lr, #9
   1b0c4:	eafffff8 	b	1b0ac <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x108>
   1b0c8:	e3a0e007 	mov	lr, #7
   1b0cc:	eafffff6 	b	1b0ac <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x108>
   1b0d0:	e3a02024 	mov	r2, #36	; 0x24
   1b0d4:	e59f101c 	ldr	r1, [pc, #28]	; 1b0f8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x154>
   1b0d8:	e59f001c 	ldr	r0, [pc, #28]	; 1b0fc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x158>
   1b0dc:	eb000987 	bl	1d700 <assertion_failed>
   1b0e0:	e1a03001 	mov	r3, r1
   1b0e4:	e1540003 	cmp	r4, r3
   1b0e8:	03a03001 	moveq	r3, #1
   1b0ec:	15803018 	strne	r3, [r0, #24]
   1b0f0:	05c03008 	strbeq	r3, [r0, #8]
   1b0f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b0f8:	0002f7b4 	.word	0x0002f7b4
   1b0fc:	0002f7c8 	.word	0x0002f7c8

0001b100 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   1b100:	e3510000 	cmp	r1, #0
   1b104:	e92d4010 	push	{r4, lr}
   1b108:	0a00000e 	beq	1b148 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x48>
   1b10c:	e591e000 	ldr	lr, [r1]
   1b110:	e591c004 	ldr	ip, [r1, #4]
   1b114:	e5d12008 	ldrb	r2, [r1, #8]
   1b118:	e591400c 	ldr	r4, [r1, #12]
   1b11c:	e580e000 	str	lr, [r0]
   1b120:	e580c004 	str	ip, [r0, #4]
   1b124:	e591e010 	ldr	lr, [r1, #16]
   1b128:	e591c014 	ldr	ip, [r1, #20]
   1b12c:	e5c02008 	strb	r2, [r0, #8]
   1b130:	e5912018 	ldr	r2, [r1, #24]
   1b134:	e580400c 	str	r4, [r0, #12]
   1b138:	e580e010 	str	lr, [r0, #16]
   1b13c:	e580c014 	str	ip, [r0, #20]
   1b140:	e5802018 	str	r2, [r0, #24]
   1b144:	e8bd8010 	pop	{r4, pc}
   1b148:	e3a02088 	mov	r2, #136	; 0x88
   1b14c:	e59f1004 	ldr	r1, [pc, #4]	; 1b158 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x58>
   1b150:	e59f0004 	ldr	r0, [pc, #4]	; 1b15c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x5c>
   1b154:	eb000969 	bl	1d700 <assertion_failed>
   1b158:	0002f7b4 	.word	0x0002f7b4
   1b15c:	0002f7d8 	.word	0x0002f7d8

0001b160 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   1b160:	e12fff1e 	bx	lr

0001b164 <CUSBConfigurationParser::IsValid() const>:
   1b164:	e5d00008 	ldrb	r0, [r0, #8]
   1b168:	e12fff1e 	bx	lr

0001b16c <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   1b16c:	e5d03008 	ldrb	r3, [r0, #8]
   1b170:	e92d4010 	push	{r4, lr}
   1b174:	e3530000 	cmp	r3, #0
   1b178:	0a00001d 	beq	1b1f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>
   1b17c:	e5903010 	ldr	r3, [r0, #16]
   1b180:	e590c00c 	ldr	ip, [r0, #12]
   1b184:	e153000c 	cmp	r3, ip
   1b188:	3a000008 	bcc	1b1b0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x44>
   1b18c:	ea000016 	b	1b1ec <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x80>
   1b190:	e3510005 	cmp	r1, #5
   1b194:	03520004 	cmpeq	r2, #4
   1b198:	0a000013 	beq	1b1ec <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x80>
   1b19c:	e1520001 	cmp	r2, r1
   1b1a0:	0a00000c 	beq	1b1d8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x6c>
   1b1a4:	e153000c 	cmp	r3, ip
   1b1a8:	e5803010 	str	r3, [r0, #16]
   1b1ac:	0a00000e 	beq	1b1ec <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x80>
   1b1b0:	e5d3e000 	ldrb	lr, [r3]
   1b1b4:	e1a04003 	mov	r4, r3
   1b1b8:	e5d32001 	ldrb	r2, [r3, #1]
   1b1bc:	e083300e 	add	r3, r3, lr
   1b1c0:	e153000c 	cmp	r3, ip
   1b1c4:	9afffff1 	bls	1b190 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x24>
   1b1c8:	e3a020af 	mov	r2, #175	; 0xaf
   1b1cc:	e59f1030 	ldr	r1, [pc, #48]	; 1b204 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   1b1d0:	e59f0030 	ldr	r0, [pc, #48]	; 1b208 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   1b1d4:	eb000949 	bl	1d700 <assertion_failed>
   1b1d8:	e5803010 	str	r3, [r0, #16]
   1b1dc:	e5804018 	str	r4, [r0, #24]
   1b1e0:	e5804014 	str	r4, [r0, #20]
   1b1e4:	e1a00004 	mov	r0, r4
   1b1e8:	e8bd8010 	pop	{r4, pc}
   1b1ec:	e3a04000 	mov	r4, #0
   1b1f0:	eafffffa 	b	1b1e0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x74>
   1b1f4:	e3a020a5 	mov	r2, #165	; 0xa5
   1b1f8:	e59f1004 	ldr	r1, [pc, #4]	; 1b204 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   1b1fc:	e59f0008 	ldr	r0, [pc, #8]	; 1b20c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa0>
   1b200:	eb00093e 	bl	1d700 <assertion_failed>
   1b204:	0002f7b4 	.word	0x0002f7b4
   1b208:	0002f7e8 	.word	0x0002f7e8
   1b20c:	0002d6f8 	.word	0x0002d6f8

0001b210 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   1b210:	e5d03008 	ldrb	r3, [r0, #8]
   1b214:	e92d4010 	push	{r4, lr}
   1b218:	e3530000 	cmp	r3, #0
   1b21c:	0a000006 	beq	1b23c <CUSBConfigurationParser::GetCurrentDescriptor()+0x2c>
   1b220:	e5900014 	ldr	r0, [r0, #20]
   1b224:	e3500000 	cmp	r0, #0
   1b228:	18bd8010 	popne	{r4, pc}
   1b22c:	e3a020ce 	mov	r2, #206	; 0xce
   1b230:	e59f1014 	ldr	r1, [pc, #20]	; 1b24c <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   1b234:	e59f0014 	ldr	r0, [pc, #20]	; 1b250 <CUSBConfigurationParser::GetCurrentDescriptor()+0x40>
   1b238:	eb000930 	bl	1d700 <assertion_failed>
   1b23c:	e3a020cd 	mov	r2, #205	; 0xcd
   1b240:	e59f1004 	ldr	r1, [pc, #4]	; 1b24c <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   1b244:	e59f0008 	ldr	r0, [pc, #8]	; 1b254 <CUSBConfigurationParser::GetCurrentDescriptor()+0x44>
   1b248:	eb00092c 	bl	1d700 <assertion_failed>
   1b24c:	0002f7b4 	.word	0x0002f7b4
   1b250:	0002f804 	.word	0x0002f804
   1b254:	0002d6f8 	.word	0x0002d6f8

0001b258 <CUSBConfigurationParser::Error(char const*) const>:
   1b258:	e92d4030 	push	{r4, r5, lr}
   1b25c:	e2515000 	subs	r5, r1, #0
   1b260:	e24dd00c 	sub	sp, sp, #12
   1b264:	0a00000e 	beq	1b2a4 <CUSBConfigurationParser::Error(char const*) const+0x4c>
   1b268:	e1a04000 	mov	r4, r0
   1b26c:	eb001223 	bl	1fb00 <CLogger::Get()>
   1b270:	e5941000 	ldr	r1, [r4]
   1b274:	e5942018 	ldr	r2, [r4, #24]
   1b278:	e59f3034 	ldr	r3, [pc, #52]	; 1b2b4 <CUSBConfigurationParser::Error(char const*) const+0x5c>
   1b27c:	e0422001 	sub	r2, r2, r1
   1b280:	e58d2000 	str	r2, [sp]
   1b284:	e1a01005 	mov	r1, r5
   1b288:	e3a02001 	mov	r2, #1
   1b28c:	eb00115d 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b290:	e1c400d0 	ldrd	r0, [r4]
   1b294:	e1a02005 	mov	r2, r5
   1b298:	e28dd00c 	add	sp, sp, #12
   1b29c:	e8bd4030 	pop	{r4, r5, lr}
   1b2a0:	ea000a86 	b	1dcc0 <debug_hexdump(void const*, unsigned int, char const*)>
   1b2a4:	e3a020d5 	mov	r2, #213	; 0xd5
   1b2a8:	e59f1008 	ldr	r1, [pc, #8]	; 1b2b8 <CUSBConfigurationParser::Error(char const*) const+0x60>
   1b2ac:	e59f0008 	ldr	r0, [pc, #8]	; 1b2bc <CUSBConfigurationParser::Error(char const*) const+0x64>
   1b2b0:	eb000912 	bl	1d700 <assertion_failed>
   1b2b4:	0002f820 	.word	0x0002f820
   1b2b8:	0002f7b4 	.word	0x0002f7b4
   1b2bc:	0002e1c8 	.word	0x0002e1c8

0001b2c0 <CUSBGamePadDevice::GetInitialState()>:
   1b2c0:	e2800028 	add	r0, r0, #40	; 0x28
   1b2c4:	e12fff1e 	bx	lr

0001b2c8 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   1b2c8:	e3510000 	cmp	r1, #0
   1b2cc:	012fff1e 	bxeq	lr
   1b2d0:	e2803f4b 	add	r3, r0, #300	; 0x12c
   1b2d4:	e1d330b0 	ldrh	r3, [r3]
   1b2d8:	e92d4070 	push	{r4, r5, r6, lr}
   1b2dc:	e1530002 	cmp	r3, r2
   1b2e0:	e1a04000 	mov	r4, r0
   1b2e4:	18bd8070 	popne	{r4, r5, r6, pc}
   1b2e8:	e5903128 	ldr	r3, [r0, #296]	; 0x128
   1b2ec:	e3530000 	cmp	r3, #0
   1b2f0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1b2f4:	e1a05000 	mov	r5, r0
   1b2f8:	e4953028 	ldr	r3, [r5], #40	; 0x28
   1b2fc:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   1b300:	e12fff33 	blx	r3
   1b304:	e5940130 	ldr	r0, [r4, #304]	; 0x130
   1b308:	e1a01005 	mov	r1, r5
   1b30c:	e5943128 	ldr	r3, [r4, #296]	; 0x128
   1b310:	e2400001 	sub	r0, r0, #1
   1b314:	e8bd4070 	pop	{r4, r5, r6, lr}
   1b318:	e12fff13 	bx	r3

0001b31c <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   1b31c:	e5903128 	ldr	r3, [r0, #296]	; 0x128
   1b320:	e92d4010 	push	{r4, lr}
   1b324:	e3530000 	cmp	r3, #0
   1b328:	1a000006 	bne	1b348 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x2c>
   1b32c:	e3510000 	cmp	r1, #0
   1b330:	e5801128 	str	r1, [r0, #296]	; 0x128
   1b334:	18bd8010 	popne	{r4, pc}
   1b338:	e3a02053 	mov	r2, #83	; 0x53
   1b33c:	e59f1014 	ldr	r1, [pc, #20]	; 1b358 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   1b340:	e59f0014 	ldr	r0, [pc, #20]	; 1b35c <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x40>
   1b344:	eb0008ed 	bl	1d700 <assertion_failed>
   1b348:	e3a02051 	mov	r2, #81	; 0x51
   1b34c:	e59f1004 	ldr	r1, [pc, #4]	; 1b358 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   1b350:	e59f0008 	ldr	r0, [pc, #8]	; 1b360 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x44>
   1b354:	eb0008e9 	bl	1d700 <assertion_failed>
   1b358:	0002f850 	.word	0x0002f850
   1b35c:	0002f878 	.word	0x0002f878
   1b360:	0002f860 	.word	0x0002f860

0001b364 <CUSBGamePadDevice::Configure()>:
   1b364:	e92d4070 	push	{r4, r5, r6, lr}
   1b368:	e2803f4b 	add	r3, r0, #300	; 0x12c
   1b36c:	e1d310b0 	ldrh	r1, [r3]
   1b370:	e24dd008 	sub	sp, sp, #8
   1b374:	e3510000 	cmp	r1, #0
   1b378:	0a00001c 	beq	1b3f0 <CUSBGamePadDevice::Configure()+0x8c>
   1b37c:	e1a04000 	mov	r4, r0
   1b380:	ebffe6c4 	bl	14e98 <CUSBHIDDevice::Configure(unsigned int)>
   1b384:	e2505000 	subs	r5, r0, #0
   1b388:	0a000010 	beq	1b3d0 <CUSBGamePadDevice::Configure()+0x6c>
   1b38c:	e5946130 	ldr	r6, [r4, #304]	; 0x130
   1b390:	e3560000 	cmp	r6, #0
   1b394:	1a000019 	bne	1b400 <CUSBGamePadDevice::Configure()+0x9c>
   1b398:	e3a01001 	mov	r1, #1
   1b39c:	e59f206c 	ldr	r2, [pc, #108]	; 1b410 <CUSBGamePadDevice::Configure()+0xac>
   1b3a0:	e59f006c 	ldr	r0, [pc, #108]	; 1b414 <CUSBGamePadDevice::Configure()+0xb0>
   1b3a4:	eb003269 	bl	27d50 <CNumberPool::AllocateNumber(bool, char const*)>
   1b3a8:	e5840130 	str	r0, [r4, #304]	; 0x130
   1b3ac:	eb000bad 	bl	1e268 <CDeviceNameService::Get()>
   1b3b0:	e58d6000 	str	r6, [sp]
   1b3b4:	e1a03004 	mov	r3, r4
   1b3b8:	e5942130 	ldr	r2, [r4, #304]	; 0x130
   1b3bc:	e59f1054 	ldr	r1, [pc, #84]	; 1b418 <CUSBGamePadDevice::Configure()+0xb4>
   1b3c0:	eb000bb4 	bl	1e298 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1b3c4:	e1a00005 	mov	r0, r5
   1b3c8:	e28dd008 	add	sp, sp, #8
   1b3cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b3d0:	eb0011ca 	bl	1fb00 <CLogger::Get()>
   1b3d4:	e3a02001 	mov	r2, #1
   1b3d8:	e59f303c 	ldr	r3, [pc, #60]	; 1b41c <CUSBGamePadDevice::Configure()+0xb8>
   1b3dc:	e59f102c 	ldr	r1, [pc, #44]	; 1b410 <CUSBGamePadDevice::Configure()+0xac>
   1b3e0:	eb001108 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b3e4:	e1a00005 	mov	r0, r5
   1b3e8:	e28dd008 	add	sp, sp, #8
   1b3ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b3f0:	e3a0203a 	mov	r2, #58	; 0x3a
   1b3f4:	e59f1024 	ldr	r1, [pc, #36]	; 1b420 <CUSBGamePadDevice::Configure()+0xbc>
   1b3f8:	e59f0024 	ldr	r0, [pc, #36]	; 1b424 <CUSBGamePadDevice::Configure()+0xc0>
   1b3fc:	eb0008bf 	bl	1d700 <assertion_failed>
   1b400:	e3a02042 	mov	r2, #66	; 0x42
   1b404:	e59f1014 	ldr	r1, [pc, #20]	; 1b420 <CUSBGamePadDevice::Configure()+0xbc>
   1b408:	e59f0018 	ldr	r0, [pc, #24]	; 1b428 <CUSBGamePadDevice::Configure()+0xc4>
   1b40c:	eb0008bb 	bl	1d700 <assertion_failed>
   1b410:	0002f890 	.word	0x0002f890
   1b414:	00034be8 	.word	0x00034be8
   1b418:	0002f898 	.word	0x0002f898
   1b41c:	0002c75c 	.word	0x0002c75c
   1b420:	0002f850 	.word	0x0002f850
   1b424:	0002e46c 	.word	0x0002e46c
   1b428:	0002c954 	.word	0x0002c954

0001b42c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   1b42c:	e92d4010 	push	{r4, lr}
   1b430:	e3a02000 	mov	r2, #0
   1b434:	e1a04000 	mov	r4, r0
   1b438:	ebffe656 	bl	14d98 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   1b43c:	e3a01000 	mov	r1, #0
   1b440:	e59f2024 	ldr	r2, [pc, #36]	; 1b46c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x40>
   1b444:	e2843f4b 	add	r3, r4, #300	; 0x12c
   1b448:	e5842000 	str	r2, [r4]
   1b44c:	e5841128 	str	r1, [r4, #296]	; 0x128
   1b450:	e3a02c01 	mov	r2, #256	; 0x100
   1b454:	e1c310b0 	strh	r1, [r3]
   1b458:	e2840028 	add	r0, r4, #40	; 0x28
   1b45c:	e5841130 	str	r1, [r4, #304]	; 0x130
   1b460:	eb002cc0 	bl	26768 <memset>
   1b464:	e1a00004 	mov	r0, r4
   1b468:	e8bd8010 	pop	{r4, pc}
   1b46c:	0002f8a8 	.word	0x0002f8a8

0001b470 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   1b470:	e92d4070 	push	{r4, r5, r6, lr}
   1b474:	e3a06000 	mov	r6, #0
   1b478:	e5903130 	ldr	r3, [r0, #304]	; 0x130
   1b47c:	e59f5044 	ldr	r5, [pc, #68]	; 1b4c8 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x58>
   1b480:	e1530006 	cmp	r3, r6
   1b484:	e1a04000 	mov	r4, r0
   1b488:	e5805000 	str	r5, [r0]
   1b48c:	e5806128 	str	r6, [r0, #296]	; 0x128
   1b490:	1a000003 	bne	1b4a4 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x34>
   1b494:	e1a00004 	mov	r0, r4
   1b498:	ebffe653 	bl	14dec <CUSBHIDDevice::~CUSBHIDDevice()>
   1b49c:	e1a00004 	mov	r0, r4
   1b4a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b4a4:	eb000b6f 	bl	1e268 <CDeviceNameService::Get()>
   1b4a8:	e2451010 	sub	r1, r5, #16
   1b4ac:	e1a03006 	mov	r3, r6
   1b4b0:	e5942130 	ldr	r2, [r4, #304]	; 0x130
   1b4b4:	eb000b91 	bl	1e300 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1b4b8:	e5941130 	ldr	r1, [r4, #304]	; 0x130
   1b4bc:	e59f0008 	ldr	r0, [pc, #8]	; 1b4cc <CUSBGamePadDevice::~CUSBGamePadDevice()+0x5c>
   1b4c0:	eb00325d 	bl	27e3c <CNumberPool::FreeNumber(unsigned int)>
   1b4c4:	eafffff2 	b	1b494 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x24>
   1b4c8:	0002f8a8 	.word	0x0002f8a8
   1b4cc:	00034be8 	.word	0x00034be8

0001b4d0 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   1b4d0:	e92d4010 	push	{r4, lr}
   1b4d4:	e1a04000 	mov	r4, r0
   1b4d8:	ebffffe4 	bl	1b470 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1b4dc:	e1a00004 	mov	r0, r4
   1b4e0:	e3a01f4d 	mov	r1, #308	; 0x134
   1b4e4:	eb0030dc 	bl	2785c <operator delete(void*, unsigned int)>
   1b4e8:	e1a00004 	mov	r0, r4
   1b4ec:	e8bd8010 	pop	{r4, pc}

0001b4f0 <_GLOBAL__sub_I__ZN17CUSBGamePadDevice18s_DeviceNumberPoolE>:
   1b4f0:	e92d4010 	push	{r4, lr}
   1b4f4:	e59f4020 	ldr	r4, [pc, #32]	; 1b51c <_GLOBAL__sub_I__ZN17CUSBGamePadDevice18s_DeviceNumberPoolE+0x2c>
   1b4f8:	e3a0203f 	mov	r2, #63	; 0x3f
   1b4fc:	e1a00004 	mov	r0, r4
   1b500:	e3a01001 	mov	r1, #1
   1b504:	eb0031fc 	bl	27cfc <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1b508:	e1a00004 	mov	r0, r4
   1b50c:	e8bd4010 	pop	{r4, lr}
   1b510:	e59f2008 	ldr	r2, [pc, #8]	; 1b520 <_GLOBAL__sub_I__ZN17CUSBGamePadDevice18s_DeviceNumberPoolE+0x30>
   1b514:	e59f1008 	ldr	r1, [pc, #8]	; 1b524 <_GLOBAL__sub_I__ZN17CUSBGamePadDevice18s_DeviceNumberPoolE+0x34>
   1b518:	ea0028e6 	b	258b8 <__aeabi_atexit>
   1b51c:	00034be8 	.word	0x00034be8
   1b520:	00034c44 	.word	0x00034c44
   1b524:	00027d4c 	.word	0x00027d4c

0001b528 <CUSBString::CUSBString(CUSBDevice*)>:
   1b528:	e3a03000 	mov	r3, #0
   1b52c:	e92d4070 	push	{r4, r5, r6, lr}
   1b530:	e880000a 	stm	r0, {r1, r3}
   1b534:	e1a04000 	mov	r4, r0
   1b538:	e3a00010 	mov	r0, #16
   1b53c:	eb0030b8 	bl	27824 <operator new(unsigned int)>
   1b540:	e1a05000 	mov	r5, r0
   1b544:	eb00238a 	bl	24374 <CString::CString()>
   1b548:	e5943000 	ldr	r3, [r4]
   1b54c:	e5845008 	str	r5, [r4, #8]
   1b550:	e3530000 	cmp	r3, #0
   1b554:	0a000001 	beq	1b560 <CUSBString::CUSBString(CUSBDevice*)+0x38>
   1b558:	e1a00004 	mov	r0, r4
   1b55c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b560:	e3a02023 	mov	r2, #35	; 0x23
   1b564:	e59f1004 	ldr	r1, [pc, #4]	; 1b570 <CUSBString::CUSBString(CUSBDevice*)+0x48>
   1b568:	e59f0004 	ldr	r0, [pc, #4]	; 1b574 <CUSBString::CUSBString(CUSBDevice*)+0x4c>
   1b56c:	eb000863 	bl	1d700 <assertion_failed>
   1b570:	0002f8ec 	.word	0x0002f8ec
   1b574:	0002d9d0 	.word	0x0002d9d0

0001b578 <CUSBString::CUSBString(CUSBString*)>:
   1b578:	e3a03000 	mov	r3, #0
   1b57c:	e92d4070 	push	{r4, r5, r6, lr}
   1b580:	e5803004 	str	r3, [r0, #4]
   1b584:	e1a04000 	mov	r4, r0
   1b588:	e3a00010 	mov	r0, #16
   1b58c:	e1a05001 	mov	r5, r1
   1b590:	eb0030a3 	bl	27824 <operator new(unsigned int)>
   1b594:	e1a06000 	mov	r6, r0
   1b598:	eb002375 	bl	24374 <CString::CString()>
   1b59c:	e3550000 	cmp	r5, #0
   1b5a0:	e5846008 	str	r6, [r4, #8]
   1b5a4:	0a000016 	beq	1b604 <CUSBString::CUSBString(CUSBString*)+0x8c>
   1b5a8:	e1c520d0 	ldrd	r2, [r5]
   1b5ac:	e3530000 	cmp	r3, #0
   1b5b0:	e5842000 	str	r2, [r4]
   1b5b4:	0a000008 	beq	1b5dc <CUSBString::CUSBString(CUSBString*)+0x64>
   1b5b8:	e5d30000 	ldrb	r0, [r3]
   1b5bc:	eb00309e 	bl	2783c <operator new[](unsigned int)>
   1b5c0:	e5951004 	ldr	r1, [r5, #4]
   1b5c4:	e5840004 	str	r0, [r4, #4]
   1b5c8:	e5d12000 	ldrb	r2, [r1]
   1b5cc:	eb002eae 	bl	2708c <memcpy>
   1b5d0:	e5943008 	ldr	r3, [r4, #8]
   1b5d4:	e3530000 	cmp	r3, #0
   1b5d8:	0a000005 	beq	1b5f4 <CUSBString::CUSBString(CUSBString*)+0x7c>
   1b5dc:	e5953008 	ldr	r3, [r5, #8]
   1b5e0:	e3530000 	cmp	r3, #0
   1b5e4:	0a00000a 	beq	1b614 <CUSBString::CUSBString(CUSBString*)+0x9c>
   1b5e8:	e1a00004 	mov	r0, r4
   1b5ec:	e5843008 	str	r3, [r4, #8]
   1b5f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b5f4:	e3a02035 	mov	r2, #53	; 0x35
   1b5f8:	e59f1024 	ldr	r1, [pc, #36]	; 1b624 <CUSBString::CUSBString(CUSBString*)+0xac>
   1b5fc:	e59f0024 	ldr	r0, [pc, #36]	; 1b628 <CUSBString::CUSBString(CUSBString*)+0xb0>
   1b600:	eb00083e 	bl	1d700 <assertion_failed>
   1b604:	e3a0202b 	mov	r2, #43	; 0x2b
   1b608:	e59f1014 	ldr	r1, [pc, #20]	; 1b624 <CUSBString::CUSBString(CUSBString*)+0xac>
   1b60c:	e59f0018 	ldr	r0, [pc, #24]	; 1b62c <CUSBString::CUSBString(CUSBString*)+0xb4>
   1b610:	eb00083a 	bl	1d700 <assertion_failed>
   1b614:	e3a02036 	mov	r2, #54	; 0x36
   1b618:	e59f1004 	ldr	r1, [pc, #4]	; 1b624 <CUSBString::CUSBString(CUSBString*)+0xac>
   1b61c:	e59f000c 	ldr	r0, [pc, #12]	; 1b630 <CUSBString::CUSBString(CUSBString*)+0xb8>
   1b620:	eb000836 	bl	1d700 <assertion_failed>
   1b624:	0002f8ec 	.word	0x0002f8ec
   1b628:	0002f8fc 	.word	0x0002f8fc
   1b62c:	0002dec4 	.word	0x0002dec4
   1b630:	0002f90c 	.word	0x0002f90c

0001b634 <CUSBString::~CUSBString()>:
   1b634:	e92d4010 	push	{r4, lr}
   1b638:	e1a04000 	mov	r4, r0
   1b63c:	e5900008 	ldr	r0, [r0, #8]
   1b640:	e3500000 	cmp	r0, #0
   1b644:	0a000002 	beq	1b654 <CUSBString::~CUSBString()+0x20>
   1b648:	e5903000 	ldr	r3, [r0]
   1b64c:	e5933004 	ldr	r3, [r3, #4]
   1b650:	e12fff33 	blx	r3
   1b654:	e3a03000 	mov	r3, #0
   1b658:	e5940004 	ldr	r0, [r4, #4]
   1b65c:	e5843008 	str	r3, [r4, #8]
   1b660:	e1500003 	cmp	r0, r3
   1b664:	0a000000 	beq	1b66c <CUSBString::~CUSBString()+0x38>
   1b668:	eb00307a 	bl	27858 <operator delete[](void*)>
   1b66c:	e1a00004 	mov	r0, r4
   1b670:	e8bd8010 	pop	{r4, pc}

0001b674 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   1b674:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b678:	e2517000 	subs	r7, r1, #0
   1b67c:	e28db020 	add	fp, sp, #32
   1b680:	e24dd014 	sub	sp, sp, #20
   1b684:	0a000051 	beq	1b7d0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x15c>
   1b688:	e1a04000 	mov	r4, r0
   1b68c:	e5900004 	ldr	r0, [r0, #4]
   1b690:	e1a05002 	mov	r5, r2
   1b694:	e3500000 	cmp	r0, #0
   1b698:	0a000000 	beq	1b6a0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   1b69c:	eb00306d 	bl	27858 <operator delete[](void*)>
   1b6a0:	e3a00004 	mov	r0, #4
   1b6a4:	eb003064 	bl	2783c <operator new[](unsigned int)>
   1b6a8:	e5943000 	ldr	r3, [r4]
   1b6ac:	e5840004 	str	r0, [r4, #4]
   1b6b0:	e3530000 	cmp	r3, #0
   1b6b4:	0a000049 	beq	1b7e0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x16c>
   1b6b8:	e1a00003 	mov	r0, r3
   1b6bc:	ebffd56c 	bl	10c74 <CUSBDevice::GetHost() const>
   1b6c0:	e1a06000 	mov	r6, r0
   1b6c4:	e5940000 	ldr	r0, [r4]
   1b6c8:	ebffd55f 	bl	10c4c <CUSBDevice::GetEndpoint0() const>
   1b6cc:	e3a08080 	mov	r8, #128	; 0x80
   1b6d0:	e3a02004 	mov	r2, #4
   1b6d4:	e5943004 	ldr	r3, [r4, #4]
   1b6d8:	e1a01000 	mov	r1, r0
   1b6dc:	e98d0104 	stmib	sp, {r2, r8}
   1b6e0:	e58d3000 	str	r3, [sp]
   1b6e4:	e1a00006 	mov	r0, r6
   1b6e8:	e1a03007 	mov	r3, r7
   1b6ec:	e3a02003 	mov	r2, #3
   1b6f0:	e58d500c 	str	r5, [sp, #12]
   1b6f4:	ebffb677 	bl	90d8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1b6f8:	e3500000 	cmp	r0, #0
   1b6fc:	ba000030 	blt	1b7c4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   1b700:	e5940004 	ldr	r0, [r4, #4]
   1b704:	e5d06000 	ldrb	r6, [r0]
   1b708:	e3560001 	cmp	r6, #1
   1b70c:	9a00002c 	bls	1b7c4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   1b710:	e3160001 	tst	r6, #1
   1b714:	1a00002a 	bne	1b7c4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   1b718:	e5d09001 	ldrb	r9, [r0, #1]
   1b71c:	e3590003 	cmp	r9, #3
   1b720:	1a000027 	bne	1b7c4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   1b724:	e3560004 	cmp	r6, #4
   1b728:	8a000030 	bhi	1b7f0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x17c>
   1b72c:	e3560002 	cmp	r6, #2
   1b730:	0a000054 	beq	1b888 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x214>
   1b734:	e3560004 	cmp	r6, #4
   1b738:	024dd008 	subeq	sp, sp, #8
   1b73c:	03a0e001 	moveq	lr, #1
   1b740:	028d5010 	addeq	r5, sp, #16
   1b744:	1a000053 	bne	1b898 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x224>
   1b748:	e24e1001 	sub	r1, lr, #1
   1b74c:	e0811005 	add	r1, r1, r5
   1b750:	e245c001 	sub	ip, r5, #1
   1b754:	e2656001 	rsb	r6, r5, #1
   1b758:	e086200c 	add	r2, r6, ip
   1b75c:	e0802082 	add	r2, r0, r2, lsl #1
   1b760:	e5d23002 	ldrb	r3, [r2, #2]
   1b764:	e5d22003 	ldrb	r2, [r2, #3]
   1b768:	e1833402 	orr	r3, r3, r2, lsl #8
   1b76c:	e2432020 	sub	r2, r3, #32
   1b770:	e352005e 	cmp	r2, #94	; 0x5e
   1b774:	83a0305f 	movhi	r3, #95	; 0x5f
   1b778:	e5ec3001 	strb	r3, [ip, #1]!
   1b77c:	e15c0001 	cmp	ip, r1
   1b780:	1afffff4 	bne	1b758 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xe4>
   1b784:	e3a03000 	mov	r3, #0
   1b788:	e5940008 	ldr	r0, [r4, #8]
   1b78c:	e7c5300e 	strb	r3, [r5, lr]
   1b790:	e1500003 	cmp	r0, r3
   1b794:	0a000002 	beq	1b7a4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x130>
   1b798:	e5903000 	ldr	r3, [r0]
   1b79c:	e5933004 	ldr	r3, [r3, #4]
   1b7a0:	e12fff33 	blx	r3
   1b7a4:	e3a00010 	mov	r0, #16
   1b7a8:	eb00301d 	bl	27824 <operator new(unsigned int)>
   1b7ac:	e1a06000 	mov	r6, r0
   1b7b0:	e1a01005 	mov	r1, r5
   1b7b4:	eb0022f4 	bl	2438c <CString::CString(char const*)>
   1b7b8:	e3a00001 	mov	r0, #1
   1b7bc:	e5846008 	str	r6, [r4, #8]
   1b7c0:	ea000000 	b	1b7c8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x154>
   1b7c4:	e3a00000 	mov	r0, #0
   1b7c8:	e24bd020 	sub	sp, fp, #32
   1b7cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7d0:	e3a02047 	mov	r2, #71	; 0x47
   1b7d4:	e59f10cc 	ldr	r1, [pc, #204]	; 1b8a8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   1b7d8:	e59f00cc 	ldr	r0, [pc, #204]	; 1b8ac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x238>
   1b7dc:	eb0007c7 	bl	1d700 <assertion_failed>
   1b7e0:	e3a0204d 	mov	r2, #77	; 0x4d
   1b7e4:	e59f10bc 	ldr	r1, [pc, #188]	; 1b8a8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   1b7e8:	e59f00c0 	ldr	r0, [pc, #192]	; 1b8b0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x23c>
   1b7ec:	eb0007c3 	bl	1d700 <assertion_failed>
   1b7f0:	e3a01002 	mov	r1, #2
   1b7f4:	eb003018 	bl	2785c <operator delete(void*, unsigned int)>
   1b7f8:	e1a00006 	mov	r0, r6
   1b7fc:	eb00300e 	bl	2783c <operator new[](unsigned int)>
   1b800:	e1a03000 	mov	r3, r0
   1b804:	e5940000 	ldr	r0, [r4]
   1b808:	e5843004 	str	r3, [r4, #4]
   1b80c:	ebffd518 	bl	10c74 <CUSBDevice::GetHost() const>
   1b810:	e1a0a000 	mov	sl, r0
   1b814:	e5940000 	ldr	r0, [r4]
   1b818:	ebffd50b 	bl	10c4c <CUSBDevice::GetEndpoint0() const>
   1b81c:	e594c004 	ldr	ip, [r4, #4]
   1b820:	e1a01000 	mov	r1, r0
   1b824:	e1a03007 	mov	r3, r7
   1b828:	e1a0000a 	mov	r0, sl
   1b82c:	e1a02009 	mov	r2, r9
   1b830:	e98d0140 	stmib	sp, {r6, r8}
   1b834:	e58d500c 	str	r5, [sp, #12]
   1b838:	e58dc000 	str	ip, [sp]
   1b83c:	ebffb625 	bl	90d8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1b840:	e1560000 	cmp	r6, r0
   1b844:	1affffde 	bne	1b7c4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   1b848:	e5940004 	ldr	r0, [r4, #4]
   1b84c:	e5d03000 	ldrb	r3, [r0]
   1b850:	e1530006 	cmp	r3, r6
   1b854:	1affffda 	bne	1b7c4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   1b858:	e5d02001 	ldrb	r2, [r0, #1]
   1b85c:	e3520003 	cmp	r2, #3
   1b860:	1affffd7 	bne	1b7c4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   1b864:	e3130001 	tst	r3, #1
   1b868:	1a00000a 	bne	1b898 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x224>
   1b86c:	e2433002 	sub	r3, r3, #2
   1b870:	e1a0e0c3 	asr	lr, r3, #1
   1b874:	e28e3008 	add	r3, lr, #8
   1b878:	e3c33007 	bic	r3, r3, #7
   1b87c:	e04dd003 	sub	sp, sp, r3
   1b880:	e28d5010 	add	r5, sp, #16
   1b884:	eaffffaf 	b	1b748 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd4>
   1b888:	e3a02075 	mov	r2, #117	; 0x75
   1b88c:	e59f1014 	ldr	r1, [pc, #20]	; 1b8a8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   1b890:	e59f001c 	ldr	r0, [pc, #28]	; 1b8b4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x240>
   1b894:	eb000799 	bl	1d700 <assertion_failed>
   1b898:	e3a02076 	mov	r2, #118	; 0x76
   1b89c:	e59f1004 	ldr	r1, [pc, #4]	; 1b8a8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x234>
   1b8a0:	e59f0010 	ldr	r0, [pc, #16]	; 1b8b8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x244>
   1b8a4:	eb000795 	bl	1d700 <assertion_failed>
   1b8a8:	0002f8ec 	.word	0x0002f8ec
   1b8ac:	0002f924 	.word	0x0002f924
   1b8b0:	0002d9d0 	.word	0x0002d9d0
   1b8b4:	0002f930 	.word	0x0002f930
   1b8b8:	0002f94c 	.word	0x0002f94c

0001b8bc <CUSBString::Get() const>:
   1b8bc:	e5900008 	ldr	r0, [r0, #8]
   1b8c0:	ea0022c3 	b	243d4 <CString::operator char const*() const>

0001b8c4 <CUSBString::GetLanguageID()>:
   1b8c4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1b8c8:	e1a06000 	mov	r6, r0
   1b8cc:	e24dd014 	sub	sp, sp, #20
   1b8d0:	e3a00004 	mov	r0, #4
   1b8d4:	eb002fd8 	bl	2783c <operator new[](unsigned int)>
   1b8d8:	e5963000 	ldr	r3, [r6]
   1b8dc:	e3530000 	cmp	r3, #0
   1b8e0:	0a000057 	beq	1ba44 <CUSBString::GetLanguageID()+0x180>
   1b8e4:	e1a04000 	mov	r4, r0
   1b8e8:	e1a00003 	mov	r0, r3
   1b8ec:	ebffd4e0 	bl	10c74 <CUSBDevice::GetHost() const>
   1b8f0:	e1a05000 	mov	r5, r0
   1b8f4:	e5960000 	ldr	r0, [r6]
   1b8f8:	ebffd4d3 	bl	10c4c <CUSBDevice::GetEndpoint0() const>
   1b8fc:	e3a07080 	mov	r7, #128	; 0x80
   1b900:	e3a03000 	mov	r3, #0
   1b904:	e3a02004 	mov	r2, #4
   1b908:	e1a01000 	mov	r1, r0
   1b90c:	e98d0084 	stmib	sp, {r2, r7}
   1b910:	e1a00005 	mov	r0, r5
   1b914:	e3a02003 	mov	r2, #3
   1b918:	e58d4000 	str	r4, [sp]
   1b91c:	e58d300c 	str	r3, [sp, #12]
   1b920:	ebffb5ec 	bl	90d8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1b924:	e3500000 	cmp	r0, #0
   1b928:	ba00001e 	blt	1b9a8 <CUSBString::GetLanguageID()+0xe4>
   1b92c:	e5d45000 	ldrb	r5, [r4]
   1b930:	e3550003 	cmp	r5, #3
   1b934:	9a00001b 	bls	1b9a8 <CUSBString::GetLanguageID()+0xe4>
   1b938:	e2159001 	ands	r9, r5, #1
   1b93c:	1a000019 	bne	1b9a8 <CUSBString::GetLanguageID()+0xe4>
   1b940:	e5d48001 	ldrb	r8, [r4, #1]
   1b944:	e3580003 	cmp	r8, #3
   1b948:	1a000016 	bne	1b9a8 <CUSBString::GetLanguageID()+0xe4>
   1b94c:	e3550004 	cmp	r5, #4
   1b950:	1a00001a 	bne	1b9c0 <CUSBString::GetLanguageID()+0xfc>
   1b954:	e3a02000 	mov	r2, #0
   1b958:	e2455002 	sub	r5, r5, #2
   1b95c:	e59f00fc 	ldr	r0, [pc, #252]	; 1ba60 <CUSBString::GetLanguageID()+0x19c>
   1b960:	e1a030c5 	asr	r3, r5, #1
   1b964:	e0841082 	add	r1, r4, r2, lsl #1
   1b968:	e5d15002 	ldrb	r5, [r1, #2]
   1b96c:	e5d11003 	ldrb	r1, [r1, #3]
   1b970:	e1855401 	orr	r5, r5, r1, lsl #8
   1b974:	e1550000 	cmp	r5, r0
   1b978:	0a000035 	beq	1ba54 <CUSBString::GetLanguageID()+0x190>
   1b97c:	e2822001 	add	r2, r2, #1
   1b980:	e1530002 	cmp	r3, r2
   1b984:	1afffff6 	bne	1b964 <CUSBString::GetLanguageID()+0xa0>
   1b988:	e5d45002 	ldrb	r5, [r4, #2]
   1b98c:	e5d43003 	ldrb	r3, [r4, #3]
   1b990:	e1a00004 	mov	r0, r4
   1b994:	e1855403 	orr	r5, r5, r3, lsl #8
   1b998:	eb002fae 	bl	27858 <operator delete[](void*)>
   1b99c:	e1a00005 	mov	r0, r5
   1b9a0:	e28dd014 	add	sp, sp, #20
   1b9a4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b9a8:	e1a00004 	mov	r0, r4
   1b9ac:	eb002fa9 	bl	27858 <operator delete[](void*)>
   1b9b0:	e59f50a8 	ldr	r5, [pc, #168]	; 1ba60 <CUSBString::GetLanguageID()+0x19c>
   1b9b4:	e1a00005 	mov	r0, r5
   1b9b8:	e28dd014 	add	sp, sp, #20
   1b9bc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b9c0:	e1a00004 	mov	r0, r4
   1b9c4:	eb002fa3 	bl	27858 <operator delete[](void*)>
   1b9c8:	e1a00005 	mov	r0, r5
   1b9cc:	eb002f9a 	bl	2783c <operator new[](unsigned int)>
   1b9d0:	e1a04000 	mov	r4, r0
   1b9d4:	e5960000 	ldr	r0, [r6]
   1b9d8:	ebffd4a5 	bl	10c74 <CUSBDevice::GetHost() const>
   1b9dc:	e1a03000 	mov	r3, r0
   1b9e0:	e5960000 	ldr	r0, [r6]
   1b9e4:	e1a06003 	mov	r6, r3
   1b9e8:	ebffd497 	bl	10c4c <CUSBDevice::GetEndpoint0() const>
   1b9ec:	e1a03009 	mov	r3, r9
   1b9f0:	e1a01000 	mov	r1, r0
   1b9f4:	e1a02008 	mov	r2, r8
   1b9f8:	e1a00006 	mov	r0, r6
   1b9fc:	e98d02a0 	stmib	sp, {r5, r7, r9}
   1ba00:	e58d4000 	str	r4, [sp]
   1ba04:	ebffb5b3 	bl	90d8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1ba08:	e1550000 	cmp	r5, r0
   1ba0c:	1affffe5 	bne	1b9a8 <CUSBString::GetLanguageID()+0xe4>
   1ba10:	e5d43000 	ldrb	r3, [r4]
   1ba14:	e1530005 	cmp	r3, r5
   1ba18:	1affffe2 	bne	1b9a8 <CUSBString::GetLanguageID()+0xe4>
   1ba1c:	e5d42001 	ldrb	r2, [r4, #1]
   1ba20:	e3520003 	cmp	r2, #3
   1ba24:	1affffdf 	bne	1b9a8 <CUSBString::GetLanguageID()+0xe4>
   1ba28:	e3130001 	tst	r3, #1
   1ba2c:	e1a05003 	mov	r5, r3
   1ba30:	0affffc7 	beq	1b954 <CUSBString::GetLanguageID()+0x90>
   1ba34:	e3a020c8 	mov	r2, #200	; 0xc8
   1ba38:	e59f1024 	ldr	r1, [pc, #36]	; 1ba64 <CUSBString::GetLanguageID()+0x1a0>
   1ba3c:	e59f0024 	ldr	r0, [pc, #36]	; 1ba68 <CUSBString::GetLanguageID()+0x1a4>
   1ba40:	eb00072e 	bl	1d700 <assertion_failed>
   1ba44:	e3a0209a 	mov	r2, #154	; 0x9a
   1ba48:	e59f1014 	ldr	r1, [pc, #20]	; 1ba64 <CUSBString::GetLanguageID()+0x1a0>
   1ba4c:	e59f0018 	ldr	r0, [pc, #24]	; 1ba6c <CUSBString::GetLanguageID()+0x1a8>
   1ba50:	eb00072a 	bl	1d700 <assertion_failed>
   1ba54:	e1a00004 	mov	r0, r4
   1ba58:	eb002f7e 	bl	27858 <operator delete[](void*)>
   1ba5c:	eaffffd4 	b	1b9b4 <CUSBString::GetLanguageID()+0xf0>
   1ba60:	00000409 	.word	0x00000409
   1ba64:	0002f8ec 	.word	0x0002f8ec
   1ba68:	0002f970 	.word	0x0002f970
   1ba6c:	0002d9d0 	.word	0x0002d9d0

0001ba70 <CUSBSerialDevice::SetBaudRate(unsigned int)>:
   1ba70:	e3a00001 	mov	r0, #1
   1ba74:	e12fff1e 	bx	lr

0001ba78 <CUSBSerialDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   1ba78:	e3a00001 	mov	r0, #1
   1ba7c:	e12fff1e 	bx	lr

0001ba80 <CUSBSerialDevice::~CUSBSerialDevice()>:
   1ba80:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   1ba84:	e92d4070 	push	{r4, r5, r6, lr}
   1ba88:	e59f50ac 	ldr	r5, [pc, #172]	; 1bb3c <CUSBSerialDevice::~CUSBSerialDevice()+0xbc>
   1ba8c:	e3530000 	cmp	r3, #0
   1ba90:	e1a04000 	mov	r4, r0
   1ba94:	e5805000 	str	r5, [r0]
   1ba98:	1a00001e 	bne	1bb18 <CUSBSerialDevice::~CUSBSerialDevice()+0x98>
   1ba9c:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   1baa0:	e3550000 	cmp	r5, #0
   1baa4:	0a000004 	beq	1babc <CUSBSerialDevice::~CUSBSerialDevice()+0x3c>
   1baa8:	e1a00005 	mov	r0, r5
   1baac:	ebffd939 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   1bab0:	e1a00005 	mov	r0, r5
   1bab4:	e3a01014 	mov	r1, #20
   1bab8:	eb002f67 	bl	2785c <operator delete(void*, unsigned int)>
   1babc:	e3a03000 	mov	r3, #0
   1bac0:	e5945024 	ldr	r5, [r4, #36]	; 0x24
   1bac4:	e5843028 	str	r3, [r4, #40]	; 0x28
   1bac8:	e1550003 	cmp	r5, r3
   1bacc:	0a000004 	beq	1bae4 <CUSBSerialDevice::~CUSBSerialDevice()+0x64>
   1bad0:	e1a00005 	mov	r0, r5
   1bad4:	ebffd92f 	bl	11f98 <CUSBEndpoint::~CUSBEndpoint()>
   1bad8:	e1a00005 	mov	r0, r5
   1badc:	e3a01014 	mov	r1, #20
   1bae0:	eb002f5d 	bl	2785c <operator delete(void*, unsigned int)>
   1bae4:	e3a03000 	mov	r3, #0
   1bae8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1baec:	e5843024 	str	r3, [r4, #36]	; 0x24
   1baf0:	e1500003 	cmp	r0, r3
   1baf4:	0a000000 	beq	1bafc <CUSBSerialDevice::~CUSBSerialDevice()+0x7c>
   1baf8:	eb002f56 	bl	27858 <operator delete[](void*)>
   1bafc:	e3a03000 	mov	r3, #0
   1bb00:	e1a00004 	mov	r0, r4
   1bb04:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1bb08:	e5843030 	str	r3, [r4, #48]	; 0x30
   1bb0c:	ebffd98e 	bl	1214c <CUSBFunction::~CUSBFunction()>
   1bb10:	e1a00004 	mov	r0, r4
   1bb14:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bb18:	eb0009d2 	bl	1e268 <CDeviceNameService::Get()>
   1bb1c:	e285102c 	add	r1, r5, #44	; 0x2c
   1bb20:	e3a03000 	mov	r3, #0
   1bb24:	e5942040 	ldr	r2, [r4, #64]	; 0x40
   1bb28:	eb0009f4 	bl	1e300 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1bb2c:	e5941040 	ldr	r1, [r4, #64]	; 0x40
   1bb30:	e59f0008 	ldr	r0, [pc, #8]	; 1bb40 <CUSBSerialDevice::~CUSBSerialDevice()+0xc0>
   1bb34:	eb0030c0 	bl	27e3c <CNumberPool::FreeNumber(unsigned int)>
   1bb38:	eaffffd7 	b	1ba9c <CUSBSerialDevice::~CUSBSerialDevice()+0x1c>
   1bb3c:	0002faa0 	.word	0x0002faa0
   1bb40:	00034bf8 	.word	0x00034bf8

0001bb44 <CUSBSerialDevice::~CUSBSerialDevice()>:
   1bb44:	e92d4010 	push	{r4, lr}
   1bb48:	e1a04000 	mov	r4, r0
   1bb4c:	ebffffcb 	bl	1ba80 <CUSBSerialDevice::~CUSBSerialDevice()>
   1bb50:	e1a00004 	mov	r0, r4
   1bb54:	e3a01044 	mov	r1, #68	; 0x44
   1bb58:	eb002f3f 	bl	2785c <operator delete(void*, unsigned int)>
   1bb5c:	e1a00004 	mov	r0, r4
   1bb60:	e8bd8010 	pop	{r4, pc}

0001bb64 <CUSBSerialDevice::Write(void const*, unsigned int)>:
   1bb64:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   1bb68:	e2518000 	subs	r8, r1, #0
   1bb6c:	e28db018 	add	fp, sp, #24
   1bb70:	e24dd00c 	sub	sp, sp, #12
   1bb74:	0a000027 	beq	1bc18 <CUSBSerialDevice::Write(void const*, unsigned int)+0xb4>
   1bb78:	e3520000 	cmp	r2, #0
   1bb7c:	e1a04002 	mov	r4, r2
   1bb80:	0a000028 	beq	1bc28 <CUSBSerialDevice::Write(void const*, unsigned int)+0xc4>
   1bb84:	e1a06000 	mov	r6, r0
   1bb88:	ebffda77 	bl	1256c <CUSBFunction::GetHost() const>
   1bb8c:	e2505000 	subs	r5, r0, #0
   1bb90:	0a000028 	beq	1bc38 <CUSBSerialDevice::Write(void const*, unsigned int)+0xd4>
   1bb94:	e2443001 	sub	r3, r4, #1
   1bb98:	e383301f 	orr	r3, r3, #31
   1bb9c:	e2833020 	add	r3, r3, #32
   1bba0:	e3c33007 	bic	r3, r3, #7
   1bba4:	e04dd003 	sub	sp, sp, r3
   1bba8:	e28d7027 	add	r7, sp, #39	; 0x27
   1bbac:	e3c7701f 	bic	r7, r7, #31
   1bbb0:	e1a01008 	mov	r1, r8
   1bbb4:	e1a00007 	mov	r0, r7
   1bbb8:	e1a02004 	mov	r2, r4
   1bbbc:	eb002d32 	bl	2708c <memcpy>
   1bbc0:	e5961028 	ldr	r1, [r6, #40]	; 0x28
   1bbc4:	e3510000 	cmp	r1, #0
   1bbc8:	0a00001e 	beq	1bc48 <CUSBSerialDevice::Write(void const*, unsigned int)+0xe4>
   1bbcc:	e3a0c000 	mov	ip, #0
   1bbd0:	e1a03004 	mov	r3, r4
   1bbd4:	e1a02007 	mov	r2, r7
   1bbd8:	e1a00005 	mov	r0, r5
   1bbdc:	e58dc000 	str	ip, [sp]
   1bbe0:	ebffb570 	bl	91a8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1bbe4:	e2504000 	subs	r4, r0, #0
   1bbe8:	ba000002 	blt	1bbf8 <CUSBSerialDevice::Write(void const*, unsigned int)+0x94>
   1bbec:	e1a00004 	mov	r0, r4
   1bbf0:	e24bd018 	sub	sp, fp, #24
   1bbf4:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1bbf8:	eb000fc0 	bl	1fb00 <CLogger::Get()>
   1bbfc:	e3a02002 	mov	r2, #2
   1bc00:	e59f3050 	ldr	r3, [pc, #80]	; 1bc58 <CUSBSerialDevice::Write(void const*, unsigned int)+0xf4>
   1bc04:	e59f1050 	ldr	r1, [pc, #80]	; 1bc5c <CUSBSerialDevice::Write(void const*, unsigned int)+0xf8>
   1bc08:	eb000efe 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bc0c:	e1a00004 	mov	r0, r4
   1bc10:	e24bd018 	sub	sp, fp, #24
   1bc14:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1bc18:	e3a02085 	mov	r2, #133	; 0x85
   1bc1c:	e59f103c 	ldr	r1, [pc, #60]	; 1bc60 <CUSBSerialDevice::Write(void const*, unsigned int)+0xfc>
   1bc20:	e59f003c 	ldr	r0, [pc, #60]	; 1bc64 <CUSBSerialDevice::Write(void const*, unsigned int)+0x100>
   1bc24:	eb0006b5 	bl	1d700 <assertion_failed>
   1bc28:	e3a02086 	mov	r2, #134	; 0x86
   1bc2c:	e59f102c 	ldr	r1, [pc, #44]	; 1bc60 <CUSBSerialDevice::Write(void const*, unsigned int)+0xfc>
   1bc30:	e59f0030 	ldr	r0, [pc, #48]	; 1bc68 <CUSBSerialDevice::Write(void const*, unsigned int)+0x104>
   1bc34:	eb0006b1 	bl	1d700 <assertion_failed>
   1bc38:	e3a02089 	mov	r2, #137	; 0x89
   1bc3c:	e59f101c 	ldr	r1, [pc, #28]	; 1bc60 <CUSBSerialDevice::Write(void const*, unsigned int)+0xfc>
   1bc40:	e59f0024 	ldr	r0, [pc, #36]	; 1bc6c <CUSBSerialDevice::Write(void const*, unsigned int)+0x108>
   1bc44:	eb0006ad 	bl	1d700 <assertion_failed>
   1bc48:	e3a0208e 	mov	r2, #142	; 0x8e
   1bc4c:	e59f100c 	ldr	r1, [pc, #12]	; 1bc60 <CUSBSerialDevice::Write(void const*, unsigned int)+0xfc>
   1bc50:	e59f0018 	ldr	r0, [pc, #24]	; 1bc70 <CUSBSerialDevice::Write(void const*, unsigned int)+0x10c>
   1bc54:	eb0006a9 	bl	1d700 <assertion_failed>
   1bc58:	0002f9b8 	.word	0x0002f9b8
   1bc5c:	0002fad4 	.word	0x0002fad4
   1bc60:	0002f994 	.word	0x0002f994
   1bc64:	0002e89c 	.word	0x0002e89c
   1bc68:	0002ed04 	.word	0x0002ed04
   1bc6c:	0002cd28 	.word	0x0002cd28
   1bc70:	0002f9a4 	.word	0x0002f9a4

0001bc74 <CUSBSerialDevice::Read(void*, unsigned int)>:
   1bc74:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1bc78:	e251c000 	subs	ip, r1, #0
   1bc7c:	e24dd00c 	sub	sp, sp, #12
   1bc80:	0a000048 	beq	1bda8 <CUSBSerialDevice::Read(void*, unsigned int)+0x134>
   1bc84:	e3520000 	cmp	r2, #0
   1bc88:	0a00004a 	beq	1bdb8 <CUSBSerialDevice::Read(void*, unsigned int)+0x144>
   1bc8c:	e1a04000 	mov	r4, r0
   1bc90:	e3a03000 	mov	r3, #0
   1bc94:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1bc98:	e5d0303c 	ldrb	r3, [r0, #60]	; 0x3c
   1bc9c:	e3530000 	cmp	r3, #0
   1bca0:	1a000039 	bne	1bd8c <CUSBSerialDevice::Read(void*, unsigned int)+0x118>
   1bca4:	e590102c 	ldr	r1, [r0, #44]	; 0x2c
   1bca8:	e3510000 	cmp	r1, #0
   1bcac:	0a000039 	beq	1bd98 <CUSBSerialDevice::Read(void*, unsigned int)+0x124>
   1bcb0:	e590e030 	ldr	lr, [r0, #48]	; 0x30
   1bcb4:	e35e0000 	cmp	lr, #0
   1bcb8:	0a00004f 	beq	1bdfc <CUSBSerialDevice::Read(void*, unsigned int)+0x188>
   1bcbc:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   1bcc0:	e15e0003 	cmp	lr, r3
   1bcc4:	3a000050 	bcc	1be0c <CUSBSerialDevice::Read(void*, unsigned int)+0x198>
   1bcc8:	e590e038 	ldr	lr, [r0, #56]	; 0x38
   1bccc:	e153000e 	cmp	r3, lr
   1bcd0:	3a000051 	bcc	1be1c <CUSBSerialDevice::Read(void*, unsigned int)+0x1a8>
   1bcd4:	0a00000d 	beq	1bd10 <CUSBSerialDevice::Read(void*, unsigned int)+0x9c>
   1bcd8:	e043300e 	sub	r3, r3, lr
   1bcdc:	e1530002 	cmp	r3, r2
   1bce0:	31a05003 	movcc	r5, r3
   1bce4:	21a05002 	movcs	r5, r2
   1bce8:	e1a0000c 	mov	r0, ip
   1bcec:	e1a02005 	mov	r2, r5
   1bcf0:	e081100e 	add	r1, r1, lr
   1bcf4:	eb002ce4 	bl	2708c <memcpy>
   1bcf8:	e1a00005 	mov	r0, r5
   1bcfc:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   1bd00:	e0822005 	add	r2, r2, r5
   1bd04:	e5842038 	str	r2, [r4, #56]	; 0x38
   1bd08:	e28dd00c 	add	sp, sp, #12
   1bd0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bd10:	ebffda15 	bl	1256c <CUSBFunction::GetHost() const>
   1bd14:	e2506000 	subs	r6, r0, #0
   1bd18:	0a000043 	beq	1be2c <CUSBSerialDevice::Read(void*, unsigned int)+0x1b8>
   1bd1c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1bd20:	e3530000 	cmp	r3, #0
   1bd24:	0a000044 	beq	1be3c <CUSBSerialDevice::Read(void*, unsigned int)+0x1c8>
   1bd28:	e3a0002c 	mov	r0, #44	; 0x2c
   1bd2c:	ebffbada 	bl	a89c <CUSBRequest::operator new(unsigned int)>
   1bd30:	e3a05000 	mov	r5, #0
   1bd34:	e1a07000 	mov	r7, r0
   1bd38:	e58d5000 	str	r5, [sp]
   1bd3c:	e1c422dc 	ldrd	r2, [r4, #44]	; 0x2c
   1bd40:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   1bd44:	ebffba43 	bl	a658 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1bd48:	e1a00007 	mov	r0, r7
   1bd4c:	ebffbacd 	bl	a888 <CUSBRequest::SetCompleteOnNAK()>
   1bd50:	e1a02005 	mov	r2, r5
   1bd54:	e1a03004 	mov	r3, r4
   1bd58:	e1a00007 	mov	r0, r7
   1bd5c:	e59f10e8 	ldr	r1, [pc, #232]	; 1be4c <CUSBSerialDevice::Read(void*, unsigned int)+0x1d8>
   1bd60:	ebffbaae 	bl	a820 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1bd64:	e3a00001 	mov	r0, #1
   1bd68:	e5963000 	ldr	r3, [r6]
   1bd6c:	e1a02005 	mov	r2, r5
   1bd70:	e5c4003c 	strb	r0, [r4, #60]	; 0x3c
   1bd74:	e1a01007 	mov	r1, r7
   1bd78:	e1a00006 	mov	r0, r6
   1bd7c:	e593300c 	ldr	r3, [r3, #12]
   1bd80:	e12fff33 	blx	r3
   1bd84:	e2505000 	subs	r5, r0, #0
   1bd88:	0a00000e 	beq	1bdc8 <CUSBSerialDevice::Read(void*, unsigned int)+0x154>
   1bd8c:	e3a00000 	mov	r0, #0
   1bd90:	e28dd00c 	add	sp, sp, #12
   1bd94:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bd98:	e3a020a4 	mov	r2, #164	; 0xa4
   1bd9c:	e59f10ac 	ldr	r1, [pc, #172]	; 1be50 <CUSBSerialDevice::Read(void*, unsigned int)+0x1dc>
   1bda0:	e59f00ac 	ldr	r0, [pc, #172]	; 1be54 <CUSBSerialDevice::Read(void*, unsigned int)+0x1e0>
   1bda4:	eb000655 	bl	1d700 <assertion_failed>
   1bda8:	e3a0209a 	mov	r2, #154	; 0x9a
   1bdac:	e59f109c 	ldr	r1, [pc, #156]	; 1be50 <CUSBSerialDevice::Read(void*, unsigned int)+0x1dc>
   1bdb0:	e59f00a0 	ldr	r0, [pc, #160]	; 1be58 <CUSBSerialDevice::Read(void*, unsigned int)+0x1e4>
   1bdb4:	eb000651 	bl	1d700 <assertion_failed>
   1bdb8:	e3a0209b 	mov	r2, #155	; 0x9b
   1bdbc:	e59f108c 	ldr	r1, [pc, #140]	; 1be50 <CUSBSerialDevice::Read(void*, unsigned int)+0x1dc>
   1bdc0:	e59f0094 	ldr	r0, [pc, #148]	; 1be5c <CUSBSerialDevice::Read(void*, unsigned int)+0x1e8>
   1bdc4:	eb00064d 	bl	1d700 <assertion_failed>
   1bdc8:	eb000f4c 	bl	1fb00 <CLogger::Get()>
   1bdcc:	e3a02002 	mov	r2, #2
   1bdd0:	e59f3088 	ldr	r3, [pc, #136]	; 1be60 <CUSBSerialDevice::Read(void*, unsigned int)+0x1ec>
   1bdd4:	e59f1088 	ldr	r1, [pc, #136]	; 1be64 <CUSBSerialDevice::Read(void*, unsigned int)+0x1f0>
   1bdd8:	eb000e8a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bddc:	e1a00007 	mov	r0, r7
   1bde0:	e5c4503c 	strb	r5, [r4, #60]	; 0x3c
   1bde4:	ebffba3d 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
   1bde8:	e1a00007 	mov	r0, r7
   1bdec:	e3a0102c 	mov	r1, #44	; 0x2c
   1bdf0:	ebffbabe 	bl	a8f0 <CUSBRequest::operator delete(void*, unsigned int)>
   1bdf4:	e3e00000 	mvn	r0, #0
   1bdf8:	eaffffc2 	b	1bd08 <CUSBSerialDevice::Read(void*, unsigned int)+0x94>
   1bdfc:	e3a020a5 	mov	r2, #165	; 0xa5
   1be00:	e59f1048 	ldr	r1, [pc, #72]	; 1be50 <CUSBSerialDevice::Read(void*, unsigned int)+0x1dc>
   1be04:	e59f005c 	ldr	r0, [pc, #92]	; 1be68 <CUSBSerialDevice::Read(void*, unsigned int)+0x1f4>
   1be08:	eb00063c 	bl	1d700 <assertion_failed>
   1be0c:	e3a020a6 	mov	r2, #166	; 0xa6
   1be10:	e59f1038 	ldr	r1, [pc, #56]	; 1be50 <CUSBSerialDevice::Read(void*, unsigned int)+0x1dc>
   1be14:	e59f0050 	ldr	r0, [pc, #80]	; 1be6c <CUSBSerialDevice::Read(void*, unsigned int)+0x1f8>
   1be18:	eb000638 	bl	1d700 <assertion_failed>
   1be1c:	e3a020a7 	mov	r2, #167	; 0xa7
   1be20:	e59f1028 	ldr	r1, [pc, #40]	; 1be50 <CUSBSerialDevice::Read(void*, unsigned int)+0x1dc>
   1be24:	e59f0044 	ldr	r0, [pc, #68]	; 1be70 <CUSBSerialDevice::Read(void*, unsigned int)+0x1fc>
   1be28:	eb000634 	bl	1d700 <assertion_failed>
   1be2c:	e3a020ac 	mov	r2, #172	; 0xac
   1be30:	e59f1018 	ldr	r1, [pc, #24]	; 1be50 <CUSBSerialDevice::Read(void*, unsigned int)+0x1dc>
   1be34:	e59f0038 	ldr	r0, [pc, #56]	; 1be74 <CUSBSerialDevice::Read(void*, unsigned int)+0x200>
   1be38:	eb000630 	bl	1d700 <assertion_failed>
   1be3c:	e3a020ae 	mov	r2, #174	; 0xae
   1be40:	e59f1008 	ldr	r1, [pc, #8]	; 1be50 <CUSBSerialDevice::Read(void*, unsigned int)+0x1dc>
   1be44:	e59f002c 	ldr	r0, [pc, #44]	; 1be78 <CUSBSerialDevice::Read(void*, unsigned int)+0x204>
   1be48:	eb00062c 	bl	1d700 <assertion_failed>
   1be4c:	0001bfe0 	.word	0x0001bfe0
   1be50:	0002f994 	.word	0x0002f994
   1be54:	0002f9cc 	.word	0x0002f9cc
   1be58:	0002e89c 	.word	0x0002e89c
   1be5c:	0002ed04 	.word	0x0002ed04
   1be60:	0002fa3c 	.word	0x0002fa3c
   1be64:	0002fad4 	.word	0x0002fad4
   1be68:	0002f9e0 	.word	0x0002f9e0
   1be6c:	0002f9f4 	.word	0x0002f9f4
   1be70:	0002fa18 	.word	0x0002fa18
   1be74:	0002cd28 	.word	0x0002cd28
   1be78:	0002c884 	.word	0x0002c884

0001be7c <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>:
   1be7c:	e92d4070 	push	{r4, r5, r6, lr}
   1be80:	e1a04000 	mov	r4, r0
   1be84:	e1a05002 	mov	r5, r2
   1be88:	ebffd942 	bl	12398 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1be8c:	e3a03000 	mov	r3, #0
   1be90:	e3a0cd96 	mov	ip, #9600	; 0x2580
   1be94:	e3a01008 	mov	r1, #8
   1be98:	e3a02001 	mov	r2, #1
   1be9c:	e59f0038 	ldr	r0, [pc, #56]	; 1bedc <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)+0x60>
   1bea0:	e5845020 	str	r5, [r4, #32]
   1bea4:	e5840000 	str	r0, [r4]
   1bea8:	e584c018 	str	ip, [r4, #24]
   1beac:	e1a00004 	mov	r0, r4
   1beb0:	e1c411bc 	strh	r1, [r4, #28]
   1beb4:	e5c4201e 	strb	r2, [r4, #30]
   1beb8:	e5843024 	str	r3, [r4, #36]	; 0x24
   1bebc:	e5843028 	str	r3, [r4, #40]	; 0x28
   1bec0:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1bec4:	e5843030 	str	r3, [r4, #48]	; 0x30
   1bec8:	e5843034 	str	r3, [r4, #52]	; 0x34
   1becc:	e5843038 	str	r3, [r4, #56]	; 0x38
   1bed0:	e5c4303c 	strb	r3, [r4, #60]	; 0x3c
   1bed4:	e5843040 	str	r3, [r4, #64]	; 0x40
   1bed8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bedc:	0002faa0 	.word	0x0002faa0

0001bee0 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)>:
   1bee0:	e92d4070 	push	{r4, r5, r6, lr}
   1bee4:	e2515000 	subs	r5, r1, #0
   1bee8:	0a00002a 	beq	1bf98 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xb8>
   1beec:	e5d0303c 	ldrb	r3, [r0, #60]	; 0x3c
   1bef0:	e1a04000 	mov	r4, r0
   1bef4:	e3530000 	cmp	r3, #0
   1bef8:	0a00002a 	beq	1bfa8 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xc8>
   1befc:	e1c023d4 	ldrd	r2, [r0, #52]	; 0x34
   1bf00:	e1520003 	cmp	r2, r3
   1bf04:	1a00002b 	bne	1bfb8 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   1bf08:	e1a00005 	mov	r0, r5
   1bf0c:	ebffba04 	bl	a724 <CUSBRequest::GetStatus() const>
   1bf10:	e3500000 	cmp	r0, #0
   1bf14:	1a000008 	bne	1bf3c <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   1bf18:	e1a00005 	mov	r0, r5
   1bf1c:	ebffb9ef 	bl	a6e0 <CUSBRequest::~CUSBRequest()>
   1bf20:	e1a00005 	mov	r0, r5
   1bf24:	e3a0102c 	mov	r1, #44	; 0x2c
   1bf28:	ebffba70 	bl	a8f0 <CUSBRequest::operator delete(void*, unsigned int)>
   1bf2c:	e3a03000 	mov	r3, #0
   1bf30:	e5c4303c 	strb	r3, [r4, #60]	; 0x3c
   1bf34:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1bf38:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bf3c:	e1a00005 	mov	r0, r5
   1bf40:	ebffb9f9 	bl	a72c <CUSBRequest::GetResultLength() const>
   1bf44:	e5943020 	ldr	r3, [r4, #32]
   1bf48:	e5840034 	str	r0, [r4, #52]	; 0x34
   1bf4c:	e3500000 	cmp	r0, #0
   1bf50:	11500003 	cmpne	r0, r3
   1bf54:	e5843038 	str	r3, [r4, #56]	; 0x38
   1bf58:	03a06001 	moveq	r6, #1
   1bf5c:	13a06000 	movne	r6, #0
   1bf60:	03a03000 	moveq	r3, #0
   1bf64:	05843034 	streq	r3, [r4, #52]	; 0x34
   1bf68:	05843038 	streq	r3, [r4, #56]	; 0x38
   1bf6c:	0affffe9 	beq	1bf18 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x38>
   1bf70:	e1500003 	cmp	r0, r3
   1bf74:	2affffe7 	bcs	1bf18 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x38>
   1bf78:	eb000ee0 	bl	1fb00 <CLogger::Get()>
   1bf7c:	e3a02002 	mov	r2, #2
   1bf80:	e59f3040 	ldr	r3, [pc, #64]	; 1bfc8 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xe8>
   1bf84:	e59f1040 	ldr	r1, [pc, #64]	; 1bfcc <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xec>
   1bf88:	eb000e1e 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bf8c:	e5846034 	str	r6, [r4, #52]	; 0x34
   1bf90:	e5846038 	str	r6, [r4, #56]	; 0x38
   1bf94:	eaffffdf 	b	1bf18 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x38>
   1bf98:	e3a020e5 	mov	r2, #229	; 0xe5
   1bf9c:	e59f102c 	ldr	r1, [pc, #44]	; 1bfd0 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   1bfa0:	e59f002c 	ldr	r0, [pc, #44]	; 1bfd4 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   1bfa4:	eb0005d5 	bl	1d700 <assertion_failed>
   1bfa8:	e3a020e6 	mov	r2, #230	; 0xe6
   1bfac:	e59f101c 	ldr	r1, [pc, #28]	; 1bfd0 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   1bfb0:	e59f0020 	ldr	r0, [pc, #32]	; 1bfd8 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xf8>
   1bfb4:	eb0005d1 	bl	1d700 <assertion_failed>
   1bfb8:	e3a020e7 	mov	r2, #231	; 0xe7
   1bfbc:	e59f100c 	ldr	r1, [pc, #12]	; 1bfd0 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xf0>
   1bfc0:	e59f0014 	ldr	r0, [pc, #20]	; 1bfdc <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xfc>
   1bfc4:	eb0005cd 	bl	1d700 <assertion_failed>
   1bfc8:	0002fa84 	.word	0x0002fa84
   1bfcc:	0002fad4 	.word	0x0002fad4
   1bfd0:	0002f994 	.word	0x0002f994
   1bfd4:	0002c8e4 	.word	0x0002c8e4
   1bfd8:	0002fa4c 	.word	0x0002fa4c
   1bfdc:	0002fa60 	.word	0x0002fa60

0001bfe0 <CUSBSerialDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   1bfe0:	e3520000 	cmp	r2, #0
   1bfe4:	0a000002 	beq	1bff4 <CUSBSerialDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   1bfe8:	e1a01000 	mov	r1, r0
   1bfec:	e1a00002 	mov	r0, r2
   1bff0:	eaffffba 	b	1bee0 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)>
   1bff4:	e92d4010 	push	{r4, lr}
   1bff8:	e59f2008 	ldr	r2, [pc, #8]	; 1c008 <CUSBSerialDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   1bffc:	e59f1008 	ldr	r1, [pc, #8]	; 1c00c <CUSBSerialDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   1c000:	e59f0008 	ldr	r0, [pc, #8]	; 1c010 <CUSBSerialDevice::CompletionStub(CUSBRequest*, void*, void*)+0x30>
   1c004:	eb0005bd 	bl	1d700 <assertion_failed>
   1c008:	00000106 	.word	0x00000106
   1c00c:	0002f994 	.word	0x0002f994
   1c010:	0002c8c4 	.word	0x0002c8c4

0001c014 <CUSBSerialDevice::Configure()>:
   1c014:	e92d4070 	push	{r4, r5, r6, lr}
   1c018:	e1a05000 	mov	r5, r0
   1c01c:	e24dd010 	sub	sp, sp, #16
   1c020:	ea000003 	b	1c034 <CUSBSerialDevice::Configure()+0x20>
   1c024:	e5d41003 	ldrb	r1, [r4, #3]
   1c028:	e201103f 	and	r1, r1, #63	; 0x3f
   1c02c:	e3510002 	cmp	r1, #2
   1c030:	0a000024 	beq	1c0c8 <CUSBSerialDevice::Configure()+0xb4>
   1c034:	e3a01005 	mov	r1, #5
   1c038:	e1a00005 	mov	r0, r5
   1c03c:	ebffd955 	bl	12598 <CUSBFunction::GetDescriptor(unsigned char)>
   1c040:	e2504000 	subs	r4, r0, #0
   1c044:	1afffff6 	bne	1c024 <CUSBSerialDevice::Configure()+0x10>
   1c048:	e5950024 	ldr	r0, [r5, #36]	; 0x24
   1c04c:	e3500000 	cmp	r0, #0
   1c050:	0a00002e 	beq	1c110 <CUSBSerialDevice::Configure()+0xfc>
   1c054:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   1c058:	e3530000 	cmp	r3, #0
   1c05c:	0a00002b 	beq	1c110 <CUSBSerialDevice::Configure()+0xfc>
   1c060:	ebffd7e1 	bl	11fec <CUSBEndpoint::GetMaxPacketSize() const>
   1c064:	e5850030 	str	r0, [r5, #48]	; 0x30
   1c068:	eb002df3 	bl	2783c <operator new[](unsigned int)>
   1c06c:	e1a03000 	mov	r3, r0
   1c070:	e1a00005 	mov	r0, r5
   1c074:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1c078:	ebffd85c 	bl	121f0 <CUSBFunction::Configure()>
   1c07c:	e2504000 	subs	r4, r0, #0
   1c080:	0a000038 	beq	1c168 <CUSBSerialDevice::Configure()+0x154>
   1c084:	e5956040 	ldr	r6, [r5, #64]	; 0x40
   1c088:	e3560000 	cmp	r6, #0
   1c08c:	1a00003d 	bne	1c188 <CUSBSerialDevice::Configure()+0x174>
   1c090:	e3a01001 	mov	r1, #1
   1c094:	e59f20fc 	ldr	r2, [pc, #252]	; 1c198 <CUSBSerialDevice::Configure()+0x184>
   1c098:	e59f00fc 	ldr	r0, [pc, #252]	; 1c19c <CUSBSerialDevice::Configure()+0x188>
   1c09c:	eb002f2b 	bl	27d50 <CNumberPool::AllocateNumber(bool, char const*)>
   1c0a0:	e5850040 	str	r0, [r5, #64]	; 0x40
   1c0a4:	eb00086f 	bl	1e268 <CDeviceNameService::Get()>
   1c0a8:	e58d6000 	str	r6, [sp]
   1c0ac:	e1a03005 	mov	r3, r5
   1c0b0:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   1c0b4:	e59f10e4 	ldr	r1, [pc, #228]	; 1c1a0 <CUSBSerialDevice::Configure()+0x18c>
   1c0b8:	eb000876 	bl	1e298 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1c0bc:	e1a00004 	mov	r0, r4
   1c0c0:	e28dd010 	add	sp, sp, #16
   1c0c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c0c8:	e1d430d2 	ldrsb	r3, [r4, #2]
   1c0cc:	e3530000 	cmp	r3, #0
   1c0d0:	ba000015 	blt	1c12c <CUSBSerialDevice::Configure()+0x118>
   1c0d4:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   1c0d8:	e1a00005 	mov	r0, r5
   1c0dc:	e3530000 	cmp	r3, #0
   1c0e0:	1a00000b 	bne	1c114 <CUSBSerialDevice::Configure()+0x100>
   1c0e4:	ebffd90b 	bl	12518 <CUSBFunction::GetDevice() const>
   1c0e8:	e1a01000 	mov	r1, r0
   1c0ec:	e3a00014 	mov	r0, #20
   1c0f0:	e58d100c 	str	r1, [sp, #12]
   1c0f4:	eb002dca 	bl	27824 <operator new(unsigned int)>
   1c0f8:	e1a06000 	mov	r6, r0
   1c0fc:	e1a02004 	mov	r2, r4
   1c100:	e59d100c 	ldr	r1, [sp, #12]
   1c104:	ebffd745 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1c108:	e5856028 	str	r6, [r5, #40]	; 0x28
   1c10c:	eaffffc8 	b	1c034 <CUSBSerialDevice::Configure()+0x20>
   1c110:	e1a00005 	mov	r0, r5
   1c114:	e3a04000 	mov	r4, #0
   1c118:	e59f1078 	ldr	r1, [pc, #120]	; 1c198 <CUSBSerialDevice::Configure()+0x184>
   1c11c:	ebffd928 	bl	125c4 <CUSBFunction::ConfigurationError(char const*) const>
   1c120:	e1a00004 	mov	r0, r4
   1c124:	e28dd010 	add	sp, sp, #16
   1c128:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c12c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   1c130:	e1a00005 	mov	r0, r5
   1c134:	e3530000 	cmp	r3, #0
   1c138:	1afffff5 	bne	1c114 <CUSBSerialDevice::Configure()+0x100>
   1c13c:	ebffd8f5 	bl	12518 <CUSBFunction::GetDevice() const>
   1c140:	e1a01000 	mov	r1, r0
   1c144:	e3a00014 	mov	r0, #20
   1c148:	e58d100c 	str	r1, [sp, #12]
   1c14c:	eb002db4 	bl	27824 <operator new(unsigned int)>
   1c150:	e1a06000 	mov	r6, r0
   1c154:	e1a02004 	mov	r2, r4
   1c158:	e59d100c 	ldr	r1, [sp, #12]
   1c15c:	ebffd72f 	bl	11e20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1c160:	e5856024 	str	r6, [r5, #36]	; 0x24
   1c164:	eaffffb2 	b	1c034 <CUSBSerialDevice::Configure()+0x20>
   1c168:	eb000e64 	bl	1fb00 <CLogger::Get()>
   1c16c:	e3a02001 	mov	r2, #1
   1c170:	e59f302c 	ldr	r3, [pc, #44]	; 1c1a4 <CUSBSerialDevice::Configure()+0x190>
   1c174:	e59f101c 	ldr	r1, [pc, #28]	; 1c198 <CUSBSerialDevice::Configure()+0x184>
   1c178:	eb000da2 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c17c:	e1a00004 	mov	r0, r4
   1c180:	e28dd010 	add	sp, sp, #16
   1c184:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c188:	e3a0207b 	mov	r2, #123	; 0x7b
   1c18c:	e59f1014 	ldr	r1, [pc, #20]	; 1c1a8 <CUSBSerialDevice::Configure()+0x194>
   1c190:	e59f0014 	ldr	r0, [pc, #20]	; 1c1ac <CUSBSerialDevice::Configure()+0x198>
   1c194:	eb000559 	bl	1d700 <assertion_failed>
   1c198:	0002fad4 	.word	0x0002fad4
   1c19c:	00034bf8 	.word	0x00034bf8
   1c1a0:	0002facc 	.word	0x0002facc
   1c1a4:	0002c93c 	.word	0x0002c93c
   1c1a8:	0002f994 	.word	0x0002f994
   1c1ac:	0002c954 	.word	0x0002c954

0001c1b0 <_GLOBAL__sub_I__ZN16CUSBSerialDevice18s_DeviceNumberPoolE>:
   1c1b0:	e92d4010 	push	{r4, lr}
   1c1b4:	e59f4020 	ldr	r4, [pc, #32]	; 1c1dc <_GLOBAL__sub_I__ZN16CUSBSerialDevice18s_DeviceNumberPoolE+0x2c>
   1c1b8:	e3a0203f 	mov	r2, #63	; 0x3f
   1c1bc:	e1a00004 	mov	r0, r4
   1c1c0:	e3a01001 	mov	r1, #1
   1c1c4:	eb002ecc 	bl	27cfc <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1c1c8:	e1a00004 	mov	r0, r4
   1c1cc:	e8bd4010 	pop	{r4, lr}
   1c1d0:	e59f2008 	ldr	r2, [pc, #8]	; 1c1e0 <_GLOBAL__sub_I__ZN16CUSBSerialDevice18s_DeviceNumberPoolE+0x30>
   1c1d4:	e59f1008 	ldr	r1, [pc, #8]	; 1c1e4 <_GLOBAL__sub_I__ZN16CUSBSerialDevice18s_DeviceNumberPoolE+0x34>
   1c1d8:	ea0025b6 	b	258b8 <__aeabi_atexit>
   1c1dc:	00034bf8 	.word	0x00034bf8
   1c1e0:	00034c44 	.word	0x00034c44
   1c1e4:	00027d4c 	.word	0x00027d4c

0001c1e8 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   1c1e8:	e3a03000 	mov	r3, #0
   1c1ec:	e92d4010 	push	{r4, lr}
   1c1f0:	e1a04000 	mov	r4, r0
   1c1f4:	e5803000 	str	r3, [r0]
   1c1f8:	e5803004 	str	r3, [r0, #4]
   1c1fc:	e5803008 	str	r3, [r0, #8]
   1c200:	e1c030bc 	strh	r3, [r0, #12]
   1c204:	e5803010 	str	r3, [r0, #16]
   1c208:	e2800014 	add	r0, r0, #20
   1c20c:	eb00017d 	bl	1c808 <CKeyMap::CKeyMap()>
   1c210:	e1a00004 	mov	r0, r4
   1c214:	e8bd8010 	pop	{r4, pc}

0001c218 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   1c218:	e3a03000 	mov	r3, #0
   1c21c:	e92d4010 	push	{r4, lr}
   1c220:	e1a04000 	mov	r4, r0
   1c224:	e5803000 	str	r3, [r0]
   1c228:	e5803004 	str	r3, [r0, #4]
   1c22c:	e5803008 	str	r3, [r0, #8]
   1c230:	e2800014 	add	r0, r0, #20
   1c234:	eb0000ae 	bl	1c4f4 <CKeyMap::~CKeyMap()>
   1c238:	e1a00004 	mov	r0, r4
   1c23c:	e8bd8010 	pop	{r4, pc}

0001c240 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   1c240:	e3510000 	cmp	r1, #0
   1c244:	0a000001 	beq	1c250 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x10>
   1c248:	e5801000 	str	r1, [r0]
   1c24c:	e12fff1e 	bx	lr
   1c250:	e3a0202f 	mov	r2, #47	; 0x2f
   1c254:	e92d4010 	push	{r4, lr}
   1c258:	e59f1004 	ldr	r1, [pc, #4]	; 1c264 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x24>
   1c25c:	e59f0004 	ldr	r0, [pc, #4]	; 1c268 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x28>
   1c260:	eb000526 	bl	1d700 <assertion_failed>
   1c264:	0002fadc 	.word	0x0002fadc
   1c268:	0002faf4 	.word	0x0002faf4

0001c26c <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   1c26c:	e3510000 	cmp	r1, #0
   1c270:	0a000001 	beq	1c27c <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x10>
   1c274:	e5801004 	str	r1, [r0, #4]
   1c278:	e12fff1e 	bx	lr
   1c27c:	e3a02035 	mov	r2, #53	; 0x35
   1c280:	e92d4010 	push	{r4, lr}
   1c284:	e59f1004 	ldr	r1, [pc, #4]	; 1c290 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x24>
   1c288:	e59f0004 	ldr	r0, [pc, #4]	; 1c294 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x28>
   1c28c:	eb00051b 	bl	1d700 <assertion_failed>
   1c290:	0002fadc 	.word	0x0002fadc
   1c294:	0002fb0c 	.word	0x0002fb0c

0001c298 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   1c298:	e3510000 	cmp	r1, #0
   1c29c:	0a000001 	beq	1c2a8 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x10>
   1c2a0:	e5801008 	str	r1, [r0, #8]
   1c2a4:	e12fff1e 	bx	lr
   1c2a8:	e3a0203b 	mov	r2, #59	; 0x3b
   1c2ac:	e92d4010 	push	{r4, lr}
   1c2b0:	e59f1004 	ldr	r1, [pc, #4]	; 1c2bc <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x24>
   1c2b4:	e59f0004 	ldr	r0, [pc, #4]	; 1c2c0 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x28>
   1c2b8:	eb000510 	bl	1d700 <assertion_failed>
   1c2bc:	0002fadc 	.word	0x0002fadc
   1c2c0:	0002fb28 	.word	0x0002fb28

0001c2c4 <CKeyboardBehaviour::GetLEDStatus() const>:
   1c2c4:	e2800014 	add	r0, r0, #20
   1c2c8:	ea000121 	b	1c754 <CKeyMap::GetLEDStatus() const>

0001c2cc <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   1c2cc:	e92d4030 	push	{r4, r5, lr}
   1c2d0:	e2805014 	add	r5, r0, #20
   1c2d4:	e5d0200c 	ldrb	r2, [r0, #12]
   1c2d8:	e24dd014 	sub	sp, sp, #20
   1c2dc:	e1a04000 	mov	r4, r0
   1c2e0:	e1a00005 	mov	r0, r5
   1c2e4:	e58d2004 	str	r2, [sp, #4]
   1c2e8:	eb0000a4 	bl	1c580 <CKeyMap::Translate(unsigned char, unsigned char)>
   1c2ec:	e59f30a4 	ldr	r3, [pc, #164]	; 1c398 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xcc>
   1c2f0:	e59d2004 	ldr	r2, [sp, #4]
   1c2f4:	e1500003 	cmp	r0, r3
   1c2f8:	8a000009 	bhi	1c324 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x58>
   1c2fc:	e243300c 	sub	r3, r3, #12
   1c300:	e1500003 	cmp	r0, r3
   1c304:	8a00001b 	bhi	1c378 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   1c308:	e2403e13 	sub	r3, r0, #304	; 0x130
   1c30c:	e2433003 	sub	r3, r3, #3
   1c310:	e6ff3073 	uxth	r3, r3
   1c314:	e3530002 	cmp	r3, #2
   1c318:	8a00000a 	bhi	1c348 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x7c>
   1c31c:	e28dd014 	add	sp, sp, #20
   1c320:	e8bd8030 	pop	{r4, r5, pc}
   1c324:	e59f3070 	ldr	r3, [pc, #112]	; 1c39c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xd0>
   1c328:	e1500003 	cmp	r0, r3
   1c32c:	1a000005 	bne	1c348 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x7c>
   1c330:	e5943008 	ldr	r3, [r4, #8]
   1c334:	e3530000 	cmp	r3, #0
   1c338:	0afffff7 	beq	1c31c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   1c33c:	e12fff33 	blx	r3
   1c340:	e28dd014 	add	sp, sp, #20
   1c344:	e8bd8030 	pop	{r4, r5, pc}
   1c348:	e1a01000 	mov	r1, r0
   1c34c:	e28d300c 	add	r3, sp, #12
   1c350:	e1a00005 	mov	r0, r5
   1c354:	eb0000cd 	bl	1c690 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   1c358:	e3500000 	cmp	r0, #0
   1c35c:	0affffee 	beq	1c31c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   1c360:	e5943000 	ldr	r3, [r4]
   1c364:	e3530000 	cmp	r3, #0
   1c368:	0affffeb 	beq	1c31c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   1c36c:	e12fff33 	blx	r3
   1c370:	e28dd014 	add	sp, sp, #20
   1c374:	e8bd8030 	pop	{r4, r5, pc}
   1c378:	e5943004 	ldr	r3, [r4, #4]
   1c37c:	e3530000 	cmp	r3, #0
   1c380:	0affffe5 	beq	1c31c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x50>
   1c384:	e2400f4d 	sub	r0, r0, #308	; 0x134
   1c388:	e2400002 	sub	r0, r0, #2
   1c38c:	e12fff33 	blx	r3
   1c390:	e28dd014 	add	sp, sp, #20
   1c394:	e8bd8030 	pop	{r4, r5, pc}
   1c398:	00000141 	.word	0x00000141
   1c39c:	00000142 	.word	0x00000142

0001c3a0 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   1c3a0:	e2212080 	eor	r2, r1, #128	; 0x80
   1c3a4:	e3520007 	cmp	r2, #7
   1c3a8:	e241c080 	sub	ip, r1, #128	; 0x80
   1c3ac:	8a000004 	bhi	1c3c4 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x24>
   1c3b0:	e3a01001 	mov	r1, #1
   1c3b4:	e5d0300c 	ldrb	r3, [r0, #12]
   1c3b8:	e1833c11 	orr	r3, r3, r1, lsl ip
   1c3bc:	e5c0300c 	strb	r3, [r0, #12]
   1c3c0:	e12fff1e 	bx	lr
   1c3c4:	e5d0c00d 	ldrb	ip, [r0, #13]
   1c3c8:	e15c0001 	cmp	ip, r1
   1c3cc:	012fff1e 	bxeq	lr
   1c3d0:	e5c0100d 	strb	r1, [r0, #13]
   1c3d4:	eaffffbc 	b	1c2cc <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

0001c3d8 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   1c3d8:	e2213080 	eor	r3, r1, #128	; 0x80
   1c3dc:	e3530007 	cmp	r3, #7
   1c3e0:	e92d4010 	push	{r4, lr}
   1c3e4:	e1a04000 	mov	r4, r0
   1c3e8:	8a000005 	bhi	1c404 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x2c>
   1c3ec:	e2412080 	sub	r2, r1, #128	; 0x80
   1c3f0:	e3a01001 	mov	r1, #1
   1c3f4:	e5d0300c 	ldrb	r3, [r0, #12]
   1c3f8:	e1c33211 	bic	r3, r3, r1, lsl r2
   1c3fc:	e5c0300c 	strb	r3, [r0, #12]
   1c400:	e8bd8010 	pop	{r4, pc}
   1c404:	e5d0300d 	ldrb	r3, [r0, #13]
   1c408:	e1530001 	cmp	r3, r1
   1c40c:	18bd8010 	popne	{r4, pc}
   1c410:	e5903010 	ldr	r3, [r0, #16]
   1c414:	e3530000 	cmp	r3, #0
   1c418:	1a000002 	bne	1c428 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   1c41c:	e3a03000 	mov	r3, #0
   1c420:	e5c4300d 	strb	r3, [r4, #13]
   1c424:	e8bd8010 	pop	{r4, pc}
   1c428:	eb0028c2 	bl	26738 <CTimer::Get()>
   1c42c:	e5941010 	ldr	r1, [r4, #16]
   1c430:	eb002750 	bl	26178 <CTimer::CancelKernelTimer(unsigned int)>
   1c434:	e3a03000 	mov	r3, #0
   1c438:	e5843010 	str	r3, [r4, #16]
   1c43c:	eafffff6 	b	1c41c <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

0001c440 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   1c440:	e92d4010 	push	{r4, lr}
   1c444:	e5903010 	ldr	r3, [r0, #16]
   1c448:	e24dd008 	sub	sp, sp, #8
   1c44c:	e1530001 	cmp	r3, r1
   1c450:	1a000013 	bne	1c4a4 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x64>
   1c454:	e5d0100d 	ldrb	r1, [r0, #13]
   1c458:	e1a04000 	mov	r4, r0
   1c45c:	e3510000 	cmp	r1, #0
   1c460:	1a000001 	bne	1c46c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x2c>
   1c464:	e28dd008 	add	sp, sp, #8
   1c468:	e8bd8010 	pop	{r4, pc}
   1c46c:	ebffff96 	bl	1c2cc <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   1c470:	eb0028b0 	bl	26738 <CTimer::Get()>
   1c474:	e3a03000 	mov	r3, #0
   1c478:	e3a01008 	mov	r1, #8
   1c47c:	e59f2030 	ldr	r2, [pc, #48]	; 1c4b4 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x74>
   1c480:	e58d4000 	str	r4, [sp]
   1c484:	eb0026e9 	bl	26030 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1c488:	e3500000 	cmp	r0, #0
   1c48c:	e5840010 	str	r0, [r4, #16]
   1c490:	1afffff3 	bne	1c464 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x24>
   1c494:	e3a020b7 	mov	r2, #183	; 0xb7
   1c498:	e59f1018 	ldr	r1, [pc, #24]	; 1c4b8 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   1c49c:	e59f0018 	ldr	r0, [pc, #24]	; 1c4bc <CKeyboardBehaviour::TimerHandler(unsigned int)+0x7c>
   1c4a0:	eb000496 	bl	1d700 <assertion_failed>
   1c4a4:	e3a020b0 	mov	r2, #176	; 0xb0
   1c4a8:	e59f1008 	ldr	r1, [pc, #8]	; 1c4b8 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   1c4ac:	e59f000c 	ldr	r0, [pc, #12]	; 1c4c0 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   1c4b0:	eb000492 	bl	1d700 <assertion_failed>
   1c4b4:	0001c4c4 	.word	0x0001c4c4
   1c4b8:	0002fadc 	.word	0x0002fadc
   1c4bc:	0002c900 	.word	0x0002c900
   1c4c0:	0002fb40 	.word	0x0002fb40

0001c4c4 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   1c4c4:	e3520000 	cmp	r2, #0
   1c4c8:	0a000002 	beq	1c4d8 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x14>
   1c4cc:	e1a01000 	mov	r1, r0
   1c4d0:	e1a00002 	mov	r0, r2
   1c4d4:	eaffffd9 	b	1c440 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   1c4d8:	e3a020be 	mov	r2, #190	; 0xbe
   1c4dc:	e92d4010 	push	{r4, lr}
   1c4e0:	e59f1004 	ldr	r1, [pc, #4]	; 1c4ec <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x28>
   1c4e4:	e59f0004 	ldr	r0, [pc, #4]	; 1c4f0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x2c>
   1c4e8:	eb000484 	bl	1d700 <assertion_failed>
   1c4ec:	0002fadc 	.word	0x0002fadc
   1c4f0:	0002c8c4 	.word	0x0002c8c4

0001c4f4 <CKeyMap::~CKeyMap()>:
   1c4f4:	e12fff1e 	bx	lr

0001c4f8 <CKeyMap::ClearTable(unsigned char)>:
   1c4f8:	e3510003 	cmp	r1, #3
   1c4fc:	8a000008 	bhi	1c524 <CKeyMap::ClearTable(unsigned char)+0x2c>
   1c500:	e3a0c000 	mov	ip, #0
   1c504:	e2802b01 	add	r2, r0, #1024	; 0x400
   1c508:	e0822081 	add	r2, r2, r1, lsl #1
   1c50c:	e0803081 	add	r3, r0, r1, lsl #1
   1c510:	e0c3c0b8 	strh	ip, [r3], #8
   1c514:	e1530002 	cmp	r3, r2
   1c518:	1afffffc 	bne	1c510 <CKeyMap::ClearTable(unsigned char)+0x18>
   1c51c:	e3a00001 	mov	r0, #1
   1c520:	e12fff1e 	bx	lr
   1c524:	e3a00000 	mov	r0, #0
   1c528:	e12fff1e 	bx	lr

0001c52c <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   1c52c:	e6afc072 	sxtb	ip, r2
   1c530:	e35c0000 	cmp	ip, #0
   1c534:	c3a0c000 	movgt	ip, #0
   1c538:	d3a0c001 	movle	ip, #1
   1c53c:	e3510003 	cmp	r1, #3
   1c540:	838cc001 	orrhi	ip, ip, #1
   1c544:	e35c0000 	cmp	ip, #0
   1c548:	1a000008 	bne	1c570 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   1c54c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1c550:	e59fe024 	ldr	lr, [pc, #36]	; 1c57c <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x50>
   1c554:	e153000e 	cmp	r3, lr
   1c558:	93a0c001 	movls	ip, #1
   1c55c:	90811102 	addls	r1, r1, r2, lsl #2
   1c560:	91a01081 	lslls	r1, r1, #1
   1c564:	918030b1 	strhls	r3, [r0, r1]
   1c568:	e1a0000c 	mov	r0, ip
   1c56c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1c570:	e3a0c000 	mov	ip, #0
   1c574:	e1a0000c 	mov	r0, ip
   1c578:	e12fff1e 	bx	lr
   1c57c:	00000132 	.word	0x00000132

0001c580 <CKeyMap::Translate(unsigned char, unsigned char)>:
   1c580:	e6af3071 	sxtb	r3, r1
   1c584:	e3530000 	cmp	r3, #0
   1c588:	e1a0c000 	mov	ip, r0
   1c58c:	da000027 	ble	1c630 <CKeyMap::Translate(unsigned char, unsigned char)+0xb0>
   1c590:	e1a03181 	lsl	r3, r1, #3
   1c594:	e19030b3 	ldrh	r3, [r0, r3]
   1c598:	e3530f42 	cmp	r3, #264	; 0x108
   1c59c:	0a00001d 	beq	1c618 <CKeyMap::Translate(unsigned char, unsigned char)+0x98>
   1c5a0:	e2430f43 	sub	r0, r3, #268	; 0x10c
   1c5a4:	e2400003 	sub	r0, r0, #3
   1c5a8:	e350000b 	cmp	r0, #11
   1c5ac:	8a000001 	bhi	1c5b8 <CKeyMap::Translate(unsigned char, unsigned char)+0x38>
   1c5b0:	e3120004 	tst	r2, #4
   1c5b4:	1a000021 	bne	1c640 <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   1c5b8:	e312008c 	tst	r2, #140	; 0x8c
   1c5bc:	1a00001b 	bne	1c630 <CKeyMap::Translate(unsigned char, unsigned char)+0xb0>
   1c5c0:	e2413053 	sub	r3, r1, #83	; 0x53
   1c5c4:	e3530010 	cmp	r3, #16
   1c5c8:	9a00001a 	bls	1c638 <CKeyMap::Translate(unsigned char, unsigned char)+0xb8>
   1c5cc:	e3120040 	tst	r2, #64	; 0x40
   1c5d0:	0a000027 	beq	1c674 <CKeyMap::Translate(unsigned char, unsigned char)+0xf4>
   1c5d4:	e3120022 	tst	r2, #34	; 0x22
   1c5d8:	13a03003 	movne	r3, #3
   1c5dc:	03a03002 	moveq	r3, #2
   1c5e0:	e0831101 	add	r1, r3, r1, lsl #2
   1c5e4:	e1a01081 	lsl	r1, r1, #1
   1c5e8:	e19c00b1 	ldrh	r0, [ip, r1]
   1c5ec:	e59f3090 	ldr	r3, [pc, #144]	; 1c684 <CKeyMap::Translate(unsigned char, unsigned char)+0x104>
   1c5f0:	e1500003 	cmp	r0, r3
   1c5f4:	0a000019 	beq	1c660 <CKeyMap::Translate(unsigned char, unsigned char)+0xe0>
   1c5f8:	e3500e12 	cmp	r0, #288	; 0x120
   1c5fc:	0a000012 	beq	1c64c <CKeyMap::Translate(unsigned char, unsigned char)+0xcc>
   1c600:	e3500f47 	cmp	r0, #284	; 0x11c
   1c604:	05dc3400 	ldrbeq	r3, [ip, #1024]	; 0x400
   1c608:	02800017 	addeq	r0, r0, #23
   1c60c:	02233001 	eoreq	r3, r3, #1
   1c610:	05cc3400 	strbeq	r3, [ip, #1024]	; 0x400
   1c614:	e12fff1e 	bx	lr
   1c618:	e3120011 	tst	r2, #17
   1c61c:	0affffe5 	beq	1c5b8 <CKeyMap::Translate(unsigned char, unsigned char)+0x38>
   1c620:	e3120004 	tst	r2, #4
   1c624:	0affffe3 	beq	1c5b8 <CKeyMap::Translate(unsigned char, unsigned char)+0x38>
   1c628:	e59f0058 	ldr	r0, [pc, #88]	; 1c688 <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   1c62c:	e12fff1e 	bx	lr
   1c630:	e3a00000 	mov	r0, #0
   1c634:	e12fff1e 	bx	lr
   1c638:	e5dc3401 	ldrb	r3, [ip, #1025]	; 0x401
   1c63c:	eaffffe7 	b	1c5e0 <CKeyMap::Translate(unsigned char, unsigned char)+0x60>
   1c640:	e2830027 	add	r0, r3, #39	; 0x27
   1c644:	e6ff0070 	uxth	r0, r0
   1c648:	e12fff1e 	bx	lr
   1c64c:	e5dc3401 	ldrb	r3, [ip, #1025]	; 0x401
   1c650:	e3a00f4d 	mov	r0, #308	; 0x134
   1c654:	e2233001 	eor	r3, r3, #1
   1c658:	e5cc3401 	strb	r3, [ip, #1025]	; 0x401
   1c65c:	e12fff1e 	bx	lr
   1c660:	e5dc3402 	ldrb	r3, [ip, #1026]	; 0x402
   1c664:	e59f0020 	ldr	r0, [pc, #32]	; 1c68c <CKeyMap::Translate(unsigned char, unsigned char)+0x10c>
   1c668:	e2233001 	eor	r3, r3, #1
   1c66c:	e5cc3402 	strb	r3, [ip, #1026]	; 0x402
   1c670:	e12fff1e 	bx	lr
   1c674:	e3120022 	tst	r2, #34	; 0x22
   1c678:	13a03001 	movne	r3, #1
   1c67c:	03a03000 	moveq	r3, #0
   1c680:	eaffffd6 	b	1c5e0 <CKeyMap::Translate(unsigned char, unsigned char)+0x60>
   1c684:	0000011e 	.word	0x0000011e
   1c688:	00000142 	.word	0x00000142
   1c68c:	00000135 	.word	0x00000135

0001c690 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   1c690:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1c694:	e241c021 	sub	ip, r1, #33	; 0x21
   1c698:	e59fe0ac 	ldr	lr, [pc, #172]	; 1c74c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xbc>
   1c69c:	e6ffc07c 	uxth	ip, ip
   1c6a0:	e15c000e 	cmp	ip, lr
   1c6a4:	8a000023 	bhi	1c738 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa8>
   1c6a8:	e1a0c000 	mov	ip, r0
   1c6ac:	e2410c01 	sub	r0, r1, #256	; 0x100
   1c6b0:	e6ffe070 	uxth	lr, r0
   1c6b4:	e35e0032 	cmp	lr, #50	; 0x32
   1c6b8:	9a000020 	bls	1c740 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   1c6bc:	e3120011 	tst	r2, #17
   1c6c0:	e6af2071 	sxtb	r2, r1
   1c6c4:	0a000009 	beq	1c6f0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x60>
   1c6c8:	e6ef1071 	uxtb	r1, r1
   1c6cc:	e2412061 	sub	r2, r1, #97	; 0x61
   1c6d0:	e3520019 	cmp	r2, #25
   1c6d4:	8a000017 	bhi	1c738 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa8>
   1c6d8:	e3a02000 	mov	r2, #0
   1c6dc:	e2411060 	sub	r1, r1, #96	; 0x60
   1c6e0:	e1a00003 	mov	r0, r3
   1c6e4:	e5c31000 	strb	r1, [r3]
   1c6e8:	e5c32001 	strb	r2, [r3, #1]
   1c6ec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1c6f0:	e5dc0400 	ldrb	r0, [ip, #1024]	; 0x400
   1c6f4:	e3500000 	cmp	r0, #0
   1c6f8:	0a000009 	beq	1c724 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x94>
   1c6fc:	e6ef1071 	uxtb	r1, r1
   1c700:	e2410041 	sub	r0, r1, #65	; 0x41
   1c704:	e3500019 	cmp	r0, #25
   1c708:	92811020 	addls	r1, r1, #32
   1c70c:	96af2071 	sxtbls	r2, r1
   1c710:	9a000003 	bls	1c724 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x94>
   1c714:	e2410061 	sub	r0, r1, #97	; 0x61
   1c718:	e3500019 	cmp	r0, #25
   1c71c:	92411020 	subls	r1, r1, #32
   1c720:	96af2071 	sxtbls	r2, r1
   1c724:	e3a01000 	mov	r1, #0
   1c728:	e1a00003 	mov	r0, r3
   1c72c:	e5c32000 	strb	r2, [r3]
   1c730:	e5c31001 	strb	r1, [r3, #1]
   1c734:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1c738:	e3a00000 	mov	r0, #0
   1c73c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1c740:	e59f3008 	ldr	r3, [pc, #8]	; 1c750 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xc0>
   1c744:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   1c748:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1c74c:	00000111 	.word	0x00000111
   1c750:	00034730 	.word	0x00034730

0001c754 <CKeyMap::GetLEDStatus() const>:
   1c754:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   1c758:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   1c75c:	e3530000 	cmp	r3, #0
   1c760:	13a03002 	movne	r3, #2
   1c764:	03a03000 	moveq	r3, #0
   1c768:	e3520000 	cmp	r2, #0
   1c76c:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   1c770:	13833001 	orrne	r3, r3, #1
   1c774:	e3520000 	cmp	r2, #0
   1c778:	13833004 	orrne	r3, r3, #4
   1c77c:	e1a00003 	mov	r0, r3
   1c780:	e12fff1e 	bx	lr

0001c784 <CKeyMap::LookupDefaultMap(char const*)>:
   1c784:	e92d4070 	push	{r4, r5, r6, lr}
   1c788:	e59f4064 	ldr	r4, [pc, #100]	; 1c7f4 <CKeyMap::LookupDefaultMap(char const*)+0x70>
   1c78c:	e1a06000 	mov	r6, r0
   1c790:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   1c794:	e3500000 	cmp	r0, #0
   1c798:	0a000013 	beq	1c7ec <CKeyMap::LookupDefaultMap(char const*)+0x68>
   1c79c:	e3560000 	cmp	r6, #0
   1c7a0:	13a05000 	movne	r5, #0
   1c7a4:	128440d0 	addne	r4, r4, #208	; 0xd0
   1c7a8:	1a000004 	bne	1c7c0 <CKeyMap::LookupDefaultMap(char const*)+0x3c>
   1c7ac:	ea00000a 	b	1c7dc <CKeyMap::LookupDefaultMap(char const*)+0x58>
   1c7b0:	e4940004 	ldr	r0, [r4], #4
   1c7b4:	e2855001 	add	r5, r5, #1
   1c7b8:	e3500000 	cmp	r0, #0
   1c7bc:	0a00000a 	beq	1c7ec <CKeyMap::LookupDefaultMap(char const*)+0x68>
   1c7c0:	e1a01006 	mov	r1, r6
   1c7c4:	eb00283f 	bl	268c8 <strcmp>
   1c7c8:	e3500000 	cmp	r0, #0
   1c7cc:	1afffff7 	bne	1c7b0 <CKeyMap::LookupDefaultMap(char const*)+0x2c>
   1c7d0:	e59f0020 	ldr	r0, [pc, #32]	; 1c7f8 <CKeyMap::LookupDefaultMap(char const*)+0x74>
   1c7d4:	e0800505 	add	r0, r0, r5, lsl #10
   1c7d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c7dc:	e59f2018 	ldr	r2, [pc, #24]	; 1c7fc <CKeyMap::LookupDefaultMap(char const*)+0x78>
   1c7e0:	e59f1018 	ldr	r1, [pc, #24]	; 1c800 <CKeyMap::LookupDefaultMap(char const*)+0x7c>
   1c7e4:	e59f0018 	ldr	r0, [pc, #24]	; 1c804 <CKeyMap::LookupDefaultMap(char const*)+0x80>
   1c7e8:	eb0003c4 	bl	1d700 <assertion_failed>
   1c7ec:	e3a00000 	mov	r0, #0
   1c7f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c7f4:	00034730 	.word	0x00034730
   1c7f8:	0002fc6c 	.word	0x0002fc6c
   1c7fc:	0000013f 	.word	0x0000013f
   1c800:	0002fb54 	.word	0x0002fb54
   1c804:	0002fb60 	.word	0x0002fb60

0001c808 <CKeyMap::CKeyMap()>:
   1c808:	e3a01c01 	mov	r1, #256	; 0x100
   1c80c:	e3a03000 	mov	r3, #0
   1c810:	e2802b01 	add	r2, r0, #1024	; 0x400
   1c814:	e92d4010 	push	{r4, lr}
   1c818:	e1c210b0 	strh	r1, [r2]
   1c81c:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   1c820:	e1a04000 	mov	r4, r0
   1c824:	eb000a77 	bl	1f208 <CKernelOptions::Get()>
   1c828:	eb000a67 	bl	1f1cc <CKernelOptions::GetKeyMap() const>
   1c82c:	e3500000 	cmp	r0, #0
   1c830:	0a00000f 	beq	1c874 <CKeyMap::CKeyMap()+0x6c>
   1c834:	ebffffd2 	bl	1c784 <CKeyMap::LookupDefaultMap(char const*)>
   1c838:	e2501000 	subs	r1, r0, #0
   1c83c:	0a000004 	beq	1c854 <CKeyMap::CKeyMap()+0x4c>
   1c840:	e3a02b01 	mov	r2, #1024	; 0x400
   1c844:	e1a00004 	mov	r0, r4
   1c848:	eb002a0f 	bl	2708c <memcpy>
   1c84c:	e1a00004 	mov	r0, r4
   1c850:	e8bd8010 	pop	{r4, pc}
   1c854:	e59f0028 	ldr	r0, [pc, #40]	; 1c884 <CKeyMap::CKeyMap()+0x7c>
   1c858:	ebffffc9 	bl	1c784 <CKeyMap::LookupDefaultMap(char const*)>
   1c85c:	e2501000 	subs	r1, r0, #0
   1c860:	1afffff6 	bne	1c840 <CKeyMap::CKeyMap()+0x38>
   1c864:	e3a02080 	mov	r2, #128	; 0x80
   1c868:	e59f1018 	ldr	r1, [pc, #24]	; 1c888 <CKeyMap::CKeyMap()+0x80>
   1c86c:	e59f0018 	ldr	r0, [pc, #24]	; 1c88c <CKeyMap::CKeyMap()+0x84>
   1c870:	eb0003a2 	bl	1d700 <assertion_failed>
   1c874:	e3a0207a 	mov	r2, #122	; 0x7a
   1c878:	e59f1008 	ldr	r1, [pc, #8]	; 1c888 <CKeyMap::CKeyMap()+0x80>
   1c87c:	e59f000c 	ldr	r0, [pc, #12]	; 1c890 <CKeyMap::CKeyMap()+0x88>
   1c880:	eb00039e 	bl	1d700 <assertion_failed>
   1c884:	0002fb70 	.word	0x0002fb70
   1c888:	0002fb54 	.word	0x0002fb54
   1c88c:	0002fb74 	.word	0x0002fb74
   1c890:	0002fb60 	.word	0x0002fb60

0001c894 <CMouseDevice::~CMouseDevice()>:
   1c894:	e92d4070 	push	{r4, r5, r6, lr}
   1c898:	e3a06000 	mov	r6, #0
   1c89c:	e1a04000 	mov	r4, r0
   1c8a0:	e59f5040 	ldr	r5, [pc, #64]	; 1c8e8 <CMouseDevice::~CMouseDevice()+0x54>
   1c8a4:	e5806028 	str	r6, [r0, #40]	; 0x28
   1c8a8:	e2853008 	add	r3, r5, #8
   1c8ac:	e5803000 	str	r3, [r0]
   1c8b0:	eb00066c 	bl	1e268 <CDeviceNameService::Get()>
   1c8b4:	e1a03006 	mov	r3, r6
   1c8b8:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1c8bc:	e2851020 	add	r1, r5, #32
   1c8c0:	eb00068e 	bl	1e300 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1c8c4:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
   1c8c8:	e59f001c 	ldr	r0, [pc, #28]	; 1c8ec <CMouseDevice::~CMouseDevice()+0x58>
   1c8cc:	eb002d5a 	bl	27e3c <CNumberPool::FreeNumber(unsigned int)>
   1c8d0:	e284000c 	add	r0, r4, #12
   1c8d4:	eb00015e 	bl	1ce54 <CMouseBehaviour::~CMouseBehaviour()>
   1c8d8:	e1a00004 	mov	r0, r4
   1c8dc:	eb000560 	bl	1de64 <CDevice::~CDevice()>
   1c8e0:	e1a00004 	mov	r0, r4
   1c8e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c8e8:	00031478 	.word	0x00031478
   1c8ec:	00034c08 	.word	0x00034c08

0001c8f0 <CMouseDevice::~CMouseDevice()>:
   1c8f0:	e92d4010 	push	{r4, lr}
   1c8f4:	e1a04000 	mov	r4, r0
   1c8f8:	ebffffe5 	bl	1c894 <CMouseDevice::~CMouseDevice()>
   1c8fc:	e1a00004 	mov	r0, r4
   1c900:	e3a01038 	mov	r1, #56	; 0x38
   1c904:	eb002bd4 	bl	2785c <operator delete(void*, unsigned int)>
   1c908:	e1a00004 	mov	r0, r4
   1c90c:	e8bd8010 	pop	{r4, pc}

0001c910 <CMouseDevice::CMouseDevice(unsigned int, bool)>:
   1c910:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1c914:	e1a04000 	mov	r4, r0
   1c918:	e24dd008 	sub	sp, sp, #8
   1c91c:	e1a07001 	mov	r7, r1
   1c920:	e1a06002 	mov	r6, r2
   1c924:	eb000570 	bl	1deec <CDevice::CDevice()>
   1c928:	e1a00004 	mov	r0, r4
   1c92c:	e3a08000 	mov	r8, #0
   1c930:	e59f504c 	ldr	r5, [pc, #76]	; 1c984 <CMouseDevice::CMouseDevice(unsigned int, bool)+0x74>
   1c934:	e2853008 	add	r3, r5, #8
   1c938:	e480300c 	str	r3, [r0], #12
   1c93c:	eb00005a 	bl	1caac <CMouseBehaviour::CMouseBehaviour()>
   1c940:	e2852028 	add	r2, r5, #40	; 0x28
   1c944:	e3a01001 	mov	r1, #1
   1c948:	e5848028 	str	r8, [r4, #40]	; 0x28
   1c94c:	e59f0034 	ldr	r0, [pc, #52]	; 1c988 <CMouseDevice::CMouseDevice(unsigned int, bool)+0x78>
   1c950:	eb002cfe 	bl	27d50 <CNumberPool::AllocateNumber(bool, char const*)>
   1c954:	e5847030 	str	r7, [r4, #48]	; 0x30
   1c958:	e5c46034 	strb	r6, [r4, #52]	; 0x34
   1c95c:	e584002c 	str	r0, [r4, #44]	; 0x2c
   1c960:	eb000640 	bl	1e268 <CDeviceNameService::Get()>
   1c964:	e58d8000 	str	r8, [sp]
   1c968:	e1a03004 	mov	r3, r4
   1c96c:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1c970:	e2851020 	add	r1, r5, #32
   1c974:	eb000647 	bl	1e298 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1c978:	e1a00004 	mov	r0, r4
   1c97c:	e28dd008 	add	sp, sp, #8
   1c980:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1c984:	00031478 	.word	0x00031478
   1c988:	00034c08 	.word	0x00034c08

0001c98c <CMouseDevice::Setup(unsigned int, unsigned int)>:
   1c98c:	e280000c 	add	r0, r0, #12
   1c990:	ea00004e 	b	1cad0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

0001c994 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>:
   1c994:	e280000c 	add	r0, r0, #12
   1c998:	ea000094 	b	1cbf0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>

0001c99c <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   1c99c:	e280000c 	add	r0, r0, #12
   1c9a0:	ea000139 	b	1ce8c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

0001c9a4 <CMouseDevice::ShowCursor(bool)>:
   1c9a4:	e280000c 	add	r0, r0, #12
   1c9a8:	ea00015b 	b	1cf1c <CMouseBehaviour::ShowCursor(bool)>

0001c9ac <CMouseDevice::UpdateCursor()>:
   1c9ac:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1c9b0:	e3530000 	cmp	r3, #0
   1c9b4:	112fff1e 	bxne	lr
   1c9b8:	e280000c 	add	r0, r0, #12
   1c9bc:	ea000171 	b	1cf88 <CMouseBehaviour::UpdateCursor()>

0001c9c0 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))>:
   1c9c0:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   1c9c4:	e92d4010 	push	{r4, lr}
   1c9c8:	e3530000 	cmp	r3, #0
   1c9cc:	1a000006 	bne	1c9ec <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))+0x2c>
   1c9d0:	e3510000 	cmp	r1, #0
   1c9d4:	e5801028 	str	r1, [r0, #40]	; 0x28
   1c9d8:	18bd8010 	popne	{r4, pc}
   1c9dc:	e3a0204f 	mov	r2, #79	; 0x4f
   1c9e0:	e59f1014 	ldr	r1, [pc, #20]	; 1c9fc <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))+0x3c>
   1c9e4:	e59f0014 	ldr	r0, [pc, #20]	; 1ca00 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))+0x40>
   1c9e8:	eb000344 	bl	1d700 <assertion_failed>
   1c9ec:	e3a0204d 	mov	r2, #77	; 0x4d
   1c9f0:	e59f1004 	ldr	r1, [pc, #4]	; 1c9fc <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))+0x3c>
   1c9f4:	e59f0008 	ldr	r0, [pc, #8]	; 1ca04 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))+0x44>
   1c9f8:	eb000340 	bl	1d700 <assertion_failed>
   1c9fc:	0003146c 	.word	0x0003146c
   1ca00:	0002f878 	.word	0x0002f878
   1ca04:	0002f860 	.word	0x0002f860

0001ca08 <CMouseDevice::ReportHandler(unsigned int, int, int, int)>:
   1ca08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ca0c:	e1a04000 	mov	r4, r0
   1ca10:	e24dd008 	sub	sp, sp, #8
   1ca14:	e59d8020 	ldr	r8, [sp, #32]
   1ca18:	e280000c 	add	r0, r0, #12
   1ca1c:	e58d8000 	str	r8, [sp]
   1ca20:	e1a05001 	mov	r5, r1
   1ca24:	e1a06002 	mov	r6, r2
   1ca28:	e1a07003 	mov	r7, r3
   1ca2c:	eb000081 	bl	1cc38 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)>
   1ca30:	e594e028 	ldr	lr, [r4, #40]	; 0x28
   1ca34:	e35e0000 	cmp	lr, #0
   1ca38:	0a000007 	beq	1ca5c <CMouseDevice::ReportHandler(unsigned int, int, int, int)+0x54>
   1ca3c:	e1a03008 	mov	r3, r8
   1ca40:	e1a02007 	mov	r2, r7
   1ca44:	e1a01006 	mov	r1, r6
   1ca48:	e1a00005 	mov	r0, r5
   1ca4c:	e1a0c00e 	mov	ip, lr
   1ca50:	e28dd008 	add	sp, sp, #8
   1ca54:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1ca58:	e12fff1c 	bx	ip
   1ca5c:	e28dd008 	add	sp, sp, #8
   1ca60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001ca64 <CMouseDevice::GetButtonCount() const>:
   1ca64:	e5900030 	ldr	r0, [r0, #48]	; 0x30
   1ca68:	e12fff1e 	bx	lr

0001ca6c <CMouseDevice::HasWheel() const>:
   1ca6c:	e5d00034 	ldrb	r0, [r0, #52]	; 0x34
   1ca70:	e12fff1e 	bx	lr

0001ca74 <_GLOBAL__sub_I__ZN12CMouseDevice18s_DeviceNumberPoolE>:
   1ca74:	e92d4010 	push	{r4, lr}
   1ca78:	e59f4020 	ldr	r4, [pc, #32]	; 1caa0 <_GLOBAL__sub_I__ZN12CMouseDevice18s_DeviceNumberPoolE+0x2c>
   1ca7c:	e3a0203f 	mov	r2, #63	; 0x3f
   1ca80:	e1a00004 	mov	r0, r4
   1ca84:	e3a01001 	mov	r1, #1
   1ca88:	eb002c9b 	bl	27cfc <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1ca8c:	e1a00004 	mov	r0, r4
   1ca90:	e8bd4010 	pop	{r4, lr}
   1ca94:	e59f2008 	ldr	r2, [pc, #8]	; 1caa4 <_GLOBAL__sub_I__ZN12CMouseDevice18s_DeviceNumberPoolE+0x30>
   1ca98:	e59f1008 	ldr	r1, [pc, #8]	; 1caa8 <_GLOBAL__sub_I__ZN12CMouseDevice18s_DeviceNumberPoolE+0x34>
   1ca9c:	ea002385 	b	258b8 <__aeabi_atexit>
   1caa0:	00034c08 	.word	0x00034c08
   1caa4:	00034c44 	.word	0x00034c44
   1caa8:	00027d4c 	.word	0x00027d4c

0001caac <CMouseBehaviour::CMouseBehaviour()>:
   1caac:	e3a02000 	mov	r2, #0
   1cab0:	e5802000 	str	r2, [r0]
   1cab4:	e5802004 	str	r2, [r0, #4]
   1cab8:	e5802008 	str	r2, [r0, #8]
   1cabc:	e580200c 	str	r2, [r0, #12]
   1cac0:	e1c021b0 	strh	r2, [r0, #16]
   1cac4:	e5802014 	str	r2, [r0, #20]
   1cac8:	e5802018 	str	r2, [r0, #24]
   1cacc:	e12fff1e 	bx	lr

0001cad0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   1cad0:	e92d4010 	push	{r4, lr}
   1cad4:	e5903000 	ldr	r3, [r0]
   1cad8:	e24dd038 	sub	sp, sp, #56	; 0x38
   1cadc:	e3530000 	cmp	r3, #0
   1cae0:	1a00002b 	bne	1cb94 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xc4>
   1cae4:	e3510000 	cmp	r1, #0
   1cae8:	e5801000 	str	r1, [r0]
   1caec:	0a00002c 	beq	1cba4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd4>
   1caf0:	e5904004 	ldr	r4, [r0, #4]
   1caf4:	e3540000 	cmp	r4, #0
   1caf8:	1a00002d 	bne	1cbb4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe4>
   1cafc:	e3520000 	cmp	r2, #0
   1cb00:	e5802004 	str	r2, [r0, #4]
   1cb04:	0a00002e 	beq	1cbc4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf4>
   1cb08:	e2813001 	add	r3, r1, #1
   1cb0c:	e2822001 	add	r2, r2, #1
   1cb10:	e1a030a3 	lsr	r3, r3, #1
   1cb14:	e1a020a2 	lsr	r2, r2, #1
   1cb18:	e1a01004 	mov	r1, r4
   1cb1c:	e5803008 	str	r3, [r0, #8]
   1cb20:	e580200c 	str	r2, [r0, #12]
   1cb24:	e28d000c 	add	r0, sp, #12
   1cb28:	eb000315 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1cb2c:	e3a03018 	mov	r3, #24
   1cb30:	e3a0c010 	mov	ip, #16
   1cb34:	e59f1098 	ldr	r1, [pc, #152]	; 1cbd4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x104>
   1cb38:	e58d3000 	str	r3, [sp]
   1cb3c:	e3c11103 	bic	r1, r1, #-1073741824	; 0xc0000000
   1cb40:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
   1cb44:	e3a03024 	mov	r3, #36	; 0x24
   1cb48:	e28d2014 	add	r2, sp, #20
   1cb4c:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   1cb50:	e28d000c 	add	r0, sp, #12
   1cb54:	e59f107c 	ldr	r1, [pc, #124]	; 1cbd8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x108>
   1cb58:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1cb5c:	e58d4030 	str	r4, [sp, #48]	; 0x30
   1cb60:	e58d4034 	str	r4, [sp, #52]	; 0x34
   1cb64:	e58dc020 	str	ip, [sp, #32]
   1cb68:	e58dc024 	str	ip, [sp, #36]	; 0x24
   1cb6c:	eb000310 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1cb70:	e2504000 	subs	r4, r0, #0
   1cb74:	159d4020 	ldrne	r4, [sp, #32]
   1cb78:	e28d000c 	add	r0, sp, #12
   1cb7c:	116f4f14 	clzne	r4, r4
   1cb80:	11a042a4 	lsrne	r4, r4, #5
   1cb84:	eb000305 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   1cb88:	e1a00004 	mov	r0, r4
   1cb8c:	e28dd038 	add	sp, sp, #56	; 0x38
   1cb90:	e8bd8010 	pop	{r4, pc}
   1cb94:	e3a02051 	mov	r2, #81	; 0x51
   1cb98:	e59f103c 	ldr	r1, [pc, #60]	; 1cbdc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   1cb9c:	e59f003c 	ldr	r0, [pc, #60]	; 1cbe0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x110>
   1cba0:	eb0002d6 	bl	1d700 <assertion_failed>
   1cba4:	e3a02053 	mov	r2, #83	; 0x53
   1cba8:	e59f102c 	ldr	r1, [pc, #44]	; 1cbdc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   1cbac:	e59f0030 	ldr	r0, [pc, #48]	; 1cbe4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x114>
   1cbb0:	eb0002d2 	bl	1d700 <assertion_failed>
   1cbb4:	e3a02055 	mov	r2, #85	; 0x55
   1cbb8:	e59f101c 	ldr	r1, [pc, #28]	; 1cbdc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   1cbbc:	e59f0024 	ldr	r0, [pc, #36]	; 1cbe8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x118>
   1cbc0:	eb0002ce 	bl	1d700 <assertion_failed>
   1cbc4:	e3a02057 	mov	r2, #87	; 0x57
   1cbc8:	e59f100c 	ldr	r1, [pc, #12]	; 1cbdc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   1cbcc:	e59f0018 	ldr	r0, [pc, #24]	; 1cbec <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x11c>
   1cbd0:	eb0002ca 	bl	1d700 <assertion_failed>
   1cbd4:	00031560 	.word	0x00031560
   1cbd8:	00008010 	.word	0x00008010
   1cbdc:	000314a8 	.word	0x000314a8
   1cbe0:	000314bc 	.word	0x000314bc
   1cbe4:	000314d0 	.word	0x000314d0
   1cbe8:	000314e4 	.word	0x000314e4
   1cbec:	000314fc 	.word	0x000314fc

0001cbf0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>:
   1cbf0:	e5903018 	ldr	r3, [r0, #24]
   1cbf4:	e92d4010 	push	{r4, lr}
   1cbf8:	e3530000 	cmp	r3, #0
   1cbfc:	1a000006 	bne	1cc1c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))+0x2c>
   1cc00:	e3510000 	cmp	r1, #0
   1cc04:	e5801018 	str	r1, [r0, #24]
   1cc08:	18bd8010 	popne	{r4, pc}
   1cc0c:	e3a02075 	mov	r2, #117	; 0x75
   1cc10:	e59f1014 	ldr	r1, [pc, #20]	; 1cc2c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))+0x3c>
   1cc14:	e59f0014 	ldr	r0, [pc, #20]	; 1cc30 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))+0x40>
   1cc18:	eb0002b8 	bl	1d700 <assertion_failed>
   1cc1c:	e3a02073 	mov	r2, #115	; 0x73
   1cc20:	e59f1004 	ldr	r1, [pc, #4]	; 1cc2c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))+0x3c>
   1cc24:	e59f0008 	ldr	r0, [pc, #8]	; 1cc34 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))+0x44>
   1cc28:	eb0002b4 	bl	1d700 <assertion_failed>
   1cc2c:	000314a8 	.word	0x000314a8
   1cc30:	0002f67c 	.word	0x0002f67c
   1cc34:	00031510 	.word	0x00031510

0001cc38 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)>:
   1cc38:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1cc3c:	e1a04000 	mov	r4, r0
   1cc40:	e5900000 	ldr	r0, [r0]
   1cc44:	e24dd00c 	sub	sp, sp, #12
   1cc48:	e3500000 	cmp	r0, #0
   1cc4c:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   1cc50:	0a000052 	beq	1cda0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x168>
   1cc54:	e1a05001 	mov	r5, r1
   1cc58:	e5941004 	ldr	r1, [r4, #4]
   1cc5c:	e3510000 	cmp	r1, #0
   1cc60:	0a00004e 	beq	1cda0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x168>
   1cc64:	e59fc16c 	ldr	ip, [pc, #364]	; 1cdd8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x1a0>
   1cc68:	e0822182 	add	r2, r2, r2, lsl #3
   1cc6c:	e1a02082 	lsl	r2, r2, #1
   1cc70:	e0c7e29c 	smull	lr, r7, ip, r2
   1cc74:	e0833183 	add	r3, r3, r3, lsl #3
   1cc78:	e1a03083 	lsl	r3, r3, #1
   1cc7c:	e0cce39c 	smull	lr, ip, ip, r3
   1cc80:	e1a02fc2 	asr	r2, r2, #31
   1cc84:	e594e008 	ldr	lr, [r4, #8]
   1cc88:	e0622147 	rsb	r2, r2, r7, asr #2
   1cc8c:	e082200e 	add	r2, r2, lr
   1cc90:	e1a03fc3 	asr	r3, r3, #31
   1cc94:	e1500002 	cmp	r0, r2
   1cc98:	e594000c 	ldr	r0, [r4, #12]
   1cc9c:	e063314c 	rsb	r3, r3, ip, asr #2
   1cca0:	e0803003 	add	r3, r0, r3
   1cca4:	9a00003f 	bls	1cda8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x170>
   1cca8:	e1510003 	cmp	r1, r3
   1ccac:	e1c420f8 	strd	r2, [r4, #8]
   1ccb0:	8a000043 	bhi	1cdc4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x18c>
   1ccb4:	e152000e 	cmp	r2, lr
   1ccb8:	e584000c 	str	r0, [r4, #12]
   1ccbc:	0a000009 	beq	1cce8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xb0>
   1ccc0:	e3a03001 	mov	r3, #1
   1ccc4:	e5947018 	ldr	r7, [r4, #24]
   1ccc8:	e5c43010 	strb	r3, [r4, #16]
   1cccc:	e3570000 	cmp	r7, #0
   1ccd0:	0a000004 	beq	1cce8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xb0>
   1ccd4:	e58d6000 	str	r6, [sp]
   1ccd8:	e1a01005 	mov	r1, r5
   1ccdc:	e3a00000 	mov	r0, #0
   1cce0:	e594300c 	ldr	r3, [r4, #12]
   1cce4:	e12fff37 	blx	r7
   1cce8:	e5943014 	ldr	r3, [r4, #20]
   1ccec:	e1530005 	cmp	r3, r5
   1ccf0:	0a00001f 	beq	1cd74 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x13c>
   1ccf4:	e5942018 	ldr	r2, [r4, #24]
   1ccf8:	e3520000 	cmp	r2, #0
   1ccfc:	0a000026 	beq	1cd9c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x164>
   1cd00:	e3a07000 	mov	r7, #0
   1cd04:	e3a08001 	mov	r8, #1
   1cd08:	e1a01718 	lsl	r1, r8, r7
   1cd0c:	e1110003 	tst	r1, r3
   1cd10:	0a00000d 	beq	1cd4c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x114>
   1cd14:	e1150001 	tst	r5, r1
   1cd18:	1a000004 	bne	1cd30 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xf8>
   1cd1c:	e58d6000 	str	r6, [sp]
   1cd20:	e3a00002 	mov	r0, #2
   1cd24:	e1c420d8 	ldrd	r2, [r4, #8]
   1cd28:	e5949018 	ldr	r9, [r4, #24]
   1cd2c:	e12fff39 	blx	r9
   1cd30:	e2877001 	add	r7, r7, #1
   1cd34:	e3570005 	cmp	r7, #5
   1cd38:	0a00000d 	beq	1cd74 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x13c>
   1cd3c:	e5943014 	ldr	r3, [r4, #20]
   1cd40:	e1a01718 	lsl	r1, r8, r7
   1cd44:	e1110003 	tst	r1, r3
   1cd48:	1afffff1 	bne	1cd14 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xdc>
   1cd4c:	e1150001 	tst	r5, r1
   1cd50:	0afffff6 	beq	1cd30 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xf8>
   1cd54:	e58d6000 	str	r6, [sp]
   1cd58:	e3a00001 	mov	r0, #1
   1cd5c:	e1c420d8 	ldrd	r2, [r4, #8]
   1cd60:	e5949018 	ldr	r9, [r4, #24]
   1cd64:	e2877001 	add	r7, r7, #1
   1cd68:	e12fff39 	blx	r9
   1cd6c:	e3570005 	cmp	r7, #5
   1cd70:	1afffff1 	bne	1cd3c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x104>
   1cd74:	e3560000 	cmp	r6, #0
   1cd78:	0a000007 	beq	1cd9c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x164>
   1cd7c:	e5947018 	ldr	r7, [r4, #24]
   1cd80:	e3570000 	cmp	r7, #0
   1cd84:	0a000004 	beq	1cd9c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x164>
   1cd88:	e58d6000 	str	r6, [sp]
   1cd8c:	e1a01005 	mov	r1, r5
   1cd90:	e1c420d8 	ldrd	r2, [r4, #8]
   1cd94:	e3a00003 	mov	r0, #3
   1cd98:	e12fff37 	blx	r7
   1cd9c:	e5845014 	str	r5, [r4, #20]
   1cda0:	e28dd00c 	add	sp, sp, #12
   1cda4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cda8:	e1510003 	cmp	r1, r3
   1cdac:	e584300c 	str	r3, [r4, #12]
   1cdb0:	9a000006 	bls	1cdd0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x198>
   1cdb4:	e1500003 	cmp	r0, r3
   1cdb8:	11a0200e 	movne	r2, lr
   1cdbc:	1affffbf 	bne	1ccc0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x88>
   1cdc0:	eaffffc8 	b	1cce8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xb0>
   1cdc4:	e152000e 	cmp	r2, lr
   1cdc8:	1affffbc 	bne	1ccc0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x88>
   1cdcc:	eafffff8 	b	1cdb4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x17c>
   1cdd0:	e584000c 	str	r0, [r4, #12]
   1cdd4:	eaffffc3 	b	1cce8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xb0>
   1cdd8:	66666667 	.word	0x66666667

0001cddc <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   1cddc:	e92d4070 	push	{r4, r5, r6, lr}
   1cde0:	e24dd030 	sub	sp, sp, #48	; 0x30
   1cde4:	e1a05000 	mov	r5, r0
   1cde8:	e1a04001 	mov	r4, r1
   1cdec:	e28d000c 	add	r0, sp, #12
   1cdf0:	e3a01000 	mov	r1, #0
   1cdf4:	e1a06002 	mov	r6, r2
   1cdf8:	eb000261 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1cdfc:	e3a03010 	mov	r3, #16
   1ce00:	e3a0c001 	mov	ip, #1
   1ce04:	e59f1044 	ldr	r1, [pc, #68]	; 1ce50 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x74>
   1ce08:	e58d3000 	str	r3, [sp]
   1ce0c:	e28d2014 	add	r2, sp, #20
   1ce10:	e3a0301c 	mov	r3, #28
   1ce14:	e28d000c 	add	r0, sp, #12
   1ce18:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1ce1c:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   1ce20:	e58d6020 	str	r6, [sp, #32]
   1ce24:	e58d5024 	str	r5, [sp, #36]	; 0x24
   1ce28:	eb000261 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1ce2c:	e2504000 	subs	r4, r0, #0
   1ce30:	159d4020 	ldrne	r4, [sp, #32]
   1ce34:	e28d000c 	add	r0, sp, #12
   1ce38:	116f4f14 	clzne	r4, r4
   1ce3c:	11a042a4 	lsrne	r4, r4, #5
   1ce40:	eb000256 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   1ce44:	e1a00004 	mov	r0, r4
   1ce48:	e28dd030 	add	sp, sp, #48	; 0x30
   1ce4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ce50:	00008011 	.word	0x00008011

0001ce54 <CMouseBehaviour::~CMouseBehaviour()>:
   1ce54:	e3a02000 	mov	r2, #0
   1ce58:	e5d03011 	ldrb	r3, [r0, #17]
   1ce5c:	e92d4010 	push	{r4, lr}
   1ce60:	e1530002 	cmp	r3, r2
   1ce64:	e1a04000 	mov	r4, r0
   1ce68:	e5802018 	str	r2, [r0, #24]
   1ce6c:	1a000001 	bne	1ce78 <CMouseBehaviour::~CMouseBehaviour()+0x24>
   1ce70:	e1a00004 	mov	r0, r4
   1ce74:	e8bd8010 	pop	{r4, pc}
   1ce78:	e1a01002 	mov	r1, r2
   1ce7c:	e1a00002 	mov	r0, r2
   1ce80:	ebffffd5 	bl	1cddc <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1ce84:	e1a00004 	mov	r0, r4
   1ce88:	e8bd8010 	pop	{r4, pc}

0001ce8c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   1ce8c:	e590c000 	ldr	ip, [r0]
   1ce90:	e92d4010 	push	{r4, lr}
   1ce94:	e35c0000 	cmp	ip, #0
   1ce98:	0a000014 	beq	1cef0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   1ce9c:	e1a03001 	mov	r3, r1
   1cea0:	e5901004 	ldr	r1, [r0, #4]
   1cea4:	e3510000 	cmp	r1, #0
   1cea8:	0a000014 	beq	1cf00 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x74>
   1ceac:	e15c0003 	cmp	ip, r3
   1ceb0:	81510002 	cmphi	r1, r2
   1ceb4:	8a000001 	bhi	1cec0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x34>
   1ceb8:	e3a00000 	mov	r0, #0
   1cebc:	e8bd8010 	pop	{r4, pc}
   1cec0:	e5d01011 	ldrb	r1, [r0, #17]
   1cec4:	e5803008 	str	r3, [r0, #8]
   1cec8:	e3510000 	cmp	r1, #0
   1cecc:	e580200c 	str	r2, [r0, #12]
   1ced0:	1a000001 	bne	1cedc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x50>
   1ced4:	e3a00001 	mov	r0, #1
   1ced8:	e8bd8010 	pop	{r4, pc}
   1cedc:	e1a01002 	mov	r1, r2
   1cee0:	e8bd4010 	pop	{r4, lr}
   1cee4:	e1a00003 	mov	r0, r3
   1cee8:	e3a02001 	mov	r2, #1
   1ceec:	eaffffba 	b	1cddc <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1cef0:	e3a0207a 	mov	r2, #122	; 0x7a
   1cef4:	e59f1014 	ldr	r1, [pc, #20]	; 1cf10 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   1cef8:	e59f0014 	ldr	r0, [pc, #20]	; 1cf14 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x88>
   1cefc:	eb0001ff 	bl	1d700 <assertion_failed>
   1cf00:	e3a0207b 	mov	r2, #123	; 0x7b
   1cf04:	e59f1004 	ldr	r1, [pc, #4]	; 1cf10 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   1cf08:	e59f0008 	ldr	r0, [pc, #8]	; 1cf18 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x8c>
   1cf0c:	eb0001fb 	bl	1d700 <assertion_failed>
   1cf10:	000314a8 	.word	0x000314a8
   1cf14:	000314d0 	.word	0x000314d0
   1cf18:	000314fc 	.word	0x000314fc

0001cf1c <CMouseBehaviour::ShowCursor(bool)>:
   1cf1c:	e1a02001 	mov	r2, r1
   1cf20:	e5903008 	ldr	r3, [r0, #8]
   1cf24:	e5901000 	ldr	r1, [r0]
   1cf28:	e92d4010 	push	{r4, lr}
   1cf2c:	e1530001 	cmp	r3, r1
   1cf30:	e5d04011 	ldrb	r4, [r0, #17]
   1cf34:	e5c02011 	strb	r2, [r0, #17]
   1cf38:	2a000007 	bcs	1cf5c <CMouseBehaviour::ShowCursor(bool)+0x40>
   1cf3c:	e590100c 	ldr	r1, [r0, #12]
   1cf40:	e5900004 	ldr	r0, [r0, #4]
   1cf44:	e1510000 	cmp	r1, r0
   1cf48:	2a000007 	bcs	1cf6c <CMouseBehaviour::ShowCursor(bool)+0x50>
   1cf4c:	e1a00003 	mov	r0, r3
   1cf50:	ebffffa1 	bl	1cddc <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1cf54:	e1a00004 	mov	r0, r4
   1cf58:	e8bd8010 	pop	{r4, pc}
   1cf5c:	e3a02092 	mov	r2, #146	; 0x92
   1cf60:	e59f1014 	ldr	r1, [pc, #20]	; 1cf7c <CMouseBehaviour::ShowCursor(bool)+0x60>
   1cf64:	e59f0014 	ldr	r0, [pc, #20]	; 1cf80 <CMouseBehaviour::ShowCursor(bool)+0x64>
   1cf68:	eb0001e4 	bl	1d700 <assertion_failed>
   1cf6c:	e3a02093 	mov	r2, #147	; 0x93
   1cf70:	e59f1004 	ldr	r1, [pc, #4]	; 1cf7c <CMouseBehaviour::ShowCursor(bool)+0x60>
   1cf74:	e59f0008 	ldr	r0, [pc, #8]	; 1cf84 <CMouseBehaviour::ShowCursor(bool)+0x68>
   1cf78:	eb0001e0 	bl	1d700 <assertion_failed>
   1cf7c:	000314a8 	.word	0x000314a8
   1cf80:	00031528 	.word	0x00031528
   1cf84:	00031544 	.word	0x00031544

0001cf88 <CMouseBehaviour::UpdateCursor()>:
   1cf88:	e5d03011 	ldrb	r3, [r0, #17]
   1cf8c:	e3530000 	cmp	r3, #0
   1cf90:	012fff1e 	bxeq	lr
   1cf94:	e5d03010 	ldrb	r3, [r0, #16]
   1cf98:	e3530000 	cmp	r3, #0
   1cf9c:	012fff1e 	bxeq	lr
   1cfa0:	e3a03000 	mov	r3, #0
   1cfa4:	e3a02001 	mov	r2, #1
   1cfa8:	e5c03010 	strb	r3, [r0, #16]
   1cfac:	e1c000d8 	ldrd	r0, [r0, #8]
   1cfb0:	eaffff89 	b	1cddc <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

0001cfb4 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   1cfb4:	e92d4010 	push	{r4, lr}
   1cfb8:	e1a04000 	mov	r4, r0
   1cfbc:	e4801004 	str	r1, [r0], #4
   1cfc0:	e1a01002 	mov	r1, r2
   1cfc4:	eb001cf0 	bl	2438c <CString::CString(char const*)>
   1cfc8:	e3a03000 	mov	r3, #0
   1cfcc:	e1a00004 	mov	r0, r4
   1cfd0:	e5843014 	str	r3, [r4, #20]
   1cfd4:	e5843018 	str	r3, [r4, #24]
   1cfd8:	e584301c 	str	r3, [r4, #28]
   1cfdc:	e5843020 	str	r3, [r4, #32]
   1cfe0:	e8bd8010 	pop	{r4, pc}

0001cfe4 <CPartitionManager::~CPartitionManager()>:
   1cfe4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cfe8:	e1a06000 	mov	r6, r0
   1cfec:	e3a07000 	mov	r7, #0
   1cff0:	e59fa0ac 	ldr	sl, [pc, #172]	; 1d0a4 <CPartitionManager::~CPartitionManager()+0xc0>
   1cff4:	e24dd010 	sub	sp, sp, #16
   1cff8:	e2809004 	add	r9, r0, #4
   1cffc:	e2804014 	add	r4, r0, #20
   1d000:	e2808024 	add	r8, r0, #36	; 0x24
   1d004:	e4943004 	ldr	r3, [r4], #4
   1d008:	e3530000 	cmp	r3, #0
   1d00c:	0a00001b 	beq	1d080 <CPartitionManager::~CPartitionManager()+0x9c>
   1d010:	e1a0000d 	mov	r0, sp
   1d014:	eb001cd6 	bl	24374 <CString::CString()>
   1d018:	e1a00009 	mov	r0, r9
   1d01c:	eb001cec 	bl	243d4 <CString::operator char const*() const>
   1d020:	e2877001 	add	r7, r7, #1
   1d024:	e1a02000 	mov	r2, r0
   1d028:	e1a03007 	mov	r3, r7
   1d02c:	e1a0100a 	mov	r1, sl
   1d030:	e1a0000d 	mov	r0, sp
   1d034:	eb002214 	bl	2588c <CString::Format(char const*, ...)>
   1d038:	eb00048a 	bl	1e268 <CDeviceNameService::Get()>
   1d03c:	e1a05000 	mov	r5, r0
   1d040:	e1a0000d 	mov	r0, sp
   1d044:	eb001ce2 	bl	243d4 <CString::operator char const*() const>
   1d048:	e3a02001 	mov	r2, #1
   1d04c:	e1a01000 	mov	r1, r0
   1d050:	e1a00005 	mov	r0, r5
   1d054:	eb000400 	bl	1e05c <CDeviceNameService::RemoveDevice(char const*, bool)>
   1d058:	e5140004 	ldr	r0, [r4, #-4]
   1d05c:	e3500000 	cmp	r0, #0
   1d060:	0a000002 	beq	1d070 <CPartitionManager::~CPartitionManager()+0x8c>
   1d064:	e5903000 	ldr	r3, [r0]
   1d068:	e5933004 	ldr	r3, [r3, #4]
   1d06c:	e12fff33 	blx	r3
   1d070:	e3a03000 	mov	r3, #0
   1d074:	e1a0000d 	mov	r0, sp
   1d078:	e5043004 	str	r3, [r4, #-4]
   1d07c:	eb001c89 	bl	242a8 <CString::~CString()>
   1d080:	e1540008 	cmp	r4, r8
   1d084:	1affffde 	bne	1d004 <CPartitionManager::~CPartitionManager()+0x20>
   1d088:	e3a03000 	mov	r3, #0
   1d08c:	e1a00009 	mov	r0, r9
   1d090:	e5863000 	str	r3, [r6]
   1d094:	eb001c83 	bl	242a8 <CString::~CString()>
   1d098:	e1a00006 	mov	r0, r6
   1d09c:	e28dd010 	add	sp, sp, #16
   1d0a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d0a4:	00031960 	.word	0x00031960

0001d0a8 <CPartitionManager::Initialize()>:
   1d0a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0ac:	e1a05000 	mov	r5, r0
   1d0b0:	e5900000 	ldr	r0, [r0]
   1d0b4:	e3a03000 	mov	r3, #0
   1d0b8:	e5901000 	ldr	r1, [r0]
   1d0bc:	e3a02000 	mov	r2, #0
   1d0c0:	e5911010 	ldr	r1, [r1, #16]
   1d0c4:	e24ddf87 	sub	sp, sp, #540	; 0x21c
   1d0c8:	e12fff31 	blx	r1
   1d0cc:	e1903001 	orrs	r3, r0, r1
   1d0d0:	1a00002c 	bne	1d188 <CPartitionManager::Initialize()+0xe0>
   1d0d4:	e5950000 	ldr	r0, [r5]
   1d0d8:	e3a02c02 	mov	r2, #512	; 0x200
   1d0dc:	e5903000 	ldr	r3, [r0]
   1d0e0:	e28d1018 	add	r1, sp, #24
   1d0e4:	e5933008 	ldr	r3, [r3, #8]
   1d0e8:	e12fff33 	blx	r3
   1d0ec:	e3500c02 	cmp	r0, #512	; 0x200
   1d0f0:	1a000024 	bne	1d188 <CPartitionManager::Initialize()+0xe0>
   1d0f4:	e28d3f85 	add	r3, sp, #532	; 0x214
   1d0f8:	e2833002 	add	r3, r3, #2
   1d0fc:	e1d320b0 	ldrh	r2, [r3]
   1d100:	e59f31a4 	ldr	r3, [pc, #420]	; 1d2ac <CPartitionManager::Initialize()+0x204>
   1d104:	e1520003 	cmp	r2, r3
   1d108:	1a00005b 	bne	1d27c <CPartitionManager::Initialize()+0x1d4>
   1d10c:	e3a04000 	mov	r4, #0
   1d110:	e1a06004 	mov	r6, r4
   1d114:	e59f8194 	ldr	r8, [pc, #404]	; 1d2b0 <CPartitionManager::Initialize()+0x208>
   1d118:	e2857014 	add	r7, r5, #20
   1d11c:	e28d3018 	add	r3, sp, #24
   1d120:	e0833204 	add	r3, r3, r4, lsl #4
   1d124:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   1d128:	e2423005 	sub	r3, r2, #5
   1d12c:	e16f3f13 	clz	r3, r3
   1d130:	e3520000 	cmp	r2, #0
   1d134:	e1a032a3 	lsr	r3, r3, #5
   1d138:	03a03001 	moveq	r3, #1
   1d13c:	e352000f 	cmp	r2, #15
   1d140:	03833001 	orreq	r3, r3, #1
   1d144:	e35200ef 	cmp	r2, #239	; 0xef
   1d148:	03833001 	orreq	r3, r3, #1
   1d14c:	e3530000 	cmp	r3, #0
   1d150:	0a000014 	beq	1d1a8 <CPartitionManager::Initialize()+0x100>
   1d154:	e2844001 	add	r4, r4, #1
   1d158:	e3540004 	cmp	r4, #4
   1d15c:	1affffee 	bne	1d11c <CPartitionManager::Initialize()+0x74>
   1d160:	e3560000 	cmp	r6, #0
   1d164:	13a00001 	movne	r0, #1
   1d168:	1a00000c 	bne	1d1a0 <CPartitionManager::Initialize()+0xf8>
   1d16c:	eb000a63 	bl	1fb00 <CLogger::Get()>
   1d170:	e3a02002 	mov	r2, #2
   1d174:	e59f3138 	ldr	r3, [pc, #312]	; 1d2b4 <CPartitionManager::Initialize()+0x20c>
   1d178:	e59f1138 	ldr	r1, [pc, #312]	; 1d2b8 <CPartitionManager::Initialize()+0x210>
   1d17c:	eb0009a1 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d180:	e3a00001 	mov	r0, #1
   1d184:	ea000005 	b	1d1a0 <CPartitionManager::Initialize()+0xf8>
   1d188:	eb000a5c 	bl	1fb00 <CLogger::Get()>
   1d18c:	e3a02001 	mov	r2, #1
   1d190:	e59f3124 	ldr	r3, [pc, #292]	; 1d2bc <CPartitionManager::Initialize()+0x214>
   1d194:	e59f111c 	ldr	r1, [pc, #284]	; 1d2b8 <CPartitionManager::Initialize()+0x210>
   1d198:	eb00099a 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d19c:	e3a00000 	mov	r0, #0
   1d1a0:	e28ddf87 	add	sp, sp, #540	; 0x21c
   1d1a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1a8:	e28d3f86 	add	r3, sp, #536	; 0x218
   1d1ac:	e284901c 	add	r9, r4, #28
   1d1b0:	e0839209 	add	r9, r3, r9, lsl #4
   1d1b4:	e2491f7e 	sub	r1, r9, #504	; 0x1f8
   1d1b8:	e15130b2 	ldrh	r3, [r1, #-2]
   1d1bc:	e1d120b0 	ldrh	r2, [r1]
   1d1c0:	e1933802 	orrs	r3, r3, r2, lsl #16
   1d1c4:	0affffe2 	beq	1d154 <CPartitionManager::Initialize()+0xac>
   1d1c8:	e2499f7d 	sub	r9, r9, #500	; 0x1f4
   1d1cc:	e15930b2 	ldrh	r3, [r9, #-2]
   1d1d0:	e1d920b0 	ldrh	r2, [r9]
   1d1d4:	e1933802 	orrs	r3, r3, r2, lsl #16
   1d1d8:	0affffdd 	beq	1d154 <CPartitionManager::Initialize()+0xac>
   1d1dc:	e7973104 	ldr	r3, [r7, r4, lsl #2]
   1d1e0:	e3530000 	cmp	r3, #0
   1d1e4:	1a00002c 	bne	1d29c <CPartitionManager::Initialize()+0x1f4>
   1d1e8:	e3a00028 	mov	r0, #40	; 0x28
   1d1ec:	e58d1004 	str	r1, [sp, #4]
   1d1f0:	eb00298b 	bl	27824 <operator new(unsigned int)>
   1d1f4:	e1a0a005 	mov	sl, r5
   1d1f8:	e1a0b000 	mov	fp, r0
   1d1fc:	e59d1004 	ldr	r1, [sp, #4]
   1d200:	e1d9e0b0 	ldrh	lr, [r9]
   1d204:	e1d1c0b0 	ldrh	ip, [r1]
   1d208:	e15930b2 	ldrh	r3, [r9, #-2]
   1d20c:	e15120b2 	ldrh	r2, [r1, #-2]
   1d210:	e183380e 	orr	r3, r3, lr, lsl #16
   1d214:	e182280c 	orr	r2, r2, ip, lsl #16
   1d218:	e49a1004 	ldr	r1, [sl], #4
   1d21c:	eb0000c0 	bl	1d524 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   1d220:	e787b104 	str	fp, [r7, r4, lsl #2]
   1d224:	e28d0008 	add	r0, sp, #8
   1d228:	eb001c51 	bl	24374 <CString::CString()>
   1d22c:	e1a0000a 	mov	r0, sl
   1d230:	eb001c67 	bl	243d4 <CString::operator char const*() const>
   1d234:	e2866001 	add	r6, r6, #1
   1d238:	e1a02000 	mov	r2, r0
   1d23c:	e1a03006 	mov	r3, r6
   1d240:	e1a01008 	mov	r1, r8
   1d244:	e28d0008 	add	r0, sp, #8
   1d248:	eb00218f 	bl	2588c <CString::Format(char const*, ...)>
   1d24c:	eb000405 	bl	1e268 <CDeviceNameService::Get()>
   1d250:	e1a09000 	mov	r9, r0
   1d254:	e28d0008 	add	r0, sp, #8
   1d258:	eb001c5d 	bl	243d4 <CString::operator char const*() const>
   1d25c:	e3a03001 	mov	r3, #1
   1d260:	e1a01000 	mov	r1, r0
   1d264:	e7972104 	ldr	r2, [r7, r4, lsl #2]
   1d268:	e1a00009 	mov	r0, r9
   1d26c:	eb00034d 	bl	1dfa8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1d270:	e28d0008 	add	r0, sp, #8
   1d274:	eb001c0b 	bl	242a8 <CString::~CString()>
   1d278:	eaffffb5 	b	1d154 <CPartitionManager::Initialize()+0xac>
   1d27c:	eb000a1f 	bl	1fb00 <CLogger::Get()>
   1d280:	e3a02002 	mov	r2, #2
   1d284:	e59f3034 	ldr	r3, [pc, #52]	; 1d2c0 <CPartitionManager::Initialize()+0x218>
   1d288:	e59f1028 	ldr	r1, [pc, #40]	; 1d2b8 <CPartitionManager::Initialize()+0x210>
   1d28c:	eb00095d 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d290:	e3a00001 	mov	r0, #1
   1d294:	e28ddf87 	add	sp, sp, #540	; 0x21c
   1d298:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d29c:	e3a02078 	mov	r2, #120	; 0x78
   1d2a0:	e59f101c 	ldr	r1, [pc, #28]	; 1d2c4 <CPartitionManager::Initialize()+0x21c>
   1d2a4:	e59f001c 	ldr	r0, [pc, #28]	; 1d2c8 <CPartitionManager::Initialize()+0x220>
   1d2a8:	eb000114 	bl	1d700 <assertion_failed>
   1d2ac:	0000aa55 	.word	0x0000aa55
   1d2b0:	00031960 	.word	0x00031960
   1d2b4:	000319bc 	.word	0x000319bc
   1d2b8:	000319e0 	.word	0x000319e0
   1d2bc:	00031968 	.word	0x00031968
   1d2c0:	00031978 	.word	0x00031978
   1d2c4:	0003198c 	.word	0x0003198c
   1d2c8:	000319a4 	.word	0x000319a4

0001d2cc <CPartition::~CPartition()>:
   1d2cc:	e3a02000 	mov	r2, #0
   1d2d0:	e92d4010 	push	{r4, lr}
   1d2d4:	e1a04000 	mov	r4, r0
   1d2d8:	e59f3010 	ldr	r3, [pc, #16]	; 1d2f0 <CPartition::~CPartition()+0x24>
   1d2dc:	e580200c 	str	r2, [r0, #12]
   1d2e0:	e5803000 	str	r3, [r0]
   1d2e4:	eb0002de 	bl	1de64 <CDevice::~CDevice()>
   1d2e8:	e1a00004 	mov	r0, r4
   1d2ec:	e8bd8010 	pop	{r4, pc}
   1d2f0:	00031a00 	.word	0x00031a00

0001d2f4 <CPartition::~CPartition()>:
   1d2f4:	e3a02000 	mov	r2, #0
   1d2f8:	e92d4010 	push	{r4, lr}
   1d2fc:	e1a04000 	mov	r4, r0
   1d300:	e59f301c 	ldr	r3, [pc, #28]	; 1d324 <CPartition::~CPartition()+0x30>
   1d304:	e580200c 	str	r2, [r0, #12]
   1d308:	e5803000 	str	r3, [r0]
   1d30c:	eb0002d4 	bl	1de64 <CDevice::~CDevice()>
   1d310:	e1a00004 	mov	r0, r4
   1d314:	e3a01028 	mov	r1, #40	; 0x28
   1d318:	eb00294f 	bl	2785c <operator delete(void*, unsigned int)>
   1d31c:	e1a00004 	mov	r0, r4
   1d320:	e8bd8010 	pop	{r4, pc}
   1d324:	00031a00 	.word	0x00031a00

0001d328 <CPartition::Read(void*, unsigned int)>:
   1d328:	e5d0c020 	ldrb	ip, [r0, #32]
   1d32c:	e35c0000 	cmp	ip, #0
   1d330:	1a00001d 	bne	1d3ac <CPartition::Read(void*, unsigned int)+0x84>
   1d334:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d338:	e3a05000 	mov	r5, #0
   1d33c:	e3a09000 	mov	r9, #0
   1d340:	e59f406c 	ldr	r4, [pc, #108]	; 1d3b4 <CPartition::Read(void*, unsigned int)+0x8c>
   1d344:	e590c018 	ldr	ip, [r0, #24]
   1d348:	e0944002 	adds	r4, r4, r2
   1d34c:	e590301c 	ldr	r3, [r0, #28]
   1d350:	e2a55000 	adc	r5, r5, #0
   1d354:	e094c00c 	adds	ip, r4, ip
   1d358:	e0a53003 	adc	r3, r5, r3
   1d35c:	e5908014 	ldr	r8, [r0, #20]
   1d360:	e1a064ac 	lsr	r6, ip, #9
   1d364:	e1a074a3 	lsr	r7, r3, #9
   1d368:	e1866b83 	orr	r6, r6, r3, lsl #23
   1d36c:	e1590007 	cmp	r9, r7
   1d370:	01580006 	cmpeq	r8, r6
   1d374:	3a00000a 	bcc	1d3a4 <CPartition::Read(void*, unsigned int)+0x7c>
   1d378:	e590000c 	ldr	r0, [r0, #12]
   1d37c:	e3500000 	cmp	r0, #0
   1d380:	0a000003 	beq	1d394 <CPartition::Read(void*, unsigned int)+0x6c>
   1d384:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d388:	e5903000 	ldr	r3, [r0]
   1d38c:	e5933008 	ldr	r3, [r3, #8]
   1d390:	e12fff13 	bx	r3
   1d394:	e3a02035 	mov	r2, #53	; 0x35
   1d398:	e59f1018 	ldr	r1, [pc, #24]	; 1d3b8 <CPartition::Read(void*, unsigned int)+0x90>
   1d39c:	e59f0018 	ldr	r0, [pc, #24]	; 1d3bc <CPartition::Read(void*, unsigned int)+0x94>
   1d3a0:	eb0000d6 	bl	1d700 <assertion_failed>
   1d3a4:	e3e00000 	mvn	r0, #0
   1d3a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d3ac:	e3e00000 	mvn	r0, #0
   1d3b0:	e12fff1e 	bx	lr
   1d3b4:	000001ff 	.word	0x000001ff
   1d3b8:	000319e8 	.word	0x000319e8
   1d3bc:	0002d9d0 	.word	0x0002d9d0

0001d3c0 <CPartition::Write(void const*, unsigned int)>:
   1d3c0:	e5d0c020 	ldrb	ip, [r0, #32]
   1d3c4:	e35c0000 	cmp	ip, #0
   1d3c8:	1a00001d 	bne	1d444 <CPartition::Write(void const*, unsigned int)+0x84>
   1d3cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d3d0:	e3a05000 	mov	r5, #0
   1d3d4:	e3a09000 	mov	r9, #0
   1d3d8:	e59f406c 	ldr	r4, [pc, #108]	; 1d44c <CPartition::Write(void const*, unsigned int)+0x8c>
   1d3dc:	e590c018 	ldr	ip, [r0, #24]
   1d3e0:	e0944002 	adds	r4, r4, r2
   1d3e4:	e590301c 	ldr	r3, [r0, #28]
   1d3e8:	e2a55000 	adc	r5, r5, #0
   1d3ec:	e094c00c 	adds	ip, r4, ip
   1d3f0:	e0a53003 	adc	r3, r5, r3
   1d3f4:	e5908014 	ldr	r8, [r0, #20]
   1d3f8:	e1a064ac 	lsr	r6, ip, #9
   1d3fc:	e1a074a3 	lsr	r7, r3, #9
   1d400:	e1866b83 	orr	r6, r6, r3, lsl #23
   1d404:	e1590007 	cmp	r9, r7
   1d408:	01580006 	cmpeq	r8, r6
   1d40c:	3a00000a 	bcc	1d43c <CPartition::Write(void const*, unsigned int)+0x7c>
   1d410:	e590000c 	ldr	r0, [r0, #12]
   1d414:	e3500000 	cmp	r0, #0
   1d418:	0a000003 	beq	1d42c <CPartition::Write(void const*, unsigned int)+0x6c>
   1d41c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d420:	e5903000 	ldr	r3, [r0]
   1d424:	e593300c 	ldr	r3, [r3, #12]
   1d428:	e12fff13 	bx	r3
   1d42c:	e3a02047 	mov	r2, #71	; 0x47
   1d430:	e59f1018 	ldr	r1, [pc, #24]	; 1d450 <CPartition::Write(void const*, unsigned int)+0x90>
   1d434:	e59f0018 	ldr	r0, [pc, #24]	; 1d454 <CPartition::Write(void const*, unsigned int)+0x94>
   1d438:	eb0000b0 	bl	1d700 <assertion_failed>
   1d43c:	e3e00000 	mvn	r0, #0
   1d440:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d444:	e3e00000 	mvn	r0, #0
   1d448:	e12fff1e 	bx	lr
   1d44c:	000001ff 	.word	0x000001ff
   1d450:	000319e8 	.word	0x000319e8
   1d454:	0002d9d0 	.word	0x0002d9d0

0001d458 <CPartition::Seek(unsigned long long)>:
   1d458:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d45c:	e3a0b000 	mov	fp, #0
   1d460:	e1a0500b 	mov	r5, fp
   1d464:	e1a04b82 	lsl	r4, r2, #23
   1d468:	e1a06002 	mov	r6, r2
   1d46c:	e3a02001 	mov	r2, #1
   1d470:	e1a04ba4 	lsr	r4, r4, #23
   1d474:	e1941005 	orrs	r1, r4, r5
   1d478:	e5c02020 	strb	r2, [r0, #32]
   1d47c:	1a00001f 	bne	1d500 <CPartition::Seek(unsigned long long)+0xa8>
   1d480:	e1a0a003 	mov	sl, r3
   1d484:	e3a03000 	mov	r3, #0
   1d488:	e5902014 	ldr	r2, [r0, #20]
   1d48c:	e1a044a6 	lsr	r4, r6, #9
   1d490:	e1a054aa 	lsr	r5, sl, #9
   1d494:	e1844b8a 	orr	r4, r4, sl, lsl #23
   1d498:	e1550003 	cmp	r5, r3
   1d49c:	01540002 	cmpeq	r4, r2
   1d4a0:	e1a07000 	mov	r7, r0
   1d4a4:	2a000015 	bcs	1d500 <CPartition::Seek(unsigned long long)+0xa8>
   1d4a8:	e5903010 	ldr	r3, [r0, #16]
   1d4ac:	e590000c 	ldr	r0, [r0, #12]
   1d4b0:	e1a02483 	lsl	r2, r3, #9
   1d4b4:	e0968002 	adds	r8, r6, r2
   1d4b8:	e1a03ba3 	lsr	r3, r3, #23
   1d4bc:	e0aa9003 	adc	r9, sl, r3
   1d4c0:	e3500000 	cmp	r0, #0
   1d4c4:	0a000010 	beq	1d50c <CPartition::Seek(unsigned long long)+0xb4>
   1d4c8:	e5903000 	ldr	r3, [r0]
   1d4cc:	e1a02008 	mov	r2, r8
   1d4d0:	e5931010 	ldr	r1, [r3, #16]
   1d4d4:	e1a03009 	mov	r3, r9
   1d4d8:	e12fff31 	blx	r1
   1d4dc:	e1510009 	cmp	r1, r9
   1d4e0:	01500008 	cmpeq	r0, r8
   1d4e4:	1a000005 	bne	1d500 <CPartition::Seek(unsigned long long)+0xa8>
   1d4e8:	e1a00006 	mov	r0, r6
   1d4ec:	e1a0100a 	mov	r1, sl
   1d4f0:	e5876018 	str	r6, [r7, #24]
   1d4f4:	e587a01c 	str	sl, [r7, #28]
   1d4f8:	e5c7b020 	strb	fp, [r7, #32]
   1d4fc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d500:	e3e00000 	mvn	r0, #0
   1d504:	e1a01000 	mov	r1, r0
   1d508:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d50c:	e3a02059 	mov	r2, #89	; 0x59
   1d510:	e59f1004 	ldr	r1, [pc, #4]	; 1d51c <CPartition::Seek(unsigned long long)+0xc4>
   1d514:	e59f0004 	ldr	r0, [pc, #4]	; 1d520 <CPartition::Seek(unsigned long long)+0xc8>
   1d518:	eb000078 	bl	1d700 <assertion_failed>
   1d51c:	000319e8 	.word	0x000319e8
   1d520:	0002d9d0 	.word	0x0002d9d0

0001d524 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   1d524:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d528:	e1a05001 	mov	r5, r1
   1d52c:	e1a04000 	mov	r4, r0
   1d530:	e1a07002 	mov	r7, r2
   1d534:	e1a06003 	mov	r6, r3
   1d538:	eb00026b 	bl	1deec <CDevice::CDevice()>
   1d53c:	e3a03001 	mov	r3, #1
   1d540:	e3a00000 	mov	r0, #0
   1d544:	e3a01000 	mov	r1, #0
   1d548:	e59f2034 	ldr	r2, [pc, #52]	; 1d584 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x60>
   1d54c:	e3550000 	cmp	r5, #0
   1d550:	e1c401f8 	strd	r0, [r4, #24]
   1d554:	e5847010 	str	r7, [r4, #16]
   1d558:	e584500c 	str	r5, [r4, #12]
   1d55c:	e5846014 	str	r6, [r4, #20]
   1d560:	e5842000 	str	r2, [r4]
   1d564:	e5c43020 	strb	r3, [r4, #32]
   1d568:	0a000001 	beq	1d574 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x50>
   1d56c:	e1a00004 	mov	r0, r4
   1d570:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d574:	e3a0201f 	mov	r2, #31
   1d578:	e59f1008 	ldr	r1, [pc, #8]	; 1d588 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   1d57c:	e59f0008 	ldr	r0, [pc, #8]	; 1d58c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x68>
   1d580:	eb00005e 	bl	1d700 <assertion_failed>
   1d584:	00031a00 	.word	0x00031a00
   1d588:	000319e8 	.word	0x000319e8
   1d58c:	0002d9d0 	.word	0x0002d9d0

0001d590 <CActLED::CActLED(bool)>:
   1d590:	e3a03000 	mov	r3, #0
   1d594:	e59f2088 	ldr	r2, [pc, #136]	; 1d624 <CActLED::CActLED(bool)+0x94>
   1d598:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d59c:	e5803000 	str	r3, [r0]
   1d5a0:	e5803004 	str	r3, [r0, #4]
   1d5a4:	e1a06001 	mov	r6, r1
   1d5a8:	e5820000 	str	r0, [r2]
   1d5ac:	e1a05000 	mov	r5, r0
   1d5b0:	eb000c53 	bl	20704 <CMachineInfo::Get()>
   1d5b4:	eb000b84 	bl	203cc <CMachineInfo::GetActLEDInfo() const>
   1d5b8:	e2107080 	ands	r7, r0, #128	; 0x80
   1d5bc:	e1a04000 	mov	r4, r0
   1d5c0:	0a00000e 	beq	1d600 <CActLED::CActLED(bool)+0x70>
   1d5c4:	e3a00014 	mov	r0, #20
   1d5c8:	eb002895 	bl	27824 <operator new(unsigned int)>
   1d5cc:	e1a07000 	mov	r7, r0
   1d5d0:	e1a02006 	mov	r2, r6
   1d5d4:	e204103f 	and	r1, r4, #63	; 0x3f
   1d5d8:	eb0026c2 	bl	270e8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   1d5dc:	e5857004 	str	r7, [r5, #4]
   1d5e0:	e1a04324 	lsr	r4, r4, #6
   1d5e4:	e2244001 	eor	r4, r4, #1
   1d5e8:	e2044001 	and	r4, r4, #1
   1d5ec:	e1a00005 	mov	r0, r5
   1d5f0:	e5c54008 	strb	r4, [r5, #8]
   1d5f4:	eb00001c 	bl	1d66c <CActLED::Off()>
   1d5f8:	e1a00005 	mov	r0, r5
   1d5fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d600:	e3a00028 	mov	r0, #40	; 0x28
   1d604:	eb002886 	bl	27824 <operator new(unsigned int)>
   1d608:	e1a06000 	mov	r6, r0
   1d60c:	e1a03007 	mov	r3, r7
   1d610:	e3a02001 	mov	r2, #1
   1d614:	e204103f 	and	r1, r4, #63	; 0x3f
   1d618:	eb0003bc 	bl	1e510 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   1d61c:	e5856000 	str	r6, [r5]
   1d620:	eaffffee 	b	1d5e0 <CActLED::CActLED(bool)+0x50>
   1d624:	00034c18 	.word	0x00034c18

0001d628 <CActLED::~CActLED()>:
   1d628:	e3a02000 	mov	r2, #0
   1d62c:	e59f3004 	ldr	r3, [pc, #4]	; 1d638 <CActLED::~CActLED()+0x10>
   1d630:	e5832000 	str	r2, [r3]
   1d634:	e12fff1e 	bx	lr
   1d638:	00034c18 	.word	0x00034c18

0001d63c <CActLED::On()>:
   1d63c:	e5903000 	ldr	r3, [r0]
   1d640:	e3530000 	cmp	r3, #0
   1d644:	0a000002 	beq	1d654 <CActLED::On()+0x18>
   1d648:	e5d01008 	ldrb	r1, [r0, #8]
   1d64c:	e1a00003 	mov	r0, r3
   1d650:	ea000456 	b	1e7b0 <CGPIOPin::Write(unsigned int)>
   1d654:	e5903004 	ldr	r3, [r0, #4]
   1d658:	e3530000 	cmp	r3, #0
   1d65c:	012fff1e 	bxeq	lr
   1d660:	e5d01008 	ldrb	r1, [r0, #8]
   1d664:	e1a00003 	mov	r0, r3
   1d668:	ea0026fb 	b	2725c <CVirtualGPIOPin::Write(unsigned int)>

0001d66c <CActLED::Off()>:
   1d66c:	e5903000 	ldr	r3, [r0]
   1d670:	e3530000 	cmp	r3, #0
   1d674:	0a000003 	beq	1d688 <CActLED::Off()+0x1c>
   1d678:	e5d01008 	ldrb	r1, [r0, #8]
   1d67c:	e1a00003 	mov	r0, r3
   1d680:	e2211001 	eor	r1, r1, #1
   1d684:	ea000449 	b	1e7b0 <CGPIOPin::Write(unsigned int)>
   1d688:	e5903004 	ldr	r3, [r0, #4]
   1d68c:	e3530000 	cmp	r3, #0
   1d690:	012fff1e 	bxeq	lr
   1d694:	e5d01008 	ldrb	r1, [r0, #8]
   1d698:	e1a00003 	mov	r0, r3
   1d69c:	e2211001 	eor	r1, r1, #1
   1d6a0:	ea0026ed 	b	2725c <CVirtualGPIOPin::Write(unsigned int)>

0001d6a4 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   1d6a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d6a8:	e2516000 	subs	r6, r1, #0
   1d6ac:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1d6b0:	e1a05000 	mov	r5, r0
   1d6b4:	e1a07002 	mov	r7, r2
   1d6b8:	e1a08003 	mov	r8, r3
   1d6bc:	e3a04001 	mov	r4, #1
   1d6c0:	e1a00005 	mov	r0, r5
   1d6c4:	ebffffdc 	bl	1d63c <CActLED::On()>
   1d6c8:	e1a00007 	mov	r0, r7
   1d6cc:	eb0023e4 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
   1d6d0:	e1a00005 	mov	r0, r5
   1d6d4:	ebffffe4 	bl	1d66c <CActLED::Off()>
   1d6d8:	e2844001 	add	r4, r4, #1
   1d6dc:	e1a00008 	mov	r0, r8
   1d6e0:	eb0023df 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
   1d6e4:	e1560004 	cmp	r6, r4
   1d6e8:	2afffff4 	bcs	1d6c0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   1d6ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001d6f0 <CActLED::Get()>:
   1d6f0:	e59f3004 	ldr	r3, [pc, #4]	; 1d6fc <CActLED::Get()+0xc>
   1d6f4:	e5930000 	ldr	r0, [r3]
   1d6f8:	e12fff1e 	bx	lr
   1d6fc:	00034c18 	.word	0x00034c18

0001d700 <assertion_failed>:
   1d700:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1d704:	e24dd024 	sub	sp, sp, #36	; 0x24
   1d708:	e1a05000 	mov	r5, r0
   1d70c:	e1a04001 	mov	r4, r1
   1d710:	e58d200c 	str	r2, [sp, #12]
   1d714:	e1a0600d 	mov	r6, sp
   1d718:	eb002d3e 	bl	28c18 <CInterruptSystem::DisableFIQ()>
   1d71c:	f1080040 	cpsie	f
   1d720:	e28d0010 	add	r0, sp, #16
   1d724:	eb001b12 	bl	24374 <CString::CString()>
   1d728:	e1a02004 	mov	r2, r4
   1d72c:	e59d300c 	ldr	r3, [sp, #12]
   1d730:	e59f1044 	ldr	r1, [pc, #68]	; 1d77c <assertion_failed+0x7c>
   1d734:	e28d0010 	add	r0, sp, #16
   1d738:	eb002053 	bl	2588c <CString::Format(char const*, ...)>
   1d73c:	e28d0010 	add	r0, sp, #16
   1d740:	eb001b23 	bl	243d4 <CString::operator char const*() const>
   1d744:	e1a01000 	mov	r1, r0
   1d748:	e1a00006 	mov	r0, r6
   1d74c:	eb0001a0 	bl	1ddd4 <debug_stacktrace(unsigned int const*, char const*)>
   1d750:	eb0008ea 	bl	1fb00 <CLogger::Get()>
   1d754:	e1a04000 	mov	r4, r0
   1d758:	e28d0010 	add	r0, sp, #16
   1d75c:	eb001b1c 	bl	243d4 <CString::operator char const*() const>
   1d760:	e3a02000 	mov	r2, #0
   1d764:	e1a01000 	mov	r1, r0
   1d768:	e59f3010 	ldr	r3, [pc, #16]	; 1d780 <assertion_failed+0x80>
   1d76c:	e1a00004 	mov	r0, r4
   1d770:	e58d5000 	str	r5, [sp]
   1d774:	eb000823 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d778:	eafffffe 	b	1d778 <assertion_failed+0x78>
   1d77c:	00031a18 	.word	0x00031a18
   1d780:	00031a20 	.word	0x00031a20

0001d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   1d784:	e92d4010 	push	{r4, lr}
   1d788:	e1a04000 	mov	r4, r0
   1d78c:	e1a02001 	mov	r2, r1
   1d790:	e3a01008 	mov	r1, #8
   1d794:	eb002f04 	bl	293ac <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   1d798:	e1a00004 	mov	r0, r4
   1d79c:	e8bd8010 	pop	{r4, pc}

0001d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>:
   1d7a0:	e92d4010 	push	{r4, lr}
   1d7a4:	e1a04000 	mov	r4, r0
   1d7a8:	eb002f02 	bl	293b8 <CBcmMailBox::~CBcmMailBox()>
   1d7ac:	e1a00004 	mov	r0, r4
   1d7b0:	e8bd8010 	pop	{r4, pc}

0001d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   1d7b4:	e92d4070 	push	{r4, r5, r6, lr}
   1d7b8:	e2524000 	subs	r4, r2, #0
   1d7bc:	e59de010 	ldr	lr, [sp, #16]
   1d7c0:	0a00002f 	beq	1d884 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd0>
   1d7c4:	e353000f 	cmp	r3, #15
   1d7c8:	9a000031 	bls	1d894 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   1d7cc:	e3ce2102 	bic	r2, lr, #-2147483648	; 0x80000000
   1d7d0:	e5c4e008 	strb	lr, [r4, #8]
   1d7d4:	e1a0e422 	lsr	lr, r2, #8
   1d7d8:	e243c00c 	sub	ip, r3, #12
   1d7dc:	e5c4e009 	strb	lr, [r4, #9]
   1d7e0:	e1a0e822 	lsr	lr, r2, #16
   1d7e4:	e5c4e00a 	strb	lr, [r4, #10]
   1d7e8:	e1a02c22 	lsr	r2, r2, #24
   1d7ec:	e1a0e42c 	lsr	lr, ip, #8
   1d7f0:	e5c41000 	strb	r1, [r4]
   1d7f4:	e5c4200b 	strb	r2, [r4, #11]
   1d7f8:	e1a0582c 	lsr	r5, ip, #16
   1d7fc:	e1a02003 	mov	r2, r3
   1d800:	e5c4c004 	strb	ip, [r4, #4]
   1d804:	e1a03821 	lsr	r3, r1, #16
   1d808:	e1a0cc2c 	lsr	ip, ip, #24
   1d80c:	e5c4e005 	strb	lr, [r4, #5]
   1d810:	e1a0e421 	lsr	lr, r1, #8
   1d814:	e1a01c21 	lsr	r1, r1, #24
   1d818:	e5c41003 	strb	r1, [r4, #3]
   1d81c:	e5c45006 	strb	r5, [r4, #6]
   1d820:	e1a01004 	mov	r1, r4
   1d824:	e5c4c007 	strb	ip, [r4, #7]
   1d828:	e5c4e001 	strb	lr, [r4, #1]
   1d82c:	e5c43002 	strb	r3, [r4, #2]
   1d830:	eb00001c 	bl	1d8a8 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   1d834:	e3500000 	cmp	r0, #0
   1d838:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d83c:	e5d42009 	ldrb	r2, [r4, #9]
   1d840:	e5d43008 	ldrb	r3, [r4, #8]
   1d844:	e5d4100a 	ldrb	r1, [r4, #10]
   1d848:	e1833402 	orr	r3, r3, r2, lsl #8
   1d84c:	e5d4200b 	ldrb	r2, [r4, #11]
   1d850:	e1833801 	orr	r3, r3, r1, lsl #16
   1d854:	e1833c02 	orr	r3, r3, r2, lsl #24
   1d858:	e3c32102 	bic	r2, r3, #-2147483648	; 0x80000000
   1d85c:	e2520000 	subs	r0, r2, #0
   1d860:	e1a0c422 	lsr	ip, r2, #8
   1d864:	e1a01822 	lsr	r1, r2, #16
   1d868:	e1a02c22 	lsr	r2, r2, #24
   1d86c:	13a00001 	movne	r0, #1
   1d870:	e5c43008 	strb	r3, [r4, #8]
   1d874:	e5c4c009 	strb	ip, [r4, #9]
   1d878:	e5c4100a 	strb	r1, [r4, #10]
   1d87c:	e5c4200b 	strb	r2, [r4, #11]
   1d880:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d884:	e59f1018 	ldr	r1, [pc, #24]	; 1d8a4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   1d888:	e3a02033 	mov	r2, #51	; 0x33
   1d88c:	e2810014 	add	r0, r1, #20
   1d890:	ebffff9a 	bl	1d700 <assertion_failed>
   1d894:	e59f1008 	ldr	r1, [pc, #8]	; 1d8a4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   1d898:	e3a02034 	mov	r2, #52	; 0x34
   1d89c:	e2810020 	add	r0, r1, #32
   1d8a0:	ebffff96 	bl	1d700 <assertion_failed>
   1d8a4:	00031a38 	.word	0x00031a38

0001d8a8 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   1d8a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d8ac:	e2519000 	subs	r9, r1, #0
   1d8b0:	0a000034 	beq	1d988 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   1d8b4:	e352000f 	cmp	r2, #15
   1d8b8:	e1a05002 	mov	r5, r2
   1d8bc:	9a000035 	bls	1d998 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   1d8c0:	e2126003 	ands	r6, r2, #3
   1d8c4:	e282800c 	add	r8, r2, #12
   1d8c8:	1a000036 	bne	1d9a8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x100>
   1d8cc:	e1a07000 	mov	r7, r0
   1d8d0:	e1a00006 	mov	r0, r6
   1d8d4:	eb002b33 	bl	285a8 <CMemorySystem::GetCoherentPage(unsigned int)>
   1d8d8:	e1a01428 	lsr	r1, r8, #8
   1d8dc:	e1a02828 	lsr	r2, r8, #16
   1d8e0:	e1a03c28 	lsr	r3, r8, #24
   1d8e4:	e280a008 	add	sl, r0, #8
   1d8e8:	e5c08000 	strb	r8, [r0]
   1d8ec:	e5c06004 	strb	r6, [r0, #4]
   1d8f0:	e5c06005 	strb	r6, [r0, #5]
   1d8f4:	e5c06006 	strb	r6, [r0, #6]
   1d8f8:	e5c06007 	strb	r6, [r0, #7]
   1d8fc:	e5c01001 	strb	r1, [r0, #1]
   1d900:	e5c02002 	strb	r2, [r0, #2]
   1d904:	e5c03003 	strb	r3, [r0, #3]
   1d908:	e1a04000 	mov	r4, r0
   1d90c:	e1a02005 	mov	r2, r5
   1d910:	e1a0000a 	mov	r0, sl
   1d914:	e1a01009 	mov	r1, r9
   1d918:	eb0025db 	bl	2708c <memcpy>
   1d91c:	e78a6005 	str	r6, [sl, r5]
   1d920:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   1d924:	e3c48103 	bic	r8, r4, #-1073741824	; 0xc0000000
   1d928:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
   1d92c:	e1a00007 	mov	r0, r7
   1d930:	e1a01008 	mov	r1, r8
   1d934:	eb002ea0 	bl	293bc <CBcmMailBox::WriteRead(unsigned int)>
   1d938:	e1500008 	cmp	r0, r8
   1d93c:	0a000001 	beq	1d948 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   1d940:	e3a00000 	mov	r0, #0
   1d944:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d948:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   1d94c:	e5d42005 	ldrb	r2, [r4, #5]
   1d950:	e5d43004 	ldrb	r3, [r4, #4]
   1d954:	e5d41006 	ldrb	r1, [r4, #6]
   1d958:	e1833402 	orr	r3, r3, r2, lsl #8
   1d95c:	e5d42007 	ldrb	r2, [r4, #7]
   1d960:	e1833801 	orr	r3, r3, r1, lsl #16
   1d964:	e1833c02 	orr	r3, r3, r2, lsl #24
   1d968:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   1d96c:	1afffff3 	bne	1d940 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x98>
   1d970:	e1a02005 	mov	r2, r5
   1d974:	e1a0100a 	mov	r1, sl
   1d978:	e1a00009 	mov	r0, r9
   1d97c:	eb0025c2 	bl	2708c <memcpy>
   1d980:	e3a00001 	mov	r0, #1
   1d984:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d988:	e59f1028 	ldr	r1, [pc, #40]	; 1d9b8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   1d98c:	e3a0204b 	mov	r2, #75	; 0x4b
   1d990:	e2810048 	add	r0, r1, #72	; 0x48
   1d994:	ebffff59 	bl	1d700 <assertion_failed>
   1d998:	e59f1018 	ldr	r1, [pc, #24]	; 1d9b8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   1d99c:	e3a0204c 	mov	r2, #76	; 0x4c
   1d9a0:	e2810054 	add	r0, r1, #84	; 0x54
   1d9a4:	ebffff55 	bl	1d700 <assertion_failed>
   1d9a8:	e59f1008 	ldr	r1, [pc, #8]	; 1d9b8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   1d9ac:	e3a0204e 	mov	r2, #78	; 0x4e
   1d9b0:	e2810080 	add	r0, r1, #128	; 0x80
   1d9b4:	ebffff51 	bl	1d700 <assertion_failed>
   1d9b8:	00031a38 	.word	0x00031a38

0001d9bc <CClassAllocator::~CClassAllocator()>:
   1d9bc:	e3a03000 	mov	r3, #0
   1d9c0:	e92d4010 	push	{r4, lr}
   1d9c4:	e1a04000 	mov	r4, r0
   1d9c8:	e590000c 	ldr	r0, [r0, #12]
   1d9cc:	e5843010 	str	r3, [r4, #16]
   1d9d0:	e1500003 	cmp	r0, r3
   1d9d4:	0a000000 	beq	1d9dc <CClassAllocator::~CClassAllocator()+0x20>
   1d9d8:	eb002cfa 	bl	28dc8 <free>
   1d9dc:	e1a00004 	mov	r0, r4
   1d9e0:	e8bd8010 	pop	{r4, pc}

0001d9e4 <CClassAllocator::Init(unsigned int, unsigned int)>:
   1d9e4:	e3510001 	cmp	r1, #1
   1d9e8:	33a01001 	movcc	r1, #1
   1d9ec:	e281101f 	add	r1, r1, #31
   1d9f0:	e3c1100f 	bic	r1, r1, #15
   1d9f4:	e3520000 	cmp	r2, #0
   1d9f8:	e92d4010 	push	{r4, lr}
   1d9fc:	e5801000 	str	r1, [r0]
   1da00:	0a00001b 	beq	1da74 <CClassAllocator::Init(unsigned int, unsigned int)+0x90>
   1da04:	e1a04000 	mov	r4, r0
   1da08:	e5802004 	str	r2, [r0, #4]
   1da0c:	e0000192 	mul	r0, r2, r1
   1da10:	eb002ce6 	bl	28db0 <malloc>
   1da14:	e3500000 	cmp	r0, #0
   1da18:	e584000c 	str	r0, [r4, #12]
   1da1c:	0a000012 	beq	1da6c <CClassAllocator::Init(unsigned int, unsigned int)+0x88>
   1da20:	e210200f 	ands	r2, r0, #15
   1da24:	1a000016 	bne	1da84 <CClassAllocator::Init(unsigned int, unsigned int)+0xa0>
   1da28:	e5943004 	ldr	r3, [r4, #4]
   1da2c:	e3530000 	cmp	r3, #0
   1da30:	08bd8010 	popeq	{r4, pc}
   1da34:	e5943010 	ldr	r3, [r4, #16]
   1da38:	e59fe054 	ldr	lr, [pc, #84]	; 1da94 <CClassAllocator::Init(unsigned int, unsigned int)+0xb0>
   1da3c:	e1a01003 	mov	r1, r3
   1da40:	e5943000 	ldr	r3, [r4]
   1da44:	e0030293 	mul	r3, r3, r2
   1da48:	e780e003 	str	lr, [r0, r3]
   1da4c:	e594c004 	ldr	ip, [r4, #4]
   1da50:	e2822001 	add	r2, r2, #1
   1da54:	e0803003 	add	r3, r0, r3
   1da58:	e15c0002 	cmp	ip, r2
   1da5c:	e583100c 	str	r1, [r3, #12]
   1da60:	e5843010 	str	r3, [r4, #16]
   1da64:	8afffff4 	bhi	1da3c <CClassAllocator::Init(unsigned int, unsigned int)+0x58>
   1da68:	e8bd8010 	pop	{r4, pc}
   1da6c:	e5840004 	str	r0, [r4, #4]
   1da70:	e8bd8010 	pop	{r4, pc}
   1da74:	e3a02055 	mov	r2, #85	; 0x55
   1da78:	e59f1018 	ldr	r1, [pc, #24]	; 1da98 <CClassAllocator::Init(unsigned int, unsigned int)+0xb4>
   1da7c:	e59f0018 	ldr	r0, [pc, #24]	; 1da9c <CClassAllocator::Init(unsigned int, unsigned int)+0xb8>
   1da80:	ebffff1e 	bl	1d700 <assertion_failed>
   1da84:	e3a0205f 	mov	r2, #95	; 0x5f
   1da88:	e59f1008 	ldr	r1, [pc, #8]	; 1da98 <CClassAllocator::Init(unsigned int, unsigned int)+0xb4>
   1da8c:	e59f000c 	ldr	r0, [pc, #12]	; 1daa0 <CClassAllocator::Init(unsigned int, unsigned int)+0xbc>
   1da90:	ebffff1a 	bl	1d700 <assertion_failed>
   1da94:	4f425350 	.word	0x4f425350
   1da98:	00031ad0 	.word	0x00031ad0
   1da9c:	00031ae4 	.word	0x00031ae4
   1daa0:	00031afc 	.word	0x00031afc

0001daa4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   1daa4:	e92d4010 	push	{r4, lr}
   1daa8:	e3a0c000 	mov	ip, #0
   1daac:	e3a0e001 	mov	lr, #1
   1dab0:	e1a04000 	mov	r4, r0
   1dab4:	e5803008 	str	r3, [r0, #8]
   1dab8:	e580e018 	str	lr, [r0, #24]
   1dabc:	e580c00c 	str	ip, [r0, #12]
   1dac0:	e580c010 	str	ip, [r0, #16]
   1dac4:	e5c0c014 	strb	ip, [r0, #20]
   1dac8:	ebffffc5 	bl	1d9e4 <CClassAllocator::Init(unsigned int, unsigned int)>
   1dacc:	e1a00004 	mov	r0, r4
   1dad0:	e8bd8010 	pop	{r4, pc}

0001dad4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   1dad4:	e92d4010 	push	{r4, lr}
   1dad8:	e3a0c000 	mov	ip, #0
   1dadc:	e3a0e001 	mov	lr, #1
   1dae0:	e1a04000 	mov	r4, r0
   1dae4:	e5803018 	str	r3, [r0, #24]
   1dae8:	e59d3008 	ldr	r3, [sp, #8]
   1daec:	e5c0e014 	strb	lr, [r0, #20]
   1daf0:	e5803008 	str	r3, [r0, #8]
   1daf4:	e580c00c 	str	ip, [r0, #12]
   1daf8:	e580c010 	str	ip, [r0, #16]
   1dafc:	ebffffb8 	bl	1d9e4 <CClassAllocator::Init(unsigned int, unsigned int)>
   1db00:	e1a00004 	mov	r0, r4
   1db04:	e8bd8010 	pop	{r4, pc}

0001db08 <CClassAllocator::Allocate()>:
   1db08:	e92d4030 	push	{r4, r5, lr}
   1db0c:	e5d03014 	ldrb	r3, [r0, #20]
   1db10:	e1a04000 	mov	r4, r0
   1db14:	e3530000 	cmp	r3, #0
   1db18:	e24dd00c 	sub	sp, sp, #12
   1db1c:	0a000002 	beq	1db2c <CClassAllocator::Allocate()+0x24>
   1db20:	e5900018 	ldr	r0, [r0, #24]
   1db24:	e3500000 	cmp	r0, #0
   1db28:	1a000015 	bne	1db84 <CClassAllocator::Allocate()+0x7c>
   1db2c:	e5945010 	ldr	r5, [r4, #16]
   1db30:	e3550000 	cmp	r5, #0
   1db34:	0a00001d 	beq	1dbb0 <CClassAllocator::Allocate()+0xa8>
   1db38:	e59f30a4 	ldr	r3, [pc, #164]	; 1dbe4 <CClassAllocator::Allocate()+0xdc>
   1db3c:	e5952000 	ldr	r2, [r5]
   1db40:	e1520003 	cmp	r2, r3
   1db44:	1a000022 	bne	1dbd4 <CClassAllocator::Allocate()+0xcc>
   1db48:	e3a03000 	mov	r3, #0
   1db4c:	e5d41014 	ldrb	r1, [r4, #20]
   1db50:	e595200c 	ldr	r2, [r5, #12]
   1db54:	e1510003 	cmp	r1, r3
   1db58:	e5842010 	str	r2, [r4, #16]
   1db5c:	e585300c 	str	r3, [r5, #12]
   1db60:	1a000002 	bne	1db70 <CClassAllocator::Allocate()+0x68>
   1db64:	e2850010 	add	r0, r5, #16
   1db68:	e28dd00c 	add	sp, sp, #12
   1db6c:	e8bd8030 	pop	{r4, r5, pc}
   1db70:	e5943018 	ldr	r3, [r4, #24]
   1db74:	e3530000 	cmp	r3, #0
   1db78:	0afffff9 	beq	1db64 <CClassAllocator::Allocate()+0x5c>
   1db7c:	eb002af2 	bl	2874c <LeaveCritical>
   1db80:	eafffff7 	b	1db64 <CClassAllocator::Allocate()+0x5c>
   1db84:	eb002ac6 	bl	286a4 <EnterCritical>
   1db88:	e5945010 	ldr	r5, [r4, #16]
   1db8c:	e3550000 	cmp	r5, #0
   1db90:	1affffe8 	bne	1db38 <CClassAllocator::Allocate()+0x30>
   1db94:	e5d43014 	ldrb	r3, [r4, #20]
   1db98:	e3530000 	cmp	r3, #0
   1db9c:	0a000003 	beq	1dbb0 <CClassAllocator::Allocate()+0xa8>
   1dba0:	e5943018 	ldr	r3, [r4, #24]
   1dba4:	e3530000 	cmp	r3, #0
   1dba8:	0a000000 	beq	1dbb0 <CClassAllocator::Allocate()+0xa8>
   1dbac:	eb002ae6 	bl	2874c <LeaveCritical>
   1dbb0:	eb0007d2 	bl	1fb00 <CLogger::Get()>
   1dbb4:	e5943004 	ldr	r3, [r4, #4]
   1dbb8:	e5941008 	ldr	r1, [r4, #8]
   1dbbc:	e3a02000 	mov	r2, #0
   1dbc0:	e58d3000 	str	r3, [sp]
   1dbc4:	e59f301c 	ldr	r3, [pc, #28]	; 1dbe8 <CClassAllocator::Allocate()+0xe0>
   1dbc8:	eb00070e 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1dbcc:	e3a00000 	mov	r0, #0
   1dbd0:	eaffffe4 	b	1db68 <CClassAllocator::Allocate()+0x60>
   1dbd4:	e3a02082 	mov	r2, #130	; 0x82
   1dbd8:	e59f100c 	ldr	r1, [pc, #12]	; 1dbec <CClassAllocator::Allocate()+0xe4>
   1dbdc:	e59f000c 	ldr	r0, [pc, #12]	; 1dbf0 <CClassAllocator::Allocate()+0xe8>
   1dbe0:	ebfffec6 	bl	1d700 <assertion_failed>
   1dbe4:	4f425350 	.word	0x4f425350
   1dbe8:	00031b38 	.word	0x00031b38
   1dbec:	00031ad0 	.word	0x00031ad0
   1dbf0:	00031b64 	.word	0x00031b64

0001dbf4 <CClassAllocator::Free(void*)>:
   1dbf4:	e92d4070 	push	{r4, r5, r6, lr}
   1dbf8:	e2514000 	subs	r4, r1, #0
   1dbfc:	0a00001e 	beq	1dc7c <CClassAllocator::Free(void*)+0x88>
   1dc00:	e59f30a4 	ldr	r3, [pc, #164]	; 1dcac <CClassAllocator::Free(void*)+0xb8>
   1dc04:	e5142010 	ldr	r2, [r4, #-16]
   1dc08:	e2446010 	sub	r6, r4, #16
   1dc0c:	e1520003 	cmp	r2, r3
   1dc10:	1a00001d 	bne	1dc8c <CClassAllocator::Free(void*)+0x98>
   1dc14:	e5143004 	ldr	r3, [r4, #-4]
   1dc18:	e3530000 	cmp	r3, #0
   1dc1c:	1a00001e 	bne	1dc9c <CClassAllocator::Free(void*)+0xa8>
   1dc20:	e5d03014 	ldrb	r3, [r0, #20]
   1dc24:	e1a05000 	mov	r5, r0
   1dc28:	e3530000 	cmp	r3, #0
   1dc2c:	0a000002 	beq	1dc3c <CClassAllocator::Free(void*)+0x48>
   1dc30:	e5900018 	ldr	r0, [r0, #24]
   1dc34:	e3500000 	cmp	r0, #0
   1dc38:	1a000003 	bne	1dc4c <CClassAllocator::Free(void*)+0x58>
   1dc3c:	e5953010 	ldr	r3, [r5, #16]
   1dc40:	e5043004 	str	r3, [r4, #-4]
   1dc44:	e5856010 	str	r6, [r5, #16]
   1dc48:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dc4c:	eb002a94 	bl	286a4 <EnterCritical>
   1dc50:	e5d52014 	ldrb	r2, [r5, #20]
   1dc54:	e5953010 	ldr	r3, [r5, #16]
   1dc58:	e3520000 	cmp	r2, #0
   1dc5c:	e5043004 	str	r3, [r4, #-4]
   1dc60:	e5856010 	str	r6, [r5, #16]
   1dc64:	08bd8070 	popeq	{r4, r5, r6, pc}
   1dc68:	e5950018 	ldr	r0, [r5, #24]
   1dc6c:	e3500000 	cmp	r0, #0
   1dc70:	08bd8070 	popeq	{r4, r5, r6, pc}
   1dc74:	e8bd4070 	pop	{r4, r5, r6, lr}
   1dc78:	ea002ab3 	b	2874c <LeaveCritical>
   1dc7c:	e3a02090 	mov	r2, #144	; 0x90
   1dc80:	e59f1028 	ldr	r1, [pc, #40]	; 1dcb0 <CClassAllocator::Free(void*)+0xbc>
   1dc84:	e59f0028 	ldr	r0, [pc, #40]	; 1dcb4 <CClassAllocator::Free(void*)+0xc0>
   1dc88:	ebfffe9c 	bl	1d700 <assertion_failed>
   1dc8c:	e3a02094 	mov	r2, #148	; 0x94
   1dc90:	e59f1018 	ldr	r1, [pc, #24]	; 1dcb0 <CClassAllocator::Free(void*)+0xbc>
   1dc94:	e59f001c 	ldr	r0, [pc, #28]	; 1dcb8 <CClassAllocator::Free(void*)+0xc4>
   1dc98:	ebfffe98 	bl	1d700 <assertion_failed>
   1dc9c:	e3a02095 	mov	r2, #149	; 0x95
   1dca0:	e59f1008 	ldr	r1, [pc, #8]	; 1dcb0 <CClassAllocator::Free(void*)+0xbc>
   1dca4:	e59f0010 	ldr	r0, [pc, #16]	; 1dcbc <CClassAllocator::Free(void*)+0xc8>
   1dca8:	ebfffe94 	bl	1d700 <assertion_failed>
   1dcac:	4f425350 	.word	0x4f425350
   1dcb0:	00031ad0 	.word	0x00031ad0
   1dcb4:	00031b84 	.word	0x00031b84
   1dcb8:	00031b90 	.word	0x00031b90
   1dcbc:	00031bac 	.word	0x00031bac

0001dcc0 <debug_hexdump(void const*, unsigned int, char const*)>:
   1dcc0:	e3520000 	cmp	r2, #0
   1dcc4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1dcc8:	e1a06001 	mov	r6, r1
   1dccc:	e1a07000 	mov	r7, r0
   1dcd0:	e59f80f0 	ldr	r8, [pc, #240]	; 1ddc8 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   1dcd4:	11a08002 	movne	r8, r2
   1dcd8:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   1dcdc:	eb000787 	bl	1fb00 <CLogger::Get()>
   1dce0:	e1a01008 	mov	r1, r8
   1dce4:	e3a02004 	mov	r2, #4
   1dce8:	e1cd60f0 	strd	r6, [sp]
   1dcec:	e59f30d8 	ldr	r3, [pc, #216]	; 1ddcc <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   1dcf0:	eb0006c4 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1dcf4:	e3560000 	cmp	r6, #0
   1dcf8:	0a000030 	beq	1ddc0 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   1dcfc:	e3c6000f 	bic	r0, r6, #15
   1dd00:	e1a04007 	mov	r4, r7
   1dd04:	e0876006 	add	r6, r7, r6
   1dd08:	e59f90c0 	ldr	r9, [pc, #192]	; 1ddd0 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   1dd0c:	e0877000 	add	r7, r7, r0
   1dd10:	ea000001 	b	1dd1c <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
   1dd14:	e1540006 	cmp	r4, r6
   1dd18:	0a000028 	beq	1ddc0 <debug_hexdump(void const*, unsigned int, char const*)+0x100>
   1dd1c:	eb000777 	bl	1fb00 <CLogger::Get()>
   1dd20:	e5d4300f 	ldrb	r3, [r4, #15]
   1dd24:	e5d45000 	ldrb	r5, [r4]
   1dd28:	e58d3040 	str	r3, [sp, #64]	; 0x40
   1dd2c:	e5d4300e 	ldrb	r3, [r4, #14]
   1dd30:	e6ffc074 	uxth	ip, r4
   1dd34:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   1dd38:	e5d4200d 	ldrb	r2, [r4, #13]
   1dd3c:	e1a03009 	mov	r3, r9
   1dd40:	e58d2038 	str	r2, [sp, #56]	; 0x38
   1dd44:	e5d4100c 	ldrb	r1, [r4, #12]
   1dd48:	e3a02004 	mov	r2, #4
   1dd4c:	e58d1034 	str	r1, [sp, #52]	; 0x34
   1dd50:	e5d4e00b 	ldrb	lr, [r4, #11]
   1dd54:	e1a01008 	mov	r1, r8
   1dd58:	e58de030 	str	lr, [sp, #48]	; 0x30
   1dd5c:	e5d4e00a 	ldrb	lr, [r4, #10]
   1dd60:	e58de02c 	str	lr, [sp, #44]	; 0x2c
   1dd64:	e5d4e009 	ldrb	lr, [r4, #9]
   1dd68:	e58de028 	str	lr, [sp, #40]	; 0x28
   1dd6c:	e5d4e008 	ldrb	lr, [r4, #8]
   1dd70:	e58de024 	str	lr, [sp, #36]	; 0x24
   1dd74:	e5d4e007 	ldrb	lr, [r4, #7]
   1dd78:	e58de020 	str	lr, [sp, #32]
   1dd7c:	e5d4e006 	ldrb	lr, [r4, #6]
   1dd80:	e58de01c 	str	lr, [sp, #28]
   1dd84:	e5d4e005 	ldrb	lr, [r4, #5]
   1dd88:	e58de018 	str	lr, [sp, #24]
   1dd8c:	e5d4e004 	ldrb	lr, [r4, #4]
   1dd90:	e58de014 	str	lr, [sp, #20]
   1dd94:	e5d4e003 	ldrb	lr, [r4, #3]
   1dd98:	e58de010 	str	lr, [sp, #16]
   1dd9c:	e5d4e002 	ldrb	lr, [r4, #2]
   1dda0:	e58de00c 	str	lr, [sp, #12]
   1dda4:	e5d4e001 	ldrb	lr, [r4, #1]
   1dda8:	e98d4020 	stmib	sp, {r5, lr}
   1ddac:	e58dc000 	str	ip, [sp]
   1ddb0:	eb000694 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ddb4:	e1540007 	cmp	r4, r7
   1ddb8:	e2844010 	add	r4, r4, #16
   1ddbc:	1affffd4 	bne	1dd14 <debug_hexdump(void const*, unsigned int, char const*)+0x54>
   1ddc0:	e28dd04c 	add	sp, sp, #76	; 0x4c
   1ddc4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ddc8:	00031c54 	.word	0x00031c54
   1ddcc:	00031bc0 	.word	0x00031bc0
   1ddd0:	00031be8 	.word	0x00031be8

0001ddd4 <debug_stacktrace(unsigned int const*, char const*)>:
   1ddd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ddd8:	e3510000 	cmp	r1, #0
   1dddc:	e59f7074 	ldr	r7, [pc, #116]	; 1de58 <debug_stacktrace(unsigned int const*, char const*)+0x84>
   1dde0:	e3a04000 	mov	r4, #0
   1dde4:	11a07001 	movne	r7, r1
   1dde8:	e59f606c 	ldr	r6, [pc, #108]	; 1de5c <debug_stacktrace(unsigned int const*, char const*)+0x88>
   1ddec:	e59f806c 	ldr	r8, [pc, #108]	; 1de60 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   1ddf0:	e24dd008 	sub	sp, sp, #8
   1ddf4:	e2405004 	sub	r5, r0, #4
   1ddf8:	ea000002 	b	1de08 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   1ddfc:	e2844001 	add	r4, r4, #1
   1de00:	e3540040 	cmp	r4, #64	; 0x40
   1de04:	0a000011 	beq	1de50 <debug_stacktrace(unsigned int const*, char const*)+0x7c>
   1de08:	e5b53004 	ldr	r3, [r5, #4]!
   1de0c:	e3530902 	cmp	r3, #32768	; 0x8000
   1de10:	3afffff9 	bcc	1ddfc <debug_stacktrace(unsigned int const*, char const*)+0x28>
   1de14:	e1530006 	cmp	r3, r6
   1de18:	2afffff7 	bcs	1ddfc <debug_stacktrace(unsigned int const*, char const*)+0x28>
   1de1c:	e3130003 	tst	r3, #3
   1de20:	1afffff5 	bne	1ddfc <debug_stacktrace(unsigned int const*, char const*)+0x28>
   1de24:	eb000735 	bl	1fb00 <CLogger::Get()>
   1de28:	e5952000 	ldr	r2, [r5]
   1de2c:	e1a03008 	mov	r3, r8
   1de30:	e58d2004 	str	r2, [sp, #4]
   1de34:	e58d4000 	str	r4, [sp]
   1de38:	e3a02004 	mov	r2, #4
   1de3c:	e1a01007 	mov	r1, r7
   1de40:	e2844001 	add	r4, r4, #1
   1de44:	eb00066f 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1de48:	e3540040 	cmp	r4, #64	; 0x40
   1de4c:	1affffed 	bne	1de08 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   1de50:	e28dd008 	add	sp, sp, #8
   1de54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1de58:	00031c54 	.word	0x00031c54
   1de5c:	0002c368 	.word	0x0002c368
   1de60:	00031c40 	.word	0x00031c40

0001de64 <CDevice::~CDevice()>:
   1de64:	e5903004 	ldr	r3, [r0, #4]
   1de68:	e59f2020 	ldr	r2, [pc, #32]	; 1de90 <CDevice::~CDevice()+0x2c>
   1de6c:	e3530000 	cmp	r3, #0
   1de70:	e92d4010 	push	{r4, lr}
   1de74:	e1a04000 	mov	r4, r0
   1de78:	e5802000 	str	r2, [r0]
   1de7c:	0a000001 	beq	1de88 <CDevice::~CDevice()+0x24>
   1de80:	e5901008 	ldr	r1, [r0, #8]
   1de84:	e12fff33 	blx	r3
   1de88:	e1a00004 	mov	r0, r4
   1de8c:	e8bd8010 	pop	{r4, pc}
   1de90:	00031c64 	.word	0x00031c64

0001de94 <CDevice::Read(void*, unsigned int)>:
   1de94:	e3e00000 	mvn	r0, #0
   1de98:	e12fff1e 	bx	lr

0001de9c <CDevice::Seek(unsigned long long)>:
   1de9c:	e3e00000 	mvn	r0, #0
   1dea0:	e3e01000 	mvn	r1, #0
   1dea4:	e12fff1e 	bx	lr

0001dea8 <CDevice::RemoveDevice()>:
   1dea8:	e3a00000 	mov	r0, #0
   1deac:	e12fff1e 	bx	lr

0001deb0 <CDevice::~CDevice()>:
   1deb0:	e5903004 	ldr	r3, [r0, #4]
   1deb4:	e59f202c 	ldr	r2, [pc, #44]	; 1dee8 <CDevice::~CDevice()+0x38>
   1deb8:	e3530000 	cmp	r3, #0
   1debc:	e92d4010 	push	{r4, lr}
   1dec0:	e1a04000 	mov	r4, r0
   1dec4:	e5802000 	str	r2, [r0]
   1dec8:	0a000001 	beq	1ded4 <CDevice::~CDevice()+0x24>
   1decc:	e5901008 	ldr	r1, [r0, #8]
   1ded0:	e12fff33 	blx	r3
   1ded4:	e1a00004 	mov	r0, r4
   1ded8:	e3a0100c 	mov	r1, #12
   1dedc:	eb00265e 	bl	2785c <operator delete(void*, unsigned int)>
   1dee0:	e1a00004 	mov	r0, r4
   1dee4:	e8bd8010 	pop	{r4, pc}
   1dee8:	00031c64 	.word	0x00031c64

0001deec <CDevice::CDevice()>:
   1deec:	e3a01000 	mov	r1, #0
   1def0:	e59f2008 	ldr	r2, [pc, #8]	; 1df00 <CDevice::CDevice()+0x14>
   1def4:	e5801004 	str	r1, [r0, #4]
   1def8:	e5802000 	str	r2, [r0]
   1defc:	e12fff1e 	bx	lr
   1df00:	00031c64 	.word	0x00031c64

0001df04 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   1df04:	e9800006 	stmib	r0, {r1, r2}
   1df08:	e12fff1e 	bx	lr

0001df0c <CDeviceNameService::CDeviceNameService()>:
   1df0c:	e3a02000 	mov	r2, #0
   1df10:	e59f102c 	ldr	r1, [pc, #44]	; 1df44 <CDeviceNameService::CDeviceNameService()+0x38>
   1df14:	e5802000 	str	r2, [r0]
   1df18:	e591c000 	ldr	ip, [r1]
   1df1c:	e5802004 	str	r2, [r0, #4]
   1df20:	e15c0002 	cmp	ip, r2
   1df24:	1a000001 	bne	1df30 <CDeviceNameService::CDeviceNameService()+0x24>
   1df28:	e5810000 	str	r0, [r1]
   1df2c:	e12fff1e 	bx	lr
   1df30:	e3a0201f 	mov	r2, #31
   1df34:	e92d4010 	push	{r4, lr}
   1df38:	e59f1008 	ldr	r1, [pc, #8]	; 1df48 <CDeviceNameService::CDeviceNameService()+0x3c>
   1df3c:	e59f0008 	ldr	r0, [pc, #8]	; 1df4c <CDeviceNameService::CDeviceNameService()+0x40>
   1df40:	ebfffdee 	bl	1d700 <assertion_failed>
   1df44:	00034c1c 	.word	0x00034c1c
   1df48:	00031c7c 	.word	0x00031c7c
   1df4c:	00031c94 	.word	0x00031c94

0001df50 <CDeviceNameService::~CDeviceNameService()>:
   1df50:	e92d4070 	push	{r4, r5, r6, lr}
   1df54:	e5904000 	ldr	r4, [r0]
   1df58:	e1a05000 	mov	r5, r0
   1df5c:	e3540000 	cmp	r4, #0
   1df60:	0a00000a 	beq	1df90 <CDeviceNameService::~CDeviceNameService()+0x40>
   1df64:	e5940004 	ldr	r0, [r4, #4]
   1df68:	e5944000 	ldr	r4, [r4]
   1df6c:	e3500000 	cmp	r0, #0
   1df70:	0a000000 	beq	1df78 <CDeviceNameService::~CDeviceNameService()+0x28>
   1df74:	eb002637 	bl	27858 <operator delete[](void*)>
   1df78:	e3a01010 	mov	r1, #16
   1df7c:	e5950000 	ldr	r0, [r5]
   1df80:	eb002635 	bl	2785c <operator delete(void*, unsigned int)>
   1df84:	e3540000 	cmp	r4, #0
   1df88:	e5854000 	str	r4, [r5]
   1df8c:	1afffff4 	bne	1df64 <CDeviceNameService::~CDeviceNameService()+0x14>
   1df90:	e3a02000 	mov	r2, #0
   1df94:	e59f3008 	ldr	r3, [pc, #8]	; 1dfa4 <CDeviceNameService::~CDeviceNameService()+0x54>
   1df98:	e1a00005 	mov	r0, r5
   1df9c:	e5832000 	str	r2, [r3]
   1dfa0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1dfa4:	00034c1c 	.word	0x00034c1c

0001dfa8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   1dfa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1dfac:	e1a05000 	mov	r5, r0
   1dfb0:	e5900004 	ldr	r0, [r0, #4]
   1dfb4:	e1a06001 	mov	r6, r1
   1dfb8:	e3500000 	cmp	r0, #0
   1dfbc:	e1a07002 	mov	r7, r2
   1dfc0:	e1a08003 	mov	r8, r3
   1dfc4:	1a000017 	bne	1e028 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   1dfc8:	e3a00010 	mov	r0, #16
   1dfcc:	eb002614 	bl	27824 <operator new(unsigned int)>
   1dfd0:	e3560000 	cmp	r6, #0
   1dfd4:	e1a04000 	mov	r4, r0
   1dfd8:	0a000014 	beq	1e030 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
   1dfdc:	e1a00006 	mov	r0, r6
   1dfe0:	eb00222e 	bl	268a0 <strlen>
   1dfe4:	e2800001 	add	r0, r0, #1
   1dfe8:	eb002613 	bl	2783c <operator new[](unsigned int)>
   1dfec:	e1a01006 	mov	r1, r6
   1dff0:	e5840004 	str	r0, [r4, #4]
   1dff4:	eb0022cd 	bl	26b30 <strcpy>
   1dff8:	e3570000 	cmp	r7, #0
   1dffc:	0a00000f 	beq	1e040 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
   1e000:	e5952004 	ldr	r2, [r5, #4]
   1e004:	e5953000 	ldr	r3, [r5]
   1e008:	e3520000 	cmp	r2, #0
   1e00c:	e5847008 	str	r7, [r4, #8]
   1e010:	e5c4800c 	strb	r8, [r4, #12]
   1e014:	e5843000 	str	r3, [r4]
   1e018:	e5854000 	str	r4, [r5]
   1e01c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1e020:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1e024:	ea0029c8 	b	2874c <LeaveCritical>
   1e028:	eb00299d 	bl	286a4 <EnterCritical>
   1e02c:	eaffffe5 	b	1dfc8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   1e030:	e3a0203b 	mov	r2, #59	; 0x3b
   1e034:	e59f1014 	ldr	r1, [pc, #20]	; 1e050 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   1e038:	e59f0014 	ldr	r0, [pc, #20]	; 1e054 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xac>
   1e03c:	ebfffdaf 	bl	1d700 <assertion_failed>
   1e040:	e3a02040 	mov	r2, #64	; 0x40
   1e044:	e59f1004 	ldr	r1, [pc, #4]	; 1e050 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   1e048:	e59f0008 	ldr	r0, [pc, #8]	; 1e058 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   1e04c:	ebfffdab 	bl	1d700 <assertion_failed>
   1e050:	00031c7c 	.word	0x00031c7c
   1e054:	0002db74 	.word	0x0002db74
   1e058:	00031ca0 	.word	0x00031ca0

0001e05c <CDeviceNameService::RemoveDevice(char const*, bool)>:
   1e05c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e060:	e2515000 	subs	r5, r1, #0
   1e064:	0a000037 	beq	1e148 <CDeviceNameService::RemoveDevice(char const*, bool)+0xec>
   1e068:	e1a08000 	mov	r8, r0
   1e06c:	e5900004 	ldr	r0, [r0, #4]
   1e070:	e1a07002 	mov	r7, r2
   1e074:	e3500000 	cmp	r0, #0
   1e078:	1a000017 	bne	1e0dc <CDeviceNameService::RemoveDevice(char const*, bool)+0x80>
   1e07c:	e5984000 	ldr	r4, [r8]
   1e080:	e3540000 	cmp	r4, #0
   1e084:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1e088:	e3a06000 	mov	r6, #0
   1e08c:	ea00000b 	b	1e0c0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
   1e090:	e1a00005 	mov	r0, r5
   1e094:	eb00220b 	bl	268c8 <strcmp>
   1e098:	e3500000 	cmp	r0, #0
   1e09c:	1a000002 	bne	1e0ac <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
   1e0a0:	e5d4300c 	ldrb	r3, [r4, #12]
   1e0a4:	e1530007 	cmp	r3, r7
   1e0a8:	0a000014 	beq	1e100 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa4>
   1e0ac:	e5943000 	ldr	r3, [r4]
   1e0b0:	e1a06004 	mov	r6, r4
   1e0b4:	e3530000 	cmp	r3, #0
   1e0b8:	0a00000b 	beq	1e0ec <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
   1e0bc:	e1a04003 	mov	r4, r3
   1e0c0:	e5941004 	ldr	r1, [r4, #4]
   1e0c4:	e3510000 	cmp	r1, #0
   1e0c8:	1afffff0 	bne	1e090 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
   1e0cc:	e3a0205e 	mov	r2, #94	; 0x5e
   1e0d0:	e59f1088 	ldr	r1, [pc, #136]	; 1e160 <CDeviceNameService::RemoveDevice(char const*, bool)+0x104>
   1e0d4:	e59f0088 	ldr	r0, [pc, #136]	; 1e164 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   1e0d8:	ebfffd88 	bl	1d700 <assertion_failed>
   1e0dc:	eb002970 	bl	286a4 <EnterCritical>
   1e0e0:	e5984000 	ldr	r4, [r8]
   1e0e4:	e3540000 	cmp	r4, #0
   1e0e8:	1affffe6 	bne	1e088 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   1e0ec:	e5983004 	ldr	r3, [r8, #4]
   1e0f0:	e3530000 	cmp	r3, #0
   1e0f4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1e0f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1e0fc:	ea002992 	b	2874c <LeaveCritical>
   1e100:	e3560000 	cmp	r6, #0
   1e104:	0a00000c 	beq	1e13c <CDeviceNameService::RemoveDevice(char const*, bool)+0xe0>
   1e108:	e5943000 	ldr	r3, [r4]
   1e10c:	e5863000 	str	r3, [r6]
   1e110:	e5983004 	ldr	r3, [r8, #4]
   1e114:	e3530000 	cmp	r3, #0
   1e118:	1a00000e 	bne	1e158 <CDeviceNameService::RemoveDevice(char const*, bool)+0xfc>
   1e11c:	e5940004 	ldr	r0, [r4, #4]
   1e120:	e3500000 	cmp	r0, #0
   1e124:	0a000000 	beq	1e12c <CDeviceNameService::RemoveDevice(char const*, bool)+0xd0>
   1e128:	eb0025ca 	bl	27858 <operator delete[](void*)>
   1e12c:	e1a00004 	mov	r0, r4
   1e130:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1e134:	e3a01010 	mov	r1, #16
   1e138:	ea0025c7 	b	2785c <operator delete(void*, unsigned int)>
   1e13c:	e5943000 	ldr	r3, [r4]
   1e140:	e5883000 	str	r3, [r8]
   1e144:	eafffff1 	b	1e110 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb4>
   1e148:	e3a02056 	mov	r2, #86	; 0x56
   1e14c:	e59f100c 	ldr	r1, [pc, #12]	; 1e160 <CDeviceNameService::RemoveDevice(char const*, bool)+0x104>
   1e150:	e59f0010 	ldr	r0, [pc, #16]	; 1e168 <CDeviceNameService::RemoveDevice(char const*, bool)+0x10c>
   1e154:	ebfffd69 	bl	1d700 <assertion_failed>
   1e158:	eb00297b 	bl	2874c <LeaveCritical>
   1e15c:	eaffffee 	b	1e11c <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
   1e160:	00031c7c 	.word	0x00031c7c
   1e164:	00031cb0 	.word	0x00031cb0
   1e168:	0002db74 	.word	0x0002db74

0001e16c <CDeviceNameService::GetDevice(char const*, bool)>:
   1e16c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e170:	e2515000 	subs	r5, r1, #0
   1e174:	e24dd00c 	sub	sp, sp, #12
   1e178:	0a000024 	beq	1e210 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
   1e17c:	e1a07000 	mov	r7, r0
   1e180:	e5900004 	ldr	r0, [r0, #4]
   1e184:	e1a06002 	mov	r6, r2
   1e188:	e3500000 	cmp	r0, #0
   1e18c:	1a000014 	bne	1e1e4 <CDeviceNameService::GetDevice(char const*, bool)+0x78>
   1e190:	e5974000 	ldr	r4, [r7]
   1e194:	e3540000 	cmp	r4, #0
   1e198:	1a00000a 	bne	1e1c8 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   1e19c:	ea000018 	b	1e204 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   1e1a0:	e1a00005 	mov	r0, r5
   1e1a4:	eb0021c7 	bl	268c8 <strcmp>
   1e1a8:	e3500000 	cmp	r0, #0
   1e1ac:	1a000002 	bne	1e1bc <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   1e1b0:	e5d4300c 	ldrb	r3, [r4, #12]
   1e1b4:	e1530006 	cmp	r3, r6
   1e1b8:	0a000018 	beq	1e220 <CDeviceNameService::GetDevice(char const*, bool)+0xb4>
   1e1bc:	e5944000 	ldr	r4, [r4]
   1e1c0:	e3540000 	cmp	r4, #0
   1e1c4:	0a00000a 	beq	1e1f4 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   1e1c8:	e5941004 	ldr	r1, [r4, #4]
   1e1cc:	e3510000 	cmp	r1, #0
   1e1d0:	1afffff2 	bne	1e1a0 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   1e1d4:	e3a02092 	mov	r2, #146	; 0x92
   1e1d8:	e59f1078 	ldr	r1, [pc, #120]	; 1e258 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
   1e1dc:	e59f0078 	ldr	r0, [pc, #120]	; 1e25c <CDeviceNameService::GetDevice(char const*, bool)+0xf0>
   1e1e0:	ebfffd46 	bl	1d700 <assertion_failed>
   1e1e4:	eb00292e 	bl	286a4 <EnterCritical>
   1e1e8:	e5974000 	ldr	r4, [r7]
   1e1ec:	e3540000 	cmp	r4, #0
   1e1f0:	1afffff4 	bne	1e1c8 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   1e1f4:	e5973004 	ldr	r3, [r7, #4]
   1e1f8:	e3530000 	cmp	r3, #0
   1e1fc:	0a000000 	beq	1e204 <CDeviceNameService::GetDevice(char const*, bool)+0x98>
   1e200:	eb002951 	bl	2874c <LeaveCritical>
   1e204:	e3a00000 	mov	r0, #0
   1e208:	e28dd00c 	add	sp, sp, #12
   1e20c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e210:	e3a0208b 	mov	r2, #139	; 0x8b
   1e214:	e59f103c 	ldr	r1, [pc, #60]	; 1e258 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
   1e218:	e59f0040 	ldr	r0, [pc, #64]	; 1e260 <CDeviceNameService::GetDevice(char const*, bool)+0xf4>
   1e21c:	ebfffd37 	bl	1d700 <assertion_failed>
   1e220:	e5973004 	ldr	r3, [r7, #4]
   1e224:	e5940008 	ldr	r0, [r4, #8]
   1e228:	e3530000 	cmp	r3, #0
   1e22c:	1a000005 	bne	1e248 <CDeviceNameService::GetDevice(char const*, bool)+0xdc>
   1e230:	e3500000 	cmp	r0, #0
   1e234:	1afffff3 	bne	1e208 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
   1e238:	e3a0209a 	mov	r2, #154	; 0x9a
   1e23c:	e59f1014 	ldr	r1, [pc, #20]	; 1e258 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
   1e240:	e59f001c 	ldr	r0, [pc, #28]	; 1e264 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   1e244:	ebfffd2d 	bl	1d700 <assertion_failed>
   1e248:	e58d0004 	str	r0, [sp, #4]
   1e24c:	eb00293e 	bl	2874c <LeaveCritical>
   1e250:	e59d0004 	ldr	r0, [sp, #4]
   1e254:	eafffff5 	b	1e230 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
   1e258:	00031c7c 	.word	0x00031c7c
   1e25c:	00031cb0 	.word	0x00031cb0
   1e260:	0002db74 	.word	0x0002db74
   1e264:	00031cc4 	.word	0x00031cc4

0001e268 <CDeviceNameService::Get()>:
   1e268:	e59f301c 	ldr	r3, [pc, #28]	; 1e28c <CDeviceNameService::Get()+0x24>
   1e26c:	e5930000 	ldr	r0, [r3]
   1e270:	e3500000 	cmp	r0, #0
   1e274:	112fff1e 	bxne	lr
   1e278:	e3a020cc 	mov	r2, #204	; 0xcc
   1e27c:	e92d4010 	push	{r4, lr}
   1e280:	e59f1008 	ldr	r1, [pc, #8]	; 1e290 <CDeviceNameService::Get()+0x28>
   1e284:	e59f0008 	ldr	r0, [pc, #8]	; 1e294 <CDeviceNameService::Get()+0x2c>
   1e288:	ebfffd1c 	bl	1d700 <assertion_failed>
   1e28c:	00034c1c 	.word	0x00034c1c
   1e290:	00031c7c 	.word	0x00031c7c
   1e294:	00031cd4 	.word	0x00031cd4

0001e298 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   1e298:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e29c:	e1a06001 	mov	r6, r1
   1e2a0:	e24dd01c 	sub	sp, sp, #28
   1e2a4:	e1a04000 	mov	r4, r0
   1e2a8:	e28d0008 	add	r0, sp, #8
   1e2ac:	e1a05003 	mov	r5, r3
   1e2b0:	e5dd7030 	ldrb	r7, [sp, #48]	; 0x30
   1e2b4:	e58d2004 	str	r2, [sp, #4]
   1e2b8:	eb00182d 	bl	24374 <CString::CString()>
   1e2bc:	e1a02006 	mov	r2, r6
   1e2c0:	e59d3004 	ldr	r3, [sp, #4]
   1e2c4:	e59f1030 	ldr	r1, [pc, #48]	; 1e2fc <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
   1e2c8:	e28d0008 	add	r0, sp, #8
   1e2cc:	eb001d6e 	bl	2588c <CString::Format(char const*, ...)>
   1e2d0:	e28d0008 	add	r0, sp, #8
   1e2d4:	eb00183e 	bl	243d4 <CString::operator char const*() const>
   1e2d8:	e1a03007 	mov	r3, r7
   1e2dc:	e1a01000 	mov	r1, r0
   1e2e0:	e1a02005 	mov	r2, r5
   1e2e4:	e1a00004 	mov	r0, r4
   1e2e8:	ebffff2e 	bl	1dfa8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1e2ec:	e28d0008 	add	r0, sp, #8
   1e2f0:	eb0017ec 	bl	242a8 <CString::~CString()>
   1e2f4:	e28dd01c 	add	sp, sp, #28
   1e2f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e2fc:	00031ce0 	.word	0x00031ce0

0001e300 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   1e300:	e92d4070 	push	{r4, r5, r6, lr}
   1e304:	e1a06001 	mov	r6, r1
   1e308:	e24dd018 	sub	sp, sp, #24
   1e30c:	e1a04000 	mov	r4, r0
   1e310:	e28d0008 	add	r0, sp, #8
   1e314:	e1a05003 	mov	r5, r3
   1e318:	e58d2004 	str	r2, [sp, #4]
   1e31c:	eb001814 	bl	24374 <CString::CString()>
   1e320:	e59d3004 	ldr	r3, [sp, #4]
   1e324:	e1a02006 	mov	r2, r6
   1e328:	e59f102c 	ldr	r1, [pc, #44]	; 1e35c <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
   1e32c:	e28d0008 	add	r0, sp, #8
   1e330:	eb001d55 	bl	2588c <CString::Format(char const*, ...)>
   1e334:	e28d0008 	add	r0, sp, #8
   1e338:	eb001825 	bl	243d4 <CString::operator char const*() const>
   1e33c:	e1a02005 	mov	r2, r5
   1e340:	e1a01000 	mov	r1, r0
   1e344:	e1a00004 	mov	r0, r4
   1e348:	ebffff43 	bl	1e05c <CDeviceNameService::RemoveDevice(char const*, bool)>
   1e34c:	e28d0008 	add	r0, sp, #8
   1e350:	eb0017d4 	bl	242a8 <CString::~CString()>
   1e354:	e28dd018 	add	sp, sp, #24
   1e358:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e35c:	00031ce0 	.word	0x00031ce0

0001e360 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   1e360:	e92d4070 	push	{r4, r5, r6, lr}
   1e364:	e1a06001 	mov	r6, r1
   1e368:	e24dd018 	sub	sp, sp, #24
   1e36c:	e1a04000 	mov	r4, r0
   1e370:	e28d0008 	add	r0, sp, #8
   1e374:	e1a05003 	mov	r5, r3
   1e378:	e58d2004 	str	r2, [sp, #4]
   1e37c:	eb0017fc 	bl	24374 <CString::CString()>
   1e380:	e59d3004 	ldr	r3, [sp, #4]
   1e384:	e1a02006 	mov	r2, r6
   1e388:	e59f1034 	ldr	r1, [pc, #52]	; 1e3c4 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
   1e38c:	e28d0008 	add	r0, sp, #8
   1e390:	eb001d3d 	bl	2588c <CString::Format(char const*, ...)>
   1e394:	e28d0008 	add	r0, sp, #8
   1e398:	eb00180d 	bl	243d4 <CString::operator char const*() const>
   1e39c:	e1a02005 	mov	r2, r5
   1e3a0:	e1a01000 	mov	r1, r0
   1e3a4:	e1a00004 	mov	r0, r4
   1e3a8:	ebffff6f 	bl	1e16c <CDeviceNameService::GetDevice(char const*, bool)>
   1e3ac:	e1a04000 	mov	r4, r0
   1e3b0:	e28d0008 	add	r0, sp, #8
   1e3b4:	eb0017bb 	bl	242a8 <CString::~CString()>
   1e3b8:	e1a00004 	mov	r0, r4
   1e3bc:	e28dd018 	add	sp, sp, #24
   1e3c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e3c4:	00031ce0 	.word	0x00031ce0

0001e3c8 <CDeviceNameService::ListDevices(CDevice*)>:
   1e3c8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1e3cc:	e2516000 	subs	r6, r1, #0
   1e3d0:	e24dd024 	sub	sp, sp, #36	; 0x24
   1e3d4:	0a000035 	beq	1e4b0 <CDeviceNameService::ListDevices(CDevice*)+0xe8>
   1e3d8:	e5904000 	ldr	r4, [r0]
   1e3dc:	e3540000 	cmp	r4, #0
   1e3e0:	0a000030 	beq	1e4a8 <CDeviceNameService::ListDevices(CDevice*)+0xe0>
   1e3e4:	e3a05000 	mov	r5, #0
   1e3e8:	e59f70d0 	ldr	r7, [pc, #208]	; 1e4c0 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   1e3ec:	ea00001c 	b	1e464 <CDeviceNameService::ListDevices(CDevice*)+0x9c>
   1e3f0:	e5d4200c 	ldrb	r2, [r4, #12]
   1e3f4:	e2855001 	add	r5, r5, #1
   1e3f8:	e3520000 	cmp	r2, #0
   1e3fc:	13a02062 	movne	r2, #98	; 0x62
   1e400:	03a02063 	moveq	r2, #99	; 0x63
   1e404:	e2158003 	ands	r8, r5, #3
   1e408:	03a0100a 	moveq	r1, #10
   1e40c:	13a01020 	movne	r1, #32
   1e410:	e28d0010 	add	r0, sp, #16
   1e414:	e58d1000 	str	r1, [sp]
   1e418:	e1a01007 	mov	r1, r7
   1e41c:	eb001d1a 	bl	2588c <CString::Format(char const*, ...)>
   1e420:	e5963000 	ldr	r3, [r6]
   1e424:	e28d0010 	add	r0, sp, #16
   1e428:	e593900c 	ldr	r9, [r3, #12]
   1e42c:	eb0017e8 	bl	243d4 <CString::operator char const*() const>
   1e430:	e1a01000 	mov	r1, r0
   1e434:	e28d0010 	add	r0, sp, #16
   1e438:	e58d100c 	str	r1, [sp, #12]
   1e43c:	eb001816 	bl	2449c <CString::GetLength() const>
   1e440:	e59d100c 	ldr	r1, [sp, #12]
   1e444:	e1a02000 	mov	r2, r0
   1e448:	e1a00006 	mov	r0, r6
   1e44c:	e12fff39 	blx	r9
   1e450:	e5944000 	ldr	r4, [r4]
   1e454:	e28d0010 	add	r0, sp, #16
   1e458:	eb001792 	bl	242a8 <CString::~CString()>
   1e45c:	e3540000 	cmp	r4, #0
   1e460:	0a000008 	beq	1e488 <CDeviceNameService::ListDevices(CDevice*)+0xc0>
   1e464:	e28d0010 	add	r0, sp, #16
   1e468:	eb0017c1 	bl	24374 <CString::CString()>
   1e46c:	e5943004 	ldr	r3, [r4, #4]
   1e470:	e3530000 	cmp	r3, #0
   1e474:	1affffdd 	bne	1e3f0 <CDeviceNameService::ListDevices(CDevice*)+0x28>
   1e478:	e3a020b9 	mov	r2, #185	; 0xb9
   1e47c:	e59f1040 	ldr	r1, [pc, #64]	; 1e4c4 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   1e480:	e59f0040 	ldr	r0, [pc, #64]	; 1e4c8 <CDeviceNameService::ListDevices(CDevice*)+0x100>
   1e484:	ebfffc9d 	bl	1d700 <assertion_failed>
   1e488:	e3580000 	cmp	r8, #0
   1e48c:	0a000005 	beq	1e4a8 <CDeviceNameService::ListDevices(CDevice*)+0xe0>
   1e490:	e5963000 	ldr	r3, [r6]
   1e494:	e1a00006 	mov	r0, r6
   1e498:	e3a02001 	mov	r2, #1
   1e49c:	e593300c 	ldr	r3, [r3, #12]
   1e4a0:	e59f1024 	ldr	r1, [pc, #36]	; 1e4cc <CDeviceNameService::ListDevices(CDevice*)+0x104>
   1e4a4:	e12fff33 	blx	r3
   1e4a8:	e28dd024 	add	sp, sp, #36	; 0x24
   1e4ac:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e4b0:	e3a020b0 	mov	r2, #176	; 0xb0
   1e4b4:	e59f1008 	ldr	r1, [pc, #8]	; 1e4c4 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   1e4b8:	e59f0010 	ldr	r0, [pc, #16]	; 1e4d0 <CDeviceNameService::ListDevices(CDevice*)+0x108>
   1e4bc:	ebfffc8f 	bl	1d700 <assertion_failed>
   1e4c0:	00031cf8 	.word	0x00031cf8
   1e4c4:	00031c7c 	.word	0x00031c7c
   1e4c8:	00031cb0 	.word	0x00031cb0
   1e4cc:	0002fbac 	.word	0x0002fbac
   1e4d0:	00031ce8 	.word	0x00031ce8

0001e4d4 <CGPIOPin::CGPIOPin()>:
   1e4d4:	e3a01000 	mov	r1, #0
   1e4d8:	e3a02006 	mov	r2, #6
   1e4dc:	e92d4010 	push	{r4, lr}
   1e4e0:	e3a0c00a 	mov	ip, #10
   1e4e4:	e3a04036 	mov	r4, #54	; 0x36
   1e4e8:	e59fe01c 	ldr	lr, [pc, #28]	; 1e50c <CGPIOPin::CGPIOPin()+0x38>
   1e4ec:	e5804004 	str	r4, [r0, #4]
   1e4f0:	e580e000 	str	lr, [r0]
   1e4f4:	e5c0c010 	strb	ip, [r0, #16]
   1e4f8:	e5801018 	str	r1, [r0, #24]
   1e4fc:	e580101c 	str	r1, [r0, #28]
   1e500:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   1e504:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   1e508:	e8bd8010 	pop	{r4, pc}
   1e50c:	00031d0c 	.word	0x00031d0c

0001e510 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   1e510:	e92d4070 	push	{r4, r5, r6, lr}
   1e514:	e3a0c000 	mov	ip, #0
   1e518:	e3a0e00a 	mov	lr, #10
   1e51c:	e1a05002 	mov	r5, r2
   1e520:	e3a06036 	mov	r6, #54	; 0x36
   1e524:	e3a02006 	mov	r2, #6
   1e528:	e1a04000 	mov	r4, r0
   1e52c:	e5803018 	str	r3, [r0, #24]
   1e530:	e59f302c 	ldr	r3, [pc, #44]	; 1e564 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
   1e534:	e5c0e010 	strb	lr, [r0, #16]
   1e538:	e8800048 	stm	r0, {r3, r6}
   1e53c:	e580c01c 	str	ip, [r0, #28]
   1e540:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   1e544:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   1e548:	eb00000d 	bl	1e584 <CGPIOPin::AssignPin(unsigned int)>
   1e54c:	e1a00004 	mov	r0, r4
   1e550:	e1a01005 	mov	r1, r5
   1e554:	e3a02001 	mov	r2, #1
   1e558:	eb00002a 	bl	1e608 <CGPIOPin::SetMode(TGPIOMode, bool)>
   1e55c:	e1a00004 	mov	r0, r4
   1e560:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e564:	00031d0c 	.word	0x00031d0c

0001e568 <CGPIOPin::~CGPIOPin()>:
   1e568:	e12fff1e 	bx	lr

0001e56c <CGPIOPin::~CGPIOPin()>:
   1e56c:	e92d4010 	push	{r4, lr}
   1e570:	e1a04000 	mov	r4, r0
   1e574:	e3a01028 	mov	r1, #40	; 0x28
   1e578:	eb0024b7 	bl	2785c <operator delete(void*, unsigned int)>
   1e57c:	e1a00004 	mov	r0, r4
   1e580:	e8bd8010 	pop	{r4, pc}

0001e584 <CGPIOPin::AssignPin(unsigned int)>:
   1e584:	e5903004 	ldr	r3, [r0, #4]
   1e588:	e92d4070 	push	{r4, r5, r6, lr}
   1e58c:	e3530036 	cmp	r3, #54	; 0x36
   1e590:	1a000017 	bne	1e5f4 <CGPIOPin::AssignPin(unsigned int)+0x70>
   1e594:	e3510035 	cmp	r1, #53	; 0x35
   1e598:	e1a05000 	mov	r5, r0
   1e59c:	e1a04001 	mov	r4, r1
   1e5a0:	e5801004 	str	r1, [r0, #4]
   1e5a4:	8a000007 	bhi	1e5c8 <CGPIOPin::AssignPin(unsigned int)+0x44>
   1e5a8:	e3a03001 	mov	r3, #1
   1e5ac:	e204201f 	and	r2, r4, #31
   1e5b0:	e1a042a4 	lsr	r4, r4, #5
   1e5b4:	e1a03213 	lsl	r3, r3, r2
   1e5b8:	e1a04104 	lsl	r4, r4, #2
   1e5bc:	e585300c 	str	r3, [r5, #12]
   1e5c0:	e5854008 	str	r4, [r5, #8]
   1e5c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e5c8:	eb00084d 	bl	20704 <CMachineInfo::Get()>
   1e5cc:	e6ef1074 	uxtb	r1, r4
   1e5d0:	eb0007b4 	bl	204a8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   1e5d4:	e3500035 	cmp	r0, #53	; 0x35
   1e5d8:	e1a04000 	mov	r4, r0
   1e5dc:	e5850004 	str	r0, [r5, #4]
   1e5e0:	9afffff0 	bls	1e5a8 <CGPIOPin::AssignPin(unsigned int)+0x24>
   1e5e4:	e59f1018 	ldr	r1, [pc, #24]	; 1e604 <CGPIOPin::AssignPin(unsigned int)+0x80>
   1e5e8:	e3a02047 	mov	r2, #71	; 0x47
   1e5ec:	e2810020 	add	r0, r1, #32
   1e5f0:	ebfffc42 	bl	1d700 <assertion_failed>
   1e5f4:	e59f1008 	ldr	r1, [pc, #8]	; 1e604 <CGPIOPin::AssignPin(unsigned int)+0x80>
   1e5f8:	e3a02040 	mov	r2, #64	; 0x40
   1e5fc:	e281000c 	add	r0, r1, #12
   1e600:	ebfffc3e 	bl	1d700 <assertion_failed>
   1e604:	00031d14 	.word	0x00031d14

0001e608 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   1e608:	e3510009 	cmp	r1, #9
   1e60c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e610:	8a000058 	bhi	1e778 <CGPIOPin::SetMode(TGPIOMode, bool)+0x170>
   1e614:	e1a06002 	mov	r6, r2
   1e618:	e1a04000 	mov	r4, r0
   1e61c:	e3a02000 	mov	r2, #0
   1e620:	e5c01010 	strb	r1, [r0, #16]
   1e624:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   1e628:	e5d03010 	ldrb	r3, [r0, #16]
   1e62c:	e2431004 	sub	r1, r3, #4
   1e630:	e6efc071 	uxtb	ip, r1
   1e634:	e35c0005 	cmp	ip, #5
   1e638:	9a000030 	bls	1e700 <CGPIOPin::SetMode(TGPIOMode, bool)+0xf8>
   1e63c:	e3530001 	cmp	r3, #1
   1e640:	13a03000 	movne	r3, #0
   1e644:	02063001 	andeq	r3, r6, #1
   1e648:	e3530000 	cmp	r3, #0
   1e64c:	1a00004d 	bne	1e788 <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
   1e650:	e5943004 	ldr	r3, [r4, #4]
   1e654:	e3530035 	cmp	r3, #53	; 0x35
   1e658:	8a00004d 	bhi	1e794 <CGPIOPin::SetMode(TGPIOMode, bool)+0x18c>
   1e65c:	e59f5140 	ldr	r5, [pc, #320]	; 1e7a4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x19c>
   1e660:	e59f7140 	ldr	r7, [pc, #320]	; 1e7a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a0>
   1e664:	e0852395 	umull	r2, r5, r5, r3
   1e668:	e5970000 	ldr	r0, [r7]
   1e66c:	e1a051a5 	lsr	r5, r5, #3
   1e670:	e2852302 	add	r2, r5, #134217728	; 0x8000000
   1e674:	e0855105 	add	r5, r5, r5, lsl #2
   1e678:	e2822702 	add	r2, r2, #524288	; 0x80000
   1e67c:	e0435085 	sub	r5, r3, r5, lsl #1
   1e680:	e3500000 	cmp	r0, #0
   1e684:	e1a08102 	lsl	r8, r2, #2
   1e688:	e0855085 	add	r5, r5, r5, lsl #1
   1e68c:	1a000026 	bne	1e72c <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
   1e690:	e5d42010 	ldrb	r2, [r4, #16]
   1e694:	e3a01007 	mov	r1, #7
   1e698:	e2422001 	sub	r2, r2, #1
   1e69c:	e16f2f12 	clz	r2, r2
   1e6a0:	e5983000 	ldr	r3, [r8]
   1e6a4:	e1a022a2 	lsr	r2, r2, #5
   1e6a8:	e1c33511 	bic	r3, r3, r1, lsl r5
   1e6ac:	e1835512 	orr	r5, r3, r2, lsl r5
   1e6b0:	e5885000 	str	r5, [r8]
   1e6b4:	e5973000 	ldr	r3, [r7]
   1e6b8:	e3530000 	cmp	r3, #0
   1e6bc:	1a000016 	bne	1e71c <CGPIOPin::SetMode(TGPIOMode, bool)+0x114>
   1e6c0:	e3560000 	cmp	r6, #0
   1e6c4:	0a00000a 	beq	1e6f4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   1e6c8:	e5d43010 	ldrb	r3, [r4, #16]
   1e6cc:	e3530003 	cmp	r3, #3
   1e6d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e6d4:	ea000006 	b	1e6f4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   1e6d8:	0001e754 	.word	0x0001e754
   1e6dc:	0001e744 	.word	0x0001e744
   1e6e0:	0001e734 	.word	0x0001e734
   1e6e4:	0001e6e8 	.word	0x0001e6e8
   1e6e8:	e1a00004 	mov	r0, r4
   1e6ec:	e3a01001 	mov	r1, #1
   1e6f0:	eb0001e1 	bl	1ee7c <CGPIOPin::SetPullMode(TGPIOPullMode)>
   1e6f4:	e3a03000 	mov	r3, #0
   1e6f8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1e6fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e700:	e1560002 	cmp	r6, r2
   1e704:	1a000016 	bne	1e764 <CGPIOPin::SetMode(TGPIOMode, bool)+0x15c>
   1e708:	e1a00004 	mov	r0, r4
   1e70c:	eb000202 	bl	1ef1c <CGPIOPin::SetAlternateFunction(unsigned int)>
   1e710:	e3a03000 	mov	r3, #0
   1e714:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1e718:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e71c:	eb00280a 	bl	2874c <LeaveCritical>
   1e720:	e3560000 	cmp	r6, #0
   1e724:	0afffff2 	beq	1e6f4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   1e728:	eaffffe6 	b	1e6c8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc0>
   1e72c:	eb0027dc 	bl	286a4 <EnterCritical>
   1e730:	eaffffd6 	b	1e690 <CGPIOPin::SetMode(TGPIOMode, bool)+0x88>
   1e734:	e1a00004 	mov	r0, r4
   1e738:	e3a01002 	mov	r1, #2
   1e73c:	eb0001ce 	bl	1ee7c <CGPIOPin::SetPullMode(TGPIOPullMode)>
   1e740:	eaffffeb 	b	1e6f4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   1e744:	e1a00004 	mov	r0, r4
   1e748:	e3a01000 	mov	r1, #0
   1e74c:	eb000017 	bl	1e7b0 <CGPIOPin::Write(unsigned int)>
   1e750:	eaffffe7 	b	1e6f4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   1e754:	e1a00004 	mov	r0, r4
   1e758:	e3a01000 	mov	r1, #0
   1e75c:	eb0001c6 	bl	1ee7c <CGPIOPin::SetPullMode(TGPIOPullMode)>
   1e760:	eaffffe3 	b	1e6f4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xec>
   1e764:	e1a01002 	mov	r1, r2
   1e768:	eb0001c3 	bl	1ee7c <CGPIOPin::SetPullMode(TGPIOPullMode)>
   1e76c:	e5d43010 	ldrb	r3, [r4, #16]
   1e770:	e2431004 	sub	r1, r3, #4
   1e774:	eaffffe3 	b	1e708 <CGPIOPin::SetMode(TGPIOMode, bool)+0x100>
   1e778:	e59f102c 	ldr	r1, [pc, #44]	; 1e7ac <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   1e77c:	e3a0204f 	mov	r2, #79	; 0x4f
   1e780:	e2810034 	add	r0, r1, #52	; 0x34
   1e784:	ebfffbdd 	bl	1d700 <assertion_failed>
   1e788:	e1a01002 	mov	r1, r2
   1e78c:	eb0001ba 	bl	1ee7c <CGPIOPin::SetPullMode(TGPIOPullMode)>
   1e790:	eaffffae 	b	1e650 <CGPIOPin::SetMode(TGPIOMode, bool)+0x48>
   1e794:	e59f1010 	ldr	r1, [pc, #16]	; 1e7ac <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a4>
   1e798:	e3a02068 	mov	r2, #104	; 0x68
   1e79c:	e2810020 	add	r0, r1, #32
   1e7a0:	ebfffbd6 	bl	1d700 <assertion_failed>
   1e7a4:	cccccccd 	.word	0xcccccccd
   1e7a8:	00034c20 	.word	0x00034c20
   1e7ac:	00031d14 	.word	0x00031d14

0001e7b0 <CGPIOPin::Write(unsigned int)>:
   1e7b0:	e5903004 	ldr	r3, [r0, #4]
   1e7b4:	e92d4010 	push	{r4, lr}
   1e7b8:	e3530035 	cmp	r3, #53	; 0x35
   1e7bc:	8a000011 	bhi	1e808 <CGPIOPin::Write(unsigned int)+0x58>
   1e7c0:	e5d03010 	ldrb	r3, [r0, #16]
   1e7c4:	e3530003 	cmp	r3, #3
   1e7c8:	8a000012 	bhi	1e818 <CGPIOPin::Write(unsigned int)+0x68>
   1e7cc:	e3a02000 	mov	r2, #0
   1e7d0:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   1e7d4:	e3510001 	cmp	r1, #1
   1e7d8:	8a000012 	bhi	1e828 <CGPIOPin::Write(unsigned int)+0x78>
   1e7dc:	e59f3054 	ldr	r3, [pc, #84]	; 1e838 <CGPIOPin::Write(unsigned int)+0x88>
   1e7e0:	e59fc054 	ldr	ip, [pc, #84]	; 1e83c <CGPIOPin::Write(unsigned int)+0x8c>
   1e7e4:	e3510000 	cmp	r1, #0
   1e7e8:	e5801014 	str	r1, [r0, #20]
   1e7ec:	11a01003 	movne	r1, r3
   1e7f0:	01a0100c 	moveq	r1, ip
   1e7f4:	e5903008 	ldr	r3, [r0, #8]
   1e7f8:	e590c00c 	ldr	ip, [r0, #12]
   1e7fc:	e781c003 	str	ip, [r1, r3]
   1e800:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   1e804:	e8bd8010 	pop	{r4, pc}
   1e808:	e59f1030 	ldr	r1, [pc, #48]	; 1e840 <CGPIOPin::Write(unsigned int)+0x90>
   1e80c:	e3a02091 	mov	r2, #145	; 0x91
   1e810:	e2810020 	add	r0, r1, #32
   1e814:	ebfffbb9 	bl	1d700 <assertion_failed>
   1e818:	e59f1020 	ldr	r1, [pc, #32]	; 1e840 <CGPIOPin::Write(unsigned int)+0x90>
   1e81c:	e3a02094 	mov	r2, #148	; 0x94
   1e820:	e281004c 	add	r0, r1, #76	; 0x4c
   1e824:	ebfffbb5 	bl	1d700 <assertion_failed>
   1e828:	e59f1010 	ldr	r1, [pc, #16]	; 1e840 <CGPIOPin::Write(unsigned int)+0x90>
   1e82c:	e3a02098 	mov	r2, #152	; 0x98
   1e830:	e2810070 	add	r0, r1, #112	; 0x70
   1e834:	ebfffbb1 	bl	1d700 <assertion_failed>
   1e838:	2020001c 	.word	0x2020001c
   1e83c:	20200028 	.word	0x20200028
   1e840:	00031d14 	.word	0x00031d14

0001e844 <CGPIOPin::Read() const>:
   1e844:	e5903004 	ldr	r3, [r0, #4]
   1e848:	e92d4010 	push	{r4, lr}
   1e84c:	e3530035 	cmp	r3, #53	; 0x35
   1e850:	8a00000f 	bhi	1e894 <CGPIOPin::Read() const+0x50>
   1e854:	e5d03010 	ldrb	r3, [r0, #16]
   1e858:	e2432002 	sub	r2, r3, #2
   1e85c:	e3530000 	cmp	r3, #0
   1e860:	13520001 	cmpne	r2, #1
   1e864:	8a00000e 	bhi	1e8a4 <CGPIOPin::Read() const+0x60>
   1e868:	e3a03000 	mov	r3, #0
   1e86c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1e870:	e59f103c 	ldr	r1, [pc, #60]	; 1e8b4 <CGPIOPin::Read() const+0x70>
   1e874:	e590c008 	ldr	ip, [r0, #8]
   1e878:	e590200c 	ldr	r2, [r0, #12]
   1e87c:	e79c1001 	ldr	r1, [ip, r1]
   1e880:	e1110002 	tst	r1, r2
   1e884:	13a00001 	movne	r0, #1
   1e888:	01a00003 	moveq	r0, r3
   1e88c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1e890:	e8bd8010 	pop	{r4, pc}
   1e894:	e59f101c 	ldr	r1, [pc, #28]	; 1e8b8 <CGPIOPin::Read() const+0x74>
   1e898:	e3a020a4 	mov	r2, #164	; 0xa4
   1e89c:	e2810020 	add	r0, r1, #32
   1e8a0:	ebfffb96 	bl	1d700 <assertion_failed>
   1e8a4:	e59f100c 	ldr	r1, [pc, #12]	; 1e8b8 <CGPIOPin::Read() const+0x74>
   1e8a8:	e3a020a6 	mov	r2, #166	; 0xa6
   1e8ac:	e2810090 	add	r0, r1, #144	; 0x90
   1e8b0:	ebfffb92 	bl	1d700 <assertion_failed>
   1e8b4:	20200034 	.word	0x20200034
   1e8b8:	00031d14 	.word	0x00031d14

0001e8bc <CGPIOPin::Invert()>:
   1e8bc:	e5d02010 	ldrb	r2, [r0, #16]
   1e8c0:	e3520001 	cmp	r2, #1
   1e8c4:	1a000002 	bne	1e8d4 <CGPIOPin::Invert()+0x18>
   1e8c8:	e5901014 	ldr	r1, [r0, #20]
   1e8cc:	e2211001 	eor	r1, r1, #1
   1e8d0:	eaffffb6 	b	1e7b0 <CGPIOPin::Write(unsigned int)>
   1e8d4:	e59f100c 	ldr	r1, [pc, #12]	; 1e8e8 <CGPIOPin::Invert()+0x2c>
   1e8d8:	e3a020b5 	mov	r2, #181	; 0xb5
   1e8dc:	e92d4010 	push	{r4, lr}
   1e8e0:	e28100ec 	add	r0, r1, #236	; 0xec
   1e8e4:	ebfffb85 	bl	1d700 <assertion_failed>
   1e8e8:	00031d14 	.word	0x00031d14

0001e8ec <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   1e8ec:	e5d0c010 	ldrb	ip, [r0, #16]
   1e8f0:	e92d4010 	push	{r4, lr}
   1e8f4:	e24ce002 	sub	lr, ip, #2
   1e8f8:	e35c0000 	cmp	ip, #0
   1e8fc:	135e0001 	cmpne	lr, #1
   1e900:	8a000028 	bhi	1e9a8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   1e904:	e5d0c025 	ldrb	ip, [r0, #37]	; 0x25
   1e908:	e35c0006 	cmp	ip, #6
   1e90c:	1a000011 	bne	1e958 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   1e910:	e5d0c026 	ldrb	ip, [r0, #38]	; 0x26
   1e914:	e35c0006 	cmp	ip, #6
   1e918:	1a000012 	bne	1e968 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   1e91c:	e3510000 	cmp	r1, #0
   1e920:	0a000014 	beq	1e978 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   1e924:	e590c01c 	ldr	ip, [r0, #28]
   1e928:	e35c0000 	cmp	ip, #0
   1e92c:	1a000015 	bne	1e988 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   1e930:	e590c018 	ldr	ip, [r0, #24]
   1e934:	e580101c 	str	r1, [r0, #28]
   1e938:	e35c0000 	cmp	ip, #0
   1e93c:	e5802020 	str	r2, [r0, #32]
   1e940:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   1e944:	0a000013 	beq	1e998 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   1e948:	e8bd4010 	pop	{r4, lr}
   1e94c:	e1a01000 	mov	r1, r0
   1e950:	e1a0000c 	mov	r0, ip
   1e954:	ea002f59 	b	2a6c0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   1e958:	e59f1058 	ldr	r1, [pc, #88]	; 1e9b8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   1e95c:	e3a020c0 	mov	r2, #192	; 0xc0
   1e960:	e2810f42 	add	r0, r1, #264	; 0x108
   1e964:	ebfffb65 	bl	1d700 <assertion_failed>
   1e968:	e59f1048 	ldr	r1, [pc, #72]	; 1e9b8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   1e96c:	e3a020c1 	mov	r2, #193	; 0xc1
   1e970:	e2810f4b 	add	r0, r1, #300	; 0x12c
   1e974:	ebfffb61 	bl	1d700 <assertion_failed>
   1e978:	e59f1038 	ldr	r1, [pc, #56]	; 1e9b8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   1e97c:	e3a020c3 	mov	r2, #195	; 0xc3
   1e980:	e2810f55 	add	r0, r1, #340	; 0x154
   1e984:	ebfffb5d 	bl	1d700 <assertion_failed>
   1e988:	e59f1028 	ldr	r1, [pc, #40]	; 1e9b8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   1e98c:	e3a020c4 	mov	r2, #196	; 0xc4
   1e990:	e2810f59 	add	r0, r1, #356	; 0x164
   1e994:	ebfffb59 	bl	1d700 <assertion_failed>
   1e998:	e59f1018 	ldr	r1, [pc, #24]	; 1e9b8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   1e99c:	e3a020cb 	mov	r2, #203	; 0xcb
   1e9a0:	e2810f5d 	add	r0, r1, #372	; 0x174
   1e9a4:	ebfffb55 	bl	1d700 <assertion_failed>
   1e9a8:	e59f1008 	ldr	r1, [pc, #8]	; 1e9b8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   1e9ac:	e3a020bc 	mov	r2, #188	; 0xbc
   1e9b0:	e2810090 	add	r0, r1, #144	; 0x90
   1e9b4:	ebfffb51 	bl	1d700 <assertion_failed>
   1e9b8:	00031d14 	.word	0x00031d14

0001e9bc <CGPIOPin::DisconnectInterrupt()>:
   1e9bc:	e5d03010 	ldrb	r3, [r0, #16]
   1e9c0:	e92d4010 	push	{r4, lr}
   1e9c4:	e2432002 	sub	r2, r3, #2
   1e9c8:	e3530000 	cmp	r3, #0
   1e9cc:	13520001 	cmpne	r2, #1
   1e9d0:	8a000020 	bhi	1ea58 <CGPIOPin::DisconnectInterrupt()+0x9c>
   1e9d4:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   1e9d8:	e1a01000 	mov	r1, r0
   1e9dc:	e3530006 	cmp	r3, #6
   1e9e0:	1a00000c 	bne	1ea18 <CGPIOPin::DisconnectInterrupt()+0x5c>
   1e9e4:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   1e9e8:	e3530006 	cmp	r3, #6
   1e9ec:	1a00000d 	bne	1ea28 <CGPIOPin::DisconnectInterrupt()+0x6c>
   1e9f0:	e590301c 	ldr	r3, [r0, #28]
   1e9f4:	e3530000 	cmp	r3, #0
   1e9f8:	0a00000e 	beq	1ea38 <CGPIOPin::DisconnectInterrupt()+0x7c>
   1e9fc:	e3a03000 	mov	r3, #0
   1ea00:	e5900018 	ldr	r0, [r0, #24]
   1ea04:	e581301c 	str	r3, [r1, #28]
   1ea08:	e1500003 	cmp	r0, r3
   1ea0c:	0a00000d 	beq	1ea48 <CGPIOPin::DisconnectInterrupt()+0x8c>
   1ea10:	e8bd4010 	pop	{r4, lr}
   1ea14:	ea002f4d 	b	2a750 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   1ea18:	e59f1048 	ldr	r1, [pc, #72]	; 1ea68 <CGPIOPin::DisconnectInterrupt()+0xac>
   1ea1c:	e3a020d5 	mov	r2, #213	; 0xd5
   1ea20:	e2810f42 	add	r0, r1, #264	; 0x108
   1ea24:	ebfffb35 	bl	1d700 <assertion_failed>
   1ea28:	e59f1038 	ldr	r1, [pc, #56]	; 1ea68 <CGPIOPin::DisconnectInterrupt()+0xac>
   1ea2c:	e3a020d6 	mov	r2, #214	; 0xd6
   1ea30:	e2810f4b 	add	r0, r1, #300	; 0x12c
   1ea34:	ebfffb31 	bl	1d700 <assertion_failed>
   1ea38:	e59f1028 	ldr	r1, [pc, #40]	; 1ea68 <CGPIOPin::DisconnectInterrupt()+0xac>
   1ea3c:	e3a020d8 	mov	r2, #216	; 0xd8
   1ea40:	e2810f61 	add	r0, r1, #388	; 0x184
   1ea44:	ebfffb2d 	bl	1d700 <assertion_failed>
   1ea48:	e59f1018 	ldr	r1, [pc, #24]	; 1ea68 <CGPIOPin::DisconnectInterrupt()+0xac>
   1ea4c:	e3a020db 	mov	r2, #219	; 0xdb
   1ea50:	e2810f5d 	add	r0, r1, #372	; 0x174
   1ea54:	ebfffb29 	bl	1d700 <assertion_failed>
   1ea58:	e59f1008 	ldr	r1, [pc, #8]	; 1ea68 <CGPIOPin::DisconnectInterrupt()+0xac>
   1ea5c:	e3a020d1 	mov	r2, #209	; 0xd1
   1ea60:	e2810090 	add	r0, r1, #144	; 0x90
   1ea64:	ebfffb25 	bl	1d700 <assertion_failed>
   1ea68:	00031d14 	.word	0x00031d14

0001ea6c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   1ea6c:	e5d03010 	ldrb	r3, [r0, #16]
   1ea70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ea74:	e2432002 	sub	r2, r3, #2
   1ea78:	e3530000 	cmp	r3, #0
   1ea7c:	13520001 	cmpne	r2, #1
   1ea80:	8a000030 	bhi	1eb48 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
   1ea84:	e590301c 	ldr	r3, [r0, #28]
   1ea88:	e1a04000 	mov	r4, r0
   1ea8c:	e3530000 	cmp	r3, #0
   1ea90:	0a00001c 	beq	1eb08 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   1ea94:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   1ea98:	e3530006 	cmp	r3, #6
   1ea9c:	1a00001d 	bne	1eb18 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
   1eaa0:	e3510005 	cmp	r1, #5
   1eaa4:	8a00001f 	bhi	1eb28 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xbc>
   1eaa8:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   1eaac:	e1530001 	cmp	r3, r1
   1eab0:	0a000020 	beq	1eb38 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
   1eab4:	e59f709c 	ldr	r7, [pc, #156]	; 1eb58 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
   1eab8:	e5903008 	ldr	r3, [r0, #8]
   1eabc:	e5970000 	ldr	r0, [r7]
   1eac0:	e59f6094 	ldr	r6, [pc, #148]	; 1eb5c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   1eac4:	e0815081 	add	r5, r1, r1, lsl #1
   1eac8:	e3500000 	cmp	r0, #0
   1eacc:	e5c41025 	strb	r1, [r4, #37]	; 0x25
   1ead0:	e1a05105 	lsl	r5, r5, #2
   1ead4:	e0836006 	add	r6, r3, r6
   1ead8:	1a000008 	bne	1eb00 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   1eadc:	e594200c 	ldr	r2, [r4, #12]
   1eae0:	e7963005 	ldr	r3, [r6, r5]
   1eae4:	e1833002 	orr	r3, r3, r2
   1eae8:	e7863005 	str	r3, [r6, r5]
   1eaec:	e5973000 	ldr	r3, [r7]
   1eaf0:	e3530000 	cmp	r3, #0
   1eaf4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1eaf8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1eafc:	ea002712 	b	2874c <LeaveCritical>
   1eb00:	eb0026e7 	bl	286a4 <EnterCritical>
   1eb04:	eafffff4 	b	1eadc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x70>
   1eb08:	e59f1050 	ldr	r1, [pc, #80]	; 1eb60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   1eb0c:	e3a020e4 	mov	r2, #228	; 0xe4
   1eb10:	e2810f61 	add	r0, r1, #388	; 0x184
   1eb14:	ebfffaf9 	bl	1d700 <assertion_failed>
   1eb18:	e59f1040 	ldr	r1, [pc, #64]	; 1eb60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   1eb1c:	e3a020e6 	mov	r2, #230	; 0xe6
   1eb20:	e2810f42 	add	r0, r1, #264	; 0x108
   1eb24:	ebfffaf5 	bl	1d700 <assertion_failed>
   1eb28:	e59f1030 	ldr	r1, [pc, #48]	; 1eb60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   1eb2c:	e3a020e7 	mov	r2, #231	; 0xe7
   1eb30:	e2810f65 	add	r0, r1, #404	; 0x194
   1eb34:	ebfffaf1 	bl	1d700 <assertion_failed>
   1eb38:	e59f1020 	ldr	r1, [pc, #32]	; 1eb60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   1eb3c:	e3a020e8 	mov	r2, #232	; 0xe8
   1eb40:	e2810f6e 	add	r0, r1, #440	; 0x1b8
   1eb44:	ebfffaed 	bl	1d700 <assertion_failed>
   1eb48:	e59f1010 	ldr	r1, [pc, #16]	; 1eb60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   1eb4c:	e3a020e1 	mov	r2, #225	; 0xe1
   1eb50:	e2810090 	add	r0, r1, #144	; 0x90
   1eb54:	ebfffae9 	bl	1d700 <assertion_failed>
   1eb58:	00034c20 	.word	0x00034c20
   1eb5c:	2020004c 	.word	0x2020004c
   1eb60:	00031d14 	.word	0x00031d14

0001eb64 <CGPIOPin::DisableInterrupt()>:
   1eb64:	e5d03010 	ldrb	r3, [r0, #16]
   1eb68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1eb6c:	e2432002 	sub	r2, r3, #2
   1eb70:	e3530000 	cmp	r3, #0
   1eb74:	13520001 	cmpne	r2, #1
   1eb78:	8a00001e 	bhi	1ebf8 <CGPIOPin::DisableInterrupt()+0x94>
   1eb7c:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   1eb80:	e1a05000 	mov	r5, r0
   1eb84:	e3530005 	cmp	r3, #5
   1eb88:	8a000016 	bhi	1ebe8 <CGPIOPin::DisableInterrupt()+0x84>
   1eb8c:	e59f7074 	ldr	r7, [pc, #116]	; 1ec08 <CGPIOPin::DisableInterrupt()+0xa4>
   1eb90:	e5902008 	ldr	r2, [r0, #8]
   1eb94:	e5970000 	ldr	r0, [r7]
   1eb98:	e59f606c 	ldr	r6, [pc, #108]	; 1ec0c <CGPIOPin::DisableInterrupt()+0xa8>
   1eb9c:	e0833083 	add	r3, r3, r3, lsl #1
   1eba0:	e3500000 	cmp	r0, #0
   1eba4:	e1a04103 	lsl	r4, r3, #2
   1eba8:	e0826006 	add	r6, r2, r6
   1ebac:	1a000009 	bne	1ebd8 <CGPIOPin::DisableInterrupt()+0x74>
   1ebb0:	e7963004 	ldr	r3, [r6, r4]
   1ebb4:	e595200c 	ldr	r2, [r5, #12]
   1ebb8:	e1c33002 	bic	r3, r3, r2
   1ebbc:	e7863004 	str	r3, [r6, r4]
   1ebc0:	e5973000 	ldr	r3, [r7]
   1ebc4:	e3530000 	cmp	r3, #0
   1ebc8:	1a000004 	bne	1ebe0 <CGPIOPin::DisableInterrupt()+0x7c>
   1ebcc:	e3a03006 	mov	r3, #6
   1ebd0:	e5c53025 	strb	r3, [r5, #37]	; 0x25
   1ebd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ebd8:	eb0026b1 	bl	286a4 <EnterCritical>
   1ebdc:	eafffff3 	b	1ebb0 <CGPIOPin::DisableInterrupt()+0x4c>
   1ebe0:	eb0026d9 	bl	2874c <LeaveCritical>
   1ebe4:	eafffff8 	b	1ebcc <CGPIOPin::DisableInterrupt()+0x68>
   1ebe8:	e59f1020 	ldr	r1, [pc, #32]	; 1ec10 <CGPIOPin::DisableInterrupt()+0xac>
   1ebec:	e3a020fb 	mov	r2, #251	; 0xfb
   1ebf0:	e2810f75 	add	r0, r1, #468	; 0x1d4
   1ebf4:	ebfffac1 	bl	1d700 <assertion_failed>
   1ebf8:	e59f1010 	ldr	r1, [pc, #16]	; 1ec10 <CGPIOPin::DisableInterrupt()+0xac>
   1ebfc:	e3a020f7 	mov	r2, #247	; 0xf7
   1ec00:	e2810090 	add	r0, r1, #144	; 0x90
   1ec04:	ebfffabd 	bl	1d700 <assertion_failed>
   1ec08:	00034c20 	.word	0x00034c20
   1ec0c:	2020004c 	.word	0x2020004c
   1ec10:	00031d14 	.word	0x00031d14

0001ec14 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   1ec14:	e5d03010 	ldrb	r3, [r0, #16]
   1ec18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ec1c:	e2432002 	sub	r2, r3, #2
   1ec20:	e3530000 	cmp	r3, #0
   1ec24:	13520001 	cmpne	r2, #1
   1ec28:	8a000030 	bhi	1ecf0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
   1ec2c:	e590301c 	ldr	r3, [r0, #28]
   1ec30:	e1a04000 	mov	r4, r0
   1ec34:	e3530000 	cmp	r3, #0
   1ec38:	0a00001c 	beq	1ecb0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   1ec3c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   1ec40:	e3530006 	cmp	r3, #6
   1ec44:	1a00001d 	bne	1ecc0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
   1ec48:	e3510005 	cmp	r1, #5
   1ec4c:	8a00001f 	bhi	1ecd0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xbc>
   1ec50:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   1ec54:	e1530001 	cmp	r3, r1
   1ec58:	0a000020 	beq	1ece0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
   1ec5c:	e59f709c 	ldr	r7, [pc, #156]	; 1ed00 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
   1ec60:	e5903008 	ldr	r3, [r0, #8]
   1ec64:	e5970000 	ldr	r0, [r7]
   1ec68:	e59f6094 	ldr	r6, [pc, #148]	; 1ed04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   1ec6c:	e0815081 	add	r5, r1, r1, lsl #1
   1ec70:	e3500000 	cmp	r0, #0
   1ec74:	e5c41026 	strb	r1, [r4, #38]	; 0x26
   1ec78:	e1a05105 	lsl	r5, r5, #2
   1ec7c:	e0836006 	add	r6, r3, r6
   1ec80:	1a000008 	bne	1eca8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   1ec84:	e594200c 	ldr	r2, [r4, #12]
   1ec88:	e7963005 	ldr	r3, [r6, r5]
   1ec8c:	e1833002 	orr	r3, r3, r2
   1ec90:	e7863005 	str	r3, [r6, r5]
   1ec94:	e5973000 	ldr	r3, [r7]
   1ec98:	e3530000 	cmp	r3, #0
   1ec9c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1eca0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1eca4:	ea0026a8 	b	2874c <LeaveCritical>
   1eca8:	eb00267d 	bl	286a4 <EnterCritical>
   1ecac:	eafffff4 	b	1ec84 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x70>
   1ecb0:	e59f1050 	ldr	r1, [pc, #80]	; 1ed08 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   1ecb4:	e59f2050 	ldr	r2, [pc, #80]	; 1ed0c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   1ecb8:	e2810f61 	add	r0, r1, #388	; 0x184
   1ecbc:	ebfffa8f 	bl	1d700 <assertion_failed>
   1ecc0:	e59f1040 	ldr	r1, [pc, #64]	; 1ed08 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   1ecc4:	e59f2044 	ldr	r2, [pc, #68]	; 1ed10 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
   1ecc8:	e2810f4b 	add	r0, r1, #300	; 0x12c
   1eccc:	ebfffa8b 	bl	1d700 <assertion_failed>
   1ecd0:	e59f1030 	ldr	r1, [pc, #48]	; 1ed08 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   1ecd4:	e3a02e11 	mov	r2, #272	; 0x110
   1ecd8:	e2810f65 	add	r0, r1, #404	; 0x194
   1ecdc:	ebfffa87 	bl	1d700 <assertion_failed>
   1ece0:	e59f1020 	ldr	r1, [pc, #32]	; 1ed08 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   1ece4:	e59f2028 	ldr	r2, [pc, #40]	; 1ed14 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>
   1ece8:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   1ecec:	ebfffa83 	bl	1d700 <assertion_failed>
   1ecf0:	e59f1010 	ldr	r1, [pc, #16]	; 1ed08 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   1ecf4:	e59f201c 	ldr	r2, [pc, #28]	; 1ed18 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x104>
   1ecf8:	e2810090 	add	r0, r1, #144	; 0x90
   1ecfc:	ebfffa7f 	bl	1d700 <assertion_failed>
   1ed00:	00034c20 	.word	0x00034c20
   1ed04:	2020004c 	.word	0x2020004c
   1ed08:	00031d14 	.word	0x00031d14
   1ed0c:	0000010d 	.word	0x0000010d
   1ed10:	0000010f 	.word	0x0000010f
   1ed14:	00000111 	.word	0x00000111
   1ed18:	0000010a 	.word	0x0000010a

0001ed1c <CGPIOPin::DisableInterrupt2()>:
   1ed1c:	e5d03010 	ldrb	r3, [r0, #16]
   1ed20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ed24:	e2432002 	sub	r2, r3, #2
   1ed28:	e3530000 	cmp	r3, #0
   1ed2c:	13520001 	cmpne	r2, #1
   1ed30:	8a00001e 	bhi	1edb0 <CGPIOPin::DisableInterrupt2()+0x94>
   1ed34:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   1ed38:	e1a05000 	mov	r5, r0
   1ed3c:	e3530005 	cmp	r3, #5
   1ed40:	8a000016 	bhi	1eda0 <CGPIOPin::DisableInterrupt2()+0x84>
   1ed44:	e59f7074 	ldr	r7, [pc, #116]	; 1edc0 <CGPIOPin::DisableInterrupt2()+0xa4>
   1ed48:	e5902008 	ldr	r2, [r0, #8]
   1ed4c:	e5970000 	ldr	r0, [r7]
   1ed50:	e59f606c 	ldr	r6, [pc, #108]	; 1edc4 <CGPIOPin::DisableInterrupt2()+0xa8>
   1ed54:	e0833083 	add	r3, r3, r3, lsl #1
   1ed58:	e3500000 	cmp	r0, #0
   1ed5c:	e1a04103 	lsl	r4, r3, #2
   1ed60:	e0826006 	add	r6, r2, r6
   1ed64:	1a000009 	bne	1ed90 <CGPIOPin::DisableInterrupt2()+0x74>
   1ed68:	e7963004 	ldr	r3, [r6, r4]
   1ed6c:	e595200c 	ldr	r2, [r5, #12]
   1ed70:	e1c33002 	bic	r3, r3, r2
   1ed74:	e7863004 	str	r3, [r6, r4]
   1ed78:	e5973000 	ldr	r3, [r7]
   1ed7c:	e3530000 	cmp	r3, #0
   1ed80:	1a000004 	bne	1ed98 <CGPIOPin::DisableInterrupt2()+0x7c>
   1ed84:	e3a03006 	mov	r3, #6
   1ed88:	e5c53026 	strb	r3, [r5, #38]	; 0x26
   1ed8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ed90:	eb002643 	bl	286a4 <EnterCritical>
   1ed94:	eafffff3 	b	1ed68 <CGPIOPin::DisableInterrupt2()+0x4c>
   1ed98:	eb00266b 	bl	2874c <LeaveCritical>
   1ed9c:	eafffff8 	b	1ed84 <CGPIOPin::DisableInterrupt2()+0x68>
   1eda0:	e59f1020 	ldr	r1, [pc, #32]	; 1edc8 <CGPIOPin::DisableInterrupt2()+0xac>
   1eda4:	e3a02f49 	mov	r2, #292	; 0x124
   1eda8:	e2810f85 	add	r0, r1, #532	; 0x214
   1edac:	ebfffa53 	bl	1d700 <assertion_failed>
   1edb0:	e59f1010 	ldr	r1, [pc, #16]	; 1edc8 <CGPIOPin::DisableInterrupt2()+0xac>
   1edb4:	e3a02e12 	mov	r2, #288	; 0x120
   1edb8:	e2810090 	add	r0, r1, #144	; 0x90
   1edbc:	ebfffa4f 	bl	1d700 <assertion_failed>
   1edc0:	00034c20 	.word	0x00034c20
   1edc4:	2020004c 	.word	0x2020004c
   1edc8:	00031d14 	.word	0x00031d14

0001edcc <CGPIOPin::AcknowledgeInterrupt()>:
   1edcc:	e590301c 	ldr	r3, [r0, #28]
   1edd0:	e92d4010 	push	{r4, lr}
   1edd4:	e3530000 	cmp	r3, #0
   1edd8:	0a000009 	beq	1ee04 <CGPIOPin::AcknowledgeInterrupt()+0x38>
   1eddc:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
   1ede0:	e3530000 	cmp	r3, #0
   1ede4:	1a00000a 	bne	1ee14 <CGPIOPin::AcknowledgeInterrupt()+0x48>
   1ede8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1edec:	e59f2030 	ldr	r2, [pc, #48]	; 1ee24 <CGPIOPin::AcknowledgeInterrupt()+0x58>
   1edf0:	e590c00c 	ldr	ip, [r0, #12]
   1edf4:	e5901008 	ldr	r1, [r0, #8]
   1edf8:	e781c002 	str	ip, [r1, r2]
   1edfc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1ee00:	e8bd8010 	pop	{r4, pc}
   1ee04:	e59f101c 	ldr	r1, [pc, #28]	; 1ee28 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   1ee08:	e59f201c 	ldr	r2, [pc, #28]	; 1ee2c <CGPIOPin::AcknowledgeInterrupt()+0x60>
   1ee0c:	e2810f61 	add	r0, r1, #388	; 0x184
   1ee10:	ebfffa3a 	bl	1d700 <assertion_failed>
   1ee14:	e59f100c 	ldr	r1, [pc, #12]	; 1ee28 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   1ee18:	e3a02f4d 	mov	r2, #308	; 0x134
   1ee1c:	e2810f8e 	add	r0, r1, #568	; 0x238
   1ee20:	ebfffa36 	bl	1d700 <assertion_failed>
   1ee24:	20200040 	.word	0x20200040
   1ee28:	00031d14 	.word	0x00031d14
   1ee2c:	00000133 	.word	0x00000133

0001ee30 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   1ee30:	e3a03000 	mov	r3, #0
   1ee34:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1ee38:	e1d13000 	bics	r3, r1, r0
   1ee3c:	159f2018 	ldrne	r2, [pc, #24]	; 1ee5c <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   1ee40:	15823028 	strne	r3, [r2, #40]	; 0x28
   1ee44:	e0100001 	ands	r0, r0, r1
   1ee48:	159f300c 	ldrne	r3, [pc, #12]	; 1ee5c <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   1ee4c:	1583001c 	strne	r0, [r3, #28]
   1ee50:	e3a03000 	mov	r3, #0
   1ee54:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1ee58:	e12fff1e 	bx	lr
   1ee5c:	20200000 	.word	0x20200000

0001ee60 <CGPIOPin::ReadAll()>:
   1ee60:	e3a03000 	mov	r3, #0
   1ee64:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   1ee68:	e59f2008 	ldr	r2, [pc, #8]	; 1ee78 <CGPIOPin::ReadAll()+0x18>
   1ee6c:	e5920034 	ldr	r0, [r2, #52]	; 0x34
   1ee70:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   1ee74:	e12fff1e 	bx	lr
   1ee78:	20200000 	.word	0x20200000

0001ee7c <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   1ee7c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ee80:	e59f7080 	ldr	r7, [pc, #128]	; 1ef08 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x8c>
   1ee84:	e1a04000 	mov	r4, r0
   1ee88:	e5970000 	ldr	r0, [r7]
   1ee8c:	e1a05001 	mov	r5, r1
   1ee90:	e3500000 	cmp	r0, #0
   1ee94:	1a000015 	bne	1eef0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x74>
   1ee98:	e3a06000 	mov	r6, #0
   1ee9c:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   1eea0:	e3550002 	cmp	r5, #2
   1eea4:	e5949008 	ldr	r9, [r4, #8]
   1eea8:	e59f805c 	ldr	r8, [pc, #92]	; 1ef0c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   1eeac:	8a000011 	bhi	1eef8 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x7c>
   1eeb0:	e59fa058 	ldr	sl, [pc, #88]	; 1ef10 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
   1eeb4:	e3a00005 	mov	r0, #5
   1eeb8:	e58a5094 	str	r5, [sl, #148]	; 0x94
   1eebc:	eb001def 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
   1eec0:	e594300c 	ldr	r3, [r4, #12]
   1eec4:	e3a00005 	mov	r0, #5
   1eec8:	e7893008 	str	r3, [r9, r8]
   1eecc:	eb001deb 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
   1eed0:	e58a6094 	str	r6, [sl, #148]	; 0x94
   1eed4:	e7896008 	str	r6, [r9, r8]
   1eed8:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   1eedc:	e5973000 	ldr	r3, [r7]
   1eee0:	e3530000 	cmp	r3, #0
   1eee4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1eee8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1eeec:	ea002616 	b	2874c <LeaveCritical>
   1eef0:	eb0025eb 	bl	286a4 <EnterCritical>
   1eef4:	eaffffe7 	b	1ee98 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x1c>
   1eef8:	e59f1014 	ldr	r1, [pc, #20]	; 1ef14 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x98>
   1eefc:	e59f2014 	ldr	r2, [pc, #20]	; 1ef18 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x9c>
   1ef00:	e2810f91 	add	r0, r1, #580	; 0x244
   1ef04:	ebfff9fd 	bl	1d700 <assertion_failed>
   1ef08:	00034c20 	.word	0x00034c20
   1ef0c:	20200098 	.word	0x20200098
   1ef10:	20200000 	.word	0x20200000
   1ef14:	00031d14 	.word	0x00031d14
   1ef18:	00000165 	.word	0x00000165

0001ef1c <CGPIOPin::SetAlternateFunction(unsigned int)>:
   1ef1c:	e5903004 	ldr	r3, [r0, #4]
   1ef20:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ef24:	e3530035 	cmp	r3, #53	; 0x35
   1ef28:	8a00001e 	bhi	1efa8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   1ef2c:	e59f2094 	ldr	r2, [pc, #148]	; 1efc8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
   1ef30:	e1a06001 	mov	r6, r1
   1ef34:	e3510005 	cmp	r1, #5
   1ef38:	e0821392 	umull	r1, r2, r2, r3
   1ef3c:	e1a021a2 	lsr	r2, r2, #3
   1ef40:	e2820302 	add	r0, r2, #134217728	; 0x8000000
   1ef44:	e0822102 	add	r2, r2, r2, lsl #2
   1ef48:	e2800702 	add	r0, r0, #524288	; 0x80000
   1ef4c:	e0433082 	sub	r3, r3, r2, lsl #1
   1ef50:	e1a05100 	lsl	r5, r0, #2
   1ef54:	e0834083 	add	r4, r3, r3, lsl #1
   1ef58:	8a000016 	bhi	1efb8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
   1ef5c:	e59f7068 	ldr	r7, [pc, #104]	; 1efcc <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   1ef60:	e5970000 	ldr	r0, [r7]
   1ef64:	e3500000 	cmp	r0, #0
   1ef68:	1a00000c 	bne	1efa0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
   1ef6c:	e3a00007 	mov	r0, #7
   1ef70:	e59f1058 	ldr	r1, [pc, #88]	; 1efd0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>
   1ef74:	e5953000 	ldr	r3, [r5]
   1ef78:	e0816106 	add	r6, r1, r6, lsl #2
   1ef7c:	e5962260 	ldr	r2, [r6, #608]	; 0x260
   1ef80:	e1c33410 	bic	r3, r3, r0, lsl r4
   1ef84:	e1833412 	orr	r3, r3, r2, lsl r4
   1ef88:	e5853000 	str	r3, [r5]
   1ef8c:	e5973000 	ldr	r3, [r7]
   1ef90:	e3530000 	cmp	r3, #0
   1ef94:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1ef98:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1ef9c:	ea0025ea 	b	2874c <LeaveCritical>
   1efa0:	eb0025bf 	bl	286a4 <EnterCritical>
   1efa4:	eafffff0 	b	1ef6c <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
   1efa8:	e59f1024 	ldr	r1, [pc, #36]	; 1efd4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   1efac:	e59f2024 	ldr	r2, [pc, #36]	; 1efd8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
   1efb0:	e2810020 	add	r0, r1, #32
   1efb4:	ebfff9d1 	bl	1d700 <assertion_failed>
   1efb8:	e59f1014 	ldr	r1, [pc, #20]	; 1efd4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   1efbc:	e59f2018 	ldr	r2, [pc, #24]	; 1efdc <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   1efc0:	e2810f9a 	add	r0, r1, #616	; 0x268
   1efc4:	ebfff9cd 	bl	1d700 <assertion_failed>
   1efc8:	cccccccd 	.word	0xcccccccd
   1efcc:	00034c20 	.word	0x00034c20
   1efd0:	00031d04 	.word	0x00031d04
   1efd4:	00031d14 	.word	0x00031d14
   1efd8:	00000181 	.word	0x00000181
   1efdc:	00000185 	.word	0x00000185

0001efe0 <CGPIOPin::InterruptHandler()>:
   1efe0:	e5d03010 	ldrb	r3, [r0, #16]
   1efe4:	e92d4010 	push	{r4, lr}
   1efe8:	e2432002 	sub	r2, r3, #2
   1efec:	e3530000 	cmp	r3, #0
   1eff0:	13520001 	cmpne	r2, #1
   1eff4:	8a000013 	bhi	1f048 <CGPIOPin::InterruptHandler()+0x68>
   1eff8:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   1effc:	e3530005 	cmp	r3, #5
   1f000:	8a000005 	bhi	1f01c <CGPIOPin::InterruptHandler()+0x3c>
   1f004:	e590301c 	ldr	r3, [r0, #28]
   1f008:	e3530000 	cmp	r3, #0
   1f00c:	0a000009 	beq	1f038 <CGPIOPin::InterruptHandler()+0x58>
   1f010:	e8bd4010 	pop	{r4, lr}
   1f014:	e5900020 	ldr	r0, [r0, #32]
   1f018:	e12fff13 	bx	r3
   1f01c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   1f020:	e3530005 	cmp	r3, #5
   1f024:	9afffff6 	bls	1f004 <CGPIOPin::InterruptHandler()+0x24>
   1f028:	e59f1028 	ldr	r1, [pc, #40]	; 1f058 <CGPIOPin::InterruptHandler()+0x78>
   1f02c:	e59f2028 	ldr	r2, [pc, #40]	; 1f05c <CGPIOPin::InterruptHandler()+0x7c>
   1f030:	e2810f9e 	add	r0, r1, #632	; 0x278
   1f034:	ebfff9b1 	bl	1d700 <assertion_failed>
   1f038:	e59f1018 	ldr	r1, [pc, #24]	; 1f058 <CGPIOPin::InterruptHandler()+0x78>
   1f03c:	e3a02f66 	mov	r2, #408	; 0x198
   1f040:	e2810f61 	add	r0, r1, #388	; 0x184
   1f044:	ebfff9ad 	bl	1d700 <assertion_failed>
   1f048:	e59f1008 	ldr	r1, [pc, #8]	; 1f058 <CGPIOPin::InterruptHandler()+0x78>
   1f04c:	e59f200c 	ldr	r2, [pc, #12]	; 1f060 <CGPIOPin::InterruptHandler()+0x80>
   1f050:	e2810090 	add	r0, r1, #144	; 0x90
   1f054:	ebfff9a9 	bl	1d700 <assertion_failed>
   1f058:	00031d14 	.word	0x00031d14
   1f05c:	00000195 	.word	0x00000195
   1f060:	00000192 	.word	0x00000192

0001f064 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   1f064:	e3500035 	cmp	r0, #53	; 0x35
   1f068:	e92d4070 	push	{r4, r5, r6, lr}
   1f06c:	8a000018 	bhi	1f0d4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   1f070:	e3a02001 	mov	r2, #1
   1f074:	e59f6068 	ldr	r6, [pc, #104]	; 1f0e4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x80>
   1f078:	e59f4068 	ldr	r4, [pc, #104]	; 1f0e8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   1f07c:	e5963000 	ldr	r3, [r6]
   1f080:	e08442a0 	add	r4, r4, r0, lsr #5
   1f084:	e200501f 	and	r5, r0, #31
   1f088:	e3530000 	cmp	r3, #0
   1f08c:	e1a04104 	lsl	r4, r4, #2
   1f090:	e1a05512 	lsl	r5, r2, r5
   1f094:	1a00000b 	bne	1f0c8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
   1f098:	e1e02005 	mvn	r2, r5
   1f09c:	e59f1048 	ldr	r1, [pc, #72]	; 1f0ec <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   1f0a0:	e5943000 	ldr	r3, [r4]
   1f0a4:	e0033002 	and	r3, r3, r2
   1f0a8:	e484300c 	str	r3, [r4], #12
   1f0ac:	e1540001 	cmp	r4, r1
   1f0b0:	9afffffa 	bls	1f0a0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   1f0b4:	e5963000 	ldr	r3, [r6]
   1f0b8:	e3530000 	cmp	r3, #0
   1f0bc:	08bd8070 	popeq	{r4, r5, r6, pc}
   1f0c0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f0c4:	ea0025a0 	b	2874c <LeaveCritical>
   1f0c8:	e1a00003 	mov	r0, r3
   1f0cc:	eb002574 	bl	286a4 <EnterCritical>
   1f0d0:	eafffff0 	b	1f098 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x34>
   1f0d4:	e59f1014 	ldr	r1, [pc, #20]	; 1f0f0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   1f0d8:	e59f2014 	ldr	r2, [pc, #20]	; 1f0f4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x90>
   1f0dc:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   1f0e0:	ebfff986 	bl	1d700 <assertion_failed>
   1f0e4:	00034c20 	.word	0x00034c20
   1f0e8:	08080013 	.word	0x08080013
   1f0ec:	2020008b 	.word	0x2020008b
   1f0f0:	00031d14 	.word	0x00031d14
   1f0f4:	0000019e 	.word	0x0000019e

0001f0f8 <__static_initialization_and_destruction_0(int, int)>:
   1f0f8:	e59f3014 	ldr	r3, [pc, #20]	; 1f114 <__static_initialization_and_destruction_0(int, int)+0x1c>
   1f0fc:	e1510003 	cmp	r1, r3
   1f100:	03500001 	cmpeq	r0, #1
   1f104:	03a02001 	moveq	r2, #1
   1f108:	059f3008 	ldreq	r3, [pc, #8]	; 1f118 <__static_initialization_and_destruction_0(int, int)+0x20>
   1f10c:	05832000 	streq	r2, [r3]
   1f110:	e12fff1e 	bx	lr
   1f114:	0000ffff 	.word	0x0000ffff
   1f118:	00034c20 	.word	0x00034c20

0001f11c <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   1f11c:	e3a02001 	mov	r2, #1
   1f120:	e59f3004 	ldr	r3, [pc, #4]	; 1f12c <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
   1f124:	e5832000 	str	r2, [r3]
   1f128:	e12fff1e 	bx	lr
   1f12c:	00034c20 	.word	0x00034c20

0001f130 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   1f130:	e3a01000 	mov	r1, #0
   1f134:	ea00000a 	b	1f164 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   1f138:	e3520009 	cmp	r2, #9
   1f13c:	8a000011 	bhi	1f188 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   1f140:	e3730001 	cmn	r3, #1
   1f144:	13a02000 	movne	r2, #0
   1f148:	03a02001 	moveq	r2, #1
   1f14c:	e1510003 	cmp	r1, r3
   1f150:	91a01002 	movls	r1, r2
   1f154:	83821001 	orrhi	r1, r2, #1
   1f158:	e3510000 	cmp	r1, #0
   1f15c:	1a000009 	bne	1f188 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   1f160:	e1a01003 	mov	r1, r3
   1f164:	e0d0c0d1 	ldrsb	ip, [r0], #1
   1f168:	e0813101 	add	r3, r1, r1, lsl #2
   1f16c:	e24c2030 	sub	r2, ip, #48	; 0x30
   1f170:	e35c0000 	cmp	ip, #0
   1f174:	e0823083 	add	r3, r2, r3, lsl #1
   1f178:	e6ef2072 	uxtb	r2, r2
   1f17c:	1affffed 	bne	1f138 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
   1f180:	e1a00001 	mov	r0, r1
   1f184:	e12fff1e 	bx	lr
   1f188:	e3e01000 	mvn	r1, #0
   1f18c:	e1a00001 	mov	r0, r1
   1f190:	e12fff1e 	bx	lr

0001f194 <CKernelOptions::~CKernelOptions()>:
   1f194:	e3a02000 	mov	r2, #0
   1f198:	e59f3004 	ldr	r3, [pc, #4]	; 1f1a4 <CKernelOptions::~CKernelOptions()+0x10>
   1f19c:	e5832000 	str	r2, [r3]
   1f1a0:	e12fff1e 	bx	lr
   1f1a4:	00034c24 	.word	0x00034c24

0001f1a8 <CKernelOptions::GetWidth() const>:
   1f1a8:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   1f1ac:	e12fff1e 	bx	lr

0001f1b0 <CKernelOptions::GetHeight() const>:
   1f1b0:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   1f1b4:	e12fff1e 	bx	lr

0001f1b8 <CKernelOptions::GetLogDevice() const>:
   1f1b8:	e2800e81 	add	r0, r0, #2064	; 0x810
   1f1bc:	e2800008 	add	r0, r0, #8
   1f1c0:	e12fff1e 	bx	lr

0001f1c4 <CKernelOptions::GetLogLevel() const>:
   1f1c4:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   1f1c8:	e12fff1e 	bx	lr

0001f1cc <CKernelOptions::GetKeyMap() const>:
   1f1cc:	e2800e83 	add	r0, r0, #2096	; 0x830
   1f1d0:	e12fff1e 	bx	lr

0001f1d4 <CKernelOptions::GetUSBPowerDelay() const>:
   1f1d4:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   1f1d8:	e12fff1e 	bx	lr

0001f1dc <CKernelOptions::GetUSBFullSpeed() const>:
   1f1dc:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
   1f1e0:	e12fff1e 	bx	lr

0001f1e4 <CKernelOptions::GetSoundDevice() const>:
   1f1e4:	e2800e83 	add	r0, r0, #2096	; 0x830
   1f1e8:	e2800009 	add	r0, r0, #9
   1f1ec:	e12fff1e 	bx	lr

0001f1f0 <CKernelOptions::GetSoundOption() const>:
   1f1f0:	e5900850 	ldr	r0, [r0, #2128]	; 0x850
   1f1f4:	e12fff1e 	bx	lr

0001f1f8 <CKernelOptions::GetCPUSpeed() const>:
   1f1f8:	e5d00854 	ldrb	r0, [r0, #2132]	; 0x854
   1f1fc:	e12fff1e 	bx	lr

0001f200 <CKernelOptions::GetSoCMaxTemp() const>:
   1f200:	e5900858 	ldr	r0, [r0, #2136]	; 0x858
   1f204:	e12fff1e 	bx	lr

0001f208 <CKernelOptions::Get()>:
   1f208:	e59f3004 	ldr	r3, [pc, #4]	; 1f214 <CKernelOptions::Get()+0xc>
   1f20c:	e5930000 	ldr	r0, [r3]
   1f210:	e12fff1e 	bx	lr
   1f214:	00034c24 	.word	0x00034c24

0001f218 <CKernelOptions::GetToken()>:
   1f218:	e1a01000 	mov	r1, r0
   1f21c:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
   1f220:	e1d030d0 	ldrsb	r3, [r0]
   1f224:	e3530000 	cmp	r3, #0
   1f228:	1a000005 	bne	1f244 <CKernelOptions::GetToken()+0x2c>
   1f22c:	ea000017 	b	1f290 <CKernelOptions::GetToken()+0x78>
   1f230:	e2800001 	add	r0, r0, #1
   1f234:	e581080c 	str	r0, [r1, #2060]	; 0x80c
   1f238:	e1d030d0 	ldrsb	r3, [r0]
   1f23c:	e3530000 	cmp	r3, #0
   1f240:	0a000012 	beq	1f290 <CKernelOptions::GetToken()+0x78>
   1f244:	e3530020 	cmp	r3, #32
   1f248:	0afffff8 	beq	1f230 <CKernelOptions::GetToken()+0x18>
   1f24c:	e591380c 	ldr	r3, [r1, #2060]	; 0x80c
   1f250:	e1d320d0 	ldrsb	r2, [r3]
   1f254:	e3520000 	cmp	r2, #0
   1f258:	1a000005 	bne	1f274 <CKernelOptions::GetToken()+0x5c>
   1f25c:	e12fff1e 	bx	lr
   1f260:	e2833001 	add	r3, r3, #1
   1f264:	e581380c 	str	r3, [r1, #2060]	; 0x80c
   1f268:	e1d320d0 	ldrsb	r2, [r3]
   1f26c:	e3520000 	cmp	r2, #0
   1f270:	012fff1e 	bxeq	lr
   1f274:	e3520020 	cmp	r2, #32
   1f278:	1afffff8 	bne	1f260 <CKernelOptions::GetToken()+0x48>
   1f27c:	e3a02000 	mov	r2, #0
   1f280:	e283c001 	add	ip, r3, #1
   1f284:	e581c80c 	str	ip, [r1, #2060]	; 0x80c
   1f288:	e5c32000 	strb	r2, [r3]
   1f28c:	e12fff1e 	bx	lr
   1f290:	e3a00000 	mov	r0, #0
   1f294:	e12fff1e 	bx	lr

0001f298 <CKernelOptions::CKernelOptions()>:
   1f298:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f29c:	e3a02004 	mov	r2, #4
   1f2a0:	e1a05000 	mov	r5, r0
   1f2a4:	e3a04000 	mov	r4, #0
   1f2a8:	e3a0303c 	mov	r3, #60	; 0x3c
   1f2ac:	e2807e81 	add	r7, r0, #2064	; 0x810
   1f2b0:	e2877008 	add	r7, r7, #8
   1f2b4:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   1f2b8:	e5803858 	str	r3, [r0, #2136]	; 0x858
   1f2bc:	e24dd014 	sub	sp, sp, #20
   1f2c0:	e59f1378 	ldr	r1, [pc, #888]	; 1f640 <CKernelOptions::CKernelOptions()+0x3a8>
   1f2c4:	e1a00007 	mov	r0, r7
   1f2c8:	e5854810 	str	r4, [r5, #2064]	; 0x810
   1f2cc:	e5854814 	str	r4, [r5, #2068]	; 0x814
   1f2d0:	e5854834 	str	r4, [r5, #2100]	; 0x834
   1f2d4:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
   1f2d8:	e5854850 	str	r4, [r5, #2128]	; 0x850
   1f2dc:	e5c54854 	strb	r4, [r5, #2132]	; 0x854
   1f2e0:	e2859e83 	add	r9, r5, #2096	; 0x830
   1f2e4:	eb001e11 	bl	26b30 <strcpy>
   1f2e8:	e59f1354 	ldr	r1, [pc, #852]	; 1f644 <CKernelOptions::CKernelOptions()+0x3ac>
   1f2ec:	e1a00009 	mov	r0, r9
   1f2f0:	eb001e0e 	bl	26b30 <strcpy>
   1f2f4:	e59f334c 	ldr	r3, [pc, #844]	; 1f648 <CKernelOptions::CKernelOptions()+0x3b0>
   1f2f8:	e1a01004 	mov	r1, r4
   1f2fc:	e5c54839 	strb	r4, [r5, #2105]	; 0x839
   1f300:	e28d0008 	add	r0, sp, #8
   1f304:	e5835000 	str	r5, [r3]
   1f308:	ebfff91d 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1f30c:	e1a02005 	mov	r2, r5
   1f310:	e59f3334 	ldr	r3, [pc, #820]	; 1f64c <CKernelOptions::CKernelOptions()+0x3b4>
   1f314:	e59f1334 	ldr	r1, [pc, #820]	; 1f650 <CKernelOptions::CKernelOptions()+0x3b8>
   1f318:	e58d4000 	str	r4, [sp]
   1f31c:	e28d0008 	add	r0, sp, #8
   1f320:	ebfff923 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1f324:	e1500004 	cmp	r0, r4
   1f328:	0a00002b 	beq	1f3dc <CKernelOptions::CKernelOptions()+0x144>
   1f32c:	e5953008 	ldr	r3, [r5, #8]
   1f330:	e3530b02 	cmp	r3, #2048	; 0x800
   1f334:	2a000028 	bcs	1f3dc <CKernelOptions::CKernelOptions()+0x144>
   1f338:	e0853003 	add	r3, r5, r3
   1f33c:	e285200c 	add	r2, r5, #12
   1f340:	e59f830c 	ldr	r8, [pc, #780]	; 1f654 <CKernelOptions::CKernelOptions()+0x3bc>
   1f344:	e59fa30c 	ldr	sl, [pc, #780]	; 1f658 <CKernelOptions::CKernelOptions()+0x3c0>
   1f348:	e5c3400c 	strb	r4, [r3, #12]
   1f34c:	e585280c 	str	r2, [r5, #2060]	; 0x80c
   1f350:	e1a00005 	mov	r0, r5
   1f354:	ebffffaf 	bl	1f218 <CKernelOptions::GetToken()>
   1f358:	e2506000 	subs	r6, r0, #0
   1f35c:	0a00001e 	beq	1f3dc <CKernelOptions::CKernelOptions()+0x144>
   1f360:	e1d630d0 	ldrsb	r3, [r6]
   1f364:	e3530000 	cmp	r3, #0
   1f368:	0a00002e 	beq	1f428 <CKernelOptions::CKernelOptions()+0x190>
   1f36c:	e1a04006 	mov	r4, r6
   1f370:	ea000002 	b	1f380 <CKernelOptions::CKernelOptions()+0xe8>
   1f374:	e1f430d1 	ldrsb	r3, [r4, #1]!
   1f378:	e3530000 	cmp	r3, #0
   1f37c:	0a000029 	beq	1f428 <CKernelOptions::CKernelOptions()+0x190>
   1f380:	e353003d 	cmp	r3, #61	; 0x3d
   1f384:	1afffffa 	bne	1f374 <CKernelOptions::CKernelOptions()+0xdc>
   1f388:	e3a03000 	mov	r3, #0
   1f38c:	e1a0b004 	mov	fp, r4
   1f390:	e1a01008 	mov	r1, r8
   1f394:	e1a00006 	mov	r0, r6
   1f398:	e4cb3001 	strb	r3, [fp], #1
   1f39c:	eb001d49 	bl	268c8 <strcmp>
   1f3a0:	e3500000 	cmp	r0, #0
   1f3a4:	1a000011 	bne	1f3f0 <CKernelOptions::CKernelOptions()+0x158>
   1f3a8:	e1d430d1 	ldrsb	r3, [r4, #1]
   1f3ac:	e3530000 	cmp	r3, #0
   1f3b0:	0affffe6 	beq	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f3b4:	e1a0000b 	mov	r0, fp
   1f3b8:	ebffff5c 	bl	1f130 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1f3bc:	e59f3298 	ldr	r3, [pc, #664]	; 1f65c <CKernelOptions::CKernelOptions()+0x3c4>
   1f3c0:	e2402d0a 	sub	r2, r0, #640	; 0x280
   1f3c4:	e1520003 	cmp	r2, r3
   1f3c8:	95850810 	strls	r0, [r5, #2064]	; 0x810
   1f3cc:	e1a00005 	mov	r0, r5
   1f3d0:	ebffff90 	bl	1f218 <CKernelOptions::GetToken()>
   1f3d4:	e2506000 	subs	r6, r0, #0
   1f3d8:	1affffe0 	bne	1f360 <CKernelOptions::CKernelOptions()+0xc8>
   1f3dc:	e28d0008 	add	r0, sp, #8
   1f3e0:	ebfff8ee 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   1f3e4:	e1a00005 	mov	r0, r5
   1f3e8:	e28dd014 	add	sp, sp, #20
   1f3ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3f0:	e1a0100a 	mov	r1, sl
   1f3f4:	e1a00006 	mov	r0, r6
   1f3f8:	eb001d32 	bl	268c8 <strcmp>
   1f3fc:	e3500000 	cmp	r0, #0
   1f400:	1a000013 	bne	1f454 <CKernelOptions::CKernelOptions()+0x1bc>
   1f404:	e1d430d1 	ldrsb	r3, [r4, #1]
   1f408:	e3530000 	cmp	r3, #0
   1f40c:	0affffcf 	beq	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f410:	e1a0000b 	mov	r0, fp
   1f414:	ebffff45 	bl	1f130 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1f418:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   1f41c:	e3530f96 	cmp	r3, #600	; 0x258
   1f420:	95850814 	strls	r0, [r5, #2068]	; 0x814
   1f424:	eaffffc9 	b	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f428:	e1a01008 	mov	r1, r8
   1f42c:	e1a00006 	mov	r0, r6
   1f430:	eb001d24 	bl	268c8 <strcmp>
   1f434:	e3500000 	cmp	r0, #0
   1f438:	0affffc4 	beq	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f43c:	e1a0100a 	mov	r1, sl
   1f440:	e1a00006 	mov	r0, r6
   1f444:	eb001d1f 	bl	268c8 <strcmp>
   1f448:	e3500000 	cmp	r0, #0
   1f44c:	13a0b000 	movne	fp, #0
   1f450:	0affffbe 	beq	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f454:	e1a00006 	mov	r0, r6
   1f458:	e59f1200 	ldr	r1, [pc, #512]	; 1f660 <CKernelOptions::CKernelOptions()+0x3c8>
   1f45c:	eb001d19 	bl	268c8 <strcmp>
   1f460:	e2504000 	subs	r4, r0, #0
   1f464:	0a00000e 	beq	1f4a4 <CKernelOptions::CKernelOptions()+0x20c>
   1f468:	e1a00006 	mov	r0, r6
   1f46c:	e59f11f0 	ldr	r1, [pc, #496]	; 1f664 <CKernelOptions::CKernelOptions()+0x3cc>
   1f470:	eb001d14 	bl	268c8 <strcmp>
   1f474:	e3500000 	cmp	r0, #0
   1f478:	1a00000f 	bne	1f4bc <CKernelOptions::CKernelOptions()+0x224>
   1f47c:	e35b0000 	cmp	fp, #0
   1f480:	0affffb2 	beq	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f484:	e1db30d0 	ldrsb	r3, [fp]
   1f488:	e3530000 	cmp	r3, #0
   1f48c:	0affffaf 	beq	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f490:	e1a0000b 	mov	r0, fp
   1f494:	ebffff25 	bl	1f130 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1f498:	e3500004 	cmp	r0, #4
   1f49c:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
   1f4a0:	eaffffaa 	b	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f4a4:	e1a0100b 	mov	r1, fp
   1f4a8:	e3a02013 	mov	r2, #19
   1f4ac:	e1a00007 	mov	r0, r7
   1f4b0:	eb001da9 	bl	26b5c <strncpy>
   1f4b4:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
   1f4b8:	eaffffa4 	b	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f4bc:	e1a00006 	mov	r0, r6
   1f4c0:	e59f11a0 	ldr	r1, [pc, #416]	; 1f668 <CKernelOptions::CKernelOptions()+0x3d0>
   1f4c4:	eb001cff 	bl	268c8 <strcmp>
   1f4c8:	e2504000 	subs	r4, r0, #0
   1f4cc:	0a000010 	beq	1f514 <CKernelOptions::CKernelOptions()+0x27c>
   1f4d0:	e1a00006 	mov	r0, r6
   1f4d4:	e59f1190 	ldr	r1, [pc, #400]	; 1f66c <CKernelOptions::CKernelOptions()+0x3d4>
   1f4d8:	eb001cfa 	bl	268c8 <strcmp>
   1f4dc:	e3500000 	cmp	r0, #0
   1f4e0:	1a000011 	bne	1f52c <CKernelOptions::CKernelOptions()+0x294>
   1f4e4:	e35b0000 	cmp	fp, #0
   1f4e8:	0affff98 	beq	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f4ec:	e1db30d0 	ldrsb	r3, [fp]
   1f4f0:	e3530000 	cmp	r3, #0
   1f4f4:	0affff95 	beq	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f4f8:	e1a0000b 	mov	r0, fp
   1f4fc:	ebffff0b 	bl	1f130 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1f500:	e59f3168 	ldr	r3, [pc, #360]	; 1f670 <CKernelOptions::CKernelOptions()+0x3d8>
   1f504:	e24020c8 	sub	r2, r0, #200	; 0xc8
   1f508:	e1520003 	cmp	r2, r3
   1f50c:	95850834 	strls	r0, [r5, #2100]	; 0x834
   1f510:	eaffff8e 	b	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f514:	e1a0100b 	mov	r1, fp
   1f518:	e3a02002 	mov	r2, #2
   1f51c:	e1a00009 	mov	r0, r9
   1f520:	eb001d8d 	bl	26b5c <strncpy>
   1f524:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
   1f528:	eaffff88 	b	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f52c:	e1a00006 	mov	r0, r6
   1f530:	e59f113c 	ldr	r1, [pc, #316]	; 1f674 <CKernelOptions::CKernelOptions()+0x3dc>
   1f534:	eb001ce3 	bl	268c8 <strcmp>
   1f538:	e3500000 	cmp	r0, #0
   1f53c:	1a000006 	bne	1f55c <CKernelOptions::CKernelOptions()+0x2c4>
   1f540:	e1a0000b 	mov	r0, fp
   1f544:	e59f112c 	ldr	r1, [pc, #300]	; 1f678 <CKernelOptions::CKernelOptions()+0x3e0>
   1f548:	eb001cde 	bl	268c8 <strcmp>
   1f54c:	e3500000 	cmp	r0, #0
   1f550:	03a03001 	moveq	r3, #1
   1f554:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
   1f558:	eaffff7c 	b	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f55c:	e1a00006 	mov	r0, r6
   1f560:	e59f1114 	ldr	r1, [pc, #276]	; 1f67c <CKernelOptions::CKernelOptions()+0x3e4>
   1f564:	eb001cd7 	bl	268c8 <strcmp>
   1f568:	e2504000 	subs	r4, r0, #0
   1f56c:	1a000005 	bne	1f588 <CKernelOptions::CKernelOptions()+0x2f0>
   1f570:	e1a0100b 	mov	r1, fp
   1f574:	e3a02013 	mov	r2, #19
   1f578:	e2890009 	add	r0, r9, #9
   1f57c:	eb001d76 	bl	26b5c <strncpy>
   1f580:	e5c5484c 	strb	r4, [r5, #2124]	; 0x84c
   1f584:	eaffff71 	b	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f588:	e1a00006 	mov	r0, r6
   1f58c:	e59f10ec 	ldr	r1, [pc, #236]	; 1f680 <CKernelOptions::CKernelOptions()+0x3e8>
   1f590:	eb001ccc 	bl	268c8 <strcmp>
   1f594:	e3500000 	cmp	r0, #0
   1f598:	1a000009 	bne	1f5c4 <CKernelOptions::CKernelOptions()+0x32c>
   1f59c:	e35b0000 	cmp	fp, #0
   1f5a0:	0affff6a 	beq	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f5a4:	e1db30d0 	ldrsb	r3, [fp]
   1f5a8:	e3530000 	cmp	r3, #0
   1f5ac:	0affff67 	beq	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f5b0:	e1a0000b 	mov	r0, fp
   1f5b4:	ebfffedd 	bl	1f130 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1f5b8:	e3500002 	cmp	r0, #2
   1f5bc:	95850850 	strls	r0, [r5, #2128]	; 0x850
   1f5c0:	eaffff62 	b	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f5c4:	e1a00006 	mov	r0, r6
   1f5c8:	e59f10b4 	ldr	r1, [pc, #180]	; 1f684 <CKernelOptions::CKernelOptions()+0x3ec>
   1f5cc:	eb001cbd 	bl	268c8 <strcmp>
   1f5d0:	e3500000 	cmp	r0, #0
   1f5d4:	1a000006 	bne	1f5f4 <CKernelOptions::CKernelOptions()+0x35c>
   1f5d8:	e1a0000b 	mov	r0, fp
   1f5dc:	e59f10a4 	ldr	r1, [pc, #164]	; 1f688 <CKernelOptions::CKernelOptions()+0x3f0>
   1f5e0:	eb001cb8 	bl	268c8 <strcmp>
   1f5e4:	e3500000 	cmp	r0, #0
   1f5e8:	03a03001 	moveq	r3, #1
   1f5ec:	05c53854 	strbeq	r3, [r5, #2132]	; 0x854
   1f5f0:	eaffff56 	b	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f5f4:	e1a00006 	mov	r0, r6
   1f5f8:	e59f108c 	ldr	r1, [pc, #140]	; 1f68c <CKernelOptions::CKernelOptions()+0x3f4>
   1f5fc:	eb001cb1 	bl	268c8 <strcmp>
   1f600:	e16f3f1b 	clz	r3, fp
   1f604:	e3500000 	cmp	r0, #0
   1f608:	e1a032a3 	lsr	r3, r3, #5
   1f60c:	01a00003 	moveq	r0, r3
   1f610:	13a00001 	movne	r0, #1
   1f614:	e3500000 	cmp	r0, #0
   1f618:	1affff4c 	bne	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f61c:	e1db30d0 	ldrsb	r3, [fp]
   1f620:	e3530000 	cmp	r3, #0
   1f624:	0affff49 	beq	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f628:	e1a0000b 	mov	r0, fp
   1f62c:	ebfffebf 	bl	1f130 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1f630:	e2403028 	sub	r3, r0, #40	; 0x28
   1f634:	e3530026 	cmp	r3, #38	; 0x26
   1f638:	95850858 	strls	r0, [r5, #2136]	; 0x858
   1f63c:	eaffff43 	b	1f350 <CKernelOptions::CKernelOptions()+0xb8>
   1f640:	00031fec 	.word	0x00031fec
   1f644:	0002fb70 	.word	0x0002fb70
   1f648:	00034c24 	.word	0x00034c24
   1f64c:	0000080c 	.word	0x0000080c
   1f650:	00050001 	.word	0x00050001
   1f654:	00032070 	.word	0x00032070
   1f658:	00032068 	.word	0x00032068
   1f65c:	0000053c 	.word	0x0000053c
   1f660:	00031ff4 	.word	0x00031ff4
   1f664:	00031ffc 	.word	0x00031ffc
   1f668:	00032008 	.word	0x00032008
   1f66c:	00032010 	.word	0x00032010
   1f670:	00001e78 	.word	0x00001e78
   1f674:	00032020 	.word	0x00032020
   1f678:	0003202c 	.word	0x0003202c
   1f67c:	00032034 	.word	0x00032034
   1f680:	00032040 	.word	0x00032040
   1f684:	0003204c 	.word	0x0003204c
   1f688:	00032054 	.word	0x00032054
   1f68c:	0003205c 	.word	0x0003205c

0001f690 <CKernelOptions::GetOptionValue(char*)>:
   1f690:	e1d030d0 	ldrsb	r3, [r0]
   1f694:	e3530000 	cmp	r3, #0
   1f698:	1a000003 	bne	1f6ac <CKernelOptions::GetOptionValue(char*)+0x1c>
   1f69c:	ea000007 	b	1f6c0 <CKernelOptions::GetOptionValue(char*)+0x30>
   1f6a0:	e1f030d1 	ldrsb	r3, [r0, #1]!
   1f6a4:	e3530000 	cmp	r3, #0
   1f6a8:	0a000004 	beq	1f6c0 <CKernelOptions::GetOptionValue(char*)+0x30>
   1f6ac:	e353003d 	cmp	r3, #61	; 0x3d
   1f6b0:	1afffffa 	bne	1f6a0 <CKernelOptions::GetOptionValue(char*)+0x10>
   1f6b4:	e3a03000 	mov	r3, #0
   1f6b8:	e4c03001 	strb	r3, [r0], #1
   1f6bc:	e12fff1e 	bx	lr
   1f6c0:	e1a00003 	mov	r0, r3
   1f6c4:	e12fff1e 	bx	lr

0001f6c8 <CKernelOptions::GetDecimal(char*)>:
   1f6c8:	e2503000 	subs	r3, r0, #0
   1f6cc:	0a000003 	beq	1f6e0 <CKernelOptions::GetDecimal(char*)+0x18>
   1f6d0:	e1d330d0 	ldrsb	r3, [r3]
   1f6d4:	e3530000 	cmp	r3, #0
   1f6d8:	0a000000 	beq	1f6e0 <CKernelOptions::GetDecimal(char*)+0x18>
   1f6dc:	eafffe93 	b	1f130 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   1f6e0:	e3e00000 	mvn	r0, #0
   1f6e4:	e12fff1e 	bx	lr

0001f6e8 <CLogger::CLogger(unsigned int, CTimer*)>:
   1f6e8:	e92d4010 	push	{r4, lr}
   1f6ec:	e3a03000 	mov	r3, #0
   1f6f0:	e1a04000 	mov	r4, r0
   1f6f4:	e3a00001 	mov	r0, #1
   1f6f8:	e884000e 	stm	r4, {r1, r2, r3}
   1f6fc:	e584300c 	str	r3, [r4, #12]
   1f700:	e5843010 	str	r3, [r4, #16]
   1f704:	e5843014 	str	r3, [r4, #20]
   1f708:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   1f70c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   1f710:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   1f714:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   1f718:	e5840018 	str	r0, [r4, #24]
   1f71c:	e58400ec 	str	r0, [r4, #236]	; 0xec
   1f720:	e3a00901 	mov	r0, #16384	; 0x4000
   1f724:	eb002044 	bl	2783c <operator new[](unsigned int)>
   1f728:	e59f300c 	ldr	r3, [pc, #12]	; 1f73c <CLogger::CLogger(unsigned int, CTimer*)+0x54>
   1f72c:	e584000c 	str	r0, [r4, #12]
   1f730:	e5834000 	str	r4, [r3]
   1f734:	e1a00004 	mov	r0, r4
   1f738:	e8bd8010 	pop	{r4, pc}
   1f73c:	00034c28 	.word	0x00034c28

0001f740 <CLogger::~CLogger()>:
   1f740:	e92d4070 	push	{r4, r5, r6, lr}
   1f744:	e3a02000 	mov	r2, #0
   1f748:	e1a04000 	mov	r4, r0
   1f74c:	e59f0064 	ldr	r0, [pc, #100]	; 1f7b8 <CLogger::~CLogger()+0x78>
   1f750:	e1a05002 	mov	r5, r2
   1f754:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1f758:	e59410e4 	ldr	r1, [r4, #228]	; 0xe4
   1f75c:	e5802000 	str	r2, [r0]
   1f760:	ea00000b 	b	1f794 <CLogger::~CLogger()+0x54>
   1f764:	e592001c 	ldr	r0, [r2, #28]
   1f768:	e3500000 	cmp	r0, #0
   1f76c:	0a000003 	beq	1f780 <CLogger::~CLogger()+0x40>
   1f770:	e3a01f42 	mov	r1, #264	; 0x108
   1f774:	eb002038 	bl	2785c <operator delete(void*, unsigned int)>
   1f778:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1f77c:	e59410e4 	ldr	r1, [r4, #228]	; 0xe4
   1f780:	e2833001 	add	r3, r3, #1
   1f784:	e3530032 	cmp	r3, #50	; 0x32
   1f788:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   1f78c:	03a03000 	moveq	r3, #0
   1f790:	058450e8 	streq	r5, [r4, #232]	; 0xe8
   1f794:	e1530001 	cmp	r3, r1
   1f798:	e0842103 	add	r2, r4, r3, lsl #2
   1f79c:	1afffff0 	bne	1f764 <CLogger::~CLogger()+0x24>
   1f7a0:	e594000c 	ldr	r0, [r4, #12]
   1f7a4:	e3500000 	cmp	r0, #0
   1f7a8:	0a000000 	beq	1f7b0 <CLogger::~CLogger()+0x70>
   1f7ac:	eb002029 	bl	27858 <operator delete[](void*)>
   1f7b0:	e1a00004 	mov	r0, r4
   1f7b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f7b8:	00034c28 	.word	0x00034c28

0001f7bc <CLogger::Initialize(CDevice*)>:
   1f7bc:	e92d4010 	push	{r4, lr}
   1f7c0:	e5801008 	str	r1, [r0, #8]
   1f7c4:	e24dd008 	sub	sp, sp, #8
   1f7c8:	e1a04000 	mov	r4, r0
   1f7cc:	eb0003cc 	bl	20704 <CMachineInfo::Get()>
   1f7d0:	eb0002e7 	bl	20374 <CMachineInfo::GetMachineName() const>
   1f7d4:	e1a02000 	mov	r2, r0
   1f7d8:	e59f301c 	ldr	r3, [pc, #28]	; 1f7fc <CLogger::Initialize(CDevice*)+0x40>
   1f7dc:	e1a00004 	mov	r0, r4
   1f7e0:	e58d2000 	str	r2, [sp]
   1f7e4:	e283101c 	add	r1, r3, #28
   1f7e8:	e3a02003 	mov	r2, #3
   1f7ec:	eb000005 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f7f0:	e3a00001 	mov	r0, #1
   1f7f4:	e28dd008 	add	sp, sp, #8
   1f7f8:	e8bd8010 	pop	{r4, pc}
   1f7fc:	00032078 	.word	0x00032078

0001f800 <CLogger::SetNewTarget(CDevice*)>:
   1f800:	e5801008 	str	r1, [r0, #8]
   1f804:	e12fff1e 	bx	lr

0001f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   1f808:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   1f80c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1f810:	e24dd010 	sub	sp, sp, #16
   1f814:	e28dc018 	add	ip, sp, #24
   1f818:	e59d3014 	ldr	r3, [sp, #20]
   1f81c:	e58dc000 	str	ip, [sp]
   1f820:	e58dc00c 	str	ip, [sp, #12]
   1f824:	eb000003 	bl	1f838 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   1f828:	e28dd010 	add	sp, sp, #16
   1f82c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1f830:	e28dd004 	add	sp, sp, #4
   1f834:	e12fff1e 	bx	lr

0001f838 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   1f838:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1f83c:	e1a07003 	mov	r7, r3
   1f840:	e24dd024 	sub	sp, sp, #36	; 0x24
   1f844:	e1a04000 	mov	r4, r0
   1f848:	e1a0000d 	mov	r0, sp
   1f84c:	e1a05002 	mov	r5, r2
   1f850:	e1a06001 	mov	r6, r1
   1f854:	eb0012c6 	bl	24374 <CString::CString()>
   1f858:	e1a01007 	mov	r1, r7
   1f85c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   1f860:	e1a0000d 	mov	r0, sp
   1f864:	eb0014e3 	bl	24bf8 <CString::FormatV(char const*, std::__va_list)>
   1f868:	e1a0000d 	mov	r0, sp
   1f86c:	eb0012d8 	bl	243d4 <CString::operator char const*() const>
   1f870:	e1a02005 	mov	r2, r5
   1f874:	e1a03000 	mov	r3, r0
   1f878:	e1a01006 	mov	r1, r6
   1f87c:	e1a00004 	mov	r0, r4
   1f880:	eb000108 	bl	1fca8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   1f884:	e5943000 	ldr	r3, [r4]
   1f888:	e1550003 	cmp	r5, r3
   1f88c:	8a000029 	bhi	1f938 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x100>
   1f890:	e28d0010 	add	r0, sp, #16
   1f894:	eb0012b6 	bl	24374 <CString::CString()>
   1f898:	e3550000 	cmp	r5, #0
   1f89c:	0a000029 	beq	1f948 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x110>
   1f8a0:	e5940004 	ldr	r0, [r4, #4]
   1f8a4:	e3500000 	cmp	r0, #0
   1f8a8:	0a00000d 	beq	1f8e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   1f8ac:	eb001966 	bl	25e4c <CTimer::GetTimeString()>
   1f8b0:	e2505000 	subs	r5, r0, #0
   1f8b4:	0a00000a 	beq	1f8e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   1f8b8:	eb0012c5 	bl	243d4 <CString::operator char const*() const>
   1f8bc:	e1a01000 	mov	r1, r0
   1f8c0:	e28d0010 	add	r0, sp, #16
   1f8c4:	eb0012f8 	bl	244ac <CString::Append(char const*)>
   1f8c8:	e28d0010 	add	r0, sp, #16
   1f8cc:	e59f1138 	ldr	r1, [pc, #312]	; 1fa0c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
   1f8d0:	eb0012f5 	bl	244ac <CString::Append(char const*)>
   1f8d4:	e5953000 	ldr	r3, [r5]
   1f8d8:	e1a00005 	mov	r0, r5
   1f8dc:	e5933004 	ldr	r3, [r3, #4]
   1f8e0:	e12fff33 	blx	r3
   1f8e4:	e1a01006 	mov	r1, r6
   1f8e8:	e28d0010 	add	r0, sp, #16
   1f8ec:	eb0012ee 	bl	244ac <CString::Append(char const*)>
   1f8f0:	e59f1118 	ldr	r1, [pc, #280]	; 1fa10 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   1f8f4:	e28d0010 	add	r0, sp, #16
   1f8f8:	eb0012eb 	bl	244ac <CString::Append(char const*)>
   1f8fc:	e1a0000d 	mov	r0, sp
   1f900:	eb0012b3 	bl	243d4 <CString::operator char const*() const>
   1f904:	e1a01000 	mov	r1, r0
   1f908:	e28d0010 	add	r0, sp, #16
   1f90c:	eb0012e6 	bl	244ac <CString::Append(char const*)>
   1f910:	e59f10fc 	ldr	r1, [pc, #252]	; 1fa14 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
   1f914:	e28d0010 	add	r0, sp, #16
   1f918:	eb0012e3 	bl	244ac <CString::Append(char const*)>
   1f91c:	e28d0010 	add	r0, sp, #16
   1f920:	eb0012ab 	bl	243d4 <CString::operator char const*() const>
   1f924:	e1a01000 	mov	r1, r0
   1f928:	e1a00004 	mov	r0, r4
   1f92c:	eb000077 	bl	1fb10 <CLogger::Write(char const*)>
   1f930:	e28d0010 	add	r0, sp, #16
   1f934:	eb00125b 	bl	242a8 <CString::~CString()>
   1f938:	e1a0000d 	mov	r0, sp
   1f93c:	eb001259 	bl	242a8 <CString::~CString()>
   1f940:	e28dd024 	add	sp, sp, #36	; 0x24
   1f944:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1f948:	e59f10c8 	ldr	r1, [pc, #200]	; 1fa18 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
   1f94c:	e28d0010 	add	r0, sp, #16
   1f950:	eb0012a5 	bl	243ec <CString::operator=(char const*)>
   1f954:	e5940004 	ldr	r0, [r4, #4]
   1f958:	e3500000 	cmp	r0, #0
   1f95c:	0a00000d 	beq	1f998 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   1f960:	eb001939 	bl	25e4c <CTimer::GetTimeString()>
   1f964:	e2505000 	subs	r5, r0, #0
   1f968:	0a00000a 	beq	1f998 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   1f96c:	eb001298 	bl	243d4 <CString::operator char const*() const>
   1f970:	e1a01000 	mov	r1, r0
   1f974:	e28d0010 	add	r0, sp, #16
   1f978:	eb0012cb 	bl	244ac <CString::Append(char const*)>
   1f97c:	e28d0010 	add	r0, sp, #16
   1f980:	e59f1084 	ldr	r1, [pc, #132]	; 1fa0c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d4>
   1f984:	eb0012c8 	bl	244ac <CString::Append(char const*)>
   1f988:	e5953000 	ldr	r3, [r5]
   1f98c:	e1a00005 	mov	r0, r5
   1f990:	e5933004 	ldr	r3, [r3, #4]
   1f994:	e12fff33 	blx	r3
   1f998:	e1a01006 	mov	r1, r6
   1f99c:	e28d0010 	add	r0, sp, #16
   1f9a0:	eb0012c1 	bl	244ac <CString::Append(char const*)>
   1f9a4:	e59f1064 	ldr	r1, [pc, #100]	; 1fa10 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   1f9a8:	e28d0010 	add	r0, sp, #16
   1f9ac:	eb0012be 	bl	244ac <CString::Append(char const*)>
   1f9b0:	e1a0000d 	mov	r0, sp
   1f9b4:	eb001286 	bl	243d4 <CString::operator char const*() const>
   1f9b8:	e1a01000 	mov	r1, r0
   1f9bc:	e28d0010 	add	r0, sp, #16
   1f9c0:	eb0012b9 	bl	244ac <CString::Append(char const*)>
   1f9c4:	e59f1050 	ldr	r1, [pc, #80]	; 1fa1c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
   1f9c8:	e28d0010 	add	r0, sp, #16
   1f9cc:	eb0012b6 	bl	244ac <CString::Append(char const*)>
   1f9d0:	e59f103c 	ldr	r1, [pc, #60]	; 1fa14 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
   1f9d4:	e28d0010 	add	r0, sp, #16
   1f9d8:	eb0012b3 	bl	244ac <CString::Append(char const*)>
   1f9dc:	e28d0010 	add	r0, sp, #16
   1f9e0:	eb00127b 	bl	243d4 <CString::operator char const*() const>
   1f9e4:	e1a01000 	mov	r1, r0
   1f9e8:	e1a00004 	mov	r0, r4
   1f9ec:	eb000047 	bl	1fb10 <CLogger::Write(char const*)>
   1f9f0:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   1f9f4:	e3530000 	cmp	r3, #0
   1f9f8:	0a000000 	beq	1fa00 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c8>
   1f9fc:	e12fff33 	blx	r3
   1fa00:	e3a000ff 	mov	r0, #255	; 0xff
   1fa04:	eb0017af 	bl	258c8 <set_qemu_exit_status>
   1fa08:	eb0017b2 	bl	258d8 <halt>
   1fa0c:	000320b4 	.word	0x000320b4
   1fa10:	000320b0 	.word	0x000320b0
   1fa14:	000320a4 	.word	0x000320a4
   1fa18:	0003209c 	.word	0x0003209c
   1fa1c:	000320a8 	.word	0x000320a8

0001fa20 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   1fa20:	e92d4070 	push	{r4, r5, r6, lr}
   1fa24:	e1a04000 	mov	r4, r0
   1fa28:	e5900000 	ldr	r0, [r0]
   1fa2c:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   1fa30:	e1520000 	cmp	r2, r0
   1fa34:	8a000012 	bhi	1fa84 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
   1fa38:	e1a05003 	mov	r5, r3
   1fa3c:	e3a03000 	mov	r3, #0
   1fa40:	e1520003 	cmp	r2, r3
   1fa44:	e5cd3000 	strb	r3, [sp]
   1fa48:	0a00000f 	beq	1fa8c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   1fa4c:	e1a0000d 	mov	r0, sp
   1fa50:	eb001c4f 	bl	26b94 <strcat>
   1fa54:	e59f1094 	ldr	r1, [pc, #148]	; 1faf0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   1fa58:	e1a0000d 	mov	r0, sp
   1fa5c:	eb001c4c 	bl	26b94 <strcat>
   1fa60:	e1a01005 	mov	r1, r5
   1fa64:	e1a0000d 	mov	r0, sp
   1fa68:	eb001c49 	bl	26b94 <strcat>
   1fa6c:	e59f1080 	ldr	r1, [pc, #128]	; 1faf4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   1fa70:	e1a0000d 	mov	r0, sp
   1fa74:	eb001c46 	bl	26b94 <strcat>
   1fa78:	e1a0100d 	mov	r1, sp
   1fa7c:	e1a00004 	mov	r0, r4
   1fa80:	eb000022 	bl	1fb10 <CLogger::Write(char const*)>
   1fa84:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   1fa88:	e8bd8070 	pop	{r4, r5, r6, pc}
   1fa8c:	e1a06001 	mov	r6, r1
   1fa90:	e1a0000d 	mov	r0, sp
   1fa94:	e59f105c 	ldr	r1, [pc, #92]	; 1faf8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   1fa98:	eb001c24 	bl	26b30 <strcpy>
   1fa9c:	e1a01006 	mov	r1, r6
   1faa0:	e1a0000d 	mov	r0, sp
   1faa4:	eb001c3a 	bl	26b94 <strcat>
   1faa8:	e59f1040 	ldr	r1, [pc, #64]	; 1faf0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   1faac:	e1a0000d 	mov	r0, sp
   1fab0:	eb001c37 	bl	26b94 <strcat>
   1fab4:	e1a01005 	mov	r1, r5
   1fab8:	e1a0000d 	mov	r0, sp
   1fabc:	eb001c34 	bl	26b94 <strcat>
   1fac0:	e59f1034 	ldr	r1, [pc, #52]	; 1fafc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   1fac4:	e1a0000d 	mov	r0, sp
   1fac8:	eb001c31 	bl	26b94 <strcat>
   1facc:	e59f1020 	ldr	r1, [pc, #32]	; 1faf4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   1fad0:	e1a0000d 	mov	r0, sp
   1fad4:	eb001c2e 	bl	26b94 <strcat>
   1fad8:	e1a0100d 	mov	r1, sp
   1fadc:	e1a00004 	mov	r0, r4
   1fae0:	eb00000a 	bl	1fb10 <CLogger::Write(char const*)>
   1fae4:	e3a000ff 	mov	r0, #255	; 0xff
   1fae8:	eb001776 	bl	258c8 <set_qemu_exit_status>
   1faec:	eb001779 	bl	258d8 <halt>
   1faf0:	000320b0 	.word	0x000320b0
   1faf4:	000320a4 	.word	0x000320a4
   1faf8:	0003209c 	.word	0x0003209c
   1fafc:	000320a8 	.word	0x000320a8

0001fb00 <CLogger::Get()>:
   1fb00:	e59f3004 	ldr	r3, [pc, #4]	; 1fb0c <CLogger::Get()+0xc>
   1fb04:	e5930000 	ldr	r0, [r3]
   1fb08:	e12fff1e 	bx	lr
   1fb0c:	00034c28 	.word	0x00034c28

0001fb10 <CLogger::Write(char const*)>:
   1fb10:	e92d4070 	push	{r4, r5, r6, lr}
   1fb14:	e1a04000 	mov	r4, r0
   1fb18:	e1a00001 	mov	r0, r1
   1fb1c:	e1a06001 	mov	r6, r1
   1fb20:	eb001b5e 	bl	268a0 <strlen>
   1fb24:	e1a05000 	mov	r5, r0
   1fb28:	e5940008 	ldr	r0, [r4, #8]
   1fb2c:	e1a02005 	mov	r2, r5
   1fb30:	e5903000 	ldr	r3, [r0]
   1fb34:	e1a01006 	mov	r1, r6
   1fb38:	e593300c 	ldr	r3, [r3, #12]
   1fb3c:	e12fff33 	blx	r3
   1fb40:	e5940018 	ldr	r0, [r4, #24]
   1fb44:	e3500000 	cmp	r0, #0
   1fb48:	1a00001e 	bne	1fbc8 <CLogger::Write(char const*)+0xb8>
   1fb4c:	e3550000 	cmp	r5, #0
   1fb50:	e2450001 	sub	r0, r5, #1
   1fb54:	08bd8070 	popeq	{r4, r5, r6, pc}
   1fb58:	e1a0e006 	mov	lr, r6
   1fb5c:	e59f1078 	ldr	r1, [pc, #120]	; 1fbdc <CLogger::Write(char const*)+0xcc>
   1fb60:	e0de50d1 	ldrsb	r5, [lr], #1
   1fb64:	e26ec001 	rsb	ip, lr, #1
   1fb68:	e355000d 	cmp	r5, #13
   1fb6c:	e086c00c 	add	ip, r6, ip
   1fb70:	0a000009 	beq	1fb9c <CLogger::Write(char const*)+0x8c>
   1fb74:	e5942010 	ldr	r2, [r4, #16]
   1fb78:	e594300c 	ldr	r3, [r4, #12]
   1fb7c:	e7c35002 	strb	r5, [r3, r2]
   1fb80:	e5943010 	ldr	r3, [r4, #16]
   1fb84:	e5942014 	ldr	r2, [r4, #20]
   1fb88:	e2833001 	add	r3, r3, #1
   1fb8c:	e0033001 	and	r3, r3, r1
   1fb90:	e1530002 	cmp	r3, r2
   1fb94:	e5843010 	str	r3, [r4, #16]
   1fb98:	0a000006 	beq	1fbb8 <CLogger::Write(char const*)+0xa8>
   1fb9c:	e17c0000 	cmn	ip, r0
   1fba0:	1affffee 	bne	1fb60 <CLogger::Write(char const*)+0x50>
   1fba4:	e5943018 	ldr	r3, [r4, #24]
   1fba8:	e3530000 	cmp	r3, #0
   1fbac:	08bd8070 	popeq	{r4, r5, r6, pc}
   1fbb0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1fbb4:	ea0022e4 	b	2874c <LeaveCritical>
   1fbb8:	e2433001 	sub	r3, r3, #1
   1fbbc:	e0033001 	and	r3, r3, r1
   1fbc0:	e5843010 	str	r3, [r4, #16]
   1fbc4:	eafffff6 	b	1fba4 <CLogger::Write(char const*)+0x94>
   1fbc8:	eb0022b5 	bl	286a4 <EnterCritical>
   1fbcc:	e3550000 	cmp	r5, #0
   1fbd0:	e2450001 	sub	r0, r5, #1
   1fbd4:	1affffdf 	bne	1fb58 <CLogger::Write(char const*)+0x48>
   1fbd8:	eafffff1 	b	1fba4 <CLogger::Write(char const*)+0x94>
   1fbdc:	00003fff 	.word	0x00003fff

0001fbe0 <CLogger::Read(void*, unsigned int)>:
   1fbe0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1fbe4:	e1a04000 	mov	r4, r0
   1fbe8:	e5900018 	ldr	r0, [r0, #24]
   1fbec:	e1a05001 	mov	r5, r1
   1fbf0:	e3500000 	cmp	r0, #0
   1fbf4:	e1a06002 	mov	r6, r2
   1fbf8:	1a00001f 	bne	1fc7c <CLogger::Read(void*, unsigned int)+0x9c>
   1fbfc:	e1c421d0 	ldrd	r2, [r4, #16]
   1fc00:	e1520003 	cmp	r2, r3
   1fc04:	0a000024 	beq	1fc9c <CLogger::Read(void*, unsigned int)+0xbc>
   1fc08:	e1a07006 	mov	r7, r6
   1fc0c:	e3a0c000 	mov	ip, #0
   1fc10:	e59f208c 	ldr	r2, [pc, #140]	; 1fca4 <CLogger::Read(void*, unsigned int)+0xc4>
   1fc14:	ea00000a 	b	1fc44 <CLogger::Read(void*, unsigned int)+0x64>
   1fc18:	e594100c 	ldr	r1, [r4, #12]
   1fc1c:	e28cc001 	add	ip, ip, #1
   1fc20:	e19130d3 	ldrsb	r3, [r1, r3]
   1fc24:	e4c53001 	strb	r3, [r5], #1
   1fc28:	e5943014 	ldr	r3, [r4, #20]
   1fc2c:	e5941010 	ldr	r1, [r4, #16]
   1fc30:	e2833001 	add	r3, r3, #1
   1fc34:	e0033002 	and	r3, r3, r2
   1fc38:	e1530001 	cmp	r3, r1
   1fc3c:	e5843014 	str	r3, [r4, #20]
   1fc40:	0a000006 	beq	1fc60 <CLogger::Read(void*, unsigned int)+0x80>
   1fc44:	e15c0006 	cmp	ip, r6
   1fc48:	1afffff2 	bne	1fc18 <CLogger::Read(void*, unsigned int)+0x38>
   1fc4c:	e5943018 	ldr	r3, [r4, #24]
   1fc50:	e3530000 	cmp	r3, #0
   1fc54:	1a000005 	bne	1fc70 <CLogger::Read(void*, unsigned int)+0x90>
   1fc58:	e1a00007 	mov	r0, r7
   1fc5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1fc60:	e5943018 	ldr	r3, [r4, #24]
   1fc64:	e1a0700c 	mov	r7, ip
   1fc68:	e3530000 	cmp	r3, #0
   1fc6c:	0afffff9 	beq	1fc58 <CLogger::Read(void*, unsigned int)+0x78>
   1fc70:	eb0022b5 	bl	2874c <LeaveCritical>
   1fc74:	e1a00007 	mov	r0, r7
   1fc78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1fc7c:	eb002288 	bl	286a4 <EnterCritical>
   1fc80:	e1c421d0 	ldrd	r2, [r4, #16]
   1fc84:	e1520003 	cmp	r2, r3
   1fc88:	1affffde 	bne	1fc08 <CLogger::Read(void*, unsigned int)+0x28>
   1fc8c:	e5943018 	ldr	r3, [r4, #24]
   1fc90:	e3530000 	cmp	r3, #0
   1fc94:	0a000000 	beq	1fc9c <CLogger::Read(void*, unsigned int)+0xbc>
   1fc98:	eb0022ab 	bl	2874c <LeaveCritical>
   1fc9c:	e3e07000 	mvn	r7, #0
   1fca0:	eaffffec 	b	1fc58 <CLogger::Read(void*, unsigned int)+0x78>
   1fca4:	00003fff 	.word	0x00003fff

0001fca8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   1fca8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1fcac:	e1a04000 	mov	r4, r0
   1fcb0:	e24dd010 	sub	sp, sp, #16
   1fcb4:	e3a00f42 	mov	r0, #264	; 0x108
   1fcb8:	e1a06003 	mov	r6, r3
   1fcbc:	e1a07002 	mov	r7, r2
   1fcc0:	e58d1004 	str	r1, [sp, #4]
   1fcc4:	eb001ed6 	bl	27824 <operator new(unsigned int)>
   1fcc8:	e3a08000 	mov	r8, #0
   1fccc:	e1a05000 	mov	r5, r0
   1fcd0:	e3a02032 	mov	r2, #50	; 0x32
   1fcd4:	e59d1004 	ldr	r1, [sp, #4]
   1fcd8:	e4c07001 	strb	r7, [r0], #1
   1fcdc:	eb001b9e 	bl	26b5c <strncpy>
   1fce0:	e1a01006 	mov	r1, r6
   1fce4:	e3a020c8 	mov	r2, #200	; 0xc8
   1fce8:	e2850033 	add	r0, r5, #51	; 0x33
   1fcec:	e5c58032 	strb	r8, [r5, #50]	; 0x32
   1fcf0:	eb001b99 	bl	26b5c <strncpy>
   1fcf4:	e5940004 	ldr	r0, [r4, #4]
   1fcf8:	e5c580fa 	strb	r8, [r5, #250]	; 0xfa
   1fcfc:	e1500008 	cmp	r0, r8
   1fd00:	0a000004 	beq	1fd18 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   1fd04:	e28d200c 	add	r2, sp, #12
   1fd08:	e28d1008 	add	r1, sp, #8
   1fd0c:	eb0017dd 	bl	25c88 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   1fd10:	e1500008 	cmp	r0, r8
   1fd14:	1a000038 	bne	1fdfc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
   1fd18:	e3a03000 	mov	r3, #0
   1fd1c:	e58530fc 	str	r3, [r5, #252]	; 0xfc
   1fd20:	e5853100 	str	r3, [r5, #256]	; 0x100
   1fd24:	e5853104 	str	r3, [r5, #260]	; 0x104
   1fd28:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   1fd2c:	e3500000 	cmp	r0, #0
   1fd30:	1a00002e 	bne	1fdf0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x148>
   1fd34:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   1fd38:	e0841103 	add	r1, r4, r3, lsl #2
   1fd3c:	e3530031 	cmp	r3, #49	; 0x31
   1fd40:	e581501c 	str	r5, [r1, #28]
   1fd44:	e2831001 	add	r1, r3, #1
   1fd48:	0a00001c 	beq	1fdc0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
   1fd4c:	e59420e8 	ldr	r2, [r4, #232]	; 0xe8
   1fd50:	e58410e4 	str	r1, [r4, #228]	; 0xe4
   1fd54:	e1510002 	cmp	r1, r2
   1fd58:	0a000007 	beq	1fd7c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>
   1fd5c:	e3500000 	cmp	r0, #0
   1fd60:	1a000014 	bne	1fdb8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x110>
   1fd64:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   1fd68:	e3530000 	cmp	r3, #0
   1fd6c:	0a000000 	beq	1fd74 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   1fd70:	e12fff33 	blx	r3
   1fd74:	e28dd010 	add	sp, sp, #16
   1fd78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1fd7c:	e0843103 	add	r3, r4, r3, lsl #2
   1fd80:	e3510031 	cmp	r1, #49	; 0x31
   1fd84:	e5935020 	ldr	r5, [r3, #32]
   1fd88:	03a03000 	moveq	r3, #0
   1fd8c:	e2811001 	add	r1, r1, #1
   1fd90:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   1fd94:	1a000010 	bne	1fddc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x134>
   1fd98:	e3500000 	cmp	r0, #0
   1fd9c:	1a000011 	bne	1fde8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>
   1fda0:	e3550000 	cmp	r5, #0
   1fda4:	0affffee 	beq	1fd64 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   1fda8:	e1a00005 	mov	r0, r5
   1fdac:	e3a01f42 	mov	r1, #264	; 0x108
   1fdb0:	eb001ea9 	bl	2785c <operator delete(void*, unsigned int)>
   1fdb4:	eaffffea 	b	1fd64 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   1fdb8:	eb002263 	bl	2874c <LeaveCritical>
   1fdbc:	eaffffe8 	b	1fd64 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   1fdc0:	e3a01000 	mov	r1, #0
   1fdc4:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   1fdc8:	e58410e4 	str	r1, [r4, #228]	; 0xe4
   1fdcc:	e1530001 	cmp	r3, r1
   1fdd0:	1affffe1 	bne	1fd5c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
   1fdd4:	e3a01001 	mov	r1, #1
   1fdd8:	e594501c 	ldr	r5, [r4, #28]
   1fddc:	e3500000 	cmp	r0, #0
   1fde0:	e58410e8 	str	r1, [r4, #232]	; 0xe8
   1fde4:	0affffed 	beq	1fda0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   1fde8:	eb002257 	bl	2874c <LeaveCritical>
   1fdec:	eaffffeb 	b	1fda0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   1fdf0:	eb00222b 	bl	286a4 <EnterCritical>
   1fdf4:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
   1fdf8:	eaffffcd 	b	1fd34 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   1fdfc:	e59d300c 	ldr	r3, [sp, #12]
   1fe00:	e59f1020 	ldr	r1, [pc, #32]	; 1fe28 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x180>
   1fe04:	e59d2008 	ldr	r2, [sp, #8]
   1fe08:	e0831391 	umull	r1, r3, r1, r3
   1fe0c:	e1a036a3 	lsr	r3, r3, #13
   1fe10:	e5940004 	ldr	r0, [r4, #4]
   1fe14:	e5853100 	str	r3, [r5, #256]	; 0x100
   1fe18:	e58520fc 	str	r2, [r5, #252]	; 0xfc
   1fe1c:	eb00176b 	bl	25bd0 <CTimer::GetTimeZone() const>
   1fe20:	e5850104 	str	r0, [r5, #260]	; 0x104
   1fe24:	eaffffbf 	b	1fd28 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>
   1fe28:	d1b71759 	.word	0xd1b71759

0001fe2c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   1fe2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1fe30:	e1a04000 	mov	r4, r0
   1fe34:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   1fe38:	e1a08001 	mov	r8, r1
   1fe3c:	e3500000 	cmp	r0, #0
   1fe40:	e1a06002 	mov	r6, r2
   1fe44:	e1a07003 	mov	r7, r3
   1fe48:	1a000022 	bne	1fed8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
   1fe4c:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
   1fe50:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   1fe54:	e15c0003 	cmp	ip, r3
   1fe58:	0a000028 	beq	1ff00 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   1fe5c:	e35c0031 	cmp	ip, #49	; 0x31
   1fe60:	e084310c 	add	r3, r4, ip, lsl #2
   1fe64:	e593501c 	ldr	r5, [r3, #28]
   1fe68:	03a03000 	moveq	r3, #0
   1fe6c:	e28cc001 	add	ip, ip, #1
   1fe70:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
   1fe74:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   1fe78:	e3500000 	cmp	r0, #0
   1fe7c:	1a000021 	bne	1ff08 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   1fe80:	e1a01005 	mov	r1, r5
   1fe84:	e4d13001 	ldrb	r3, [r1], #1
   1fe88:	e1a00006 	mov	r0, r6
   1fe8c:	e5c83000 	strb	r3, [r8]
   1fe90:	eb001b26 	bl	26b30 <strcpy>
   1fe94:	e2851033 	add	r1, r5, #51	; 0x33
   1fe98:	e1a00007 	mov	r0, r7
   1fe9c:	eb001b23 	bl	26b30 <strcpy>
   1fea0:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
   1fea4:	e59d1018 	ldr	r1, [sp, #24]
   1fea8:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   1feac:	e5812000 	str	r2, [r1]
   1feb0:	e59d201c 	ldr	r2, [sp, #28]
   1feb4:	e1a00005 	mov	r0, r5
   1feb8:	e5823000 	str	r3, [r2]
   1febc:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   1fec0:	e59d2020 	ldr	r2, [sp, #32]
   1fec4:	e3a01f42 	mov	r1, #264	; 0x108
   1fec8:	e5823000 	str	r3, [r2]
   1fecc:	eb001e62 	bl	2785c <operator delete(void*, unsigned int)>
   1fed0:	e3a00001 	mov	r0, #1
   1fed4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1fed8:	eb0021f1 	bl	286a4 <EnterCritical>
   1fedc:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
   1fee0:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   1fee4:	e153000c 	cmp	r3, ip
   1fee8:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   1feec:	1affffda 	bne	1fe5c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
   1fef0:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   1fef4:	e3530000 	cmp	r3, #0
   1fef8:	0a000000 	beq	1ff00 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   1fefc:	eb002212 	bl	2874c <LeaveCritical>
   1ff00:	e3a00000 	mov	r0, #0
   1ff04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ff08:	eb00220f 	bl	2874c <LeaveCritical>
   1ff0c:	eaffffdb 	b	1fe80 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0001ff10 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   1ff10:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   1ff14:	e12fff1e 	bx	lr

0001ff18 <CLogger::RegisterPanicHandler(void (*)())>:
   1ff18:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   1ff1c:	e12fff1e 	bx	lr

0001ff20 <CMachineInfo::CMachineInfo()>:
   1ff20:	e92d4810 	push	{r4, fp, lr}
   1ff24:	e28db008 	add	fp, sp, #8
   1ff28:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   1ff2c:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   1ff30:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ff34:	e3a02000 	mov	r2, #0
   1ff38:	e5832000 	str	r2, [r3]
   1ff3c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ff40:	e3a02012 	mov	r2, #18
   1ff44:	e5c32004 	strb	r2, [r3, #4]
   1ff48:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ff4c:	e3a02000 	mov	r2, #0
   1ff50:	e5832008 	str	r2, [r3, #8]
   1ff54:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ff58:	e3a02000 	mov	r2, #0
   1ff5c:	e583200c 	str	r2, [r3, #12]
   1ff60:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ff64:	e3a02004 	mov	r2, #4
   1ff68:	e5c32010 	strb	r2, [r3, #16]
   1ff6c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ff70:	e3a02000 	mov	r2, #0
   1ff74:	e5832014 	str	r2, [r3, #20]
   1ff78:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ff7c:	e59f23b4 	ldr	r2, [pc, #948]	; 20338 <CMachineInfo::CMachineInfo()+0x418>
   1ff80:	e1c321b8 	strh	r2, [r3, #24]
   1ff84:	e59f33b0 	ldr	r3, [pc, #944]	; 2033c <CMachineInfo::CMachineInfo()+0x41c>
   1ff88:	e5933000 	ldr	r3, [r3]
   1ff8c:	e3530000 	cmp	r3, #0
   1ff90:	0a00001e 	beq	20010 <CMachineInfo::CMachineInfo()+0xf0>
   1ff94:	e59f33a0 	ldr	r3, [pc, #928]	; 2033c <CMachineInfo::CMachineInfo()+0x41c>
   1ff98:	e5933000 	ldr	r3, [r3]
   1ff9c:	e5932000 	ldr	r2, [r3]
   1ffa0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ffa4:	e5832000 	str	r2, [r3]
   1ffa8:	e59f338c 	ldr	r3, [pc, #908]	; 2033c <CMachineInfo::CMachineInfo()+0x41c>
   1ffac:	e5933000 	ldr	r3, [r3]
   1ffb0:	e5d32004 	ldrb	r2, [r3, #4]
   1ffb4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ffb8:	e5c32004 	strb	r2, [r3, #4]
   1ffbc:	e59f3378 	ldr	r3, [pc, #888]	; 2033c <CMachineInfo::CMachineInfo()+0x41c>
   1ffc0:	e5933000 	ldr	r3, [r3]
   1ffc4:	e5932008 	ldr	r2, [r3, #8]
   1ffc8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ffcc:	e5832008 	str	r2, [r3, #8]
   1ffd0:	e59f3364 	ldr	r3, [pc, #868]	; 2033c <CMachineInfo::CMachineInfo()+0x41c>
   1ffd4:	e5933000 	ldr	r3, [r3]
   1ffd8:	e593200c 	ldr	r2, [r3, #12]
   1ffdc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1ffe0:	e583200c 	str	r2, [r3, #12]
   1ffe4:	e59f3350 	ldr	r3, [pc, #848]	; 2033c <CMachineInfo::CMachineInfo()+0x41c>
   1ffe8:	e5933000 	ldr	r3, [r3]
   1ffec:	e5d32010 	ldrb	r2, [r3, #16]
   1fff0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   1fff4:	e5c32010 	strb	r2, [r3, #16]
   1fff8:	e59f333c 	ldr	r3, [pc, #828]	; 2033c <CMachineInfo::CMachineInfo()+0x41c>
   1fffc:	e5933000 	ldr	r3, [r3]
   20000:	e5932014 	ldr	r2, [r3, #20]
   20004:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   20008:	e5832014 	str	r2, [r3, #20]
   2000c:	ea0000c5 	b	20328 <CMachineInfo::CMachineInfo()+0x408>
   20010:	e59f2324 	ldr	r2, [pc, #804]	; 2033c <CMachineInfo::CMachineInfo()+0x41c>
   20014:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   20018:	e5823000 	str	r3, [r2]
   2001c:	e24b3020 	sub	r3, fp, #32
   20020:	e3a01001 	mov	r1, #1
   20024:	e1a00003 	mov	r0, r3
   20028:	ebfff5d5 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2002c:	e24b2030 	sub	r2, fp, #48	; 0x30
   20030:	e24b0020 	sub	r0, fp, #32
   20034:	e3a03000 	mov	r3, #0
   20038:	e58d3000 	str	r3, [sp]
   2003c:	e3a03010 	mov	r3, #16
   20040:	e59f12f8 	ldr	r1, [pc, #760]	; 20340 <CMachineInfo::CMachineInfo()+0x420>
   20044:	ebfff5da 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   20048:	e1a03000 	mov	r3, r0
   2004c:	e3530000 	cmp	r3, #0
   20050:	0a000003 	beq	20064 <CMachineInfo::CMachineInfo()+0x144>
   20054:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   20058:	e6ff2073 	uxth	r2, r3
   2005c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   20060:	e1c321b8 	strh	r2, [r3, #24]
   20064:	e24b2040 	sub	r2, fp, #64	; 0x40
   20068:	e24b0020 	sub	r0, fp, #32
   2006c:	e3a03000 	mov	r3, #0
   20070:	e58d3000 	str	r3, [sp]
   20074:	e3a03010 	mov	r3, #16
   20078:	e59f12c4 	ldr	r1, [pc, #708]	; 20344 <CMachineInfo::CMachineInfo()+0x424>
   2007c:	ebfff5cc 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   20080:	e1a03000 	mov	r3, r0
   20084:	e2233001 	eor	r3, r3, #1
   20088:	e6ef3073 	uxtb	r3, r3
   2008c:	e3530000 	cmp	r3, #0
   20090:	0a000001 	beq	2009c <CMachineInfo::CMachineInfo()+0x17c>
   20094:	e3a04000 	mov	r4, #0
   20098:	ea00009e 	b	20318 <CMachineInfo::CMachineInfo()+0x3f8>
   2009c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   200a0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   200a4:	e5832000 	str	r2, [r3]
   200a8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   200ac:	e5933000 	ldr	r3, [r3]
   200b0:	e2033502 	and	r3, r3, #8388608	; 0x800000
   200b4:	e3530000 	cmp	r3, #0
   200b8:	0a000064 	beq	20250 <CMachineInfo::CMachineInfo()+0x330>
   200bc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   200c0:	e5933000 	ldr	r3, [r3]
   200c4:	e1a03223 	lsr	r3, r3, #4
   200c8:	e6ef3073 	uxtb	r3, r3
   200cc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   200d0:	e3a03000 	mov	r3, #0
   200d4:	e50b3010 	str	r3, [fp, #-16]
   200d8:	e51b3010 	ldr	r3, [fp, #-16]
   200dc:	e353000f 	cmp	r3, #15
   200e0:	8a00000f 	bhi	20124 <CMachineInfo::CMachineInfo()+0x204>
   200e4:	e59f125c 	ldr	r1, [pc, #604]	; 20348 <CMachineInfo::CMachineInfo()+0x428>
   200e8:	e51b2010 	ldr	r2, [fp, #-16]
   200ec:	e1a03002 	mov	r3, r2
   200f0:	e1a03083 	lsl	r3, r3, #1
   200f4:	e0833002 	add	r3, r3, r2
   200f8:	e1a03103 	lsl	r3, r3, #2
   200fc:	e0813003 	add	r3, r1, r3
   20100:	e5933000 	ldr	r3, [r3]
   20104:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   20108:	e1520003 	cmp	r2, r3
   2010c:	0a000003 	beq	20120 <CMachineInfo::CMachineInfo()+0x200>
   20110:	e51b3010 	ldr	r3, [fp, #-16]
   20114:	e2833001 	add	r3, r3, #1
   20118:	e50b3010 	str	r3, [fp, #-16]
   2011c:	eaffffed 	b	200d8 <CMachineInfo::CMachineInfo()+0x1b8>
   20120:	e320f000 	nop	{0}
   20124:	e51b3010 	ldr	r3, [fp, #-16]
   20128:	e353000f 	cmp	r3, #15
   2012c:	9a000001 	bls	20138 <CMachineInfo::CMachineInfo()+0x218>
   20130:	e3a04000 	mov	r4, #0
   20134:	ea000077 	b	20318 <CMachineInfo::CMachineInfo()+0x3f8>
   20138:	e59f1208 	ldr	r1, [pc, #520]	; 20348 <CMachineInfo::CMachineInfo()+0x428>
   2013c:	e51b2010 	ldr	r2, [fp, #-16]
   20140:	e1a03002 	mov	r3, r2
   20144:	e1a03083 	lsl	r3, r3, #1
   20148:	e0833002 	add	r3, r3, r2
   2014c:	e1a03103 	lsl	r3, r3, #2
   20150:	e0813003 	add	r3, r1, r3
   20154:	e2833004 	add	r3, r3, #4
   20158:	e5d32000 	ldrb	r2, [r3]
   2015c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   20160:	e5c32004 	strb	r2, [r3, #4]
   20164:	e59f11dc 	ldr	r1, [pc, #476]	; 20348 <CMachineInfo::CMachineInfo()+0x428>
   20168:	e51b2010 	ldr	r2, [fp, #-16]
   2016c:	e1a03002 	mov	r3, r2
   20170:	e1a03083 	lsl	r3, r3, #1
   20174:	e0833002 	add	r3, r3, r2
   20178:	e1a03103 	lsl	r3, r3, #2
   2017c:	e0813003 	add	r3, r1, r3
   20180:	e2833008 	add	r3, r3, #8
   20184:	e5932000 	ldr	r2, [r3]
   20188:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2018c:	e5832008 	str	r2, [r3, #8]
   20190:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   20194:	e5933000 	ldr	r3, [r3]
   20198:	e203300f 	and	r3, r3, #15
   2019c:	e2832001 	add	r2, r3, #1
   201a0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   201a4:	e583200c 	str	r2, [r3, #12]
   201a8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   201ac:	e5933000 	ldr	r3, [r3]
   201b0:	e1a03623 	lsr	r3, r3, #12
   201b4:	e6ef3073 	uxtb	r3, r3
   201b8:	e203300f 	and	r3, r3, #15
   201bc:	e6ef2073 	uxtb	r2, r3
   201c0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   201c4:	e5c32010 	strb	r2, [r3, #16]
   201c8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   201cc:	e5933000 	ldr	r3, [r3]
   201d0:	e1a03a23 	lsr	r3, r3, #20
   201d4:	e2033007 	and	r3, r3, #7
   201d8:	e3a02c01 	mov	r2, #256	; 0x100
   201dc:	e1a03312 	lsl	r3, r2, r3
   201e0:	e1a02003 	mov	r2, r3
   201e4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   201e8:	e5832014 	str	r2, [r3, #20]
   201ec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   201f0:	e5d33010 	ldrb	r3, [r3, #16]
   201f4:	e3530003 	cmp	r3, #3
   201f8:	9a000002 	bls	20208 <CMachineInfo::CMachineInfo()+0x2e8>
   201fc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   20200:	e3a02004 	mov	r2, #4
   20204:	e5c32010 	strb	r2, [r3, #16]
   20208:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2020c:	e5d33004 	ldrb	r3, [r3, #4]
   20210:	e3530003 	cmp	r3, #3
   20214:	1a00003e 	bne	20314 <CMachineInfo::CMachineInfo()+0x3f4>
   20218:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2021c:	e5933014 	ldr	r3, [r3, #20]
   20220:	e3530c01 	cmp	r3, #256	; 0x100
   20224:	1a00003a 	bne	20314 <CMachineInfo::CMachineInfo()+0x3f4>
   20228:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2022c:	e593300c 	ldr	r3, [r3, #12]
   20230:	e3530001 	cmp	r3, #1
   20234:	1a000001 	bne	20240 <CMachineInfo::CMachineInfo()+0x320>
   20238:	e3a02001 	mov	r2, #1
   2023c:	ea000000 	b	20244 <CMachineInfo::CMachineInfo()+0x324>
   20240:	e3a02002 	mov	r2, #2
   20244:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   20248:	e5c32004 	strb	r2, [r3, #4]
   2024c:	ea000030 	b	20314 <CMachineInfo::CMachineInfo()+0x3f4>
   20250:	e3a03000 	mov	r3, #0
   20254:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   20258:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2025c:	e3530010 	cmp	r3, #16
   20260:	8a00000b 	bhi	20294 <CMachineInfo::CMachineInfo()+0x374>
   20264:	e59f20e0 	ldr	r2, [pc, #224]	; 2034c <CMachineInfo::CMachineInfo()+0x42c>
   20268:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2026c:	e7922203 	ldr	r2, [r2, r3, lsl #4]
   20270:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   20274:	e5933000 	ldr	r3, [r3]
   20278:	e1520003 	cmp	r2, r3
   2027c:	0a000003 	beq	20290 <CMachineInfo::CMachineInfo()+0x370>
   20280:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20284:	e2833001 	add	r3, r3, #1
   20288:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2028c:	eafffff1 	b	20258 <CMachineInfo::CMachineInfo()+0x338>
   20290:	e320f000 	nop	{0}
   20294:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20298:	e3530010 	cmp	r3, #16
   2029c:	9a000001 	bls	202a8 <CMachineInfo::CMachineInfo()+0x388>
   202a0:	e3a04000 	mov	r4, #0
   202a4:	ea00001b 	b	20318 <CMachineInfo::CMachineInfo()+0x3f8>
   202a8:	e59f209c 	ldr	r2, [pc, #156]	; 2034c <CMachineInfo::CMachineInfo()+0x42c>
   202ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   202b0:	e1a03203 	lsl	r3, r3, #4
   202b4:	e0823003 	add	r3, r2, r3
   202b8:	e5d32004 	ldrb	r2, [r3, #4]
   202bc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   202c0:	e5c32004 	strb	r2, [r3, #4]
   202c4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   202c8:	e3a02001 	mov	r2, #1
   202cc:	e5832008 	str	r2, [r3, #8]
   202d0:	e59f2074 	ldr	r2, [pc, #116]	; 2034c <CMachineInfo::CMachineInfo()+0x42c>
   202d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   202d8:	e1a03203 	lsl	r3, r3, #4
   202dc:	e0823003 	add	r3, r2, r3
   202e0:	e5932008 	ldr	r2, [r3, #8]
   202e4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   202e8:	e583200c 	str	r2, [r3, #12]
   202ec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   202f0:	e3a02000 	mov	r2, #0
   202f4:	e5c32010 	strb	r2, [r3, #16]
   202f8:	e59f204c 	ldr	r2, [pc, #76]	; 2034c <CMachineInfo::CMachineInfo()+0x42c>
   202fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20300:	e1a03203 	lsl	r3, r3, #4
   20304:	e0823003 	add	r3, r2, r3
   20308:	e593200c 	ldr	r2, [r3, #12]
   2030c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   20310:	e5832014 	str	r2, [r3, #20]
   20314:	e3a04001 	mov	r4, #1
   20318:	e24b3020 	sub	r3, fp, #32
   2031c:	e1a00003 	mov	r0, r3
   20320:	ebfff51e 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   20324:	e3540001 	cmp	r4, #1
   20328:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2032c:	e1a00003 	mov	r0, r3
   20330:	e24bd008 	sub	sp, fp, #8
   20334:	e8bd8810 	pop	{r4, fp, pc}
   20338:	00001f35 	.word	0x00001f35
   2033c:	00034c2c 	.word	0x00034c2c
   20340:	00060001 	.word	0x00060001
   20344:	00010002 	.word	0x00010002
   20348:	00034928 	.word	0x00034928
   2034c:	00034818 	.word	0x00034818

00020350 <CMachineInfo::~CMachineInfo()>:
   20350:	e59f3010 	ldr	r3, [pc, #16]	; 20368 <CMachineInfo::~CMachineInfo()+0x18>
   20354:	e5932000 	ldr	r2, [r3]
   20358:	e1520000 	cmp	r2, r0
   2035c:	03a02000 	moveq	r2, #0
   20360:	05832000 	streq	r2, [r3]
   20364:	e12fff1e 	bx	lr
   20368:	00034c2c 	.word	0x00034c2c

0002036c <CMachineInfo::GetMachineModel() const>:
   2036c:	e5d00004 	ldrb	r0, [r0, #4]
   20370:	e12fff1e 	bx	lr

00020374 <CMachineInfo::GetMachineName() const>:
   20374:	e5d02004 	ldrb	r2, [r0, #4]
   20378:	e59f3008 	ldr	r3, [pc, #8]	; 20388 <CMachineInfo::GetMachineName() const+0x14>
   2037c:	e0833102 	add	r3, r3, r2, lsl #2
   20380:	e59301d0 	ldr	r0, [r3, #464]	; 0x1d0
   20384:	e12fff1e 	bx	lr
   20388:	00034818 	.word	0x00034818

0002038c <CMachineInfo::GetModelMajor() const>:
   2038c:	e5900008 	ldr	r0, [r0, #8]
   20390:	e12fff1e 	bx	lr

00020394 <CMachineInfo::GetModelRevision() const>:
   20394:	e590000c 	ldr	r0, [r0, #12]
   20398:	e12fff1e 	bx	lr

0002039c <CMachineInfo::GetSoCType() const>:
   2039c:	e5d00010 	ldrb	r0, [r0, #16]
   203a0:	e12fff1e 	bx	lr

000203a4 <CMachineInfo::GetRAMSize() const>:
   203a4:	e5900014 	ldr	r0, [r0, #20]
   203a8:	e12fff1e 	bx	lr

000203ac <CMachineInfo::GetSoCName() const>:
   203ac:	e5d02010 	ldrb	r2, [r0, #16]
   203b0:	e59f3008 	ldr	r3, [pc, #8]	; 203c0 <CMachineInfo::GetSoCName() const+0x14>
   203b4:	e0833102 	add	r3, r3, r2, lsl #2
   203b8:	e593021c 	ldr	r0, [r3, #540]	; 0x21c
   203bc:	e12fff1e 	bx	lr
   203c0:	00034818 	.word	0x00034818

000203c4 <CMachineInfo::GetRevisionRaw() const>:
   203c4:	e5900000 	ldr	r0, [r0]
   203c8:	e12fff1e 	bx	lr

000203cc <CMachineInfo::GetActLEDInfo() const>:
   203cc:	e5d02004 	ldrb	r2, [r0, #4]
   203d0:	e59f3008 	ldr	r3, [pc, #8]	; 203e0 <CMachineInfo::GetActLEDInfo() const+0x14>
   203d4:	e0833102 	add	r3, r3, r2, lsl #2
   203d8:	e5930230 	ldr	r0, [r3, #560]	; 0x230
   203dc:	e12fff1e 	bx	lr
   203e0:	00034818 	.word	0x00034818

000203e4 <CMachineInfo::GetClockRate(unsigned int) const>:
   203e4:	e92d4030 	push	{r4, r5, lr}
   203e8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   203ec:	e1a04001 	mov	r4, r1
   203f0:	e1a05000 	mov	r5, r0
   203f4:	e3a01000 	mov	r1, #0
   203f8:	e28d000c 	add	r0, sp, #12
   203fc:	ebfff4e0 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   20400:	e3a03004 	mov	r3, #4
   20404:	e58d3000 	str	r3, [sp]
   20408:	e3a03014 	mov	r3, #20
   2040c:	e59f1078 	ldr	r1, [pc, #120]	; 2048c <CMachineInfo::GetClockRate(unsigned int) const+0xa8>
   20410:	e28d000c 	add	r0, sp, #12
   20414:	e08d2003 	add	r2, sp, r3
   20418:	e58d4020 	str	r4, [sp, #32]
   2041c:	ebfff4e4 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   20420:	e3500000 	cmp	r0, #0
   20424:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
   20428:	1a00000a 	bne	20458 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   2042c:	e3540002 	cmp	r4, #2
   20430:	0a000013 	beq	20484 <CMachineInfo::GetClockRate(unsigned int) const+0xa0>
   20434:	e3540004 	cmp	r4, #4
   20438:	0a00000b 	beq	2046c <CMachineInfo::GetClockRate(unsigned int) const+0x88>
   2043c:	e3540001 	cmp	r4, #1
   20440:	0a000003 	beq	20454 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   20444:	e59f1044 	ldr	r1, [pc, #68]	; 20490 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   20448:	e59f2044 	ldr	r2, [pc, #68]	; 20494 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
   2044c:	e2810010 	add	r0, r1, #16
   20450:	ebfff4aa 	bl	1d700 <assertion_failed>
   20454:	e59f403c 	ldr	r4, [pc, #60]	; 20498 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
   20458:	e28d000c 	add	r0, sp, #12
   2045c:	ebfff4cf 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   20460:	e1a00004 	mov	r0, r4
   20464:	e28dd02c 	add	sp, sp, #44	; 0x2c
   20468:	e8bd8030 	pop	{r4, r5, pc}
   2046c:	e5952008 	ldr	r2, [r5, #8]
   20470:	e59f3024 	ldr	r3, [pc, #36]	; 2049c <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
   20474:	e3520002 	cmp	r2, #2
   20478:	e59f4020 	ldr	r4, [pc, #32]	; 204a0 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
   2047c:	81a04003 	movhi	r4, r3
   20480:	eafffff4 	b	20458 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   20484:	e59f4018 	ldr	r4, [pc, #24]	; 204a4 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
   20488:	eafffff2 	b	20458 <CMachineInfo::GetClockRate(unsigned int) const+0x74>
   2048c:	00030002 	.word	0x00030002
   20490:	00032258 	.word	0x00032258
   20494:	00000147 	.word	0x00000147
   20498:	05f5e100 	.word	0x05f5e100
   2049c:	11e1a300 	.word	0x11e1a300
   204a0:	0ee6b280 	.word	0x0ee6b280
   204a4:	02dc6c00 	.word	0x02dc6c00

000204a8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   204a8:	e3510036 	cmp	r1, #54	; 0x36
   204ac:	0a000006 	beq	204cc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   204b0:	e3510037 	cmp	r1, #55	; 0x37
   204b4:	1a00000e 	bne	204f4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
   204b8:	e5d03004 	ldrb	r3, [r0, #4]
   204bc:	e3530003 	cmp	r3, #3
   204c0:	83a00028 	movhi	r0, #40	; 0x28
   204c4:	93a0002d 	movls	r0, #45	; 0x2d
   204c8:	e12fff1e 	bx	lr
   204cc:	e5d03004 	ldrb	r3, [r0, #4]
   204d0:	e3530003 	cmp	r3, #3
   204d4:	9a000004 	bls	204ec <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
   204d8:	e5903008 	ldr	r3, [r0, #8]
   204dc:	e3530003 	cmp	r3, #3
   204e0:	33a0002d 	movcc	r0, #45	; 0x2d
   204e4:	23a00029 	movcs	r0, #41	; 0x29
   204e8:	e12fff1e 	bx	lr
   204ec:	e3a00028 	mov	r0, #40	; 0x28
   204f0:	e12fff1e 	bx	lr
   204f4:	e59f100c 	ldr	r1, [pc, #12]	; 20508 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
   204f8:	e3a02d06 	mov	r2, #384	; 0x180
   204fc:	e92d4010 	push	{r4, lr}
   20500:	e2810010 	add	r0, r1, #16
   20504:	ebfff47d 	bl	1d700 <assertion_failed>
   20508:	00032258 	.word	0x00032258

0002050c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   2050c:	e5903008 	ldr	r3, [r0, #8]
   20510:	e3530003 	cmp	r3, #3
   20514:	8a000005 	bhi	20530 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x24>
   20518:	e3510001 	cmp	r1, #1
   2051c:	0a00000b 	beq	20550 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
   20520:	e3510006 	cmp	r1, #6
   20524:	e59f002c 	ldr	r0, [pc, #44]	; 20558 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x4c>
   20528:	13a00000 	movne	r0, #0
   2052c:	e12fff1e 	bx	lr
   20530:	e3510001 	cmp	r1, #1
   20534:	0a000003 	beq	20548 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x3c>
   20538:	e3510006 	cmp	r1, #6
   2053c:	e59f0018 	ldr	r0, [pc, #24]	; 2055c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
   20540:	13a00000 	movne	r0, #0
   20544:	e12fff1e 	bx	lr
   20548:	e59f0010 	ldr	r0, [pc, #16]	; 20560 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x54>
   2054c:	e12fff1e 	bx	lr
   20550:	e59f000c 	ldr	r0, [pc, #12]	; 20564 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x58>
   20554:	e12fff1e 	bx	lr
   20558:	1dcd6500 	.word	0x1dcd6500
   2055c:	2cb41780 	.word	0x2cb41780
   20560:	0337f980 	.word	0x0337f980
   20564:	0124f800 	.word	0x0124f800

00020568 <CMachineInfo::GetDevice(TDeviceId) const>:
   20568:	e3510000 	cmp	r1, #0
   2056c:	1a000003 	bne	20580 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   20570:	e5d00004 	ldrb	r0, [r0, #4]
   20574:	e2500001 	subs	r0, r0, #1
   20578:	13a00001 	movne	r0, #1
   2057c:	e12fff1e 	bx	lr
   20580:	e59f100c 	ldr	r1, [pc, #12]	; 20594 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
   20584:	e92d4010 	push	{r4, lr}
   20588:	e59f2008 	ldr	r2, [pc, #8]	; 20598 <CMachineInfo::GetDevice(TDeviceId) const+0x30>
   2058c:	e2810010 	add	r0, r1, #16
   20590:	ebfff45a 	bl	1d700 <assertion_failed>
   20594:	00032258 	.word	0x00032258
   20598:	000001bb 	.word	0x000001bb

0002059c <CMachineInfo::ArePWMChannelsSwapped() const>:
   2059c:	e5d03004 	ldrb	r3, [r0, #4]
   205a0:	e2430006 	sub	r0, r3, #6
   205a4:	e3500001 	cmp	r0, #1
   205a8:	83530003 	cmphi	r3, #3
   205ac:	83a00001 	movhi	r0, #1
   205b0:	93a00000 	movls	r0, #0
   205b4:	e12fff1e 	bx	lr

000205b8 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   205b8:	e59f30b0 	ldr	r3, [pc, #176]	; 20670 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb8>
   205bc:	e92d4010 	push	{r4, lr}
   205c0:	e5933000 	ldr	r3, [r3]
   205c4:	ea000002 	b	205d4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>
   205c8:	e1530000 	cmp	r3, r0
   205cc:	0a000006 	beq	205ec <CMachineInfo::AllocateDMAChannel(unsigned int)+0x34>
   205d0:	e1a00003 	mov	r0, r3
   205d4:	e3530000 	cmp	r3, #0
   205d8:	1afffffa 	bne	205c8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x10>
   205dc:	e59f1090 	ldr	r1, [pc, #144]	; 20674 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   205e0:	e59f2090 	ldr	r2, [pc, #144]	; 20678 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   205e4:	e2810014 	add	r0, r1, #20
   205e8:	ebfff444 	bl	1d700 <assertion_failed>
   205ec:	e3d1200f 	bics	r2, r1, #15
   205f0:	1a00000a 	bne	20620 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x68>
   205f4:	e351000c 	cmp	r1, #12
   205f8:	8a000018 	bhi	20660 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa8>
   205fc:	e1d321b8 	ldrh	r2, [r3, #24]
   20600:	e1a00152 	asr	r0, r2, r1
   20604:	e3100001 	tst	r0, #1
   20608:	0a00000d 	beq	20644 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x8c>
   2060c:	e3a00001 	mov	r0, #1
   20610:	e1c22110 	bic	r2, r2, r0, lsl r1
   20614:	e1c321b8 	strh	r2, [r3, #24]
   20618:	e1a00001 	mov	r0, r1
   2061c:	e8bd8010 	pop	{r4, pc}
   20620:	e3510081 	cmp	r1, #129	; 0x81
   20624:	03a03006 	moveq	r3, #6
   20628:	13a0300c 	movne	r3, #12
   2062c:	e1d011b8 	ldrh	r1, [r0, #24]
   20630:	e1a02351 	asr	r2, r1, r3
   20634:	e3120001 	tst	r2, #1
   20638:	1a000003 	bne	2064c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>
   2063c:	e2533001 	subs	r3, r3, #1
   20640:	2afffffa 	bcs	20630 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x78>
   20644:	e3a00080 	mov	r0, #128	; 0x80
   20648:	e8bd8010 	pop	{r4, pc}
   2064c:	e3a02001 	mov	r2, #1
   20650:	e1c11312 	bic	r1, r1, r2, lsl r3
   20654:	e1c011b8 	strh	r1, [r0, #24]
   20658:	e1a00003 	mov	r0, r3
   2065c:	e8bd8010 	pop	{r4, pc}
   20660:	e59f100c 	ldr	r1, [pc, #12]	; 20674 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   20664:	e3a02f75 	mov	r2, #468	; 0x1d4
   20668:	e2810024 	add	r0, r1, #36	; 0x24
   2066c:	ebfff423 	bl	1d700 <assertion_failed>
   20670:	00034c2c 	.word	0x00034c2c
   20674:	00032258 	.word	0x00032258
   20678:	000001cb 	.word	0x000001cb

0002067c <CMachineInfo::FreeDMAChannel(unsigned int)>:
   2067c:	e59f3074 	ldr	r3, [pc, #116]	; 206f8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
   20680:	e92d4010 	push	{r4, lr}
   20684:	e5933000 	ldr	r3, [r3]
   20688:	ea000002 	b	20698 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   2068c:	e1530000 	cmp	r3, r0
   20690:	0a000006 	beq	206b0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x34>
   20694:	e1a00003 	mov	r0, r3
   20698:	e3530000 	cmp	r3, #0
   2069c:	1afffffa 	bne	2068c <CMachineInfo::FreeDMAChannel(unsigned int)+0x10>
   206a0:	e59f1054 	ldr	r1, [pc, #84]	; 206fc <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   206a4:	e3a02f7e 	mov	r2, #504	; 0x1f8
   206a8:	e2810014 	add	r0, r1, #20
   206ac:	ebfff413 	bl	1d700 <assertion_failed>
   206b0:	e351000c 	cmp	r1, #12
   206b4:	8a000007 	bhi	206d8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x5c>
   206b8:	e1d321b8 	ldrh	r2, [r3, #24]
   206bc:	e1e00152 	mvn	r0, r2, asr r1
   206c0:	e3100001 	tst	r0, #1
   206c4:	0a000007 	beq	206e8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>
   206c8:	e3a00001 	mov	r0, #1
   206cc:	e1821110 	orr	r1, r2, r0, lsl r1
   206d0:	e1c311b8 	strh	r1, [r3, #24]
   206d4:	e8bd8010 	pop	{r4, pc}
   206d8:	e59f101c 	ldr	r1, [pc, #28]	; 206fc <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   206dc:	e3a02c02 	mov	r2, #512	; 0x200
   206e0:	e2810024 	add	r0, r1, #36	; 0x24
   206e4:	ebfff405 	bl	1d700 <assertion_failed>
   206e8:	e59f100c 	ldr	r1, [pc, #12]	; 206fc <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   206ec:	e59f200c 	ldr	r2, [pc, #12]	; 20700 <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
   206f0:	e2810040 	add	r0, r1, #64	; 0x40
   206f4:	ebfff401 	bl	1d700 <assertion_failed>
   206f8:	00034c2c 	.word	0x00034c2c
   206fc:	00032258 	.word	0x00032258
   20700:	00000201 	.word	0x00000201

00020704 <CMachineInfo::Get()>:
   20704:	e59f301c 	ldr	r3, [pc, #28]	; 20728 <CMachineInfo::Get()+0x24>
   20708:	e5930000 	ldr	r0, [r3]
   2070c:	e3500000 	cmp	r0, #0
   20710:	112fff1e 	bxne	lr
   20714:	e59f1010 	ldr	r1, [pc, #16]	; 2072c <CMachineInfo::Get()+0x28>
   20718:	e92d4010 	push	{r4, lr}
   2071c:	e59f200c 	ldr	r2, [pc, #12]	; 20730 <CMachineInfo::Get()+0x2c>
   20720:	e2810014 	add	r0, r1, #20
   20724:	ebfff3f5 	bl	1d700 <assertion_failed>
   20728:	00034c2c 	.word	0x00034c2c
   2072c:	00032258 	.word	0x00032258
   20730:	00000207 	.word	0x00000207

00020734 <CPtrList::CPtrList()>:
   20734:	e3a02000 	mov	r2, #0
   20738:	e5802000 	str	r2, [r0]
   2073c:	e12fff1e 	bx	lr

00020740 <CPtrList::~CPtrList()>:
   20740:	e5903000 	ldr	r3, [r0]
   20744:	e3530000 	cmp	r3, #0
   20748:	012fff1e 	bxeq	lr
   2074c:	e3a0202a 	mov	r2, #42	; 0x2a
   20750:	e92d4010 	push	{r4, lr}
   20754:	e59f1004 	ldr	r1, [pc, #4]	; 20760 <CPtrList::~CPtrList()+0x20>
   20758:	e59f0004 	ldr	r0, [pc, #4]	; 20764 <CPtrList::~CPtrList()+0x24>
   2075c:	ebfff3e7 	bl	1d700 <assertion_failed>
   20760:	000322c0 	.word	0x000322c0
   20764:	000322cc 	.word	0x000322cc

00020768 <CPtrList::GetFirst()>:
   20768:	e5900000 	ldr	r0, [r0]
   2076c:	e12fff1e 	bx	lr

00020770 <CPtrList::GetNext(TPtrListElement*)>:
   20770:	e3510000 	cmp	r1, #0
   20774:	e92d4010 	push	{r4, lr}
   20778:	0a000005 	beq	20794 <CPtrList::GetNext(TPtrListElement*)+0x24>
   2077c:	e59f3030 	ldr	r3, [pc, #48]	; 207b4 <CPtrList::GetNext(TPtrListElement*)+0x44>
   20780:	e5912000 	ldr	r2, [r1]
   20784:	e1520003 	cmp	r2, r3
   20788:	1a000005 	bne	207a4 <CPtrList::GetNext(TPtrListElement*)+0x34>
   2078c:	e5910008 	ldr	r0, [r1, #8]
   20790:	e8bd8010 	pop	{r4, pc}
   20794:	e3a02034 	mov	r2, #52	; 0x34
   20798:	e59f1018 	ldr	r1, [pc, #24]	; 207b8 <CPtrList::GetNext(TPtrListElement*)+0x48>
   2079c:	e59f0018 	ldr	r0, [pc, #24]	; 207bc <CPtrList::GetNext(TPtrListElement*)+0x4c>
   207a0:	ebfff3d6 	bl	1d700 <assertion_failed>
   207a4:	e3a02035 	mov	r2, #53	; 0x35
   207a8:	e59f1008 	ldr	r1, [pc, #8]	; 207b8 <CPtrList::GetNext(TPtrListElement*)+0x48>
   207ac:	e59f000c 	ldr	r0, [pc, #12]	; 207c0 <CPtrList::GetNext(TPtrListElement*)+0x50>
   207b0:	ebfff3d2 	bl	1d700 <assertion_failed>
   207b4:	504c4d43 	.word	0x504c4d43
   207b8:	000322c0 	.word	0x000322c0
   207bc:	000322dc 	.word	0x000322dc
   207c0:	000322ec 	.word	0x000322ec

000207c4 <CPtrList::GetPtr(TPtrListElement*)>:
   207c4:	e3510000 	cmp	r1, #0
   207c8:	e92d4010 	push	{r4, lr}
   207cc:	0a000005 	beq	207e8 <CPtrList::GetPtr(TPtrListElement*)+0x24>
   207d0:	e59f3030 	ldr	r3, [pc, #48]	; 20808 <CPtrList::GetPtr(TPtrListElement*)+0x44>
   207d4:	e5912000 	ldr	r2, [r1]
   207d8:	e1520003 	cmp	r2, r3
   207dc:	1a000005 	bne	207f8 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   207e0:	e591000c 	ldr	r0, [r1, #12]
   207e4:	e8bd8010 	pop	{r4, pc}
   207e8:	e3a0203c 	mov	r2, #60	; 0x3c
   207ec:	e59f1018 	ldr	r1, [pc, #24]	; 2080c <CPtrList::GetPtr(TPtrListElement*)+0x48>
   207f0:	e59f0018 	ldr	r0, [pc, #24]	; 20810 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   207f4:	ebfff3c1 	bl	1d700 <assertion_failed>
   207f8:	e3a0203d 	mov	r2, #61	; 0x3d
   207fc:	e59f1008 	ldr	r1, [pc, #8]	; 2080c <CPtrList::GetPtr(TPtrListElement*)+0x48>
   20800:	e59f000c 	ldr	r0, [pc, #12]	; 20814 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   20804:	ebfff3bd 	bl	1d700 <assertion_failed>
   20808:	504c4d43 	.word	0x504c4d43
   2080c:	000322c0 	.word	0x000322c0
   20810:	000322dc 	.word	0x000322dc
   20814:	000322ec 	.word	0x000322ec

00020818 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   20818:	e92d4070 	push	{r4, r5, r6, lr}
   2081c:	e1a05000 	mov	r5, r0
   20820:	e3a00010 	mov	r0, #16
   20824:	e1a06002 	mov	r6, r2
   20828:	e1a04001 	mov	r4, r1
   2082c:	eb001bfc 	bl	27824 <operator new(unsigned int)>
   20830:	e5953000 	ldr	r3, [r5]
   20834:	e59f20ac 	ldr	r2, [pc, #172]	; 208e8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   20838:	e3530000 	cmp	r3, #0
   2083c:	e580600c 	str	r6, [r0, #12]
   20840:	e5802000 	str	r2, [r0]
   20844:	0a000017 	beq	208a8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   20848:	e3540000 	cmp	r4, #0
   2084c:	0a000019 	beq	208b8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   20850:	e5941000 	ldr	r1, [r4]
   20854:	e1510002 	cmp	r1, r2
   20858:	1a00001a 	bne	208c8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb0>
   2085c:	e1530004 	cmp	r3, r4
   20860:	0a00000a 	beq	20890 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   20864:	e5943004 	ldr	r3, [r4, #4]
   20868:	e5804008 	str	r4, [r0, #8]
   2086c:	e3530000 	cmp	r3, #0
   20870:	e5803004 	str	r3, [r0, #4]
   20874:	0a000003 	beq	20888 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   20878:	e5932000 	ldr	r2, [r3]
   2087c:	e1520001 	cmp	r2, r1
   20880:	05830008 	streq	r0, [r3, #8]
   20884:	1a000013 	bne	208d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   20888:	e5840004 	str	r0, [r4, #4]
   2088c:	e8bd8070 	pop	{r4, r5, r6, pc}
   20890:	e3a02000 	mov	r2, #0
   20894:	e5830004 	str	r0, [r3, #4]
   20898:	e5803008 	str	r3, [r0, #8]
   2089c:	e5850000 	str	r0, [r5]
   208a0:	e5802004 	str	r2, [r0, #4]
   208a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   208a8:	e3a0204c 	mov	r2, #76	; 0x4c
   208ac:	e59f1038 	ldr	r1, [pc, #56]	; 208ec <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   208b0:	e59f0038 	ldr	r0, [pc, #56]	; 208f0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   208b4:	ebfff391 	bl	1d700 <assertion_failed>
   208b8:	e3a0204d 	mov	r2, #77	; 0x4d
   208bc:	e59f1028 	ldr	r1, [pc, #40]	; 208ec <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   208c0:	e59f002c 	ldr	r0, [pc, #44]	; 208f4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   208c4:	ebfff38d 	bl	1d700 <assertion_failed>
   208c8:	e3a0204e 	mov	r2, #78	; 0x4e
   208cc:	e59f1018 	ldr	r1, [pc, #24]	; 208ec <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   208d0:	e59f0020 	ldr	r0, [pc, #32]	; 208f8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   208d4:	ebfff389 	bl	1d700 <assertion_failed>
   208d8:	e3a02060 	mov	r2, #96	; 0x60
   208dc:	e59f1008 	ldr	r1, [pc, #8]	; 208ec <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   208e0:	e59f0014 	ldr	r0, [pc, #20]	; 208fc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe4>
   208e4:	ebfff385 	bl	1d700 <assertion_failed>
   208e8:	504c4d43 	.word	0x504c4d43
   208ec:	000322c0 	.word	0x000322c0
   208f0:	00032310 	.word	0x00032310
   208f4:	00032320 	.word	0x00032320
   208f8:	0003232c 	.word	0x0003232c
   208fc:	00032350 	.word	0x00032350

00020900 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   20900:	e92d4070 	push	{r4, r5, r6, lr}
   20904:	e1a04001 	mov	r4, r1
   20908:	e1a05000 	mov	r5, r0
   2090c:	e3a00010 	mov	r0, #16
   20910:	e1a06002 	mov	r6, r2
   20914:	eb001bc2 	bl	27824 <operator new(unsigned int)>
   20918:	e59f30ac 	ldr	r3, [pc, #172]	; 209cc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   2091c:	e3540000 	cmp	r4, #0
   20920:	e580600c 	str	r6, [r0, #12]
   20924:	e5803000 	str	r3, [r0]
   20928:	0a000010 	beq	20970 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x70>
   2092c:	e5952000 	ldr	r2, [r5]
   20930:	e3520000 	cmp	r2, #0
   20934:	0a000014 	beq	2098c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x8c>
   20938:	e5942000 	ldr	r2, [r4]
   2093c:	e1520003 	cmp	r2, r3
   20940:	1a000015 	bne	2099c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   20944:	e5943008 	ldr	r3, [r4, #8]
   20948:	e5804004 	str	r4, [r0, #4]
   2094c:	e3530000 	cmp	r3, #0
   20950:	e5803008 	str	r3, [r0, #8]
   20954:	0a000003 	beq	20968 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   20958:	e5931000 	ldr	r1, [r3]
   2095c:	e1510002 	cmp	r1, r2
   20960:	05830004 	streq	r0, [r3, #4]
   20964:	1a000010 	bne	209ac <CPtrList::InsertAfter(TPtrListElement*, void*)+0xac>
   20968:	e5840008 	str	r0, [r4, #8]
   2096c:	e8bd8070 	pop	{r4, r5, r6, pc}
   20970:	e5953000 	ldr	r3, [r5]
   20974:	e3530000 	cmp	r3, #0
   20978:	1a00000f 	bne	209bc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   2097c:	e5803004 	str	r3, [r0, #4]
   20980:	e5803008 	str	r3, [r0, #8]
   20984:	e5850000 	str	r0, [r5]
   20988:	e8bd8070 	pop	{r4, r5, r6, pc}
   2098c:	e3a0207d 	mov	r2, #125	; 0x7d
   20990:	e59f1038 	ldr	r1, [pc, #56]	; 209d0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   20994:	e59f0038 	ldr	r0, [pc, #56]	; 209d4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd4>
   20998:	ebfff358 	bl	1d700 <assertion_failed>
   2099c:	e3a0207e 	mov	r2, #126	; 0x7e
   209a0:	e59f1028 	ldr	r1, [pc, #40]	; 209d0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   209a4:	e59f002c 	ldr	r0, [pc, #44]	; 209d8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   209a8:	ebfff354 	bl	1d700 <assertion_failed>
   209ac:	e3a02085 	mov	r2, #133	; 0x85
   209b0:	e59f1018 	ldr	r1, [pc, #24]	; 209d0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   209b4:	e59f0020 	ldr	r0, [pc, #32]	; 209dc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   209b8:	ebfff350 	bl	1d700 <assertion_failed>
   209bc:	e3a02074 	mov	r2, #116	; 0x74
   209c0:	e59f1008 	ldr	r1, [pc, #8]	; 209d0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   209c4:	e59f0014 	ldr	r0, [pc, #20]	; 209e0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   209c8:	ebfff34c 	bl	1d700 <assertion_failed>
   209cc:	504c4d43 	.word	0x504c4d43
   209d0:	000322c0 	.word	0x000322c0
   209d4:	00032310 	.word	0x00032310
   209d8:	00032378 	.word	0x00032378
   209dc:	0003239c 	.word	0x0003239c
   209e0:	000322cc 	.word	0x000322cc

000209e4 <CPtrList::Remove(TPtrListElement*)>:
   209e4:	e3510000 	cmp	r1, #0
   209e8:	e92d4010 	push	{r4, lr}
   209ec:	0a000029 	beq	20a98 <CPtrList::Remove(TPtrListElement*)+0xb4>
   209f0:	e59f20e0 	ldr	r2, [pc, #224]	; 20ad8 <CPtrList::Remove(TPtrListElement*)+0xf4>
   209f4:	e5913000 	ldr	r3, [r1]
   209f8:	e1530002 	cmp	r3, r2
   209fc:	1a000029 	bne	20aa8 <CPtrList::Remove(TPtrListElement*)+0xc4>
   20a00:	e5902000 	ldr	r2, [r0]
   20a04:	e1520001 	cmp	r2, r1
   20a08:	0a000011 	beq	20a54 <CPtrList::Remove(TPtrListElement*)+0x70>
   20a0c:	e5912004 	ldr	r2, [r1, #4]
   20a10:	e3520000 	cmp	r2, #0
   20a14:	0a000027 	beq	20ab8 <CPtrList::Remove(TPtrListElement*)+0xd4>
   20a18:	e5920000 	ldr	r0, [r2]
   20a1c:	e1500003 	cmp	r0, r3
   20a20:	1a000018 	bne	20a88 <CPtrList::Remove(TPtrListElement*)+0xa4>
   20a24:	e5913008 	ldr	r3, [r1, #8]
   20a28:	e3530000 	cmp	r3, #0
   20a2c:	e5823008 	str	r3, [r2, #8]
   20a30:	0a000003 	beq	20a44 <CPtrList::Remove(TPtrListElement*)+0x60>
   20a34:	e593c000 	ldr	ip, [r3]
   20a38:	e15c0000 	cmp	ip, r0
   20a3c:	05832004 	streq	r2, [r3, #4]
   20a40:	1a000020 	bne	20ac8 <CPtrList::Remove(TPtrListElement*)+0xe4>
   20a44:	e8bd4010 	pop	{r4, lr}
   20a48:	e1a00001 	mov	r0, r1
   20a4c:	e3a01010 	mov	r1, #16
   20a50:	ea001b81 	b	2785c <operator delete(void*, unsigned int)>
   20a54:	e5922008 	ldr	r2, [r2, #8]
   20a58:	e3520000 	cmp	r2, #0
   20a5c:	e5802000 	str	r2, [r0]
   20a60:	0afffff7 	beq	20a44 <CPtrList::Remove(TPtrListElement*)+0x60>
   20a64:	e5920000 	ldr	r0, [r2]
   20a68:	e1500003 	cmp	r0, r3
   20a6c:	03a03000 	moveq	r3, #0
   20a70:	05823004 	streq	r3, [r2, #4]
   20a74:	0afffff2 	beq	20a44 <CPtrList::Remove(TPtrListElement*)+0x60>
   20a78:	e3a02098 	mov	r2, #152	; 0x98
   20a7c:	e59f1058 	ldr	r1, [pc, #88]	; 20adc <CPtrList::Remove(TPtrListElement*)+0xf8>
   20a80:	e59f0058 	ldr	r0, [pc, #88]	; 20ae0 <CPtrList::Remove(TPtrListElement*)+0xfc>
   20a84:	ebfff31d 	bl	1d700 <assertion_failed>
   20a88:	e3a0209f 	mov	r2, #159	; 0x9f
   20a8c:	e59f1048 	ldr	r1, [pc, #72]	; 20adc <CPtrList::Remove(TPtrListElement*)+0xf8>
   20a90:	e59f004c 	ldr	r0, [pc, #76]	; 20ae4 <CPtrList::Remove(TPtrListElement*)+0x100>
   20a94:	ebfff319 	bl	1d700 <assertion_failed>
   20a98:	e3a0208f 	mov	r2, #143	; 0x8f
   20a9c:	e59f1038 	ldr	r1, [pc, #56]	; 20adc <CPtrList::Remove(TPtrListElement*)+0xf8>
   20aa0:	e59f0040 	ldr	r0, [pc, #64]	; 20ae8 <CPtrList::Remove(TPtrListElement*)+0x104>
   20aa4:	ebfff315 	bl	1d700 <assertion_failed>
   20aa8:	e3a02090 	mov	r2, #144	; 0x90
   20aac:	e59f1028 	ldr	r1, [pc, #40]	; 20adc <CPtrList::Remove(TPtrListElement*)+0xf8>
   20ab0:	e59f0034 	ldr	r0, [pc, #52]	; 20aec <CPtrList::Remove(TPtrListElement*)+0x108>
   20ab4:	ebfff311 	bl	1d700 <assertion_failed>
   20ab8:	e3a0209e 	mov	r2, #158	; 0x9e
   20abc:	e59f1018 	ldr	r1, [pc, #24]	; 20adc <CPtrList::Remove(TPtrListElement*)+0xf8>
   20ac0:	e59f0028 	ldr	r0, [pc, #40]	; 20af0 <CPtrList::Remove(TPtrListElement*)+0x10c>
   20ac4:	ebfff30d 	bl	1d700 <assertion_failed>
   20ac8:	e3a020a4 	mov	r2, #164	; 0xa4
   20acc:	e59f1008 	ldr	r1, [pc, #8]	; 20adc <CPtrList::Remove(TPtrListElement*)+0xf8>
   20ad0:	e59f0008 	ldr	r0, [pc, #8]	; 20ae0 <CPtrList::Remove(TPtrListElement*)+0xfc>
   20ad4:	ebfff309 	bl	1d700 <assertion_failed>
   20ad8:	504c4d43 	.word	0x504c4d43
   20adc:	000322c0 	.word	0x000322c0
   20ae0:	000323c8 	.word	0x000323c8
   20ae4:	0003240c 	.word	0x0003240c
   20ae8:	000322dc 	.word	0x000322dc
   20aec:	000322ec 	.word	0x000322ec
   20af0:	000323f4 	.word	0x000323f4

00020af4 <CPtrList::Find(void*)>:
   20af4:	e5900000 	ldr	r0, [r0]
   20af8:	e3500000 	cmp	r0, #0
   20afc:	012fff1e 	bxeq	lr
   20b00:	e59f2038 	ldr	r2, [pc, #56]	; 20b40 <CPtrList::Find(void*)+0x4c>
   20b04:	ea000005 	b	20b20 <CPtrList::Find(void*)+0x2c>
   20b08:	e590300c 	ldr	r3, [r0, #12]
   20b0c:	e1530001 	cmp	r3, r1
   20b10:	012fff1e 	bxeq	lr
   20b14:	e5900008 	ldr	r0, [r0, #8]
   20b18:	e3500000 	cmp	r0, #0
   20b1c:	012fff1e 	bxeq	lr
   20b20:	e5903000 	ldr	r3, [r0]
   20b24:	e1530002 	cmp	r3, r2
   20b28:	0afffff6 	beq	20b08 <CPtrList::Find(void*)+0x14>
   20b2c:	e3a020b3 	mov	r2, #179	; 0xb3
   20b30:	e92d4010 	push	{r4, lr}
   20b34:	e59f1008 	ldr	r1, [pc, #8]	; 20b44 <CPtrList::Find(void*)+0x50>
   20b38:	e59f0008 	ldr	r0, [pc, #8]	; 20b48 <CPtrList::Find(void*)+0x54>
   20b3c:	ebfff2ef 	bl	1d700 <assertion_failed>
   20b40:	504c4d43 	.word	0x504c4d43
   20b44:	000322c0 	.word	0x000322c0
   20b48:	000322ec 	.word	0x000322ec

00020b4c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)>:
   20b4c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   20b50:	e1a04000 	mov	r4, r0
   20b54:	e59f0200 	ldr	r0, [pc, #512]	; 20d5c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x210>
   20b58:	e24dd00c 	sub	sp, sp, #12
   20b5c:	e08000a2 	add	r0, r0, r2, lsr #1
   20b60:	e1a09001 	mov	r9, r1
   20b64:	e1a01002 	mov	r1, r2
   20b68:	e1a05002 	mov	r5, r2
   20b6c:	e1a08003 	mov	r8, r3
   20b70:	eb0027c3 	bl	2aa84 <__udivsi3>
   20b74:	e1a06000 	mov	r6, r0
   20b78:	ebfffee1 	bl	20704 <CMachineInfo::Get()>
   20b7c:	ebfffe86 	bl	2059c <CMachineInfo::ArePWMChannelsSwapped() const>
   20b80:	e3a07000 	mov	r7, #0
   20b84:	e1a03005 	mov	r3, r5
   20b88:	e59f51d0 	ldr	r5, [pc, #464]	; 20d60 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x214>
   20b8c:	e1a02006 	mov	r2, r6
   20b90:	e3a01003 	mov	r1, #3
   20b94:	e58d0000 	str	r0, [sp]
   20b98:	e1a00004 	mov	r0, r4
   20b9c:	eb000ae8 	bl	23744 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)>
   20ba0:	e1a03007 	mov	r3, r7
   20ba4:	e3a02004 	mov	r2, #4
   20ba8:	e3a01036 	mov	r1, #54	; 0x36
   20bac:	e5846068 	str	r6, [r4, #104]	; 0x68
   20bb0:	e5849060 	str	r9, [r4, #96]	; 0x60
   20bb4:	e5848064 	str	r8, [r4, #100]	; 0x64
   20bb8:	e5845000 	str	r5, [r4]
   20bbc:	e284006c 	add	r0, r4, #108	; 0x6c
   20bc0:	ebfff652 	bl	1e510 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   20bc4:	e1a03007 	mov	r3, r7
   20bc8:	e3a02004 	mov	r2, #4
   20bcc:	e3a01037 	mov	r1, #55	; 0x37
   20bd0:	e2840094 	add	r0, r4, #148	; 0x94
   20bd4:	ebfff64d 	bl	1e510 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   20bd8:	e3a02010 	mov	r2, #16
   20bdc:	e3a01006 	mov	r1, #6
   20be0:	e28400bc 	add	r0, r4, #188	; 0xbc
   20be4:	eb0025dc 	bl	2a35c <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>
   20be8:	e5c470be 	strb	r7, [r4, #190]	; 0xbe
   20bec:	e5c470bf 	strb	r7, [r4, #191]	; 0xbf
   20bf0:	ebfffec3 	bl	20704 <CMachineInfo::Get()>
   20bf4:	e3a01082 	mov	r1, #130	; 0x82
   20bf8:	ebfffe6e 	bl	205b8 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   20bfc:	e3a06001 	mov	r6, #1
   20c00:	e5943060 	ldr	r3, [r4, #96]	; 0x60
   20c04:	e58400c0 	str	r0, [r4, #192]	; 0xc0
   20c08:	e1530007 	cmp	r3, r7
   20c0c:	e58460e0 	str	r6, [r4, #224]	; 0xe0
   20c10:	0a000041 	beq	20d1c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x1d0>
   20c14:	e5943064 	ldr	r3, [r4, #100]	; 0x64
   20c18:	e3530000 	cmp	r3, #0
   20c1c:	0a000042 	beq	20d2c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x1e0>
   20c20:	e3130001 	tst	r3, #1
   20c24:	1a000044 	bne	20d3c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x1f0>
   20c28:	e1a01007 	mov	r1, r7
   20c2c:	e1a00004 	mov	r0, r4
   20c30:	eb000234 	bl	21508 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>
   20c34:	e1a01006 	mov	r1, r6
   20c38:	e1a00004 	mov	r0, r4
   20c3c:	eb000231 	bl	21508 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>
   20c40:	e59430d8 	ldr	r3, [r4, #216]	; 0xd8
   20c44:	e59410d4 	ldr	r1, [r4, #212]	; 0xd4
   20c48:	e3c30103 	bic	r0, r3, #-1073741824	; 0xc0000000
   20c4c:	e3802101 	orr	r2, r0, #1073741824	; 0x40000000
   20c50:	e5c10014 	strb	r0, [r1, #20]
   20c54:	e3c1c103 	bic	ip, r1, #-1073741824	; 0xc0000000
   20c58:	e1a00422 	lsr	r0, r2, #8
   20c5c:	e5c10015 	strb	r0, [r1, #21]
   20c60:	e1a0e822 	lsr	lr, r2, #16
   20c64:	e1a00c22 	lsr	r0, r2, #24
   20c68:	e38c2101 	orr	r2, ip, #1073741824	; 0x40000000
   20c6c:	e5c1e016 	strb	lr, [r1, #22]
   20c70:	e5c10017 	strb	r0, [r1, #23]
   20c74:	e1a01822 	lsr	r1, r2, #16
   20c78:	e1a00422 	lsr	r0, r2, #8
   20c7c:	e1a02c22 	lsr	r2, r2, #24
   20c80:	e5c30015 	strb	r0, [r3, #21]
   20c84:	e5c3c014 	strb	ip, [r3, #20]
   20c88:	e1a00004 	mov	r0, r4
   20c8c:	e5c31016 	strb	r1, [r3, #22]
   20c90:	e5c32017 	strb	r2, [r3, #23]
   20c94:	eb000176 	bl	21274 <CPWMSoundBaseDevice::RunPWM()>
   20c98:	ee077f9a 	mcr	15, 0, r7, cr7, cr10, {4}
   20c9c:	e59420c0 	ldr	r2, [r4, #192]	; 0xc0
   20ca0:	e352000c 	cmp	r2, #12
   20ca4:	8a000028 	bhi	20d4c <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x200>
   20ca8:	e59f10b4 	ldr	r1, [pc, #180]	; 20d64 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x218>
   20cac:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   20cb0:	e5913ff0 	ldr	r3, [r1, #4080]	; 0xff0
   20cb4:	e1836216 	orr	r6, r3, r6, lsl r2
   20cb8:	e5816ff0 	str	r6, [r1, #4080]	; 0xff0
   20cbc:	eb00166f 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
   20cc0:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   20cc4:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   20cc8:	e2833602 	add	r3, r3, #2097152	; 0x200000
   20ccc:	e2833070 	add	r3, r3, #112	; 0x70
   20cd0:	e1a03403 	lsl	r3, r3, #8
   20cd4:	e5832000 	str	r2, [r3]
   20cd8:	e59420c0 	ldr	r2, [r4, #192]	; 0xc0
   20cdc:	e2822602 	add	r2, r2, #2097152	; 0x200000
   20ce0:	e2822070 	add	r2, r2, #112	; 0x70
   20ce4:	e1a02402 	lsl	r2, r2, #8
   20ce8:	e5923000 	ldr	r3, [r2]
   20cec:	e3530000 	cmp	r3, #0
   20cf0:	bafffffc 	blt	20ce8 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x19c>
   20cf4:	e3a05000 	mov	r5, #0
   20cf8:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   20cfc:	ebfff559 	bl	1e268 <CDeviceNameService::Get()>
   20d00:	e1a03005 	mov	r3, r5
   20d04:	e1a02004 	mov	r2, r4
   20d08:	e59f1058 	ldr	r1, [pc, #88]	; 20d68 <CPWMSoundBaseDevice::CPWMSoundBaseDevice(CInterruptSystem*, unsigned int, unsigned int)+0x21c>
   20d0c:	ebfff4a5 	bl	1dfa8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   20d10:	e1a00004 	mov	r0, r4
   20d14:	e28dd00c 	add	sp, sp, #12
   20d18:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   20d1c:	e3a020a6 	mov	r2, #166	; 0xa6
   20d20:	e2851034 	add	r1, r5, #52	; 0x34
   20d24:	e285004c 	add	r0, r5, #76	; 0x4c
   20d28:	ebfff274 	bl	1d700 <assertion_failed>
   20d2c:	e3a020a7 	mov	r2, #167	; 0xa7
   20d30:	e2851034 	add	r1, r5, #52	; 0x34
   20d34:	e2850064 	add	r0, r5, #100	; 0x64
   20d38:	ebfff270 	bl	1d700 <assertion_failed>
   20d3c:	e3a020a8 	mov	r2, #168	; 0xa8
   20d40:	e2851034 	add	r1, r5, #52	; 0x34
   20d44:	e2850078 	add	r0, r5, #120	; 0x78
   20d48:	ebfff26c 	bl	1d700 <assertion_failed>
   20d4c:	e3a020b6 	mov	r2, #182	; 0xb6
   20d50:	e2851034 	add	r1, r5, #52	; 0x34
   20d54:	e2850090 	add	r0, r5, #144	; 0x90
   20d58:	ebfff268 	bl	1d700 <assertion_failed>
   20d5c:	0ee6b280 	.word	0x0ee6b280
   20d60:	00032440 	.word	0x00032440
   20d64:	20007000 	.word	0x20007000
   20d68:	000324f4 	.word	0x000324f4

00020d6c <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>:
   20d6c:	e5d020bf 	ldrb	r2, [r0, #191]	; 0xbf
   20d70:	e92d4070 	push	{r4, r5, r6, lr}
   20d74:	e59f617c 	ldr	r6, [pc, #380]	; 20ef8 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x18c>
   20d78:	e21250ff 	ands	r5, r2, #255	; 0xff
   20d7c:	e5806000 	str	r6, [r0]
   20d80:	1a000050 	bne	20ec8 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x15c>
   20d84:	e1a04000 	mov	r4, r0
   20d88:	ebfff536 	bl	1e268 <CDeviceNameService::Get()>
   20d8c:	e1a02005 	mov	r2, r5
   20d90:	e28610b4 	add	r1, r6, #180	; 0xb4
   20d94:	ebfff4b0 	bl	1e05c <CDeviceNameService::RemoveDevice(char const*, bool)>
   20d98:	e1a00004 	mov	r0, r4
   20d9c:	eb00015a 	bl	2130c <CPWMSoundBaseDevice::StopPWM()>
   20da0:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   20da4:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   20da8:	e353000c 	cmp	r3, #12
   20dac:	8a000049 	bhi	20ed8 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x16c>
   20db0:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   20db4:	e2833602 	add	r3, r3, #2097152	; 0x200000
   20db8:	e2833070 	add	r3, r3, #112	; 0x70
   20dbc:	e1a03403 	lsl	r3, r3, #8
   20dc0:	e5832000 	str	r2, [r3]
   20dc4:	e59410c0 	ldr	r1, [r4, #192]	; 0xc0
   20dc8:	e2812602 	add	r2, r1, #2097152	; 0x200000
   20dcc:	e2822070 	add	r2, r2, #112	; 0x70
   20dd0:	e1a02402 	lsl	r2, r2, #8
   20dd4:	e5923000 	ldr	r3, [r2]
   20dd8:	e3530000 	cmp	r3, #0
   20ddc:	bafffffc 	blt	20dd4 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x68>
   20de0:	e3a0c001 	mov	ip, #1
   20de4:	e59f2110 	ldr	r2, [pc, #272]	; 20efc <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x190>
   20de8:	e3a00000 	mov	r0, #0
   20dec:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   20df0:	e1c3311c 	bic	r3, r3, ip, lsl r1
   20df4:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   20df8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   20dfc:	e5940060 	ldr	r0, [r4, #96]	; 0x60
   20e00:	e3500000 	cmp	r0, #0
   20e04:	0a000037 	beq	20ee8 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x17c>
   20e08:	e5d430be 	ldrb	r3, [r4, #190]	; 0xbe
   20e0c:	e3530000 	cmp	r3, #0
   20e10:	1a000028 	bne	20eb8 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x14c>
   20e14:	e3a05000 	mov	r5, #0
   20e18:	e5845060 	str	r5, [r4, #96]	; 0x60
   20e1c:	ebfffe38 	bl	20704 <CMachineInfo::Get()>
   20e20:	e59410c0 	ldr	r1, [r4, #192]	; 0xc0
   20e24:	ebfffe14 	bl	2067c <CMachineInfo::FreeDMAChannel(unsigned int)>
   20e28:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   20e2c:	e58450d4 	str	r5, [r4, #212]	; 0xd4
   20e30:	e1500005 	cmp	r0, r5
   20e34:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   20e38:	0a000000 	beq	20e40 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xd4>
   20e3c:	eb001a85 	bl	27858 <operator delete[](void*)>
   20e40:	e3a03000 	mov	r3, #0
   20e44:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   20e48:	e58430cc 	str	r3, [r4, #204]	; 0xcc
   20e4c:	e1500003 	cmp	r0, r3
   20e50:	0a000000 	beq	20e58 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xec>
   20e54:	eb001a7f 	bl	27858 <operator delete[](void*)>
   20e58:	e3a03000 	mov	r3, #0
   20e5c:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   20e60:	e58430d0 	str	r3, [r4, #208]	; 0xd0
   20e64:	e1500003 	cmp	r0, r3
   20e68:	0a000000 	beq	20e70 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x104>
   20e6c:	eb001a79 	bl	27858 <operator delete[](void*)>
   20e70:	e3a03000 	mov	r3, #0
   20e74:	e59400c8 	ldr	r0, [r4, #200]	; 0xc8
   20e78:	e58430c4 	str	r3, [r4, #196]	; 0xc4
   20e7c:	e1500003 	cmp	r0, r3
   20e80:	0a000000 	beq	20e88 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x11c>
   20e84:	eb001a73 	bl	27858 <operator delete[](void*)>
   20e88:	e3a03000 	mov	r3, #0
   20e8c:	e28400bc 	add	r0, r4, #188	; 0xbc
   20e90:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   20e94:	eb002540 	bl	2a39c <CGPIOClock::~CGPIOClock()>
   20e98:	e2840094 	add	r0, r4, #148	; 0x94
   20e9c:	ebfff5b1 	bl	1e568 <CGPIOPin::~CGPIOPin()>
   20ea0:	e284006c 	add	r0, r4, #108	; 0x6c
   20ea4:	ebfff5af 	bl	1e568 <CGPIOPin::~CGPIOPin()>
   20ea8:	e1a00004 	mov	r0, r4
   20eac:	eb000a6f 	bl	23870 <CSoundBaseDevice::~CSoundBaseDevice()>
   20eb0:	e1a00004 	mov	r0, r4
   20eb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   20eb8:	e59410c0 	ldr	r1, [r4, #192]	; 0xc0
   20ebc:	e2811010 	add	r1, r1, #16
   20ec0:	eb001f29 	bl	28b6c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   20ec4:	eaffffd2 	b	20e14 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0xa8>
   20ec8:	e3a020c7 	mov	r2, #199	; 0xc7
   20ecc:	e2861034 	add	r1, r6, #52	; 0x34
   20ed0:	e28600bc 	add	r0, r6, #188	; 0xbc
   20ed4:	ebfff209 	bl	1d700 <assertion_failed>
   20ed8:	e3a020d1 	mov	r2, #209	; 0xd1
   20edc:	e2861034 	add	r1, r6, #52	; 0x34
   20ee0:	e2860090 	add	r0, r6, #144	; 0x90
   20ee4:	ebfff205 	bl	1d700 <assertion_failed>
   20ee8:	e59f1010 	ldr	r1, [pc, #16]	; 20f00 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()+0x194>
   20eec:	e3a020de 	mov	r2, #222	; 0xde
   20ef0:	e2810018 	add	r0, r1, #24
   20ef4:	ebfff201 	bl	1d700 <assertion_failed>
   20ef8:	00032440 	.word	0x00032440
   20efc:	20007000 	.word	0x20007000
   20f00:	00032474 	.word	0x00032474

00020f04 <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>:
   20f04:	e92d4010 	push	{r4, lr}
   20f08:	e1a04000 	mov	r4, r0
   20f0c:	ebffff96 	bl	20d6c <CPWMSoundBaseDevice::~CPWMSoundBaseDevice()>
   20f10:	e1a00004 	mov	r0, r4
   20f14:	e3a010e4 	mov	r1, #228	; 0xe4
   20f18:	eb001a4f 	bl	2785c <operator delete(void*, unsigned int)>
   20f1c:	e1a00004 	mov	r0, r4
   20f20:	e8bd8010 	pop	{r4, pc}

00020f24 <CPWMSoundBaseDevice::GetRangeMin() const>:
   20f24:	e3a00000 	mov	r0, #0
   20f28:	e12fff1e 	bx	lr

00020f2c <CPWMSoundBaseDevice::GetRangeMax() const>:
   20f2c:	e5900068 	ldr	r0, [r0, #104]	; 0x68
   20f30:	e2400001 	sub	r0, r0, #1
   20f34:	e12fff1e 	bx	lr

00020f38 <CPWMSoundBaseDevice::Start()>:
   20f38:	e5d030bf 	ldrb	r3, [r0, #191]	; 0xbf
   20f3c:	e92d4070 	push	{r4, r5, r6, lr}
   20f40:	e21330ff 	ands	r3, r3, #255	; 0xff
   20f44:	1a00005b 	bne	210b8 <CPWMSoundBaseDevice::Start()+0x180>
   20f48:	e58030dc 	str	r3, [r0, #220]	; 0xdc
   20f4c:	e1a04000 	mov	r4, r0
   20f50:	eb00008e 	bl	21190 <CPWMSoundBaseDevice::GetNextChunk()>
   20f54:	e2505000 	subs	r5, r0, #0
   20f58:	0a00003d 	beq	21054 <CPWMSoundBaseDevice::Start()+0x11c>
   20f5c:	e3a06001 	mov	r6, #1
   20f60:	e59410c0 	ldr	r1, [r4, #192]	; 0xc0
   20f64:	e5c460bf 	strb	r6, [r4, #191]	; 0xbf
   20f68:	e351000c 	cmp	r1, #12
   20f6c:	8a000055 	bhi	210c8 <CPWMSoundBaseDevice::Start()+0x190>
   20f70:	e5d430be 	ldrb	r3, [r4, #190]	; 0xbe
   20f74:	e3530000 	cmp	r3, #0
   20f78:	1a000007 	bne	20f9c <CPWMSoundBaseDevice::Start()+0x64>
   20f7c:	e5940060 	ldr	r0, [r4, #96]	; 0x60
   20f80:	e3500000 	cmp	r0, #0
   20f84:	0a00005b 	beq	210f8 <CPWMSoundBaseDevice::Start()+0x1c0>
   20f88:	e1a03004 	mov	r3, r4
   20f8c:	e59f2174 	ldr	r2, [pc, #372]	; 21108 <CPWMSoundBaseDevice::Start()+0x1d0>
   20f90:	e2811010 	add	r1, r1, #16
   20f94:	eb001ec0 	bl	28a9c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   20f98:	e5c460be 	strb	r6, [r4, #190]	; 0xbe
   20f9c:	e3a02000 	mov	r2, #0
   20fa0:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   20fa4:	e59f1160 	ldr	r1, [pc, #352]	; 2110c <CPWMSoundBaseDevice::Start()+0x1d4>
   20fa8:	e59f3160 	ldr	r3, [pc, #352]	; 21110 <CPWMSoundBaseDevice::Start()+0x1d8>
   20fac:	e5813008 	str	r3, [r1, #8]
   20fb0:	e5913000 	ldr	r3, [r1]
   20fb4:	e3c33b01 	bic	r3, r3, #1024	; 0x400
   20fb8:	e3c33004 	bic	r3, r3, #4
   20fbc:	e5813000 	str	r3, [r1]
   20fc0:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   20fc4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   20fc8:	e59410c0 	ldr	r1, [r4, #192]	; 0xc0
   20fcc:	e2813602 	add	r3, r1, #2097152	; 0x200000
   20fd0:	e2833070 	add	r3, r3, #112	; 0x70
   20fd4:	e1a03403 	lsl	r3, r3, #8
   20fd8:	e5932000 	ldr	r2, [r3]
   20fdc:	e3120004 	tst	r2, #4
   20fe0:	1a00001d 	bne	2105c <CPWMSoundBaseDevice::Start()+0x124>
   20fe4:	e3a00001 	mov	r0, #1
   20fe8:	e59f2124 	ldr	r2, [pc, #292]	; 21114 <CPWMSoundBaseDevice::Start()+0x1dc>
   20fec:	e5922fe0 	ldr	r2, [r2, #4064]	; 0xfe0
   20ff0:	e0121110 	ands	r1, r2, r0, lsl r1
   20ff4:	1a000037 	bne	210d8 <CPWMSoundBaseDevice::Start()+0x1a0>
   20ff8:	e59420d4 	ldr	r2, [r4, #212]	; 0xd4
   20ffc:	e3520000 	cmp	r2, #0
   21000:	0a000038 	beq	210e8 <CPWMSoundBaseDevice::Start()+0x1b0>
   21004:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
   21008:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
   2100c:	e5832004 	str	r2, [r3, #4]
   21010:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   21014:	e59f20fc 	ldr	r2, [pc, #252]	; 21118 <CPWMSoundBaseDevice::Start()+0x1e0>
   21018:	e2833602 	add	r3, r3, #2097152	; 0x200000
   2101c:	e2833070 	add	r3, r3, #112	; 0x70
   21020:	e1a03403 	lsl	r3, r3, #8
   21024:	e5832000 	str	r2, [r3]
   21028:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   2102c:	e1a00004 	mov	r0, r4
   21030:	eb000056 	bl	21190 <CPWMSoundBaseDevice::GetNextChunk()>
   21034:	e3500000 	cmp	r0, #0
   21038:	1a000005 	bne	21054 <CPWMSoundBaseDevice::Start()+0x11c>
   2103c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   21040:	e3500000 	cmp	r0, #0
   21044:	1a000008 	bne	2106c <CPWMSoundBaseDevice::Start()+0x134>
   21048:	e5d430bf 	ldrb	r3, [r4, #191]	; 0xbf
   2104c:	e3530001 	cmp	r3, #1
   21050:	0a000009 	beq	2107c <CPWMSoundBaseDevice::Start()+0x144>
   21054:	e1a00005 	mov	r0, r5
   21058:	e8bd8070 	pop	{r4, r5, r6, pc}
   2105c:	e59f10b8 	ldr	r1, [pc, #184]	; 2111c <CPWMSoundBaseDevice::Start()+0x1e4>
   21060:	e59f20b8 	ldr	r2, [pc, #184]	; 21120 <CPWMSoundBaseDevice::Start()+0x1e8>
   21064:	e28100a0 	add	r0, r1, #160	; 0xa0
   21068:	ebfff1a4 	bl	1d700 <assertion_failed>
   2106c:	eb001d8c 	bl	286a4 <EnterCritical>
   21070:	e5d430bf 	ldrb	r3, [r4, #191]	; 0xbf
   21074:	e3530001 	cmp	r3, #1
   21078:	1a000009 	bne	210a4 <CPWMSoundBaseDevice::Start()+0x16c>
   2107c:	e3a02000 	mov	r2, #0
   21080:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   21084:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   21088:	e2833602 	add	r3, r3, #2097152	; 0x200000
   2108c:	e2833070 	add	r3, r3, #112	; 0x70
   21090:	e1a03403 	lsl	r3, r3, #8
   21094:	e583201c 	str	r2, [r3, #28]
   21098:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2109c:	e3a03003 	mov	r3, #3
   210a0:	e5c430bf 	strb	r3, [r4, #191]	; 0xbf
   210a4:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   210a8:	e3530000 	cmp	r3, #0
   210ac:	0affffe8 	beq	21054 <CPWMSoundBaseDevice::Start()+0x11c>
   210b0:	eb001da5 	bl	2874c <LeaveCritical>
   210b4:	eaffffe6 	b	21054 <CPWMSoundBaseDevice::Start()+0x11c>
   210b8:	e59f105c 	ldr	r1, [pc, #92]	; 2111c <CPWMSoundBaseDevice::Start()+0x1e4>
   210bc:	e59f2060 	ldr	r2, [pc, #96]	; 21124 <CPWMSoundBaseDevice::Start()+0x1ec>
   210c0:	e2810088 	add	r0, r1, #136	; 0x88
   210c4:	ebfff18d 	bl	1d700 <assertion_failed>
   210c8:	e59f104c 	ldr	r1, [pc, #76]	; 2111c <CPWMSoundBaseDevice::Start()+0x1e4>
   210cc:	e3a02e11 	mov	r2, #272	; 0x110
   210d0:	e281005c 	add	r0, r1, #92	; 0x5c
   210d4:	ebfff189 	bl	1d700 <assertion_failed>
   210d8:	e59f103c 	ldr	r1, [pc, #60]	; 2111c <CPWMSoundBaseDevice::Start()+0x1e4>
   210dc:	e59f2044 	ldr	r2, [pc, #68]	; 21128 <CPWMSoundBaseDevice::Start()+0x1f0>
   210e0:	e28100d4 	add	r0, r1, #212	; 0xd4
   210e4:	ebfff185 	bl	1d700 <assertion_failed>
   210e8:	e59f102c 	ldr	r1, [pc, #44]	; 2111c <CPWMSoundBaseDevice::Start()+0x1e4>
   210ec:	e3a02f4b 	mov	r2, #300	; 0x12c
   210f0:	e2810f43 	add	r0, r1, #268	; 0x10c
   210f4:	ebfff181 	bl	1d700 <assertion_failed>
   210f8:	e59f101c 	ldr	r1, [pc, #28]	; 2111c <CPWMSoundBaseDevice::Start()+0x1e4>
   210fc:	e3a02f45 	mov	r2, #276	; 0x114
   21100:	e2810018 	add	r0, r1, #24
   21104:	ebfff17d 	bl	1d700 <assertion_failed>
   21108:	000214e0 	.word	0x000214e0
   2110c:	2020c000 	.word	0x2020c000
   21110:	80000707 	.word	0x80000707
   21114:	20007000 	.word	0x20007000
   21118:	10f10001 	.word	0x10f10001
   2111c:	00032474 	.word	0x00032474
   21120:	00000129 	.word	0x00000129
   21124:	00000103 	.word	0x00000103
   21128:	0000012a 	.word	0x0000012a

0002112c <CPWMSoundBaseDevice::Cancel()>:
   2112c:	e92d4010 	push	{r4, lr}
   21130:	e1a04000 	mov	r4, r0
   21134:	e59000e0 	ldr	r0, [r0, #224]	; 0xe0
   21138:	e3500000 	cmp	r0, #0
   2113c:	1a000004 	bne	21154 <CPWMSoundBaseDevice::Cancel()+0x28>
   21140:	e5d430bf 	ldrb	r3, [r4, #191]	; 0xbf
   21144:	e3530001 	cmp	r3, #1
   21148:	03a03002 	moveq	r3, #2
   2114c:	05c430bf 	strbeq	r3, [r4, #191]	; 0xbf
   21150:	e8bd8010 	pop	{r4, pc}
   21154:	eb001d52 	bl	286a4 <EnterCritical>
   21158:	e5d430bf 	ldrb	r3, [r4, #191]	; 0xbf
   2115c:	e3530001 	cmp	r3, #1
   21160:	03a02002 	moveq	r2, #2
   21164:	159430e0 	ldrne	r3, [r4, #224]	; 0xe0
   21168:	059430e0 	ldreq	r3, [r4, #224]	; 0xe0
   2116c:	05c420bf 	strbeq	r2, [r4, #191]	; 0xbf
   21170:	e3530000 	cmp	r3, #0
   21174:	08bd8010 	popeq	{r4, pc}
   21178:	e8bd4010 	pop	{r4, lr}
   2117c:	ea001d72 	b	2874c <LeaveCritical>

00021180 <CPWMSoundBaseDevice::IsActive() const>:
   21180:	e5d000bf 	ldrb	r0, [r0, #191]	; 0xbf
   21184:	e2500000 	subs	r0, r0, #0
   21188:	13a00001 	movne	r0, #1
   2118c:	e12fff1e 	bx	lr

00021190 <CPWMSoundBaseDevice::GetNextChunk()>:
   21190:	e59030dc 	ldr	r3, [r0, #220]	; 0xdc
   21194:	e92d4010 	push	{r4, lr}
   21198:	e0803103 	add	r3, r0, r3, lsl #2
   2119c:	e59310c4 	ldr	r1, [r3, #196]	; 0xc4
   211a0:	e3510000 	cmp	r1, #0
   211a4:	0a000027 	beq	21248 <CPWMSoundBaseDevice::GetNextChunk()+0xb8>
   211a8:	e5903000 	ldr	r3, [r0]
   211ac:	e5902064 	ldr	r2, [r0, #100]	; 0x64
   211b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   211b4:	e1a04000 	mov	r4, r0
   211b8:	e12fff33 	blx	r3
   211bc:	e3500000 	cmp	r0, #0
   211c0:	08bd8010 	popeq	{r4, pc}
   211c4:	e1a01100 	lsl	r1, r0, #2
   211c8:	e3510801 	cmp	r1, #65536	; 0x10000
   211cc:	2a000021 	bcs	21258 <CPWMSoundBaseDevice::GetNextChunk()+0xc8>
   211d0:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   211d4:	e0843103 	add	r3, r4, r3, lsl #2
   211d8:	e59330d4 	ldr	r3, [r3, #212]	; 0xd4
   211dc:	e3530000 	cmp	r3, #0
   211e0:	0a000014 	beq	21238 <CPWMSoundBaseDevice::GetNextChunk()+0xa8>
   211e4:	e1a0c421 	lsr	ip, r1, #8
   211e8:	e1a02c21 	lsr	r2, r1, #24
   211ec:	e1a00821 	lsr	r0, r1, #16
   211f0:	e5c3c00d 	strb	ip, [r3, #13]
   211f4:	e5c3200f 	strb	r2, [r3, #15]
   211f8:	e5c3100c 	strb	r1, [r3, #12]
   211fc:	e5c3000e 	strb	r0, [r3, #14]
   21200:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   21204:	e0843103 	add	r3, r4, r3, lsl #2
   21208:	e59300c4 	ldr	r0, [r3, #196]	; 0xc4
   2120c:	eb001d64 	bl	287a4 <CleanAndInvalidateDataCacheRange>
   21210:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   21214:	e3a01020 	mov	r1, #32
   21218:	e0843103 	add	r3, r4, r3, lsl #2
   2121c:	e59300d4 	ldr	r0, [r3, #212]	; 0xd4
   21220:	eb001d5f 	bl	287a4 <CleanAndInvalidateDataCacheRange>
   21224:	e3a00001 	mov	r0, #1
   21228:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   2122c:	e0233000 	eor	r3, r3, r0
   21230:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   21234:	e8bd8010 	pop	{r4, pc}
   21238:	e59f1028 	ldr	r1, [pc, #40]	; 21268 <CPWMSoundBaseDevice::GetNextChunk()+0xd8>
   2123c:	e3a02f5a 	mov	r2, #360	; 0x168
   21240:	e2810e17 	add	r0, r1, #368	; 0x170
   21244:	ebfff12d 	bl	1d700 <assertion_failed>
   21248:	e59f1018 	ldr	r1, [pc, #24]	; 21268 <CPWMSoundBaseDevice::GetNextChunk()+0xd8>
   2124c:	e59f2018 	ldr	r2, [pc, #24]	; 2126c <CPWMSoundBaseDevice::GetNextChunk()+0xdc>
   21250:	e2810f49 	add	r0, r1, #292	; 0x124
   21254:	ebfff129 	bl	1d700 <assertion_failed>
   21258:	e59f1008 	ldr	r1, [pc, #8]	; 21268 <CPWMSoundBaseDevice::GetNextChunk()+0xd8>
   2125c:	e59f200c 	ldr	r2, [pc, #12]	; 21270 <CPWMSoundBaseDevice::GetNextChunk()+0xe0>
   21260:	e2810f52 	add	r0, r1, #328	; 0x148
   21264:	ebfff125 	bl	1d700 <assertion_failed>
   21268:	00032474 	.word	0x00032474
   2126c:	0000015e 	.word	0x0000015e
   21270:	00000166 	.word	0x00000166

00021274 <CPWMSoundBaseDevice::RunPWM()>:
   21274:	e92d4070 	push	{r4, r5, r6, lr}
   21278:	e3a05000 	mov	r5, #0
   2127c:	e1a04000 	mov	r4, r0
   21280:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   21284:	e59f1068 	ldr	r1, [pc, #104]	; 212f4 <CPWMSoundBaseDevice::RunPWM()+0x80>
   21288:	e28000bc 	add	r0, r0, #188	; 0xbc
   2128c:	eb002491 	bl	2a4d8 <CGPIOClock::StartRate(unsigned int)>
   21290:	e1500005 	cmp	r0, r5
   21294:	0a00000e 	beq	212d4 <CPWMSoundBaseDevice::RunPWM()+0x60>
   21298:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   2129c:	eb0014f7 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
   212a0:	e5943068 	ldr	r3, [r4, #104]	; 0x68
   212a4:	e2432c01 	sub	r2, r3, #256	; 0x100
   212a8:	e3520cff 	cmp	r2, #65280	; 0xff00
   212ac:	2a00000c 	bcs	212e4 <CPWMSoundBaseDevice::RunPWM()+0x70>
   212b0:	e59f2040 	ldr	r2, [pc, #64]	; 212f8 <CPWMSoundBaseDevice::RunPWM()+0x84>
   212b4:	e59f1040 	ldr	r1, [pc, #64]	; 212fc <CPWMSoundBaseDevice::RunPWM()+0x88>
   212b8:	e5823010 	str	r3, [r2, #16]
   212bc:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   212c0:	e5823020 	str	r3, [r2, #32]
   212c4:	e5821000 	str	r1, [r2]
   212c8:	eb0014ec 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
   212cc:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   212d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   212d4:	e59f1024 	ldr	r1, [pc, #36]	; 21300 <CPWMSoundBaseDevice::RunPWM()+0x8c>
   212d8:	e59f2024 	ldr	r2, [pc, #36]	; 21304 <CPWMSoundBaseDevice::RunPWM()+0x90>
   212dc:	e2810f65 	add	r0, r1, #404	; 0x194
   212e0:	ebfff106 	bl	1d700 <assertion_failed>
   212e4:	e59f1014 	ldr	r1, [pc, #20]	; 21300 <CPWMSoundBaseDevice::RunPWM()+0x8c>
   212e8:	e59f2018 	ldr	r2, [pc, #24]	; 21308 <CPWMSoundBaseDevice::RunPWM()+0x94>
   212ec:	e2810f66 	add	r0, r1, #408	; 0x198
   212f0:	ebfff102 	bl	1d700 <assertion_failed>
   212f4:	0ee6b280 	.word	0x0ee6b280
   212f8:	2020c000 	.word	0x2020c000
   212fc:	00002161 	.word	0x00002161
   21300:	00032474 	.word	0x00032474
   21304:	0000017b 	.word	0x0000017b
   21308:	0000017e 	.word	0x0000017e

0002130c <CPWMSoundBaseDevice::StopPWM()>:
   2130c:	e92d4070 	push	{r4, r5, r6, lr}
   21310:	e3a04000 	mov	r4, #0
   21314:	e1a05000 	mov	r5, r0
   21318:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2131c:	e59f3024 	ldr	r3, [pc, #36]	; 21348 <CPWMSoundBaseDevice::StopPWM()+0x3c>
   21320:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   21324:	e5834008 	str	r4, [r3, #8]
   21328:	e5834000 	str	r4, [r3]
   2132c:	eb0014d3 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
   21330:	e28500bc 	add	r0, r5, #188	; 0xbc
   21334:	eb00248d 	bl	2a570 <CGPIOClock::Stop()>
   21338:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   2133c:	eb0014cf 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
   21340:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   21344:	e8bd8070 	pop	{r4, r5, r6, pc}
   21348:	2020c000 	.word	0x2020c000

0002134c <CPWMSoundBaseDevice::InterruptHandler()>:
   2134c:	e5d030bf 	ldrb	r3, [r0, #191]	; 0xbf
   21350:	e92d4010 	push	{r4, lr}
   21354:	e3530000 	cmp	r3, #0
   21358:	0a000049 	beq	21484 <CPWMSoundBaseDevice::InterruptHandler()+0x138>
   2135c:	e59030c0 	ldr	r3, [r0, #192]	; 0xc0
   21360:	e1a04000 	mov	r4, r0
   21364:	e353000c 	cmp	r3, #12
   21368:	8a000049 	bhi	21494 <CPWMSoundBaseDevice::InterruptHandler()+0x148>
   2136c:	e3a01000 	mov	r1, #0
   21370:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
   21374:	e3a03001 	mov	r3, #1
   21378:	e59f2144 	ldr	r2, [pc, #324]	; 214c4 <CPWMSoundBaseDevice::InterruptHandler()+0x178>
   2137c:	e590c0c0 	ldr	ip, [r0, #192]	; 0xc0
   21380:	e5920fe0 	ldr	r0, [r2, #4064]	; 0xfe0
   21384:	e1a03c13 	lsl	r3, r3, ip
   21388:	e1130000 	tst	r3, r0
   2138c:	0a000044 	beq	214a4 <CPWMSoundBaseDevice::InterruptHandler()+0x158>
   21390:	e5823fe0 	str	r3, [r2, #4064]	; 0xfe0
   21394:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   21398:	e2833602 	add	r3, r3, #2097152	; 0x200000
   2139c:	e2833070 	add	r3, r3, #112	; 0x70
   213a0:	e1a03403 	lsl	r3, r3, #8
   213a4:	e5932000 	ldr	r2, [r3]
   213a8:	e3120004 	tst	r2, #4
   213ac:	0a000040 	beq	214b4 <CPWMSoundBaseDevice::InterruptHandler()+0x168>
   213b0:	e5832000 	str	r2, [r3]
   213b4:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   213b8:	e3120c01 	tst	r2, #256	; 0x100
   213bc:	1a00000f 	bne	21400 <CPWMSoundBaseDevice::InterruptHandler()+0xb4>
   213c0:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   213c4:	e3500000 	cmp	r0, #0
   213c8:	1a00002b 	bne	2147c <CPWMSoundBaseDevice::InterruptHandler()+0x130>
   213cc:	e5d430bf 	ldrb	r3, [r4, #191]	; 0xbf
   213d0:	e3530002 	cmp	r3, #2
   213d4:	e6ef3073 	uxtb	r3, r3
   213d8:	0a000015 	beq	21434 <CPWMSoundBaseDevice::InterruptHandler()+0xe8>
   213dc:	e3530003 	cmp	r3, #3
   213e0:	1a000009 	bne	2140c <CPWMSoundBaseDevice::InterruptHandler()+0xc0>
   213e4:	e3a03000 	mov	r3, #0
   213e8:	e5c430bf 	strb	r3, [r4, #191]	; 0xbf
   213ec:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   213f0:	e3530000 	cmp	r3, #0
   213f4:	08bd8010 	popeq	{r4, pc}
   213f8:	e8bd4010 	pop	{r4, lr}
   213fc:	ea001cd2 	b	2874c <LeaveCritical>
   21400:	e3a03004 	mov	r3, #4
   21404:	e5c430bf 	strb	r3, [r4, #191]	; 0xbf
   21408:	e8bd8010 	pop	{r4, pc}
   2140c:	e3530001 	cmp	r3, #1
   21410:	0a000003 	beq	21424 <CPWMSoundBaseDevice::InterruptHandler()+0xd8>
   21414:	e59f10ac 	ldr	r1, [pc, #172]	; 214c8 <CPWMSoundBaseDevice::InterruptHandler()+0x17c>
   21418:	e3a02e1d 	mov	r2, #464	; 0x1d0
   2141c:	e2810f82 	add	r0, r1, #520	; 0x208
   21420:	ebfff0b6 	bl	1d700 <assertion_failed>
   21424:	e1a00004 	mov	r0, r4
   21428:	ebffff58 	bl	21190 <CPWMSoundBaseDevice::GetNextChunk()>
   2142c:	e3500000 	cmp	r0, #0
   21430:	1affffed 	bne	213ec <CPWMSoundBaseDevice::InterruptHandler()+0xa0>
   21434:	e3a02000 	mov	r2, #0
   21438:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2143c:	e59430c0 	ldr	r3, [r4, #192]	; 0xc0
   21440:	e2833602 	add	r3, r3, #2097152	; 0x200000
   21444:	e2833070 	add	r3, r3, #112	; 0x70
   21448:	e1a03403 	lsl	r3, r3, #8
   2144c:	e583201c 	str	r2, [r3, #28]
   21450:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   21454:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   21458:	e59f106c 	ldr	r1, [pc, #108]	; 214cc <CPWMSoundBaseDevice::InterruptHandler()+0x180>
   2145c:	e5913000 	ldr	r3, [r1]
   21460:	e3833b01 	orr	r3, r3, #1024	; 0x400
   21464:	e3833004 	orr	r3, r3, #4
   21468:	e5813000 	str	r3, [r1]
   2146c:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   21470:	e3a03003 	mov	r3, #3
   21474:	e5c430bf 	strb	r3, [r4, #191]	; 0xbf
   21478:	eaffffdb 	b	213ec <CPWMSoundBaseDevice::InterruptHandler()+0xa0>
   2147c:	eb001c88 	bl	286a4 <EnterCritical>
   21480:	eaffffd1 	b	213cc <CPWMSoundBaseDevice::InterruptHandler()+0x80>
   21484:	e59f103c 	ldr	r1, [pc, #60]	; 214c8 <CPWMSoundBaseDevice::InterruptHandler()+0x17c>
   21488:	e59f2040 	ldr	r2, [pc, #64]	; 214d0 <CPWMSoundBaseDevice::InterruptHandler()+0x184>
   2148c:	e2810f72 	add	r0, r1, #456	; 0x1c8
   21490:	ebfff09a 	bl	1d700 <assertion_failed>
   21494:	e59f102c 	ldr	r1, [pc, #44]	; 214c8 <CPWMSoundBaseDevice::InterruptHandler()+0x17c>
   21498:	e59f2034 	ldr	r2, [pc, #52]	; 214d4 <CPWMSoundBaseDevice::InterruptHandler()+0x188>
   2149c:	e281005c 	add	r0, r1, #92	; 0x5c
   214a0:	ebfff096 	bl	1d700 <assertion_failed>
   214a4:	e59f101c 	ldr	r1, [pc, #28]	; 214c8 <CPWMSoundBaseDevice::InterruptHandler()+0x17c>
   214a8:	e59f2028 	ldr	r2, [pc, #40]	; 214d8 <CPWMSoundBaseDevice::InterruptHandler()+0x18c>
   214ac:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   214b0:	ebfff092 	bl	1d700 <assertion_failed>
   214b4:	e59f100c 	ldr	r1, [pc, #12]	; 214c8 <CPWMSoundBaseDevice::InterruptHandler()+0x17c>
   214b8:	e59f201c 	ldr	r2, [pc, #28]	; 214dc <CPWMSoundBaseDevice::InterruptHandler()+0x190>
   214bc:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   214c0:	ebfff08e 	bl	1d700 <assertion_failed>
   214c4:	20007000 	.word	0x20007000
   214c8:	00032474 	.word	0x00032474
   214cc:	2020c000 	.word	0x2020c000
   214d0:	0000019a 	.word	0x0000019a
   214d4:	0000019b 	.word	0x0000019b
   214d8:	000001a3 	.word	0x000001a3
   214dc:	000001a7 	.word	0x000001a7

000214e0 <CPWMSoundBaseDevice::InterruptStub(void*)>:
   214e0:	e3500000 	cmp	r0, #0
   214e4:	0a000000 	beq	214ec <CPWMSoundBaseDevice::InterruptStub(void*)+0xc>
   214e8:	eaffff97 	b	2134c <CPWMSoundBaseDevice::InterruptHandler()>
   214ec:	e59f100c 	ldr	r1, [pc, #12]	; 21500 <CPWMSoundBaseDevice::InterruptStub(void*)+0x20>
   214f0:	e92d4010 	push	{r4, lr}
   214f4:	e59f2008 	ldr	r2, [pc, #8]	; 21504 <CPWMSoundBaseDevice::InterruptStub(void*)+0x24>
   214f8:	e2810f83 	add	r0, r1, #524	; 0x20c
   214fc:	ebfff07f 	bl	1d700 <assertion_failed>
   21500:	00032474 	.word	0x00032474
   21504:	000001da 	.word	0x000001da

00021508 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)>:
   21508:	e3510001 	cmp	r1, #1
   2150c:	e92d4070 	push	{r4, r5, r6, lr}
   21510:	8a00001d 	bhi	2158c <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x84>
   21514:	e1a04000 	mov	r4, r0
   21518:	e5900064 	ldr	r0, [r0, #100]	; 0x64
   2151c:	e1a05001 	mov	r5, r1
   21520:	e370022e 	cmn	r0, #-536870910	; 0xe0000002
   21524:	83e00000 	mvnhi	r0, #0
   21528:	e3a01000 	mov	r1, #0
   2152c:	91a00100 	lslls	r0, r0, #2
   21530:	eb0018ba 	bl	27820 <operator new[](unsigned int, int)>
   21534:	e0844105 	add	r4, r4, r5, lsl #2
   21538:	e3a01000 	mov	r1, #0
   2153c:	e58400c4 	str	r0, [r4, #196]	; 0xc4
   21540:	e3a0003f 	mov	r0, #63	; 0x3f
   21544:	eb0018b5 	bl	27820 <operator new[](unsigned int, int)>
   21548:	e3a01000 	mov	r1, #0
   2154c:	e59f2048 	ldr	r2, [pc, #72]	; 2159c <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x94>
   21550:	e280301f 	add	r3, r0, #31
   21554:	e3c3301f 	bic	r3, r3, #31
   21558:	e58400cc 	str	r0, [r4, #204]	; 0xcc
   2155c:	e58430d4 	str	r3, [r4, #212]	; 0xd4
   21560:	e5832000 	str	r2, [r3]
   21564:	e59420c4 	ldr	r2, [r4, #196]	; 0xc4
   21568:	e59f0030 	ldr	r0, [pc, #48]	; 215a0 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x98>
   2156c:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
   21570:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
   21574:	e5832004 	str	r2, [r3, #4]
   21578:	e5830008 	str	r0, [r3, #8]
   2157c:	e5831010 	str	r1, [r3, #16]
   21580:	e5831018 	str	r1, [r3, #24]
   21584:	e583101c 	str	r1, [r3, #28]
   21588:	e8bd8070 	pop	{r4, r5, r6, pc}
   2158c:	e59f1010 	ldr	r1, [pc, #16]	; 215a4 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0x9c>
   21590:	e59f2010 	ldr	r2, [pc, #16]	; 215a8 <CPWMSoundBaseDevice::SetupDMAControlBlock(unsigned int)+0xa0>
   21594:	e2810f86 	add	r0, r1, #536	; 0x218
   21598:	ebfff058 	bl	1d700 <assertion_failed>
   2159c:	00050349 	.word	0x00050349
   215a0:	7e20c018 	.word	0x7e20c018
   215a4:	00032474 	.word	0x00032474
   215a8:	000001e1 	.word	0x000001e1

000215ac <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
   215ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   215b0:	e1a04000 	mov	r4, r0
   215b4:	e3a05000 	mov	r5, #0
   215b8:	e1a08001 	mov	r8, r1
   215bc:	e1a07002 	mov	r7, r2
   215c0:	e1a06003 	mov	r6, r3
   215c4:	e59d9020 	ldr	r9, [sp, #32]
   215c8:	ebfff247 	bl	1deec <CDevice::CDevice()>
   215cc:	e59f3064 	ldr	r3, [pc, #100]	; 21638 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)+0x8c>
   215d0:	e5c46014 	strb	r6, [r4, #20]
   215d4:	e5843000 	str	r3, [r4]
   215d8:	e584800c 	str	r8, [r4, #12]
   215dc:	e5847010 	str	r7, [r4, #16]
   215e0:	e5849018 	str	r9, [r4, #24]
   215e4:	e584501c 	str	r5, [r4, #28]
   215e8:	e2840020 	add	r0, r4, #32
   215ec:	eb001fe8 	bl	29594 <CCharGenerator::CCharGenerator()>
   215f0:	e3a06001 	mov	r6, #1
   215f4:	e3e03020 	mvn	r3, #32
   215f8:	e1a02005 	mov	r2, r5
   215fc:	e3a01081 	mov	r1, #129	; 0x81
   21600:	e5845024 	str	r5, [r4, #36]	; 0x24
   21604:	e584503c 	str	r5, [r4, #60]	; 0x3c
   21608:	e5845040 	str	r5, [r4, #64]	; 0x40
   2160c:	e5845048 	str	r5, [r4, #72]	; 0x48
   21610:	e584504c 	str	r5, [r4, #76]	; 0x4c
   21614:	e5c45054 	strb	r5, [r4, #84]	; 0x54
   21618:	e5c45060 	strb	r5, [r4, #96]	; 0x60
   2161c:	e1c435b2 	strh	r3, [r4, #82]	; 0x52
   21620:	e5c46050 	strb	r6, [r4, #80]	; 0x50
   21624:	e2840064 	add	r0, r4, #100	; 0x64
   21628:	eb002003 	bl	2963c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
   2162c:	e1a00004 	mov	r0, r4
   21630:	e584608c 	str	r6, [r4, #140]	; 0x8c
   21634:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21638:	000326a4 	.word	0x000326a4

0002163c <CScreenDevice::~CScreenDevice()>:
   2163c:	e5d02014 	ldrb	r2, [r0, #20]
   21640:	e59f3070 	ldr	r3, [pc, #112]	; 216b8 <CScreenDevice::~CScreenDevice()+0x7c>
   21644:	e3520000 	cmp	r2, #0
   21648:	e92d4070 	push	{r4, r5, r6, lr}
   2164c:	e1a04000 	mov	r4, r0
   21650:	e5803000 	str	r3, [r0]
   21654:	0a000003 	beq	21668 <CScreenDevice::~CScreenDevice()+0x2c>
   21658:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   2165c:	e3500000 	cmp	r0, #0
   21660:	0a000000 	beq	21668 <CScreenDevice::~CScreenDevice()+0x2c>
   21664:	eb00187b 	bl	27858 <operator delete[](void*)>
   21668:	e3a03000 	mov	r3, #0
   2166c:	e594501c 	ldr	r5, [r4, #28]
   21670:	e5843024 	str	r3, [r4, #36]	; 0x24
   21674:	e1550003 	cmp	r5, r3
   21678:	0a000004 	beq	21690 <CScreenDevice::~CScreenDevice()+0x54>
   2167c:	e1a00005 	mov	r0, r5
   21680:	eb001e85 	bl	2909c <CBcmFrameBuffer::~CBcmFrameBuffer()>
   21684:	e1a00005 	mov	r0, r5
   21688:	e3a01098 	mov	r1, #152	; 0x98
   2168c:	eb001872 	bl	2785c <operator delete(void*, unsigned int)>
   21690:	e3a03000 	mov	r3, #0
   21694:	e2840064 	add	r0, r4, #100	; 0x64
   21698:	e584301c 	str	r3, [r4, #28]
   2169c:	eb002029 	bl	29748 <CDMAChannel::~CDMAChannel()>
   216a0:	e2840020 	add	r0, r4, #32
   216a4:	eb001fbd 	bl	295a0 <CCharGenerator::~CCharGenerator()>
   216a8:	e1a00004 	mov	r0, r4
   216ac:	ebfff1ec 	bl	1de64 <CDevice::~CDevice()>
   216b0:	e1a00004 	mov	r0, r4
   216b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   216b8:	000326a4 	.word	0x000326a4

000216bc <CScreenDevice::~CScreenDevice()>:
   216bc:	e92d4010 	push	{r4, lr}
   216c0:	e1a04000 	mov	r4, r0
   216c4:	ebffffdc 	bl	2163c <CScreenDevice::~CScreenDevice()>
   216c8:	e1a00004 	mov	r0, r4
   216cc:	e3a01090 	mov	r1, #144	; 0x90
   216d0:	eb001861 	bl	2785c <operator delete(void*, unsigned int)>
   216d4:	e1a00004 	mov	r0, r4
   216d8:	e8bd8010 	pop	{r4, pc}

000216dc <CScreenDevice::Initialize()>:
   216dc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   216e0:	e5d05014 	ldrb	r5, [r0, #20]
   216e4:	e1a04000 	mov	r4, r0
   216e8:	e3550000 	cmp	r5, #0
   216ec:	e24dd014 	sub	sp, sp, #20
   216f0:	0a00002f 	beq	217b4 <CScreenDevice::Initialize()+0xd8>
   216f4:	e590300c 	ldr	r3, [r0, #12]
   216f8:	e5902010 	ldr	r2, [r0, #16]
   216fc:	e5803030 	str	r3, [r0, #48]	; 0x30
   21700:	e0000392 	mul	r0, r2, r3
   21704:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
   21708:	e1a00080 	lsl	r0, r0, #1
   2170c:	e5840028 	str	r0, [r4, #40]	; 0x28
   21710:	e584302c 	str	r3, [r4, #44]	; 0x2c
   21714:	23e00000 	mvncs	r0, #0
   21718:	e5842034 	str	r2, [r4, #52]	; 0x34
   2171c:	eb001846 	bl	2783c <operator new[](unsigned int)>
   21720:	e5947034 	ldr	r7, [r4, #52]	; 0x34
   21724:	e5840024 	str	r0, [r4, #36]	; 0x24
   21728:	e2846020 	add	r6, r4, #32
   2172c:	e1a00006 	mov	r0, r6
   21730:	eb001f9d 	bl	295ac <CCharGenerator::GetCharHeight() const>
   21734:	e1a01000 	mov	r1, r0
   21738:	e1a00007 	mov	r0, r7
   2173c:	eb0024d0 	bl	2aa84 <__udivsi3>
   21740:	e1a05000 	mov	r5, r0
   21744:	e1a00006 	mov	r0, r6
   21748:	eb001f97 	bl	295ac <CCharGenerator::GetCharHeight() const>
   2174c:	e3a02000 	mov	r2, #0
   21750:	e0000590 	mul	r0, r0, r5
   21754:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   21758:	e5840038 	str	r0, [r4, #56]	; 0x38
   2175c:	e1c424f8 	strd	r2, [r4, #72]	; 0x48
   21760:	e5840044 	str	r0, [r4, #68]	; 0x44
   21764:	e1a00004 	mov	r0, r4
   21768:	eb000222 	bl	21ff8 <CScreenDevice::ClearDisplayEnd()>
   2176c:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
   21770:	e3530000 	cmp	r3, #0
   21774:	1a00000b 	bne	217a8 <CScreenDevice::Initialize()+0xcc>
   21778:	ebfff2ba 	bl	1e268 <CDeviceNameService::Get()>
   2177c:	e3a03000 	mov	r3, #0
   21780:	e5942018 	ldr	r2, [r4, #24]
   21784:	e59f10e0 	ldr	r1, [pc, #224]	; 2186c <CScreenDevice::Initialize()+0x190>
   21788:	e58d3000 	str	r3, [sp]
   2178c:	e2822001 	add	r2, r2, #1
   21790:	e1a03004 	mov	r3, r4
   21794:	ebfff2bf 	bl	1e298 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   21798:	e3a05001 	mov	r5, #1
   2179c:	e1a00005 	mov	r0, r5
   217a0:	e28dd014 	add	sp, sp, #20
   217a4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   217a8:	e1a00004 	mov	r0, r4
   217ac:	eb0003ec 	bl	22764 <CScreenDevice::InvertCursor() [clone .part.0]>
   217b0:	eafffff0 	b	21778 <CScreenDevice::Initialize()+0x9c>
   217b4:	e3a00098 	mov	r0, #152	; 0x98
   217b8:	eb001819 	bl	27824 <operator new(unsigned int)>
   217bc:	e1a06000 	mov	r6, r0
   217c0:	e5943018 	ldr	r3, [r4, #24]
   217c4:	e58d5004 	str	r5, [sp, #4]
   217c8:	e58d3008 	str	r3, [sp, #8]
   217cc:	e58d5000 	str	r5, [sp]
   217d0:	e3a03010 	mov	r3, #16
   217d4:	e5942010 	ldr	r2, [r4, #16]
   217d8:	e594100c 	ldr	r1, [r4, #12]
   217dc:	eb001dda 	bl	28f4c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   217e0:	e1a00006 	mov	r0, r6
   217e4:	e584601c 	str	r6, [r4, #28]
   217e8:	eb001e58 	bl	29150 <CBcmFrameBuffer::Initialize()>
   217ec:	e3500000 	cmp	r0, #0
   217f0:	0affffe9 	beq	2179c <CScreenDevice::Initialize()+0xc0>
   217f4:	e594001c 	ldr	r0, [r4, #28]
   217f8:	eb001e95 	bl	29254 <CBcmFrameBuffer::GetDepth() const>
   217fc:	e3500010 	cmp	r0, #16
   21800:	1affffe5 	bne	2179c <CScreenDevice::Initialize()+0xc0>
   21804:	e594001c 	ldr	r0, [r4, #28]
   21808:	eb001e93 	bl	2925c <CBcmFrameBuffer::GetBuffer() const>
   2180c:	e1a03000 	mov	r3, r0
   21810:	e594001c 	ldr	r0, [r4, #28]
   21814:	e5843024 	str	r3, [r4, #36]	; 0x24
   21818:	eb001e91 	bl	29264 <CBcmFrameBuffer::GetSize() const>
   2181c:	e1a03000 	mov	r3, r0
   21820:	e594001c 	ldr	r0, [r4, #28]
   21824:	e5843028 	str	r3, [r4, #40]	; 0x28
   21828:	eb001e87 	bl	2924c <CBcmFrameBuffer::GetPitch() const>
   2182c:	e1a03000 	mov	r3, r0
   21830:	e594001c 	ldr	r0, [r4, #28]
   21834:	e584302c 	str	r3, [r4, #44]	; 0x2c
   21838:	eb001e7b 	bl	2922c <CBcmFrameBuffer::GetWidth() const>
   2183c:	e1a03000 	mov	r3, r0
   21840:	e594001c 	ldr	r0, [r4, #28]
   21844:	e5843030 	str	r3, [r4, #48]	; 0x30
   21848:	eb001e79 	bl	29234 <CBcmFrameBuffer::GetHeight() const>
   2184c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   21850:	e1a07000 	mov	r7, r0
   21854:	e3130003 	tst	r3, #3
   21858:	e5840034 	str	r0, [r4, #52]	; 0x34
   2185c:	1affffce 	bne	2179c <CScreenDevice::Initialize()+0xc0>
   21860:	e1a030a3 	lsr	r3, r3, #1
   21864:	e584302c 	str	r3, [r4, #44]	; 0x2c
   21868:	eaffffae 	b	21728 <CScreenDevice::Initialize()+0x4c>
   2186c:	00032698 	.word	0x00032698

00021870 <CScreenDevice::GetWidth() const>:
   21870:	e5900030 	ldr	r0, [r0, #48]	; 0x30
   21874:	e12fff1e 	bx	lr

00021878 <CScreenDevice::GetHeight() const>:
   21878:	e5900034 	ldr	r0, [r0, #52]	; 0x34
   2187c:	e12fff1e 	bx	lr

00021880 <CScreenDevice::GetColumns() const>:
   21880:	e92d4010 	push	{r4, lr}
   21884:	e2800020 	add	r0, r0, #32
   21888:	e5904010 	ldr	r4, [r0, #16]
   2188c:	eb001f44 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   21890:	e1a01000 	mov	r1, r0
   21894:	e1a00004 	mov	r0, r4
   21898:	eb002479 	bl	2aa84 <__udivsi3>
   2189c:	e8bd8010 	pop	{r4, pc}

000218a0 <CScreenDevice::GetRows() const>:
   218a0:	e92d4010 	push	{r4, lr}
   218a4:	e2800020 	add	r0, r0, #32
   218a8:	e5904018 	ldr	r4, [r0, #24]
   218ac:	eb001f3e 	bl	295ac <CCharGenerator::GetCharHeight() const>
   218b0:	e1a01000 	mov	r1, r0
   218b4:	e1a00004 	mov	r0, r4
   218b8:	eb002471 	bl	2aa84 <__udivsi3>
   218bc:	e8bd8010 	pop	{r4, pc}

000218c0 <CScreenDevice::GetFrameBuffer()>:
   218c0:	e590001c 	ldr	r0, [r0, #28]
   218c4:	e12fff1e 	bx	lr

000218c8 <CScreenDevice::GetStatus()>:
   218c8:	e92d4010 	push	{r4, lr}
   218cc:	e591c028 	ldr	ip, [r1, #40]	; 0x28
   218d0:	e591e024 	ldr	lr, [r1, #36]	; 0x24
   218d4:	e591203c 	ldr	r2, [r1, #60]	; 0x3c
   218d8:	e580e000 	str	lr, [r0]
   218dc:	e580c004 	str	ip, [r0, #4]
   218e0:	e591e040 	ldr	lr, [r1, #64]	; 0x40
   218e4:	e591c044 	ldr	ip, [r1, #68]	; 0x44
   218e8:	e5802008 	str	r2, [r0, #8]
   218ec:	e5912048 	ldr	r2, [r1, #72]	; 0x48
   218f0:	e580e00c 	str	lr, [r0, #12]
   218f4:	e580c010 	str	ip, [r0, #16]
   218f8:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
   218fc:	e5d1c050 	ldrb	ip, [r1, #80]	; 0x50
   21900:	e5802014 	str	r2, [r0, #20]
   21904:	e1d125b2 	ldrh	r2, [r1, #82]	; 0x52
   21908:	e5d14054 	ldrb	r4, [r1, #84]	; 0x54
   2190c:	e580e018 	str	lr, [r0, #24]
   21910:	e5c0c01c 	strb	ip, [r0, #28]
   21914:	e591e058 	ldr	lr, [r1, #88]	; 0x58
   21918:	e591c05c 	ldr	ip, [r1, #92]	; 0x5c
   2191c:	e1c021be 	strh	r2, [r0, #30]
   21920:	e5d12060 	ldrb	r2, [r1, #96]	; 0x60
   21924:	e5c04020 	strb	r4, [r0, #32]
   21928:	e580e024 	str	lr, [r0, #36]	; 0x24
   2192c:	e580c028 	str	ip, [r0, #40]	; 0x28
   21930:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
   21934:	e8bd8010 	pop	{r4, pc}

00021938 <CScreenDevice::SetStatus(TScreenStatus const&)>:
   21938:	e5902028 	ldr	r2, [r0, #40]	; 0x28
   2193c:	e5913004 	ldr	r3, [r1, #4]
   21940:	e1520003 	cmp	r2, r3
   21944:	0a000001 	beq	21950 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
   21948:	e3a00000 	mov	r0, #0
   2194c:	e12fff1e 	bx	lr
   21950:	e92d4070 	push	{r4, r5, r6, lr}
   21954:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   21958:	e1a05001 	mov	r5, r1
   2195c:	e590102c 	ldr	r1, [r0, #44]	; 0x2c
   21960:	e1a04000 	mov	r4, r0
   21964:	e1510003 	cmp	r1, r3
   21968:	1a00002e 	bne	21a28 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
   2196c:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
   21970:	e3500000 	cmp	r0, #0
   21974:	1a000020 	bne	219fc <CScreenDevice::SetStatus(TScreenStatus const&)+0xc4>
   21978:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
   2197c:	e3530000 	cmp	r3, #0
   21980:	1a000028 	bne	21a28 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
   21984:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
   21988:	e3530000 	cmp	r3, #0
   2198c:	1a000025 	bne	21a28 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
   21990:	e5951000 	ldr	r1, [r5]
   21994:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   21998:	eb0015bb 	bl	2708c <memcpy>
   2199c:	e1c500dc 	ldrd	r0, [r5, #12]
   219a0:	e5953008 	ldr	r3, [r5, #8]
   219a4:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
   219a8:	e5d5c01c 	ldrb	ip, [r5, #28]
   219ac:	e3520000 	cmp	r2, #0
   219b0:	e5952014 	ldr	r2, [r5, #20]
   219b4:	e584303c 	str	r3, [r4, #60]	; 0x3c
   219b8:	e5953018 	ldr	r3, [r5, #24]
   219bc:	e5840040 	str	r0, [r4, #64]	; 0x40
   219c0:	e5841044 	str	r1, [r4, #68]	; 0x44
   219c4:	e1d501be 	ldrh	r0, [r5, #30]
   219c8:	e5d51020 	ldrb	r1, [r5, #32]
   219cc:	e5842048 	str	r2, [r4, #72]	; 0x48
   219d0:	e584304c 	str	r3, [r4, #76]	; 0x4c
   219d4:	e1c522d4 	ldrd	r2, [r5, #36]	; 0x24
   219d8:	e5c4c050 	strb	ip, [r4, #80]	; 0x50
   219dc:	e1c425f8 	strd	r2, [r4, #88]	; 0x58
   219e0:	e1c405b2 	strh	r0, [r4, #82]	; 0x52
   219e4:	e5c41054 	strb	r1, [r4, #84]	; 0x54
   219e8:	1a000012 	bne	21a38 <CScreenDevice::SetStatus(TScreenStatus const&)+0x100>
   219ec:	e3a03000 	mov	r3, #0
   219f0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   219f4:	e3a00001 	mov	r0, #1
   219f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   219fc:	eb001b28 	bl	286a4 <EnterCritical>
   21a00:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
   21a04:	e3530000 	cmp	r3, #0
   21a08:	1a000002 	bne	21a18 <CScreenDevice::SetStatus(TScreenStatus const&)+0xe0>
   21a0c:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
   21a10:	e3530000 	cmp	r3, #0
   21a14:	0a000005 	beq	21a30 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf8>
   21a18:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
   21a1c:	e3530000 	cmp	r3, #0
   21a20:	0a000000 	beq	21a28 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
   21a24:	eb001b48 	bl	2874c <LeaveCritical>
   21a28:	e3a00000 	mov	r0, #0
   21a2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   21a30:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   21a34:	eaffffd5 	b	21990 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   21a38:	eb001b43 	bl	2874c <LeaveCritical>
   21a3c:	eaffffea 	b	219ec <CScreenDevice::SetStatus(TScreenStatus const&)+0xb4>

00021a40 <CScreenDevice::Write(void const*, unsigned int)>:
   21a40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21a44:	e1a05000 	mov	r5, r0
   21a48:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
   21a4c:	e1a04001 	mov	r4, r1
   21a50:	e3500000 	cmp	r0, #0
   21a54:	e1a07002 	mov	r7, r2
   21a58:	1a000022 	bne	21ae8 <CScreenDevice::Write(void const*, unsigned int)+0xa8>
   21a5c:	e3a02001 	mov	r2, #1
   21a60:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
   21a64:	e5c52060 	strb	r2, [r5, #96]	; 0x60
   21a68:	e3530000 	cmp	r3, #0
   21a6c:	1a000017 	bne	21ad0 <CScreenDevice::Write(void const*, unsigned int)+0x90>
   21a70:	e3570000 	cmp	r7, #0
   21a74:	e2473001 	sub	r3, r7, #1
   21a78:	0a00000b 	beq	21aac <CScreenDevice::Write(void const*, unsigned int)+0x6c>
   21a7c:	e2837001 	add	r7, r3, #1
   21a80:	e0846007 	add	r6, r4, r7
   21a84:	e0d410d1 	ldrsb	r1, [r4], #1
   21a88:	e1a00005 	mov	r0, r5
   21a8c:	eb000019 	bl	21af8 <CScreenDevice::Write(char)>
   21a90:	e1540006 	cmp	r4, r6
   21a94:	1afffffa 	bne	21a84 <CScreenDevice::Write(void const*, unsigned int)+0x44>
   21a98:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
   21a9c:	e3530000 	cmp	r3, #0
   21aa0:	0a000001 	beq	21aac <CScreenDevice::Write(void const*, unsigned int)+0x6c>
   21aa4:	e1a00005 	mov	r0, r5
   21aa8:	eb00032d 	bl	22764 <CScreenDevice::InvertCursor() [clone .part.0]>
   21aac:	e3a02000 	mov	r2, #0
   21ab0:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   21ab4:	e5c52060 	strb	r2, [r5, #96]	; 0x60
   21ab8:	e1530002 	cmp	r3, r2
   21abc:	1a00000b 	bne	21af0 <CScreenDevice::Write(void const*, unsigned int)+0xb0>
   21ac0:	e3a03000 	mov	r3, #0
   21ac4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   21ac8:	e1a00007 	mov	r0, r7
   21acc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21ad0:	e1a00005 	mov	r0, r5
   21ad4:	eb000322 	bl	22764 <CScreenDevice::InvertCursor() [clone .part.0]>
   21ad8:	e3570000 	cmp	r7, #0
   21adc:	e2473001 	sub	r3, r7, #1
   21ae0:	1affffe5 	bne	21a7c <CScreenDevice::Write(void const*, unsigned int)+0x3c>
   21ae4:	eaffffeb 	b	21a98 <CScreenDevice::Write(void const*, unsigned int)+0x58>
   21ae8:	eb001aed 	bl	286a4 <EnterCritical>
   21aec:	eaffffda 	b	21a5c <CScreenDevice::Write(void const*, unsigned int)+0x1c>
   21af0:	eb001b15 	bl	2874c <LeaveCritical>
   21af4:	eafffff1 	b	21ac0 <CScreenDevice::Write(void const*, unsigned int)+0x80>

00021af8 <CScreenDevice::Write(char)>:
   21af8:	e92d4010 	push	{r4, lr}
   21afc:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   21b00:	e1a04000 	mov	r4, r0
   21b04:	e24dd008 	sub	sp, sp, #8
   21b08:	e3530007 	cmp	r3, #7
   21b0c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   21b10:	ea000047 	b	21c34 <CScreenDevice::Write(char)+0x13c>
   21b14:	00021c44 	.word	0x00021c44
   21b18:	00021d34 	.word	0x00021d34
   21b1c:	00021ca4 	.word	0x00021ca4
   21b20:	00021b34 	.word	0x00021b34
   21b24:	00021d48 	.word	0x00021d48
   21b28:	00021d68 	.word	0x00021d68
   21b2c:	00021d88 	.word	0x00021d88
   21b30:	00021cfc 	.word	0x00021cfc
   21b34:	e241303b 	sub	r3, r1, #59	; 0x3b
   21b38:	e3530032 	cmp	r3, #50	; 0x32
   21b3c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   21b40:	ea000070 	b	21d08 <CScreenDevice::Write(char)+0x210>
   21b44:	00021e6c 	.word	0x00021e6c
   21b48:	00021d08 	.word	0x00021d08
   21b4c:	00021d08 	.word	0x00021d08
   21b50:	00021d08 	.word	0x00021d08
   21b54:	00021d08 	.word	0x00021d08
   21b58:	00021d08 	.word	0x00021d08
   21b5c:	00021d08 	.word	0x00021d08
   21b60:	00021d08 	.word	0x00021d08
   21b64:	00021d08 	.word	0x00021d08
   21b68:	00021d08 	.word	0x00021d08
   21b6c:	00021d08 	.word	0x00021d08
   21b70:	00021d08 	.word	0x00021d08
   21b74:	00021d08 	.word	0x00021d08
   21b78:	00021d08 	.word	0x00021d08
   21b7c:	00021d08 	.word	0x00021d08
   21b80:	00021d08 	.word	0x00021d08
   21b84:	00021d08 	.word	0x00021d08
   21b88:	00021c34 	.word	0x00021c34
   21b8c:	00021c34 	.word	0x00021c34
   21b90:	00021d08 	.word	0x00021d08
   21b94:	00021d08 	.word	0x00021d08
   21b98:	00021c34 	.word	0x00021c34
   21b9c:	00021d08 	.word	0x00021d08
   21ba0:	00021d08 	.word	0x00021d08
   21ba4:	00021d08 	.word	0x00021d08
   21ba8:	00021d08 	.word	0x00021d08
   21bac:	00021d08 	.word	0x00021d08
   21bb0:	00021d08 	.word	0x00021d08
   21bb4:	00021d08 	.word	0x00021d08
   21bb8:	00021ef8 	.word	0x00021ef8
   21bbc:	00021d08 	.word	0x00021d08
   21bc0:	00021d08 	.word	0x00021d08
   21bc4:	00021d08 	.word	0x00021d08
   21bc8:	00021d08 	.word	0x00021d08
   21bcc:	00021d08 	.word	0x00021d08
   21bd0:	00021d08 	.word	0x00021d08
   21bd4:	00021d08 	.word	0x00021d08
   21bd8:	00021d08 	.word	0x00021d08
   21bdc:	00021d08 	.word	0x00021d08
   21be0:	00021d08 	.word	0x00021d08
   21be4:	00021d08 	.word	0x00021d08
   21be8:	00021d08 	.word	0x00021d08
   21bec:	00021d08 	.word	0x00021d08
   21bf0:	00021d08 	.word	0x00021d08
   21bf4:	00021d08 	.word	0x00021d08
   21bf8:	00021e50 	.word	0x00021e50
   21bfc:	00021d08 	.word	0x00021d08
   21c00:	00021d08 	.word	0x00021d08
   21c04:	00021d08 	.word	0x00021d08
   21c08:	00021e50 	.word	0x00021e50
   21c0c:	00021e78 	.word	0x00021e78
   21c10:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
   21c14:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   21c18:	e1520003 	cmp	r2, r3
   21c1c:	9a000004 	bls	21c34 <CScreenDevice::Write(char)+0x13c>
   21c20:	e2800020 	add	r0, r0, #32
   21c24:	eb001e60 	bl	295ac <CCharGenerator::GetCharHeight() const>
   21c28:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   21c2c:	e0430000 	sub	r0, r3, r0
   21c30:	e584004c 	str	r0, [r4, #76]	; 0x4c
   21c34:	e3a03000 	mov	r3, #0
   21c38:	e584303c 	str	r3, [r4, #60]	; 0x3c
   21c3c:	e28dd008 	add	sp, sp, #8
   21c40:	e8bd8010 	pop	{r4, pc}
   21c44:	e2413008 	sub	r3, r1, #8
   21c48:	e3530013 	cmp	r3, #19
   21c4c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   21c50:	ea000062 	b	21de0 <CScreenDevice::Write(char)+0x2e8>
   21c54:	00021e44 	.word	0x00021e44
   21c58:	00021e38 	.word	0x00021e38
   21c5c:	00021e24 	.word	0x00021e24
   21c60:	00021de0 	.word	0x00021de0
   21c64:	00021de0 	.word	0x00021de0
   21c68:	00021e18 	.word	0x00021e18
   21c6c:	00021de0 	.word	0x00021de0
   21c70:	00021de0 	.word	0x00021de0
   21c74:	00021de0 	.word	0x00021de0
   21c78:	00021de0 	.word	0x00021de0
   21c7c:	00021de0 	.word	0x00021de0
   21c80:	00021de0 	.word	0x00021de0
   21c84:	00021de0 	.word	0x00021de0
   21c88:	00021de0 	.word	0x00021de0
   21c8c:	00021de0 	.word	0x00021de0
   21c90:	00021de0 	.word	0x00021de0
   21c94:	00021de0 	.word	0x00021de0
   21c98:	00021de0 	.word	0x00021de0
   21c9c:	00021de0 	.word	0x00021de0
   21ca0:	00021e0c 	.word	0x00021e0c
   21ca4:	e241303f 	sub	r3, r1, #63	; 0x3f
   21ca8:	e3530011 	cmp	r3, #17
   21cac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   21cb0:	ea0000b2 	b	21f80 <CScreenDevice::Write(char)+0x488>
   21cb4:	00021f0c 	.word	0x00021f0c
   21cb8:	00021f80 	.word	0x00021f80
   21cbc:	00021c10 	.word	0x00021c10
   21cc0:	00021f70 	.word	0x00021f70
   21cc4:	00021f60 	.word	0x00021f60
   21cc8:	00021f50 	.word	0x00021f50
   21ccc:	00021f80 	.word	0x00021f80
   21cd0:	00021f80 	.word	0x00021f80
   21cd4:	00021f80 	.word	0x00021f80
   21cd8:	00021f38 	.word	0x00021f38
   21cdc:	00021f80 	.word	0x00021f80
   21ce0:	00021f28 	.word	0x00021f28
   21ce4:	00021f18 	.word	0x00021f18
   21ce8:	00021c34 	.word	0x00021c34
   21cec:	00021c34 	.word	0x00021c34
   21cf0:	00021f80 	.word	0x00021f80
   21cf4:	00021f80 	.word	0x00021f80
   21cf8:	00021c34 	.word	0x00021c34
   21cfc:	e3c13004 	bic	r3, r1, #4
   21d00:	e3530068 	cmp	r3, #104	; 0x68
   21d04:	0a00002e 	beq	21dc4 <CScreenDevice::Write(char)+0x2cc>
   21d08:	e2411030 	sub	r1, r1, #48	; 0x30
   21d0c:	e6ef3071 	uxtb	r3, r1
   21d10:	e3530009 	cmp	r3, #9
   21d14:	8affffc6 	bhi	21c34 <CScreenDevice::Write(char)+0x13c>
   21d18:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   21d1c:	e0833103 	add	r3, r3, r3, lsl #2
   21d20:	e0811083 	add	r1, r1, r3, lsl #1
   21d24:	e3510063 	cmp	r1, #99	; 0x63
   21d28:	e5841058 	str	r1, [r4, #88]	; 0x58
   21d2c:	8affffc0 	bhi	21c34 <CScreenDevice::Write(char)+0x13c>
   21d30:	eaffffc1 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21d34:	e351005b 	cmp	r1, #91	; 0x5b
   21d38:	1affffbd 	bne	21c34 <CScreenDevice::Write(char)+0x13c>
   21d3c:	e3a03002 	mov	r3, #2
   21d40:	e580303c 	str	r3, [r0, #60]	; 0x3c
   21d44:	eaffffbc 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21d48:	e2411030 	sub	r1, r1, #48	; 0x30
   21d4c:	e6ef3071 	uxtb	r3, r1
   21d50:	e3530009 	cmp	r3, #9
   21d54:	8affffb6 	bhi	21c34 <CScreenDevice::Write(char)+0x13c>
   21d58:	e3a03007 	mov	r3, #7
   21d5c:	e5801058 	str	r1, [r0, #88]	; 0x58
   21d60:	e580303c 	str	r3, [r0, #60]	; 0x3c
   21d64:	eaffffb4 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21d68:	e2411030 	sub	r1, r1, #48	; 0x30
   21d6c:	e6ef3071 	uxtb	r3, r1
   21d70:	e3530009 	cmp	r3, #9
   21d74:	8affffae 	bhi	21c34 <CScreenDevice::Write(char)+0x13c>
   21d78:	e3a03006 	mov	r3, #6
   21d7c:	e580105c 	str	r1, [r0, #92]	; 0x5c
   21d80:	e580303c 	str	r3, [r0, #60]	; 0x3c
   21d84:	eaffffac 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21d88:	e3510048 	cmp	r1, #72	; 0x48
   21d8c:	0a000090 	beq	21fd4 <CScreenDevice::Write(char)+0x4dc>
   21d90:	e3510072 	cmp	r1, #114	; 0x72
   21d94:	0a00008a 	beq	21fc4 <CScreenDevice::Write(char)+0x4cc>
   21d98:	e2411030 	sub	r1, r1, #48	; 0x30
   21d9c:	e6ef3071 	uxtb	r3, r1
   21da0:	e3530009 	cmp	r3, #9
   21da4:	8affffa2 	bhi	21c34 <CScreenDevice::Write(char)+0x13c>
   21da8:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   21dac:	e0833103 	add	r3, r3, r3, lsl #2
   21db0:	e0811083 	add	r1, r1, r3, lsl #1
   21db4:	e35100c7 	cmp	r1, #199	; 0xc7
   21db8:	e580105c 	str	r1, [r0, #92]	; 0x5c
   21dbc:	8affff9c 	bhi	21c34 <CScreenDevice::Write(char)+0x13c>
   21dc0:	eaffff9d 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21dc4:	e5903058 	ldr	r3, [r0, #88]	; 0x58
   21dc8:	e3530019 	cmp	r3, #25
   21dcc:	02411068 	subeq	r1, r1, #104	; 0x68
   21dd0:	016f1f11 	clzeq	r1, r1
   21dd4:	01a012a1 	lsreq	r1, r1, #5
   21dd8:	05c01050 	strbeq	r1, [r0, #80]	; 0x50
   21ddc:	eaffff94 	b	21c34 <CScreenDevice::Write(char)+0x13c>
   21de0:	e6ef3071 	uxtb	r3, r1
   21de4:	e353001f 	cmp	r3, #31
   21de8:	9affff93 	bls	21c3c <CScreenDevice::Write(char)+0x144>
   21dec:	e1d035b2 	ldrh	r3, [r0, #82]	; 0x52
   21df0:	e58d3000 	str	r3, [sp]
   21df4:	e1c024d8 	ldrd	r2, [r0, #72]	; 0x48
   21df8:	eb0001c2 	bl	22508 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   21dfc:	e1a00004 	mov	r0, r4
   21e00:	e28dd008 	add	sp, sp, #8
   21e04:	e8bd4010 	pop	{r4, lr}
   21e08:	ea0000f7 	b	221ec <CScreenDevice::CursorRight()>
   21e0c:	e3a03001 	mov	r3, #1
   21e10:	e580303c 	str	r3, [r0, #60]	; 0x3c
   21e14:	eaffff88 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21e18:	e3a03000 	mov	r3, #0
   21e1c:	e5803048 	str	r3, [r0, #72]	; 0x48
   21e20:	eaffff85 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21e24:	e3a03000 	mov	r3, #0
   21e28:	e5803048 	str	r3, [r0, #72]	; 0x48
   21e2c:	e28dd008 	add	sp, sp, #8
   21e30:	e8bd4010 	pop	{r4, lr}
   21e34:	ea0000a1 	b	220c0 <CScreenDevice::CursorDown()>
   21e38:	e28dd008 	add	sp, sp, #8
   21e3c:	e8bd4010 	pop	{r4, lr}
   21e40:	ea00016a 	b	223f0 <CScreenDevice::Tabulator()>
   21e44:	e28dd008 	add	sp, sp, #8
   21e48:	e8bd4010 	pop	{r4, lr}
   21e4c:	ea0000b2 	b	2211c <CScreenDevice::CursorLeft()>
   21e50:	e5903058 	ldr	r3, [r0, #88]	; 0x58
   21e54:	e3530004 	cmp	r3, #4
   21e58:	02411068 	subeq	r1, r1, #104	; 0x68
   21e5c:	016f1f11 	clzeq	r1, r1
   21e60:	01a012a1 	lsreq	r1, r1, #5
   21e64:	05c01054 	strbeq	r1, [r0, #84]	; 0x54
   21e68:	eaffff71 	b	21c34 <CScreenDevice::Write(char)+0x13c>
   21e6c:	e3a03005 	mov	r3, #5
   21e70:	e580303c 	str	r3, [r0, #60]	; 0x3c
   21e74:	eaffff70 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21e78:	e5903058 	ldr	r3, [r0, #88]	; 0x58
   21e7c:	e353001b 	cmp	r3, #27
   21e80:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   21e84:	eaffff6a 	b	21c34 <CScreenDevice::Write(char)+0x13c>
   21e88:	00021fa0 	.word	0x00021fa0
   21e8c:	00021fac 	.word	0x00021fac
   21e90:	00021fb8 	.word	0x00021fb8
   21e94:	00021c34 	.word	0x00021c34
   21e98:	00021c34 	.word	0x00021c34
   21e9c:	00021c34 	.word	0x00021c34
   21ea0:	00021c34 	.word	0x00021c34
   21ea4:	00021c34 	.word	0x00021c34
   21ea8:	00021c34 	.word	0x00021c34
   21eac:	00021c34 	.word	0x00021c34
   21eb0:	00021c34 	.word	0x00021c34
   21eb4:	00021c34 	.word	0x00021c34
   21eb8:	00021c34 	.word	0x00021c34
   21ebc:	00021c34 	.word	0x00021c34
   21ec0:	00021c34 	.word	0x00021c34
   21ec4:	00021c34 	.word	0x00021c34
   21ec8:	00021c34 	.word	0x00021c34
   21ecc:	00021c34 	.word	0x00021c34
   21ed0:	00021c34 	.word	0x00021c34
   21ed4:	00021c34 	.word	0x00021c34
   21ed8:	00021c34 	.word	0x00021c34
   21edc:	00021c34 	.word	0x00021c34
   21ee0:	00021c34 	.word	0x00021c34
   21ee4:	00021c34 	.word	0x00021c34
   21ee8:	00021c34 	.word	0x00021c34
   21eec:	00021c34 	.word	0x00021c34
   21ef0:	00021c34 	.word	0x00021c34
   21ef4:	00021fa0 	.word	0x00021fa0
   21ef8:	e5901058 	ldr	r1, [r0, #88]	; 0x58
   21efc:	e3510000 	cmp	r1, #0
   21f00:	0affff4b 	beq	21c34 <CScreenDevice::Write(char)+0x13c>
   21f04:	eb0001fe 	bl	22704 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
   21f08:	eaffff49 	b	21c34 <CScreenDevice::Write(char)+0x13c>
   21f0c:	e3a03004 	mov	r3, #4
   21f10:	e580303c 	str	r3, [r0, #60]	; 0x3c
   21f14:	eaffff48 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21f18:	eb000056 	bl	22078 <CScreenDevice::ClearLineEnd()>
   21f1c:	e3a03000 	mov	r3, #0
   21f20:	e584303c 	str	r3, [r4, #60]	; 0x3c
   21f24:	eaffff44 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21f28:	eb000032 	bl	21ff8 <CScreenDevice::ClearDisplayEnd()>
   21f2c:	e3a03000 	mov	r3, #0
   21f30:	e584303c 	str	r3, [r4, #60]	; 0x3c
   21f34:	eaffff40 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21f38:	e3a03000 	mov	r3, #0
   21f3c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   21f40:	e5803048 	str	r3, [r0, #72]	; 0x48
   21f44:	e580303c 	str	r3, [r0, #60]	; 0x3c
   21f48:	e580204c 	str	r2, [r0, #76]	; 0x4c
   21f4c:	eaffff3a 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21f50:	eb000071 	bl	2211c <CScreenDevice::CursorLeft()>
   21f54:	e3a03000 	mov	r3, #0
   21f58:	e584303c 	str	r3, [r4, #60]	; 0x3c
   21f5c:	eaffff36 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21f60:	eb0000a1 	bl	221ec <CScreenDevice::CursorRight()>
   21f64:	e3a03000 	mov	r3, #0
   21f68:	e584303c 	str	r3, [r4, #60]	; 0x3c
   21f6c:	eaffff32 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21f70:	eb000052 	bl	220c0 <CScreenDevice::CursorDown()>
   21f74:	e3a03000 	mov	r3, #0
   21f78:	e584303c 	str	r3, [r4, #60]	; 0x3c
   21f7c:	eaffff2e 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21f80:	e2411030 	sub	r1, r1, #48	; 0x30
   21f84:	e6ef3071 	uxtb	r3, r1
   21f88:	e3530009 	cmp	r3, #9
   21f8c:	8affff28 	bhi	21c34 <CScreenDevice::Write(char)+0x13c>
   21f90:	e3a03003 	mov	r3, #3
   21f94:	e5801058 	str	r1, [r0, #88]	; 0x58
   21f98:	e580303c 	str	r3, [r0, #60]	; 0x3c
   21f9c:	eaffff26 	b	21c3c <CScreenDevice::Write(char)+0x144>
   21fa0:	e3e03020 	mvn	r3, #32
   21fa4:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   21fa8:	eaffff21 	b	21c34 <CScreenDevice::Write(char)+0x13c>
   21fac:	e3a03b3e 	mov	r3, #63488	; 0xf800
   21fb0:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   21fb4:	eaffff1e 	b	21c34 <CScreenDevice::Write(char)+0x13c>
   21fb8:	e3a0301f 	mov	r3, #31
   21fbc:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   21fc0:	eaffff1b 	b	21c34 <CScreenDevice::Write(char)+0x13c>
   21fc4:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
   21fc8:	e5901058 	ldr	r1, [r0, #88]	; 0x58
   21fcc:	eb0000be 	bl	222cc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   21fd0:	eaffff17 	b	21c34 <CScreenDevice::Write(char)+0x13c>
   21fd4:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
   21fd8:	e5901058 	ldr	r1, [r0, #88]	; 0x58
   21fdc:	eb000069 	bl	22188 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   21fe0:	e3a03000 	mov	r3, #0
   21fe4:	e584303c 	str	r3, [r4, #60]	; 0x3c
   21fe8:	eaffff13 	b	21c3c <CScreenDevice::Write(char)+0x144>

00021fec <CScreenDevice::CarriageReturn()>:
   21fec:	e3a03000 	mov	r3, #0
   21ff0:	e5803048 	str	r3, [r0, #72]	; 0x48
   21ff4:	e12fff1e 	bx	lr

00021ff8 <CScreenDevice::ClearDisplayEnd()>:
   21ff8:	e92d4070 	push	{r4, r5, r6, lr}
   21ffc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   22000:	e5904048 	ldr	r4, [r0, #72]	; 0x48
   22004:	e1a05000 	mov	r5, r0
   22008:	e1540003 	cmp	r4, r3
   2200c:	e2806020 	add	r6, r0, #32
   22010:	2a000009 	bcs	2203c <CScreenDevice::ClearDisplayEnd()+0x44>
   22014:	e1a01004 	mov	r1, r4
   22018:	e1a00005 	mov	r0, r5
   2201c:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
   22020:	eb000161 	bl	225ac <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   22024:	e1a00006 	mov	r0, r6
   22028:	eb001d5d 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   2202c:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   22030:	e0844000 	add	r4, r4, r0
   22034:	e1530004 	cmp	r3, r4
   22038:	8afffff5 	bhi	22014 <CScreenDevice::ClearDisplayEnd()+0x1c>
   2203c:	e1a00006 	mov	r0, r6
   22040:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
   22044:	eb001d58 	bl	295ac <CCharGenerator::GetCharHeight() const>
   22048:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
   2204c:	e0840000 	add	r0, r4, r0
   22050:	e0000093 	mul	r0, r3, r0
   22054:	e5952028 	ldr	r2, [r5, #40]	; 0x28
   22058:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   2205c:	e07020a2 	rsbs	r2, r0, r2, lsr #1
   22060:	e0830080 	add	r0, r3, r0, lsl #1
   22064:	08bd8070 	popeq	{r4, r5, r6, pc}
   22068:	e3a01000 	mov	r1, #0
   2206c:	e8bd4070 	pop	{r4, r5, r6, lr}
   22070:	e1a02082 	lsl	r2, r2, #1
   22074:	ea0011bb 	b	26768 <memset>

00022078 <CScreenDevice::ClearLineEnd()>:
   22078:	e92d4070 	push	{r4, r5, r6, lr}
   2207c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   22080:	e5904048 	ldr	r4, [r0, #72]	; 0x48
   22084:	e1540003 	cmp	r4, r3
   22088:	28bd8070 	popcs	{r4, r5, r6, pc}
   2208c:	e1a05000 	mov	r5, r0
   22090:	e2806020 	add	r6, r0, #32
   22094:	e1a01004 	mov	r1, r4
   22098:	e1a00005 	mov	r0, r5
   2209c:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
   220a0:	eb000141 	bl	225ac <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   220a4:	e1a00006 	mov	r0, r6
   220a8:	eb001d3d 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   220ac:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   220b0:	e0844000 	add	r4, r4, r0
   220b4:	e1530004 	cmp	r3, r4
   220b8:	8afffff5 	bhi	22094 <CScreenDevice::ClearLineEnd()+0x1c>
   220bc:	e8bd8070 	pop	{r4, r5, r6, pc}

000220c0 <CScreenDevice::CursorDown()>:
   220c0:	e92d4070 	push	{r4, r5, r6, lr}
   220c4:	e1a04000 	mov	r4, r0
   220c8:	e2805020 	add	r5, r0, #32
   220cc:	e1a00005 	mov	r0, r5
   220d0:	eb001d35 	bl	295ac <CCharGenerator::GetCharHeight() const>
   220d4:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   220d8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   220dc:	e0800002 	add	r0, r0, r2
   220e0:	e1500003 	cmp	r0, r3
   220e4:	e584004c 	str	r0, [r4, #76]	; 0x4c
   220e8:	38bd8070 	popcc	{r4, r5, r6, pc}
   220ec:	e1a00004 	mov	r0, r4
   220f0:	eb0000d1 	bl	2243c <CScreenDevice::Scroll()>
   220f4:	e1a00005 	mov	r0, r5
   220f8:	eb001d2b 	bl	295ac <CCharGenerator::GetCharHeight() const>
   220fc:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   22100:	e0430000 	sub	r0, r3, r0
   22104:	e584004c 	str	r0, [r4, #76]	; 0x4c
   22108:	e8bd8070 	pop	{r4, r5, r6, pc}

0002210c <CScreenDevice::CursorHome()>:
   2210c:	e3a02000 	mov	r2, #0
   22110:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   22114:	e1c024f8 	strd	r2, [r0, #72]	; 0x48
   22118:	e12fff1e 	bx	lr

0002211c <CScreenDevice::CursorLeft()>:
   2211c:	e5903048 	ldr	r3, [r0, #72]	; 0x48
   22120:	e92d4070 	push	{r4, r5, r6, lr}
   22124:	e3530000 	cmp	r3, #0
   22128:	e1a04000 	mov	r4, r0
   2212c:	1a00000f 	bne	22170 <CScreenDevice::CursorLeft()+0x54>
   22130:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
   22134:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   22138:	e1520003 	cmp	r2, r3
   2213c:	98bd8070 	popls	{r4, r5, r6, pc}
   22140:	e2806020 	add	r6, r0, #32
   22144:	e1a00006 	mov	r0, r6
   22148:	e5945030 	ldr	r5, [r4, #48]	; 0x30
   2214c:	eb001d14 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   22150:	e0450000 	sub	r0, r5, r0
   22154:	e5840048 	str	r0, [r4, #72]	; 0x48
   22158:	e1a00006 	mov	r0, r6
   2215c:	eb001d12 	bl	295ac <CCharGenerator::GetCharHeight() const>
   22160:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   22164:	e0430000 	sub	r0, r3, r0
   22168:	e584004c 	str	r0, [r4, #76]	; 0x4c
   2216c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22170:	e2800020 	add	r0, r0, #32
   22174:	eb001d0a 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   22178:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   2217c:	e0430000 	sub	r0, r3, r0
   22180:	e5840048 	str	r0, [r4, #72]	; 0x48
   22184:	e8bd8070 	pop	{r4, r5, r6, pc}

00022188 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   22188:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2218c:	e2807020 	add	r7, r0, #32
   22190:	e1a04000 	mov	r4, r0
   22194:	e1a00007 	mov	r0, r7
   22198:	e1a05002 	mov	r5, r2
   2219c:	e1a06001 	mov	r6, r1
   221a0:	eb001cff 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   221a4:	e1a02000 	mov	r2, r0
   221a8:	e2455001 	sub	r5, r5, #1
   221ac:	e0050592 	mul	r5, r2, r5
   221b0:	e1a00007 	mov	r0, r7
   221b4:	eb001cfc 	bl	295ac <CCharGenerator::GetCharHeight() const>
   221b8:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   221bc:	e1530005 	cmp	r3, r5
   221c0:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   221c4:	e2461001 	sub	r1, r6, #1
   221c8:	e0010190 	mul	r1, r0, r1
   221cc:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   221d0:	e1530001 	cmp	r3, r1
   221d4:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   221d8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   221dc:	e1530001 	cmp	r3, r1
   221e0:	85845048 	strhi	r5, [r4, #72]	; 0x48
   221e4:	8584104c 	strhi	r1, [r4, #76]	; 0x4c
   221e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000221ec <CScreenDevice::CursorRight()>:
   221ec:	e92d4010 	push	{r4, lr}
   221f0:	e1a04000 	mov	r4, r0
   221f4:	e2800020 	add	r0, r0, #32
   221f8:	eb001ce9 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   221fc:	e5942048 	ldr	r2, [r4, #72]	; 0x48
   22200:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   22204:	e0800002 	add	r0, r0, r2
   22208:	e1500003 	cmp	r0, r3
   2220c:	e5840048 	str	r0, [r4, #72]	; 0x48
   22210:	38bd8010 	popcc	{r4, pc}
   22214:	e3a03000 	mov	r3, #0
   22218:	e1a00004 	mov	r0, r4
   2221c:	e5843048 	str	r3, [r4, #72]	; 0x48
   22220:	e8bd4010 	pop	{r4, lr}
   22224:	eaffffa5 	b	220c0 <CScreenDevice::CursorDown()>

00022228 <CScreenDevice::CursorUp()>:
   22228:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
   2222c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   22230:	e1520003 	cmp	r2, r3
   22234:	912fff1e 	bxls	lr
   22238:	e92d4010 	push	{r4, lr}
   2223c:	e1a04000 	mov	r4, r0
   22240:	e2800020 	add	r0, r0, #32
   22244:	eb001cd8 	bl	295ac <CCharGenerator::GetCharHeight() const>
   22248:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   2224c:	e0430000 	sub	r0, r3, r0
   22250:	e584004c 	str	r0, [r4, #76]	; 0x4c
   22254:	e8bd8010 	pop	{r4, pc}

00022258 <CScreenDevice::DeleteChars(unsigned int)>:
   22258:	e12fff1e 	bx	lr

0002225c <CScreenDevice::DeleteLines(unsigned int)>:
   2225c:	e12fff1e 	bx	lr

00022260 <CScreenDevice::DisplayChar(char)>:
   22260:	e6ef3071 	uxtb	r3, r1
   22264:	e353001f 	cmp	r3, #31
   22268:	912fff1e 	bxls	lr
   2226c:	e92d4010 	push	{r4, lr}
   22270:	e1a04000 	mov	r4, r0
   22274:	e1d025b2 	ldrh	r2, [r0, #82]	; 0x52
   22278:	e24dd008 	sub	sp, sp, #8
   2227c:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   22280:	e58d2000 	str	r2, [sp]
   22284:	e5902048 	ldr	r2, [r0, #72]	; 0x48
   22288:	eb00009e 	bl	22508 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   2228c:	e1a00004 	mov	r0, r4
   22290:	e28dd008 	add	sp, sp, #8
   22294:	e8bd4010 	pop	{r4, lr}
   22298:	eaffffd3 	b	221ec <CScreenDevice::CursorRight()>

0002229c <CScreenDevice::EraseChars(unsigned int)>:
   2229c:	e3510000 	cmp	r1, #0
   222a0:	012fff1e 	bxeq	lr
   222a4:	ea000116 	b	22704 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>

000222a8 <CScreenDevice::InsertLines(unsigned int)>:
   222a8:	e12fff1e 	bx	lr

000222ac <CScreenDevice::InsertMode(bool)>:
   222ac:	e5c01054 	strb	r1, [r0, #84]	; 0x54
   222b0:	e12fff1e 	bx	lr

000222b4 <CScreenDevice::NewLine()>:
   222b4:	e3a02000 	mov	r2, #0
   222b8:	e5802048 	str	r2, [r0, #72]	; 0x48
   222bc:	eaffff7f 	b	220c0 <CScreenDevice::CursorDown()>

000222c0 <CScreenDevice::ReverseScroll()>:
   222c0:	e12fff1e 	bx	lr

000222c4 <CScreenDevice::SetCursorMode(bool)>:
   222c4:	e5c01050 	strb	r1, [r0, #80]	; 0x50
   222c8:	e12fff1e 	bx	lr

000222cc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   222cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   222d0:	e2808020 	add	r8, r0, #32
   222d4:	e1a05000 	mov	r5, r0
   222d8:	e1a00008 	mov	r0, r8
   222dc:	e1a07001 	mov	r7, r1
   222e0:	e1a04002 	mov	r4, r2
   222e4:	eb001cb0 	bl	295ac <CCharGenerator::GetCharHeight() const>
   222e8:	e1a06000 	mov	r6, r0
   222ec:	e1a00008 	mov	r0, r8
   222f0:	eb001cad 	bl	295ac <CCharGenerator::GetCharHeight() const>
   222f4:	e2477001 	sub	r7, r7, #1
   222f8:	e0060796 	mul	r6, r6, r7
   222fc:	e0020094 	mul	r2, r4, r0
   22300:	e5951038 	ldr	r1, [r5, #56]	; 0x38
   22304:	e1510006 	cmp	r1, r6
   22308:	93a03000 	movls	r3, #0
   2230c:	83a03001 	movhi	r3, #1
   22310:	e3520000 	cmp	r2, #0
   22314:	03a03000 	moveq	r3, #0
   22318:	e1510002 	cmp	r1, r2
   2231c:	33a03000 	movcc	r3, #0
   22320:	22033001 	andcs	r3, r3, #1
   22324:	e1560002 	cmp	r6, r2
   22328:	23a03000 	movcs	r3, #0
   2232c:	32033001 	andcc	r3, r3, #1
   22330:	e3530000 	cmp	r3, #0
   22334:	e3a03000 	mov	r3, #0
   22338:	05956040 	ldreq	r6, [r5, #64]	; 0x40
   2233c:	15856040 	strne	r6, [r5, #64]	; 0x40
   22340:	15852044 	strne	r2, [r5, #68]	; 0x44
   22344:	e585604c 	str	r6, [r5, #76]	; 0x4c
   22348:	e5853048 	str	r3, [r5, #72]	; 0x48
   2234c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00022350 <CScreenDevice::SetStandoutMode(unsigned int)>:
   22350:	e351001b 	cmp	r1, #27
   22354:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   22358:	ea00001d 	b	223d4 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
   2235c:	000223d8 	.word	0x000223d8
   22360:	000223e4 	.word	0x000223e4
   22364:	000223cc 	.word	0x000223cc
   22368:	000223d4 	.word	0x000223d4
   2236c:	000223d4 	.word	0x000223d4
   22370:	000223d4 	.word	0x000223d4
   22374:	000223d4 	.word	0x000223d4
   22378:	000223d4 	.word	0x000223d4
   2237c:	000223d4 	.word	0x000223d4
   22380:	000223d4 	.word	0x000223d4
   22384:	000223d4 	.word	0x000223d4
   22388:	000223d4 	.word	0x000223d4
   2238c:	000223d4 	.word	0x000223d4
   22390:	000223d4 	.word	0x000223d4
   22394:	000223d4 	.word	0x000223d4
   22398:	000223d4 	.word	0x000223d4
   2239c:	000223d4 	.word	0x000223d4
   223a0:	000223d4 	.word	0x000223d4
   223a4:	000223d4 	.word	0x000223d4
   223a8:	000223d4 	.word	0x000223d4
   223ac:	000223d4 	.word	0x000223d4
   223b0:	000223d4 	.word	0x000223d4
   223b4:	000223d4 	.word	0x000223d4
   223b8:	000223d4 	.word	0x000223d4
   223bc:	000223d4 	.word	0x000223d4
   223c0:	000223d4 	.word	0x000223d4
   223c4:	000223d4 	.word	0x000223d4
   223c8:	000223d8 	.word	0x000223d8
   223cc:	e3a0301f 	mov	r3, #31
   223d0:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   223d4:	e12fff1e 	bx	lr
   223d8:	e3e03020 	mvn	r3, #32
   223dc:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   223e0:	e12fff1e 	bx	lr
   223e4:	e3a03b3e 	mov	r3, #63488	; 0xf800
   223e8:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
   223ec:	e12fff1e 	bx	lr

000223f0 <CScreenDevice::Tabulator()>:
   223f0:	e92d4070 	push	{r4, r5, r6, lr}
   223f4:	e1a04000 	mov	r4, r0
   223f8:	e2800020 	add	r0, r0, #32
   223fc:	eb001c68 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   22400:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   22404:	e1a05180 	lsl	r5, r0, #3
   22408:	e1a01005 	mov	r1, r5
   2240c:	e0830180 	add	r0, r3, r0, lsl #3
   22410:	eb00219b 	bl	2aa84 <__udivsi3>
   22414:	e0000095 	mul	r0, r5, r0
   22418:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   2241c:	e5840048 	str	r0, [r4, #72]	; 0x48
   22420:	e1500003 	cmp	r0, r3
   22424:	38bd8070 	popcc	{r4, r5, r6, pc}
   22428:	e3a03000 	mov	r3, #0
   2242c:	e1a00004 	mov	r0, r4
   22430:	e5843048 	str	r3, [r4, #72]	; 0x48
   22434:	e8bd4070 	pop	{r4, r5, r6, lr}
   22438:	eaffff20 	b	220c0 <CScreenDevice::CursorDown()>

0002243c <CScreenDevice::Scroll()>:
   2243c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   22440:	e1a05000 	mov	r5, r0
   22444:	e24dd014 	sub	sp, sp, #20
   22448:	e2800020 	add	r0, r0, #32
   2244c:	eb001c56 	bl	295ac <CCharGenerator::GetCharHeight() const>
   22450:	e5953040 	ldr	r3, [r5, #64]	; 0x40
   22454:	e5954044 	ldr	r4, [r5, #68]	; 0x44
   22458:	e595c02c 	ldr	ip, [r5, #44]	; 0x2c
   2245c:	e0444003 	sub	r4, r4, r3
   22460:	e0444000 	sub	r4, r4, r0
   22464:	e1a0e08c 	lsl	lr, ip, #1
   22468:	e004049e 	mul	r4, lr, r4
   2246c:	e007039c 	mul	r7, ip, r3
   22470:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   22474:	e3540000 	cmp	r4, #0
   22478:	e1a06000 	mov	r6, r0
   2247c:	e0827087 	add	r7, r2, r7, lsl #1
   22480:	1a000009 	bne	224ac <CScreenDevice::Scroll()+0x70>
   22484:	e002069c 	mul	r2, ip, r6
   22488:	e1a02082 	lsl	r2, r2, #1
   2248c:	e1b02122 	lsrs	r2, r2, #2
   22490:	0a00001a 	beq	22500 <CScreenDevice::Scroll()+0xc4>
   22494:	e1a00007 	mov	r0, r7
   22498:	e3a01000 	mov	r1, #0
   2249c:	e1a02102 	lsl	r2, r2, #2
   224a0:	e28dd014 	add	sp, sp, #20
   224a4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   224a8:	ea0010ae 	b	26768 <memset>
   224ac:	e3a0c000 	mov	ip, #0
   224b0:	e3a01002 	mov	r1, #2
   224b4:	e0833000 	add	r3, r3, r0
   224b8:	e022239e 	mla	r2, lr, r3, r2
   224bc:	e88d1002 	stm	sp, {r1, ip}
   224c0:	e1a03004 	mov	r3, r4
   224c4:	e1a01007 	mov	r1, r7
   224c8:	e2850064 	add	r0, r5, #100	; 0x64
   224cc:	e58d000c 	str	r0, [sp, #12]
   224d0:	eb001cd9 	bl	2983c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
   224d4:	e59d000c 	ldr	r0, [sp, #12]
   224d8:	eb001eba 	bl	29fc8 <CDMAChannel::Start()>
   224dc:	e59d000c 	ldr	r0, [sp, #12]
   224e0:	eb001f12 	bl	2a130 <CDMAChannel::Wait()>
   224e4:	e595c02c 	ldr	ip, [r5, #44]	; 0x2c
   224e8:	e3c44003 	bic	r4, r4, #3
   224ec:	e002069c 	mul	r2, ip, r6
   224f0:	e1a02082 	lsl	r2, r2, #1
   224f4:	e1b02122 	lsrs	r2, r2, #2
   224f8:	e0877004 	add	r7, r7, r4
   224fc:	1affffe4 	bne	22494 <CScreenDevice::Scroll()+0x58>
   22500:	e28dd014 	add	sp, sp, #20
   22504:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00022508 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   22508:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2250c:	e1a06000 	mov	r6, r0
   22510:	e1a09001 	mov	r9, r1
   22514:	e1a08002 	mov	r8, r2
   22518:	e1a0a003 	mov	sl, r3
   2251c:	e3a07000 	mov	r7, #0
   22520:	e1ddb2b8 	ldrh	fp, [sp, #40]	; 0x28
   22524:	e2805020 	add	r5, r0, #32
   22528:	e1a00005 	mov	r0, r5
   2252c:	eb001c1e 	bl	295ac <CCharGenerator::GetCharHeight() const>
   22530:	e1500007 	cmp	r0, r7
   22534:	98bd8ff8 	popls	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22538:	e3a04000 	mov	r4, #0
   2253c:	ea000013 	b	22590 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x88>
   22540:	e1a01009 	mov	r1, r9
   22544:	e1a03007 	mov	r3, r7
   22548:	e1a02004 	mov	r2, r4
   2254c:	e1a00005 	mov	r0, r5
   22550:	eb001c19 	bl	295bc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   22554:	e5962030 	ldr	r2, [r6, #48]	; 0x30
   22558:	e3500000 	cmp	r0, #0
   2255c:	e0843008 	add	r3, r4, r8
   22560:	11a0100b 	movne	r1, fp
   22564:	03a01000 	moveq	r1, #0
   22568:	e1520003 	cmp	r2, r3
   2256c:	9a000006 	bls	2258c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x84>
   22570:	e5962034 	ldr	r2, [r6, #52]	; 0x34
   22574:	e15a0002 	cmp	sl, r2
   22578:	3596202c 	ldrcc	r2, [r6, #44]	; 0x2c
   2257c:	35960024 	ldrcc	r0, [r6, #36]	; 0x24
   22580:	30233a92 	mlacc	r3, r2, sl, r3
   22584:	31a03083 	lslcc	r3, r3, #1
   22588:	318010b3 	strhcc	r1, [r0, r3]
   2258c:	e2844001 	add	r4, r4, #1
   22590:	e1a00005 	mov	r0, r5
   22594:	eb001c02 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   22598:	e1500004 	cmp	r0, r4
   2259c:	8affffe7 	bhi	22540 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x38>
   225a0:	e2877001 	add	r7, r7, #1
   225a4:	e28aa001 	add	sl, sl, #1
   225a8:	eaffffde 	b	22528 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x20>

000225ac <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   225ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   225b0:	e3a08000 	mov	r8, #0
   225b4:	e1a0a000 	mov	sl, r0
   225b8:	e1a06001 	mov	r6, r1
   225bc:	e1a07002 	mov	r7, r2
   225c0:	e1a09008 	mov	r9, r8
   225c4:	e2805020 	add	r5, r0, #32
   225c8:	e1a00005 	mov	r0, r5
   225cc:	eb001bf6 	bl	295ac <CCharGenerator::GetCharHeight() const>
   225d0:	e1500008 	cmp	r0, r8
   225d4:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   225d8:	e3a04000 	mov	r4, #0
   225dc:	e1a00005 	mov	r0, r5
   225e0:	eb001bef 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   225e4:	e1500004 	cmp	r0, r4
   225e8:	e0843006 	add	r3, r4, r6
   225ec:	9a00000c 	bls	22624 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x78>
   225f0:	e59a2030 	ldr	r2, [sl, #48]	; 0x30
   225f4:	e2844001 	add	r4, r4, #1
   225f8:	e1520003 	cmp	r2, r3
   225fc:	9afffff6 	bls	225dc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
   22600:	e59a2034 	ldr	r2, [sl, #52]	; 0x34
   22604:	e1570002 	cmp	r7, r2
   22608:	2afffff3 	bcs	225dc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
   2260c:	e59a202c 	ldr	r2, [sl, #44]	; 0x2c
   22610:	e59a1024 	ldr	r1, [sl, #36]	; 0x24
   22614:	e0233792 	mla	r3, r2, r7, r3
   22618:	e1a03083 	lsl	r3, r3, #1
   2261c:	e18190b3 	strh	r9, [r1, r3]
   22620:	eaffffed 	b	225dc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
   22624:	e2888001 	add	r8, r8, #1
   22628:	e2877001 	add	r7, r7, #1
   2262c:	eaffffe5 	b	225c8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x1c>

00022630 <CScreenDevice::InvertCursor()>:
   22630:	e5d03050 	ldrb	r3, [r0, #80]	; 0x50
   22634:	e3530000 	cmp	r3, #0
   22638:	012fff1e 	bxeq	lr
   2263c:	ea000048 	b	22764 <CScreenDevice::InvertCursor() [clone .part.0]>

00022640 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   22640:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   22644:	e15c0001 	cmp	ip, r1
   22648:	912fff1e 	bxls	lr
   2264c:	e590c034 	ldr	ip, [r0, #52]	; 0x34
   22650:	e15c0002 	cmp	ip, r2
   22654:	8590c02c 	ldrhi	ip, [r0, #44]	; 0x2c
   22658:	85900024 	ldrhi	r0, [r0, #36]	; 0x24
   2265c:	8022129c 	mlahi	r2, ip, r2, r1
   22660:	81a02082 	lslhi	r2, r2, #1
   22664:	818030b2 	strhhi	r3, [r0, r2]
   22668:	e12fff1e 	bx	lr

0002266c <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   2266c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   22670:	e1530001 	cmp	r3, r1
   22674:	9a000002 	bls	22684 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>
   22678:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   2267c:	e1530002 	cmp	r3, r2
   22680:	8a000001 	bhi	2268c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>
   22684:	e3a00000 	mov	r0, #0
   22688:	e12fff1e 	bx	lr
   2268c:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
   22690:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   22694:	e022129c 	mla	r2, ip, r2, r1
   22698:	e1a02082 	lsl	r2, r2, #1
   2269c:	e19300b2 	ldrh	r0, [r3, r2]
   226a0:	e12fff1e 	bx	lr

000226a4 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   226a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   226a8:	e1a05000 	mov	r5, r0
   226ac:	e1a04001 	mov	r4, r1
   226b0:	e24dd00c 	sub	sp, sp, #12
   226b4:	e2800020 	add	r0, r0, #32
   226b8:	e1a06002 	mov	r6, r2
   226bc:	e5957030 	ldr	r7, [r5, #48]	; 0x30
   226c0:	eb001bb7 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   226c4:	e3a0cb3e 	mov	ip, #63488	; 0xf800
   226c8:	e2041003 	and	r1, r4, #3
   226cc:	e2814001 	add	r4, r1, #1
   226d0:	e0000490 	mul	r0, r0, r4
   226d4:	e59f3024 	ldr	r3, [pc, #36]	; 22700 <CScreenDevice::Rotor(unsigned int, unsigned int)+0x5c>
   226d8:	e2066003 	and	r6, r6, #3
   226dc:	e0836006 	add	r6, r3, r6
   226e0:	e0472000 	sub	r2, r7, r0
   226e4:	e3a03000 	mov	r3, #0
   226e8:	e1a00005 	mov	r0, r5
   226ec:	e1d612d0 	ldrsb	r1, [r6, #32]
   226f0:	e58dc000 	str	ip, [sp]
   226f4:	ebffff83 	bl	22508 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   226f8:	e28dd00c 	add	sp, sp, #12
   226fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22700:	0003269c 	.word	0x0003269c

00022704 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>:
   22704:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22708:	e1a05000 	mov	r5, r0
   2270c:	e2807020 	add	r7, r0, #32
   22710:	e1a00007 	mov	r0, r7
   22714:	e1a06001 	mov	r6, r1
   22718:	e5954048 	ldr	r4, [r5, #72]	; 0x48
   2271c:	eb001ba0 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   22720:	e0204096 	mla	r0, r6, r0, r4
   22724:	e5956030 	ldr	r6, [r5, #48]	; 0x30
   22728:	e5954048 	ldr	r4, [r5, #72]	; 0x48
   2272c:	e1500006 	cmp	r0, r6
   22730:	31a06000 	movcc	r6, r0
   22734:	e1560004 	cmp	r6, r4
   22738:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   2273c:	e1a01004 	mov	r1, r4
   22740:	e1a00005 	mov	r0, r5
   22744:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
   22748:	ebffff97 	bl	225ac <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   2274c:	e1a00007 	mov	r0, r7
   22750:	eb001b93 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   22754:	e0844000 	add	r4, r4, r0
   22758:	e1560004 	cmp	r6, r4
   2275c:	8afffff6 	bhi	2273c <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x38>
   22760:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00022764 <CScreenDevice::InvertCursor() [clone .part.0]>:
   22764:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22768:	e2806020 	add	r6, r0, #32
   2276c:	e1a05000 	mov	r5, r0
   22770:	e1a00006 	mov	r0, r6
   22774:	eb001b8e 	bl	295b4 <CCharGenerator::GetUnderline() const>
   22778:	e3a08000 	mov	r8, #0
   2277c:	e1a07000 	mov	r7, r0
   22780:	e1a00006 	mov	r0, r6
   22784:	eb001b88 	bl	295ac <CCharGenerator::GetCharHeight() const>
   22788:	e1500007 	cmp	r0, r7
   2278c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   22790:	e3a04000 	mov	r4, #0
   22794:	ea000000 	b	2279c <CScreenDevice::InvertCursor() [clone .part.0]+0x38>
   22798:	e2844001 	add	r4, r4, #1
   2279c:	e1a00006 	mov	r0, r6
   227a0:	eb001b7f 	bl	295a4 <CCharGenerator::GetCharWidth() const>
   227a4:	e1500004 	cmp	r0, r4
   227a8:	9a000013 	bls	227fc <CScreenDevice::InvertCursor() [clone .part.0]+0x98>
   227ac:	e5953048 	ldr	r3, [r5, #72]	; 0x48
   227b0:	e5952030 	ldr	r2, [r5, #48]	; 0x30
   227b4:	e0843003 	add	r3, r4, r3
   227b8:	e1530002 	cmp	r3, r2
   227bc:	2afffff5 	bcs	22798 <CScreenDevice::InvertCursor() [clone .part.0]+0x34>
   227c0:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
   227c4:	e5951034 	ldr	r1, [r5, #52]	; 0x34
   227c8:	e0872002 	add	r2, r7, r2
   227cc:	e1520001 	cmp	r2, r1
   227d0:	2afffff0 	bcs	22798 <CScreenDevice::InvertCursor() [clone .part.0]+0x34>
   227d4:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
   227d8:	e5951024 	ldr	r1, [r5, #36]	; 0x24
   227dc:	e0233290 	mla	r3, r0, r2, r3
   227e0:	e1a03083 	lsl	r3, r3, #1
   227e4:	e19120b3 	ldrh	r2, [r1, r3]
   227e8:	e3520000 	cmp	r2, #0
   227ec:	1a000004 	bne	22804 <CScreenDevice::InvertCursor() [clone .part.0]+0xa0>
   227f0:	e1d525b2 	ldrh	r2, [r5, #82]	; 0x52
   227f4:	e18120b3 	strh	r2, [r1, r3]
   227f8:	eaffffe6 	b	22798 <CScreenDevice::InvertCursor() [clone .part.0]+0x34>
   227fc:	e2877001 	add	r7, r7, #1
   22800:	eaffffde 	b	22780 <CScreenDevice::InvertCursor() [clone .part.0]+0x1c>
   22804:	e18180b3 	strh	r8, [r1, r3]
   22808:	eaffffe2 	b	22798 <CScreenDevice::InvertCursor() [clone .part.0]+0x34>

0002280c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   2280c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22810:	e1a04000 	mov	r4, r0
   22814:	e3a0b000 	mov	fp, #0
   22818:	e1a07001 	mov	r7, r1
   2281c:	e1a06002 	mov	r6, r2
   22820:	e1a05003 	mov	r5, r3
   22824:	e24dd00c 	sub	sp, sp, #12
   22828:	e280a020 	add	sl, r0, #32
   2282c:	ebffedae 	bl	1deec <CDevice::CDevice()>
   22830:	e59f31a0 	ldr	r3, [pc, #416]	; 229d8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1cc>
   22834:	e584700c 	str	r7, [r4, #12]
   22838:	e5843000 	str	r3, [r4]
   2283c:	e1a0000a 	mov	r0, sl
   22840:	e2849048 	add	r9, r4, #72	; 0x48
   22844:	e5c46010 	strb	r6, [r4, #16]
   22848:	e5845014 	str	r5, [r4, #20]
   2284c:	e584b018 	str	fp, [r4, #24]
   22850:	e5c4b01c 	strb	fp, [r4, #28]
   22854:	ebffef1e 	bl	1e4d4 <CGPIOPin::CGPIOPin()>
   22858:	e2848070 	add	r8, r4, #112	; 0x70
   2285c:	e1a00009 	mov	r0, r9
   22860:	ebffef1b 	bl	1e4d4 <CGPIOPin::CGPIOPin()>
   22864:	e2847098 	add	r7, r4, #152	; 0x98
   22868:	e1a00008 	mov	r0, r8
   2286c:	ebffef18 	bl	1e4d4 <CGPIOPin::CGPIOPin()>
   22870:	e1a00007 	mov	r0, r7
   22874:	ebffef16 	bl	1e4d4 <CGPIOPin::CGPIOPin()>
   22878:	e156000b 	cmp	r6, fp
   2287c:	13a00002 	movne	r0, #2
   22880:	03a00001 	moveq	r0, #1
   22884:	e3a02001 	mov	r2, #1
   22888:	e2841a01 	add	r1, r4, #4096	; 0x1000
   2288c:	e584b8c0 	str	fp, [r4, #2240]	; 0x8c0
   22890:	e584b8c4 	str	fp, [r4, #2244]	; 0x8c4
   22894:	e584b8c8 	str	fp, [r4, #2248]	; 0x8c8
   22898:	e581b0cc 	str	fp, [r1, #204]	; 0xcc
   2289c:	e58100e4 	str	r0, [r1, #228]	; 0xe4
   228a0:	e58120d4 	str	r2, [r1, #212]	; 0xd4
   228a4:	e581b0d0 	str	fp, [r1, #208]	; 0xd0
   228a8:	e58120e8 	str	r2, [r1, #232]	; 0xe8
   228ac:	e5940014 	ldr	r0, [r4, #20]
   228b0:	e581b0d8 	str	fp, [r1, #216]	; 0xd8
   228b4:	e150000b 	cmp	r0, fp
   228b8:	1a000027 	bne	2295c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x150>
   228bc:	e59f6118 	ldr	r6, [pc, #280]	; 229dc <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1d0>
   228c0:	e1a03205 	lsl	r3, r5, #4
   228c4:	e0861205 	add	r1, r6, r5, lsl #4
   228c8:	e5911004 	ldr	r1, [r1, #4]
   228cc:	e3510035 	cmp	r1, #53	; 0x35
   228d0:	8a000021 	bhi	2295c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x150>
   228d4:	e59f0104 	ldr	r0, [pc, #260]	; 229e0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1d4>
   228d8:	e590c010 	ldr	ip, [r0, #16]
   228dc:	e15c000b 	cmp	ip, fp
   228e0:	1a000032 	bne	229b0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1a4>
   228e4:	e796c105 	ldr	ip, [r6, r5, lsl #2]
   228e8:	e5804010 	str	r4, [r0, #16]
   228ec:	e35c0000 	cmp	ip, #0
   228f0:	e584c018 	str	ip, [r4, #24]
   228f4:	0a000032 	beq	229c4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1b8>
   228f8:	e3550000 	cmp	r5, #0
   228fc:	0a000019 	beq	22968 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x15c>
   22900:	e0866003 	add	r6, r6, r3
   22904:	e1a00008 	mov	r0, r8
   22908:	ebffef1d 	bl	1e584 <CGPIOPin::AssignPin(unsigned int)>
   2290c:	e5961008 	ldr	r1, [r6, #8]
   22910:	e3a02001 	mov	r2, #1
   22914:	e2811004 	add	r1, r1, #4
   22918:	e1a00008 	mov	r0, r8
   2291c:	e6ef1071 	uxtb	r1, r1
   22920:	ebffef38 	bl	1e608 <CGPIOPin::SetMode(TGPIOMode, bool)>
   22924:	e1a00007 	mov	r0, r7
   22928:	e596100c 	ldr	r1, [r6, #12]
   2292c:	ebffef14 	bl	1e584 <CGPIOPin::AssignPin(unsigned int)>
   22930:	e5961010 	ldr	r1, [r6, #16]
   22934:	e3a02001 	mov	r2, #1
   22938:	e2811004 	add	r1, r1, #4
   2293c:	e1a00007 	mov	r0, r7
   22940:	e6ef1071 	uxtb	r1, r1
   22944:	ebffef2f 	bl	1e608 <CGPIOPin::SetMode(TGPIOMode, bool)>
   22948:	e1a00007 	mov	r0, r7
   2294c:	e3a01002 	mov	r1, #2
   22950:	ebfff149 	bl	1ee7c <CGPIOPin::SetPullMode(TGPIOPullMode)>
   22954:	e3a03001 	mov	r3, #1
   22958:	e5c4301c 	strb	r3, [r4, #28]
   2295c:	e1a00004 	mov	r0, r4
   22960:	e28dd00c 	add	sp, sp, #12
   22964:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22968:	e3a01020 	mov	r1, #32
   2296c:	e1a0000a 	mov	r0, sl
   22970:	e58d3004 	str	r3, [sp, #4]
   22974:	ebffef02 	bl	1e584 <CGPIOPin::AssignPin(unsigned int)>
   22978:	e3a02001 	mov	r2, #1
   2297c:	e1a01005 	mov	r1, r5
   22980:	e1a0000a 	mov	r0, sl
   22984:	ebffef1f 	bl	1e608 <CGPIOPin::SetMode(TGPIOMode, bool)>
   22988:	e3a01021 	mov	r1, #33	; 0x21
   2298c:	e1a00009 	mov	r0, r9
   22990:	ebffeefb 	bl	1e584 <CGPIOPin::AssignPin(unsigned int)>
   22994:	e1a01005 	mov	r1, r5
   22998:	e3a02001 	mov	r2, #1
   2299c:	e1a00009 	mov	r0, r9
   229a0:	ebffef18 	bl	1e608 <CGPIOPin::SetMode(TGPIOMode, bool)>
   229a4:	e5961004 	ldr	r1, [r6, #4]
   229a8:	e59d3004 	ldr	r3, [sp, #4]
   229ac:	eaffffd3 	b	22900 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0xf4>
   229b0:	e59f3020 	ldr	r3, [pc, #32]	; 229d8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1cc>
   229b4:	e3a020b0 	mov	r2, #176	; 0xb0
   229b8:	e2831018 	add	r1, r3, #24
   229bc:	e2830024 	add	r0, r3, #36	; 0x24
   229c0:	ebffeb4e 	bl	1d700 <assertion_failed>
   229c4:	e59f300c 	ldr	r3, [pc, #12]	; 229d8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1cc>
   229c8:	e3a020b4 	mov	r2, #180	; 0xb4
   229cc:	e2831018 	add	r1, r3, #24
   229d0:	e283003c 	add	r0, r3, #60	; 0x3c
   229d4:	ebffeb49 	bl	1d700 <assertion_failed>
   229d8:	000326cc 	.word	0x000326cc
   229dc:	00034a94 	.word	0x00034a94
   229e0:	00034c30 	.word	0x00034c30

000229e4 <CSerialDevice::~CSerialDevice()>:
   229e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   229e8:	e5d0301c 	ldrb	r3, [r0, #28]
   229ec:	e59fc130 	ldr	ip, [pc, #304]	; 22b24 <CSerialDevice::~CSerialDevice()+0x140>
   229f0:	e3530000 	cmp	r3, #0
   229f4:	e1a04000 	mov	r4, r0
   229f8:	e24dd00c 	sub	sp, sp, #12
   229fc:	e580c000 	str	ip, [r0]
   22a00:	0a00003c 	beq	22af8 <CSerialDevice::~CSerialDevice()+0x114>
   22a04:	e3a00001 	mov	r0, #1
   22a08:	e59f5118 	ldr	r5, [pc, #280]	; 22b28 <CSerialDevice::~CSerialDevice()+0x144>
   22a0c:	e5941014 	ldr	r1, [r4, #20]
   22a10:	e595200c 	ldr	r2, [r5, #12]
   22a14:	e3a03000 	mov	r3, #0
   22a18:	e1c22110 	bic	r2, r2, r0, lsl r1
   22a1c:	e585200c 	str	r2, [r5, #12]
   22a20:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22a24:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22a28:	e5942018 	ldr	r2, [r4, #24]
   22a2c:	e5823038 	str	r3, [r2, #56]	; 0x38
   22a30:	e5942018 	ldr	r2, [r4, #24]
   22a34:	e5823030 	str	r3, [r2, #48]	; 0x30
   22a38:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   22a3c:	e594300c 	ldr	r3, [r4, #12]
   22a40:	e3530000 	cmp	r3, #0
   22a44:	0a00000e 	beq	22a84 <CSerialDevice::~CSerialDevice()+0xa0>
   22a48:	e5953000 	ldr	r3, [r5]
   22a4c:	e2433001 	sub	r3, r3, #1
   22a50:	e3530000 	cmp	r3, #0
   22a54:	e5853000 	str	r3, [r5]
   22a58:	1a000009 	bne	22a84 <CSerialDevice::~CSerialDevice()+0xa0>
   22a5c:	e5950004 	ldr	r0, [r5, #4]
   22a60:	e3500000 	cmp	r0, #0
   22a64:	0a00002a 	beq	22b14 <CSerialDevice::~CSerialDevice()+0x130>
   22a68:	e5d53008 	ldrb	r3, [r5, #8]
   22a6c:	e3530000 	cmp	r3, #0
   22a70:	0a000024 	beq	22b08 <CSerialDevice::~CSerialDevice()+0x124>
   22a74:	eb0017cb 	bl	289a8 <CInterruptSystem::DisconnectFIQ()>
   22a78:	e3a03000 	mov	r3, #0
   22a7c:	e5853004 	str	r3, [r5, #4]
   22a80:	e5c53008 	strb	r3, [r5, #8]
   22a84:	e2847070 	add	r7, r4, #112	; 0x70
   22a88:	e1a00007 	mov	r0, r7
   22a8c:	e3a02001 	mov	r2, #1
   22a90:	e3a01000 	mov	r1, #0
   22a94:	e2846098 	add	r6, r4, #152	; 0x98
   22a98:	ebffeeda 	bl	1e608 <CGPIOPin::SetMode(TGPIOMode, bool)>
   22a9c:	e1a00006 	mov	r0, r6
   22aa0:	e3a02001 	mov	r2, #1
   22aa4:	e3a01000 	mov	r1, #0
   22aa8:	e58d6004 	str	r6, [sp, #4]
   22aac:	ebffeed5 	bl	1e608 <CGPIOPin::SetMode(TGPIOMode, bool)>
   22ab0:	e3a03000 	mov	r3, #0
   22ab4:	e5942014 	ldr	r2, [r4, #20]
   22ab8:	e59d0004 	ldr	r0, [sp, #4]
   22abc:	e0855102 	add	r5, r5, r2, lsl #2
   22ac0:	e5c4301c 	strb	r3, [r4, #28]
   22ac4:	e5853010 	str	r3, [r5, #16]
   22ac8:	ebffeea6 	bl	1e568 <CGPIOPin::~CGPIOPin()>
   22acc:	e1a00007 	mov	r0, r7
   22ad0:	ebffeea4 	bl	1e568 <CGPIOPin::~CGPIOPin()>
   22ad4:	e2840048 	add	r0, r4, #72	; 0x48
   22ad8:	ebffeea2 	bl	1e568 <CGPIOPin::~CGPIOPin()>
   22adc:	e2840020 	add	r0, r4, #32
   22ae0:	ebffeea0 	bl	1e568 <CGPIOPin::~CGPIOPin()>
   22ae4:	e1a00004 	mov	r0, r4
   22ae8:	ebffecdd 	bl	1de64 <CDevice::~CDevice()>
   22aec:	e1a00004 	mov	r0, r4
   22af0:	e28dd00c 	add	sp, sp, #12
   22af4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22af8:	e2800098 	add	r0, r0, #152	; 0x98
   22afc:	ebffee99 	bl	1e568 <CGPIOPin::~CGPIOPin()>
   22b00:	e2840070 	add	r0, r4, #112	; 0x70
   22b04:	eafffff1 	b	22ad0 <CSerialDevice::~CSerialDevice()+0xec>
   22b08:	e3a01039 	mov	r1, #57	; 0x39
   22b0c:	eb001816 	bl	28b6c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   22b10:	eaffffd8 	b	22a78 <CSerialDevice::~CSerialDevice()+0x94>
   22b14:	e3a020e0 	mov	r2, #224	; 0xe0
   22b18:	e28c1018 	add	r1, ip, #24
   22b1c:	e28c0050 	add	r0, ip, #80	; 0x50
   22b20:	ebffeaf6 	bl	1d700 <assertion_failed>
   22b24:	000326cc 	.word	0x000326cc
   22b28:	00034c30 	.word	0x00034c30

00022b2c <CSerialDevice::~CSerialDevice()>:
   22b2c:	e92d4010 	push	{r4, lr}
   22b30:	e1a04000 	mov	r4, r0
   22b34:	ebffffaa 	bl	229e4 <CSerialDevice::~CSerialDevice()>
   22b38:	e1a00004 	mov	r0, r4
   22b3c:	e59f1008 	ldr	r1, [pc, #8]	; 22b4c <CSerialDevice::~CSerialDevice()+0x20>
   22b40:	eb001345 	bl	2785c <operator delete(void*, unsigned int)>
   22b44:	e1a00004 	mov	r0, r4
   22b48:	e8bd8010 	pop	{r4, pc}
   22b4c:	000010ec 	.word	0x000010ec

00022b50 <CSerialDevice::Initialize(unsigned int)>:
   22b50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22b54:	e5d0601c 	ldrb	r6, [r0, #28]
   22b58:	e3560000 	cmp	r6, #0
   22b5c:	1a000001 	bne	22b68 <CSerialDevice::Initialize(unsigned int)+0x18>
   22b60:	e1a00006 	mov	r0, r6
   22b64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22b68:	e1a05001 	mov	r5, r1
   22b6c:	e1a04000 	mov	r4, r0
   22b70:	ebfff6e3 	bl	20704 <CMachineInfo::Get()>
   22b74:	e3a01002 	mov	r1, #2
   22b78:	ebfff619 	bl	203e4 <CMachineInfo::GetClockRate(unsigned int) const>
   22b7c:	e3500000 	cmp	r0, #0
   22b80:	0a00006a 	beq	22d30 <CSerialDevice::Initialize(unsigned int)+0x1e0>
   22b84:	e59f31e4 	ldr	r3, [pc, #484]	; 22d70 <CSerialDevice::Initialize(unsigned int)+0x220>
   22b88:	e2452f4b 	sub	r2, r5, #300	; 0x12c
   22b8c:	e1520003 	cmp	r2, r3
   22b90:	8a00006a 	bhi	22d40 <CSerialDevice::Initialize(unsigned int)+0x1f0>
   22b94:	e1a01205 	lsl	r1, r5, #4
   22b98:	eb002034 	bl	2ac70 <__aeabi_uidivmod>
   22b9c:	e59f31d0 	ldr	r3, [pc, #464]	; 22d74 <CSerialDevice::Initialize(unsigned int)+0x224>
   22ba0:	e2402001 	sub	r2, r0, #1
   22ba4:	e1520003 	cmp	r2, r3
   22ba8:	e1a07000 	mov	r7, r0
   22bac:	e1a00001 	mov	r0, r1
   22bb0:	8a000066 	bhi	22d50 <CSerialDevice::Initialize(unsigned int)+0x200>
   22bb4:	e1a01005 	mov	r1, r5
   22bb8:	e1a00180 	lsl	r0, r0, #3
   22bbc:	eb001fb0 	bl	2aa84 <__udivsi3>
   22bc0:	e2005001 	and	r5, r0, #1
   22bc4:	e08550a0 	add	r5, r5, r0, lsr #1
   22bc8:	e355003f 	cmp	r5, #63	; 0x3f
   22bcc:	8a000063 	bhi	22d60 <CSerialDevice::Initialize(unsigned int)+0x210>
   22bd0:	e594000c 	ldr	r0, [r4, #12]
   22bd4:	e3500000 	cmp	r0, #0
   22bd8:	0a000011 	beq	22c24 <CSerialDevice::Initialize(unsigned int)+0xd4>
   22bdc:	e59f8194 	ldr	r8, [pc, #404]	; 22d78 <CSerialDevice::Initialize(unsigned int)+0x228>
   22be0:	e5983000 	ldr	r3, [r8]
   22be4:	e3530000 	cmp	r3, #0
   22be8:	1a000037 	bne	22ccc <CSerialDevice::Initialize(unsigned int)+0x17c>
   22bec:	e5d42010 	ldrb	r2, [r4, #16]
   22bf0:	e5880004 	str	r0, [r8, #4]
   22bf4:	e3520000 	cmp	r2, #0
   22bf8:	e5c82008 	strb	r2, [r8, #8]
   22bfc:	1a00003f 	bne	22d00 <CSerialDevice::Initialize(unsigned int)+0x1b0>
   22c00:	e1a03002 	mov	r3, r2
   22c04:	e3a01039 	mov	r1, #57	; 0x39
   22c08:	e59f216c 	ldr	r2, [pc, #364]	; 22d7c <CSerialDevice::Initialize(unsigned int)+0x22c>
   22c0c:	eb0017a2 	bl	28a9c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   22c10:	e5983000 	ldr	r3, [r8]
   22c14:	e3530000 	cmp	r3, #0
   22c18:	1a000040 	bne	22d20 <CSerialDevice::Initialize(unsigned int)+0x1d0>
   22c1c:	e3a03001 	mov	r3, #1
   22c20:	e5883000 	str	r3, [r8]
   22c24:	e3a03000 	mov	r3, #0
   22c28:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22c2c:	e5942018 	ldr	r2, [r4, #24]
   22c30:	e59f0148 	ldr	r0, [pc, #328]	; 22d80 <CSerialDevice::Initialize(unsigned int)+0x230>
   22c34:	e5823038 	str	r3, [r2, #56]	; 0x38
   22c38:	e5942018 	ldr	r2, [r4, #24]
   22c3c:	e594100c 	ldr	r1, [r4, #12]
   22c40:	e5820044 	str	r0, [r2, #68]	; 0x44
   22c44:	e5942018 	ldr	r2, [r4, #24]
   22c48:	e1510003 	cmp	r1, r3
   22c4c:	e5827024 	str	r7, [r2, #36]	; 0x24
   22c50:	e5942018 	ldr	r2, [r4, #24]
   22c54:	e5825028 	str	r5, [r2, #40]	; 0x28
   22c58:	0a000024 	beq	22cf0 <CSerialDevice::Initialize(unsigned int)+0x1a0>
   22c5c:	e3a01009 	mov	r1, #9
   22c60:	e3a0e070 	mov	lr, #112	; 0x70
   22c64:	e3a00e45 	mov	r0, #1104	; 0x450
   22c68:	e3a0c001 	mov	ip, #1
   22c6c:	e5942018 	ldr	r2, [r4, #24]
   22c70:	e5821034 	str	r1, [r2, #52]	; 0x34
   22c74:	e5942018 	ldr	r2, [r4, #24]
   22c78:	e59f10f8 	ldr	r1, [pc, #248]	; 22d78 <CSerialDevice::Initialize(unsigned int)+0x228>
   22c7c:	e582e02c 	str	lr, [r2, #44]	; 0x2c
   22c80:	e5942018 	ldr	r2, [r4, #24]
   22c84:	e5820038 	str	r0, [r2, #56]	; 0x38
   22c88:	e591200c 	ldr	r2, [r1, #12]
   22c8c:	e5940014 	ldr	r0, [r4, #20]
   22c90:	e182201c 	orr	r2, r2, ip, lsl r0
   22c94:	e581200c 	str	r2, [r1, #12]
   22c98:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22c9c:	e5943018 	ldr	r3, [r4, #24]
   22ca0:	e59f20dc 	ldr	r2, [pc, #220]	; 22d84 <CSerialDevice::Initialize(unsigned int)+0x234>
   22ca4:	e3a05000 	mov	r5, #0
   22ca8:	e5832030 	str	r2, [r3, #48]	; 0x30
   22cac:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   22cb0:	ebffed6c 	bl	1e268 <CDeviceNameService::Get()>
   22cb4:	e1a03005 	mov	r3, r5
   22cb8:	e1a02004 	mov	r2, r4
   22cbc:	e59f10c4 	ldr	r1, [pc, #196]	; 22d88 <CSerialDevice::Initialize(unsigned int)+0x238>
   22cc0:	ebffecb8 	bl	1dfa8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   22cc4:	e1a00006 	mov	r0, r6
   22cc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22ccc:	e5983004 	ldr	r3, [r8, #4]
   22cd0:	e1500003 	cmp	r0, r3
   22cd4:	0a00000d 	beq	22d10 <CSerialDevice::Initialize(unsigned int)+0x1c0>
   22cd8:	e3a06000 	mov	r6, #0
   22cdc:	e5943014 	ldr	r3, [r4, #20]
   22ce0:	e5c4601c 	strb	r6, [r4, #28]
   22ce4:	e0888103 	add	r8, r8, r3, lsl #2
   22ce8:	e5886010 	str	r6, [r8, #16]
   22cec:	eaffff9b 	b	22b60 <CSerialDevice::Initialize(unsigned int)+0x10>
   22cf0:	e3a02060 	mov	r2, #96	; 0x60
   22cf4:	e5943018 	ldr	r3, [r4, #24]
   22cf8:	e583202c 	str	r2, [r3, #44]	; 0x2c
   22cfc:	eaffffe6 	b	22c9c <CSerialDevice::Initialize(unsigned int)+0x14c>
   22d00:	e3a01039 	mov	r1, #57	; 0x39
   22d04:	e59f2070 	ldr	r2, [pc, #112]	; 22d7c <CSerialDevice::Initialize(unsigned int)+0x22c>
   22d08:	eb0016f2 	bl	288d8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   22d0c:	eaffffbf 	b	22c10 <CSerialDevice::Initialize(unsigned int)+0xc0>
   22d10:	e5d42010 	ldrb	r2, [r4, #16]
   22d14:	e5d83008 	ldrb	r3, [r8, #8]
   22d18:	e1520003 	cmp	r2, r3
   22d1c:	1affffed 	bne	22cd8 <CSerialDevice::Initialize(unsigned int)+0x188>
   22d20:	e59f1064 	ldr	r1, [pc, #100]	; 22d8c <CSerialDevice::Initialize(unsigned int)+0x23c>
   22d24:	e59f2064 	ldr	r2, [pc, #100]	; 22d90 <CSerialDevice::Initialize(unsigned int)+0x240>
   22d28:	e28100c4 	add	r0, r1, #196	; 0xc4
   22d2c:	ebffea73 	bl	1d700 <assertion_failed>
   22d30:	e59f1054 	ldr	r1, [pc, #84]	; 22d8c <CSerialDevice::Initialize(unsigned int)+0x23c>
   22d34:	e3a020fd 	mov	r2, #253	; 0xfd
   22d38:	e2810050 	add	r0, r1, #80	; 0x50
   22d3c:	ebffea6f 	bl	1d700 <assertion_failed>
   22d40:	e59f1044 	ldr	r1, [pc, #68]	; 22d8c <CSerialDevice::Initialize(unsigned int)+0x23c>
   22d44:	e3a020ff 	mov	r2, #255	; 0xff
   22d48:	e2810060 	add	r0, r1, #96	; 0x60
   22d4c:	ebffea6b 	bl	1d700 <assertion_failed>
   22d50:	e59f1034 	ldr	r1, [pc, #52]	; 22d8c <CSerialDevice::Initialize(unsigned int)+0x23c>
   22d54:	e59f2038 	ldr	r2, [pc, #56]	; 22d94 <CSerialDevice::Initialize(unsigned int)+0x244>
   22d58:	e281008c 	add	r0, r1, #140	; 0x8c
   22d5c:	ebffea67 	bl	1d700 <assertion_failed>
   22d60:	e59f1024 	ldr	r1, [pc, #36]	; 22d8c <CSerialDevice::Initialize(unsigned int)+0x23c>
   22d64:	e59f202c 	ldr	r2, [pc, #44]	; 22d98 <CSerialDevice::Initialize(unsigned int)+0x248>
   22d68:	e28100b0 	add	r0, r1, #176	; 0xb0
   22d6c:	ebffea63 	bl	1d700 <assertion_failed>
   22d70:	003d07d4 	.word	0x003d07d4
   22d74:	0000fffe 	.word	0x0000fffe
   22d78:	00034c30 	.word	0x00034c30
   22d7c:	000236ec 	.word	0x000236ec
   22d80:	000007ff 	.word	0x000007ff
   22d84:	00000301 	.word	0x00000301
   22d88:	000327d0 	.word	0x000327d0
   22d8c:	000326e4 	.word	0x000326e4
   22d90:	00000127 	.word	0x00000127
   22d94:	00000102 	.word	0x00000102
   22d98:	00000105 	.word	0x00000105

00022d9c <CSerialDevice::Write(void const*, unsigned int)>:
   22d9c:	e5d0301c 	ldrb	r3, [r0, #28]
   22da0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22da4:	e3530000 	cmp	r3, #0
   22da8:	0a00005d 	beq	22f24 <CSerialDevice::Write(void const*, unsigned int)+0x188>
   22dac:	e2806a01 	add	r6, r0, #4096	; 0x1000
   22db0:	e1a07000 	mov	r7, r0
   22db4:	e59600e8 	ldr	r0, [r6, #232]	; 0xe8
   22db8:	e1a04001 	mov	r4, r1
   22dbc:	e3500000 	cmp	r0, #0
   22dc0:	e1a08002 	mov	r8, r2
   22dc4:	1a000049 	bne	22ef0 <CSerialDevice::Write(void const*, unsigned int)+0x154>
   22dc8:	e3540000 	cmp	r4, #0
   22dcc:	0a000058 	beq	22f34 <CSerialDevice::Write(void const*, unsigned int)+0x198>
   22dd0:	e3580000 	cmp	r8, #0
   22dd4:	0a00005a 	beq	22f44 <CSerialDevice::Write(void const*, unsigned int)+0x1a8>
   22dd8:	e3a05000 	mov	r5, #0
   22ddc:	e2444001 	sub	r4, r4, #1
   22de0:	ea000002 	b	22df0 <CSerialDevice::Write(void const*, unsigned int)+0x54>
   22de4:	e2855001 	add	r5, r5, #1
   22de8:	e1580005 	cmp	r8, r5
   22dec:	0a00000f 	beq	22e30 <CSerialDevice::Write(void const*, unsigned int)+0x94>
   22df0:	e1a00007 	mov	r0, r7
   22df4:	e5f41001 	ldrb	r1, [r4, #1]!
   22df8:	eb000185 	bl	23414 <CSerialDevice::Write(unsigned char)>
   22dfc:	e3500000 	cmp	r0, #0
   22e00:	0a00000a 	beq	22e30 <CSerialDevice::Write(void const*, unsigned int)+0x94>
   22e04:	e5d43000 	ldrb	r3, [r4]
   22e08:	e353000a 	cmp	r3, #10
   22e0c:	1afffff4 	bne	22de4 <CSerialDevice::Write(void const*, unsigned int)+0x48>
   22e10:	e59630d4 	ldr	r3, [r6, #212]	; 0xd4
   22e14:	e3130001 	tst	r3, #1
   22e18:	0afffff1 	beq	22de4 <CSerialDevice::Write(void const*, unsigned int)+0x48>
   22e1c:	e3a0100d 	mov	r1, #13
   22e20:	e1a00007 	mov	r0, r7
   22e24:	eb00017a 	bl	23414 <CSerialDevice::Write(unsigned char)>
   22e28:	e3500000 	cmp	r0, #0
   22e2c:	1affffec 	bne	22de4 <CSerialDevice::Write(void const*, unsigned int)+0x48>
   22e30:	e59630e8 	ldr	r3, [r6, #232]	; 0xe8
   22e34:	e3530000 	cmp	r3, #0
   22e38:	1a00002e 	bne	22ef8 <CSerialDevice::Write(void const*, unsigned int)+0x15c>
   22e3c:	e597300c 	ldr	r3, [r7, #12]
   22e40:	e3530000 	cmp	r3, #0
   22e44:	0a000027 	beq	22ee8 <CSerialDevice::Write(void const*, unsigned int)+0x14c>
   22e48:	e59600e4 	ldr	r0, [r6, #228]	; 0xe4
   22e4c:	e3500000 	cmp	r0, #0
   22e50:	1a00002d 	bne	22f0c <CSerialDevice::Write(void const*, unsigned int)+0x170>
   22e54:	e59630cc 	ldr	r3, [r6, #204]	; 0xcc
   22e58:	e59620d0 	ldr	r2, [r6, #208]	; 0xd0
   22e5c:	e1520003 	cmp	r2, r3
   22e60:	0a000020 	beq	22ee8 <CSerialDevice::Write(void const*, unsigned int)+0x14c>
   22e64:	e3a03000 	mov	r3, #0
   22e68:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   22e6c:	e59630cc 	ldr	r3, [r6, #204]	; 0xcc
   22e70:	e59620d0 	ldr	r2, [r6, #208]	; 0xd0
   22e74:	e1520003 	cmp	r2, r3
   22e78:	0a000015 	beq	22ed4 <CSerialDevice::Write(void const*, unsigned int)+0x138>
   22e7c:	e59f00c8 	ldr	r0, [pc, #200]	; 22f4c <CSerialDevice::Write(void const*, unsigned int)+0x1b0>
   22e80:	ea00000c 	b	22eb8 <CSerialDevice::Write(void const*, unsigned int)+0x11c>
   22e84:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
   22e88:	e2831001 	add	r1, r3, #1
   22e8c:	e58610d0 	str	r1, [r6, #208]	; 0xd0
   22e90:	e0873003 	add	r3, r7, r3
   22e94:	e5d338cc 	ldrb	r3, [r3, #2252]	; 0x8cc
   22e98:	e5823000 	str	r3, [r2]
   22e9c:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
   22ea0:	e0033000 	and	r3, r3, r0
   22ea4:	e58630d0 	str	r3, [r6, #208]	; 0xd0
   22ea8:	e59620cc 	ldr	r2, [r6, #204]	; 0xcc
   22eac:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
   22eb0:	e1520003 	cmp	r2, r3
   22eb4:	0a000006 	beq	22ed4 <CSerialDevice::Write(void const*, unsigned int)+0x138>
   22eb8:	e5972018 	ldr	r2, [r7, #24]
   22ebc:	e5923018 	ldr	r3, [r2, #24]
   22ec0:	e3130020 	tst	r3, #32
   22ec4:	0affffee 	beq	22e84 <CSerialDevice::Write(void const*, unsigned int)+0xe8>
   22ec8:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   22ecc:	e3833020 	orr	r3, r3, #32
   22ed0:	e5823038 	str	r3, [r2, #56]	; 0x38
   22ed4:	e3a03000 	mov	r3, #0
   22ed8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   22edc:	e59630e4 	ldr	r3, [r6, #228]	; 0xe4
   22ee0:	e3530000 	cmp	r3, #0
   22ee4:	1a000005 	bne	22f00 <CSerialDevice::Write(void const*, unsigned int)+0x164>
   22ee8:	e1a00005 	mov	r0, r5
   22eec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22ef0:	eb0015eb 	bl	286a4 <EnterCritical>
   22ef4:	eaffffb3 	b	22dc8 <CSerialDevice::Write(void const*, unsigned int)+0x2c>
   22ef8:	eb001613 	bl	2874c <LeaveCritical>
   22efc:	eaffffce 	b	22e3c <CSerialDevice::Write(void const*, unsigned int)+0xa0>
   22f00:	eb001611 	bl	2874c <LeaveCritical>
   22f04:	e1a00005 	mov	r0, r5
   22f08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22f0c:	eb0015e4 	bl	286a4 <EnterCritical>
   22f10:	e59620cc 	ldr	r2, [r6, #204]	; 0xcc
   22f14:	e59630d0 	ldr	r3, [r6, #208]	; 0xd0
   22f18:	e1520003 	cmp	r2, r3
   22f1c:	1affffd0 	bne	22e64 <CSerialDevice::Write(void const*, unsigned int)+0xc8>
   22f20:	eaffffed 	b	22edc <CSerialDevice::Write(void const*, unsigned int)+0x140>
   22f24:	e59f1024 	ldr	r1, [pc, #36]	; 22f50 <CSerialDevice::Write(void const*, unsigned int)+0x1b4>
   22f28:	e59f2024 	ldr	r2, [pc, #36]	; 22f54 <CSerialDevice::Write(void const*, unsigned int)+0x1b8>
   22f2c:	e28100f4 	add	r0, r1, #244	; 0xf4
   22f30:	ebffe9f2 	bl	1d700 <assertion_failed>
   22f34:	e59f1014 	ldr	r1, [pc, #20]	; 22f50 <CSerialDevice::Write(void const*, unsigned int)+0x1b4>
   22f38:	e59f2018 	ldr	r2, [pc, #24]	; 22f58 <CSerialDevice::Write(void const*, unsigned int)+0x1bc>
   22f3c:	e2810c01 	add	r0, r1, #256	; 0x100
   22f40:	ebffe9ee 	bl	1d700 <assertion_failed>
   22f44:	e1a05008 	mov	r5, r8
   22f48:	eaffffb8 	b	22e30 <CSerialDevice::Write(void const*, unsigned int)+0x94>
   22f4c:	000007ff 	.word	0x000007ff
   22f50:	000326e4 	.word	0x000326e4
   22f54:	0000014d 	.word	0x0000014d
   22f58:	0000015a 	.word	0x0000015a

00022f5c <CSerialDevice::Read(void*, unsigned int)>:
   22f5c:	e5d0301c 	ldrb	r3, [r0, #28]
   22f60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22f64:	e3530000 	cmp	r3, #0
   22f68:	0a00004d 	beq	230a4 <CSerialDevice::Read(void*, unsigned int)+0x148>
   22f6c:	e3510000 	cmp	r1, #0
   22f70:	e1a08001 	mov	r8, r1
   22f74:	0a00004e 	beq	230b4 <CSerialDevice::Read(void*, unsigned int)+0x158>
   22f78:	e590500c 	ldr	r5, [r0, #12]
   22f7c:	e1a04000 	mov	r4, r0
   22f80:	e3550000 	cmp	r5, #0
   22f84:	e1a07002 	mov	r7, r2
   22f88:	0a000029 	beq	23034 <CSerialDevice::Read(void*, unsigned int)+0xd8>
   22f8c:	e2806a01 	add	r6, r0, #4096	; 0x1000
   22f90:	e59600e4 	ldr	r0, [r6, #228]	; 0xe4
   22f94:	e3500000 	cmp	r0, #0
   22f98:	1a00003c 	bne	23090 <CSerialDevice::Read(void*, unsigned int)+0x134>
   22f9c:	e59438c8 	ldr	r3, [r4, #2248]	; 0x8c8
   22fa0:	e3530000 	cmp	r3, #0
   22fa4:	ba00001a 	blt	23014 <CSerialDevice::Read(void*, unsigned int)+0xb8>
   22fa8:	e3570000 	cmp	r7, #0
   22fac:	0a00004a 	beq	230dc <CSerialDevice::Read(void*, unsigned int)+0x180>
   22fb0:	e3a05000 	mov	r5, #0
   22fb4:	e59fc130 	ldr	ip, [pc, #304]	; 230ec <CSerialDevice::Read(void*, unsigned int)+0x190>
   22fb8:	ea00000b 	b	22fec <CSerialDevice::Read(void*, unsigned int)+0x90>
   22fbc:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
   22fc0:	e2855001 	add	r5, r5, #1
   22fc4:	e2830001 	add	r0, r3, #1
   22fc8:	e58408c4 	str	r0, [r4, #2244]	; 0x8c4
   22fcc:	e0843003 	add	r3, r4, r3
   22fd0:	e5d330c0 	ldrb	r3, [r3, #192]	; 0xc0
   22fd4:	e1570005 	cmp	r7, r5
   22fd8:	e4c83001 	strb	r3, [r8], #1
   22fdc:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
   22fe0:	e003300c 	and	r3, r3, ip
   22fe4:	e58438c4 	str	r3, [r4, #2244]	; 0x8c4
   22fe8:	0a00000c 	beq	23020 <CSerialDevice::Read(void*, unsigned int)+0xc4>
   22fec:	e59408c0 	ldr	r0, [r4, #2240]	; 0x8c0
   22ff0:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
   22ff4:	e1500003 	cmp	r0, r3
   22ff8:	1affffef 	bne	22fbc <CSerialDevice::Read(void*, unsigned int)+0x60>
   22ffc:	e59630e4 	ldr	r3, [r6, #228]	; 0xe4
   23000:	e3530000 	cmp	r3, #0
   23004:	0a000008 	beq	2302c <CSerialDevice::Read(void*, unsigned int)+0xd0>
   23008:	eb0015cf 	bl	2874c <LeaveCritical>
   2300c:	e1a00005 	mov	r0, r5
   23010:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23014:	e3a03000 	mov	r3, #0
   23018:	e59458c8 	ldr	r5, [r4, #2248]	; 0x8c8
   2301c:	e58438c8 	str	r3, [r4, #2248]	; 0x8c8
   23020:	e59630e4 	ldr	r3, [r6, #228]	; 0xe4
   23024:	e3530000 	cmp	r3, #0
   23028:	1afffff6 	bne	23008 <CSerialDevice::Read(void*, unsigned int)+0xac>
   2302c:	e1a00005 	mov	r0, r5
   23030:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23034:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   23038:	e3520000 	cmp	r2, #0
   2303c:	1a00000b 	bne	23070 <CSerialDevice::Read(void*, unsigned int)+0x114>
   23040:	ea000027 	b	230e4 <CSerialDevice::Read(void*, unsigned int)+0x188>
   23044:	e5933000 	ldr	r3, [r3]
   23048:	e3130b01 	tst	r3, #1024	; 0x400
   2304c:	1a00001c 	bne	230c4 <CSerialDevice::Read(void*, unsigned int)+0x168>
   23050:	e3130b02 	tst	r3, #2048	; 0x800
   23054:	1a00001c 	bne	230cc <CSerialDevice::Read(void*, unsigned int)+0x170>
   23058:	e3130c01 	tst	r3, #256	; 0x100
   2305c:	1a00001c 	bne	230d4 <CSerialDevice::Read(void*, unsigned int)+0x178>
   23060:	e2855001 	add	r5, r5, #1
   23064:	e1550007 	cmp	r5, r7
   23068:	e4c83001 	strb	r3, [r8], #1
   2306c:	0a000003 	beq	23080 <CSerialDevice::Read(void*, unsigned int)+0x124>
   23070:	e5943018 	ldr	r3, [r4, #24]
   23074:	e5930018 	ldr	r0, [r3, #24]
   23078:	e3100010 	tst	r0, #16
   2307c:	0afffff0 	beq	23044 <CSerialDevice::Read(void*, unsigned int)+0xe8>
   23080:	e3a03000 	mov	r3, #0
   23084:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   23088:	e1a00005 	mov	r0, r5
   2308c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23090:	eb001583 	bl	286a4 <EnterCritical>
   23094:	e59438c8 	ldr	r3, [r4, #2248]	; 0x8c8
   23098:	e3530000 	cmp	r3, #0
   2309c:	aaffffc1 	bge	22fa8 <CSerialDevice::Read(void*, unsigned int)+0x4c>
   230a0:	eaffffdb 	b	23014 <CSerialDevice::Read(void*, unsigned int)+0xb8>
   230a4:	e59f1044 	ldr	r1, [pc, #68]	; 230f0 <CSerialDevice::Read(void*, unsigned int)+0x194>
   230a8:	e59f2044 	ldr	r2, [pc, #68]	; 230f4 <CSerialDevice::Read(void*, unsigned int)+0x198>
   230ac:	e28100f4 	add	r0, r1, #244	; 0xf4
   230b0:	ebffe992 	bl	1d700 <assertion_failed>
   230b4:	e59f1034 	ldr	r1, [pc, #52]	; 230f0 <CSerialDevice::Read(void*, unsigned int)+0x194>
   230b8:	e59f2038 	ldr	r2, [pc, #56]	; 230f8 <CSerialDevice::Read(void*, unsigned int)+0x19c>
   230bc:	e2810c01 	add	r0, r1, #256	; 0x100
   230c0:	ebffe98e 	bl	1d700 <assertion_failed>
   230c4:	e3e05000 	mvn	r5, #0
   230c8:	eaffffec 	b	23080 <CSerialDevice::Read(void*, unsigned int)+0x124>
   230cc:	e3e05001 	mvn	r5, #1
   230d0:	eaffffea 	b	23080 <CSerialDevice::Read(void*, unsigned int)+0x124>
   230d4:	e3e05002 	mvn	r5, #2
   230d8:	eaffffe8 	b	23080 <CSerialDevice::Read(void*, unsigned int)+0x124>
   230dc:	e1a05007 	mov	r5, r7
   230e0:	eaffffce 	b	23020 <CSerialDevice::Read(void*, unsigned int)+0xc4>
   230e4:	e1a05002 	mov	r5, r2
   230e8:	eaffffe4 	b	23080 <CSerialDevice::Read(void*, unsigned int)+0x124>
   230ec:	000007ff 	.word	0x000007ff
   230f0:	000326e4 	.word	0x000326e4
   230f4:	00000197 	.word	0x00000197
   230f8:	0000019a 	.word	0x0000019a

000230fc <CSerialDevice::GetOptions() const>:
   230fc:	e2800a01 	add	r0, r0, #4096	; 0x1000
   23100:	e59000d4 	ldr	r0, [r0, #212]	; 0xd4
   23104:	e12fff1e 	bx	lr

00023108 <CSerialDevice::SetOptions(unsigned int)>:
   23108:	e2800a01 	add	r0, r0, #4096	; 0x1000
   2310c:	e58010d4 	str	r1, [r0, #212]	; 0xd4
   23110:	e12fff1e 	bx	lr

00023114 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   23114:	e590300c 	ldr	r3, [r0, #12]
   23118:	e92d4010 	push	{r4, lr}
   2311c:	e3530000 	cmp	r3, #0
   23120:	0a00000e 	beq	23160 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   23124:	e2800a01 	add	r0, r0, #4096	; 0x1000
   23128:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   2312c:	e3530000 	cmp	r3, #0
   23130:	1a00000e 	bne	23170 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
   23134:	e3510000 	cmp	r1, #0
   23138:	0a000010 	beq	23180 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
   2313c:	e1d130d0 	ldrsb	r3, [r1]
   23140:	e3530000 	cmp	r3, #0
   23144:	0a000011 	beq	23190 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
   23148:	e3520000 	cmp	r2, #0
   2314c:	0a000013 	beq	231a0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   23150:	e58020e0 	str	r2, [r0, #224]	; 0xe0
   23154:	e58010dc 	str	r1, [r0, #220]	; 0xdc
   23158:	e58010d8 	str	r1, [r0, #216]	; 0xd8
   2315c:	e8bd8010 	pop	{r4, pc}
   23160:	e59f1048 	ldr	r1, [pc, #72]	; 231b0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   23164:	e59f2048 	ldr	r2, [pc, #72]	; 231b4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa0>
   23168:	e2810f43 	add	r0, r1, #268	; 0x10c
   2316c:	ebffe963 	bl	1d700 <assertion_failed>
   23170:	e59f1038 	ldr	r1, [pc, #56]	; 231b0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   23174:	e59f203c 	ldr	r2, [pc, #60]	; 231b8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa4>
   23178:	e2810f49 	add	r0, r1, #292	; 0x124
   2317c:	ebffe95f 	bl	1d700 <assertion_failed>
   23180:	e59f1028 	ldr	r1, [pc, #40]	; 231b0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   23184:	e3a02f7d 	mov	r2, #500	; 0x1f4
   23188:	e2810f4d 	add	r0, r1, #308	; 0x134
   2318c:	ebffe95b 	bl	1d700 <assertion_failed>
   23190:	e59f1018 	ldr	r1, [pc, #24]	; 231b0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   23194:	e59f2020 	ldr	r2, [pc, #32]	; 231bc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
   23198:	e2810d05 	add	r0, r1, #320	; 0x140
   2319c:	ebffe957 	bl	1d700 <assertion_failed>
   231a0:	e59f1008 	ldr	r1, [pc, #8]	; 231b0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   231a4:	e59f2014 	ldr	r2, [pc, #20]	; 231c0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xac>
   231a8:	e2810e15 	add	r0, r1, #336	; 0x150
   231ac:	ebffe953 	bl	1d700 <assertion_failed>
   231b0:	000326e4 	.word	0x000326e4
   231b4:	000001f1 	.word	0x000001f1
   231b8:	000001f2 	.word	0x000001f2
   231bc:	000001f5 	.word	0x000001f5
   231c0:	000001f6 	.word	0x000001f6

000231c4 <CSerialDevice::AvailableForWrite()>:
   231c4:	e92d4010 	push	{r4, lr}
   231c8:	e5d0301c 	ldrb	r3, [r0, #28]
   231cc:	e24dd008 	sub	sp, sp, #8
   231d0:	e3530000 	cmp	r3, #0
   231d4:	0a00001c 	beq	2324c <CSerialDevice::AvailableForWrite()+0x88>
   231d8:	e590300c 	ldr	r3, [r0, #12]
   231dc:	e3530000 	cmp	r3, #0
   231e0:	0a00001d 	beq	2325c <CSerialDevice::AvailableForWrite()+0x98>
   231e4:	e2804a01 	add	r4, r0, #4096	; 0x1000
   231e8:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   231ec:	e3520000 	cmp	r2, #0
   231f0:	1a00000c 	bne	23228 <CSerialDevice::AvailableForWrite()+0x64>
   231f4:	e59410d0 	ldr	r1, [r4, #208]	; 0xd0
   231f8:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   231fc:	e1510003 	cmp	r1, r3
   23200:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   23204:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   23208:	92833e7f 	addls	r3, r3, #2032	; 0x7f0
   2320c:	9283300f 	addls	r3, r3, #15
   23210:	82433001 	subhi	r3, r3, #1
   23214:	e3520000 	cmp	r2, #0
   23218:	e0430000 	sub	r0, r3, r0
   2321c:	1a000005 	bne	23238 <CSerialDevice::AvailableForWrite()+0x74>
   23220:	e28dd008 	add	sp, sp, #8
   23224:	e8bd8010 	pop	{r4, pc}
   23228:	e1a00002 	mov	r0, r2
   2322c:	eb00151c 	bl	286a4 <EnterCritical>
   23230:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   23234:	eaffffee 	b	231f4 <CSerialDevice::AvailableForWrite()+0x30>
   23238:	e58d0004 	str	r0, [sp, #4]
   2323c:	eb001542 	bl	2874c <LeaveCritical>
   23240:	e59d0004 	ldr	r0, [sp, #4]
   23244:	e28dd008 	add	sp, sp, #8
   23248:	e8bd8010 	pop	{r4, pc}
   2324c:	e59f1018 	ldr	r1, [pc, #24]	; 2326c <CSerialDevice::AvailableForWrite()+0xa8>
   23250:	e3a02c02 	mov	r2, #512	; 0x200
   23254:	e28100f4 	add	r0, r1, #244	; 0xf4
   23258:	ebffe928 	bl	1d700 <assertion_failed>
   2325c:	e59f1008 	ldr	r1, [pc, #8]	; 2326c <CSerialDevice::AvailableForWrite()+0xa8>
   23260:	e59f2008 	ldr	r2, [pc, #8]	; 23270 <CSerialDevice::AvailableForWrite()+0xac>
   23264:	e2810f43 	add	r0, r1, #268	; 0x10c
   23268:	ebffe924 	bl	1d700 <assertion_failed>
   2326c:	000326e4 	.word	0x000326e4
   23270:	00000201 	.word	0x00000201

00023274 <CSerialDevice::AvailableForRead()>:
   23274:	e92d4030 	push	{r4, r5, lr}
   23278:	e5d0301c 	ldrb	r3, [r0, #28]
   2327c:	e24dd00c 	sub	sp, sp, #12
   23280:	e3530000 	cmp	r3, #0
   23284:	0a00001b 	beq	232f8 <CSerialDevice::AvailableForRead()+0x84>
   23288:	e590300c 	ldr	r3, [r0, #12]
   2328c:	e1a04000 	mov	r4, r0
   23290:	e3530000 	cmp	r3, #0
   23294:	0a00001b 	beq	23308 <CSerialDevice::AvailableForRead()+0x94>
   23298:	e2805a01 	add	r5, r0, #4096	; 0x1000
   2329c:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
   232a0:	e3520000 	cmp	r2, #0
   232a4:	1a00000a 	bne	232d4 <CSerialDevice::AvailableForRead()+0x60>
   232a8:	e59418c0 	ldr	r1, [r4, #2240]	; 0x8c0
   232ac:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
   232b0:	e1510003 	cmp	r1, r3
   232b4:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   232b8:	e59408c4 	ldr	r0, [r4, #2244]	; 0x8c4
   232bc:	32833b02 	addcc	r3, r3, #2048	; 0x800
   232c0:	e3520000 	cmp	r2, #0
   232c4:	e0430000 	sub	r0, r3, r0
   232c8:	1a000005 	bne	232e4 <CSerialDevice::AvailableForRead()+0x70>
   232cc:	e28dd00c 	add	sp, sp, #12
   232d0:	e8bd8030 	pop	{r4, r5, pc}
   232d4:	e1a00002 	mov	r0, r2
   232d8:	eb0014f1 	bl	286a4 <EnterCritical>
   232dc:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
   232e0:	eafffff0 	b	232a8 <CSerialDevice::AvailableForRead()+0x34>
   232e4:	e58d0004 	str	r0, [sp, #4]
   232e8:	eb001517 	bl	2874c <LeaveCritical>
   232ec:	e59d0004 	ldr	r0, [sp, #4]
   232f0:	e28dd00c 	add	sp, sp, #12
   232f4:	e8bd8030 	pop	{r4, r5, pc}
   232f8:	e59f1018 	ldr	r1, [pc, #24]	; 23318 <CSerialDevice::AvailableForRead()+0xa4>
   232fc:	e59f2018 	ldr	r2, [pc, #24]	; 2331c <CSerialDevice::AvailableForRead()+0xa8>
   23300:	e28100f4 	add	r0, r1, #244	; 0xf4
   23304:	ebffe8fd 	bl	1d700 <assertion_failed>
   23308:	e59f1008 	ldr	r1, [pc, #8]	; 23318 <CSerialDevice::AvailableForRead()+0xa4>
   2330c:	e59f200c 	ldr	r2, [pc, #12]	; 23320 <CSerialDevice::AvailableForRead()+0xac>
   23310:	e2810f43 	add	r0, r1, #268	; 0x10c
   23314:	ebffe8f9 	bl	1d700 <assertion_failed>
   23318:	000326e4 	.word	0x000326e4
   2331c:	00000216 	.word	0x00000216
   23320:	00000217 	.word	0x00000217

00023324 <CSerialDevice::Peek()>:
   23324:	e92d4030 	push	{r4, r5, lr}
   23328:	e5d0301c 	ldrb	r3, [r0, #28]
   2332c:	e24dd00c 	sub	sp, sp, #12
   23330:	e3530000 	cmp	r3, #0
   23334:	0a000021 	beq	233c0 <CSerialDevice::Peek()+0x9c>
   23338:	e590300c 	ldr	r3, [r0, #12]
   2333c:	e1a04000 	mov	r4, r0
   23340:	e3530000 	cmp	r3, #0
   23344:	0a000021 	beq	233d0 <CSerialDevice::Peek()+0xac>
   23348:	e2805a01 	add	r5, r0, #4096	; 0x1000
   2334c:	e59500e4 	ldr	r0, [r5, #228]	; 0xe4
   23350:	e3500000 	cmp	r0, #0
   23354:	1a000008 	bne	2337c <CSerialDevice::Peek()+0x58>
   23358:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   2335c:	e59428c4 	ldr	r2, [r4, #2244]	; 0x8c4
   23360:	e1520003 	cmp	r2, r3
   23364:	0a00001d 	beq	233e0 <CSerialDevice::Peek()+0xbc>
   23368:	e59408c4 	ldr	r0, [r4, #2244]	; 0x8c4
   2336c:	e0844000 	add	r4, r4, r0
   23370:	e5d400c0 	ldrb	r0, [r4, #192]	; 0xc0
   23374:	e28dd00c 	add	sp, sp, #12
   23378:	e8bd8030 	pop	{r4, r5, pc}
   2337c:	eb0014c8 	bl	286a4 <EnterCritical>
   23380:	e59428c0 	ldr	r2, [r4, #2240]	; 0x8c0
   23384:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
   23388:	e1520003 	cmp	r2, r3
   2338c:	159408c4 	ldrne	r0, [r4, #2244]	; 0x8c4
   23390:	059530e4 	ldreq	r3, [r5, #228]	; 0xe4
   23394:	159530e4 	ldrne	r3, [r5, #228]	; 0xe4
   23398:	10844000 	addne	r4, r4, r0
   2339c:	03e00000 	mvneq	r0, #0
   233a0:	15d400c0 	ldrbne	r0, [r4, #192]	; 0xc0
   233a4:	e3530000 	cmp	r3, #0
   233a8:	0afffff1 	beq	23374 <CSerialDevice::Peek()+0x50>
   233ac:	e58d0004 	str	r0, [sp, #4]
   233b0:	eb0014e5 	bl	2874c <LeaveCritical>
   233b4:	e59d0004 	ldr	r0, [sp, #4]
   233b8:	e28dd00c 	add	sp, sp, #12
   233bc:	e8bd8030 	pop	{r4, r5, pc}
   233c0:	e59f1020 	ldr	r1, [pc, #32]	; 233e8 <CSerialDevice::Peek()+0xc4>
   233c4:	e3a02f8b 	mov	r2, #556	; 0x22c
   233c8:	e28100f4 	add	r0, r1, #244	; 0xf4
   233cc:	ebffe8cb 	bl	1d700 <assertion_failed>
   233d0:	e59f1010 	ldr	r1, [pc, #16]	; 233e8 <CSerialDevice::Peek()+0xc4>
   233d4:	e59f2010 	ldr	r2, [pc, #16]	; 233ec <CSerialDevice::Peek()+0xc8>
   233d8:	e2810f43 	add	r0, r1, #268	; 0x10c
   233dc:	ebffe8c7 	bl	1d700 <assertion_failed>
   233e0:	e3e00000 	mvn	r0, #0
   233e4:	eaffffe2 	b	23374 <CSerialDevice::Peek()+0x50>
   233e8:	000326e4 	.word	0x000326e4
   233ec:	0000022d 	.word	0x0000022d

000233f0 <CSerialDevice::Flush()>:
   233f0:	e3a03000 	mov	r3, #0
   233f4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   233f8:	e5902018 	ldr	r2, [r0, #24]
   233fc:	e2822018 	add	r2, r2, #24
   23400:	e5923000 	ldr	r3, [r2]
   23404:	e2133008 	ands	r3, r3, #8
   23408:	1afffffc 	bne	23400 <CSerialDevice::Flush()+0x10>
   2340c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   23410:	e12fff1e 	bx	lr

00023414 <CSerialDevice::Write(unsigned char)>:
   23414:	e92d4070 	push	{r4, r5, r6, lr}
   23418:	e590300c 	ldr	r3, [r0, #12]
   2341c:	e1a04000 	mov	r4, r0
   23420:	e3530000 	cmp	r3, #0
   23424:	e1a05001 	mov	r5, r1
   23428:	e24dd008 	sub	sp, sp, #8
   2342c:	0a000027 	beq	234d0 <CSerialDevice::Write(unsigned char)+0xbc>
   23430:	e2806a01 	add	r6, r0, #4096	; 0x1000
   23434:	e59620e4 	ldr	r2, [r6, #228]	; 0xe4
   23438:	e3520000 	cmp	r2, #0
   2343c:	1a000017 	bne	234a0 <CSerialDevice::Write(unsigned char)+0x8c>
   23440:	e59630cc 	ldr	r3, [r6, #204]	; 0xcc
   23444:	e59610d0 	ldr	r1, [r6, #208]	; 0xd0
   23448:	e2833001 	add	r3, r3, #1
   2344c:	e1a03a83 	lsl	r3, r3, #21
   23450:	e1a03aa3 	lsr	r3, r3, #21
   23454:	e1530001 	cmp	r3, r1
   23458:	0a000027 	beq	234fc <CSerialDevice::Write(unsigned char)+0xe8>
   2345c:	e3a00001 	mov	r0, #1
   23460:	e59630cc 	ldr	r3, [r6, #204]	; 0xcc
   23464:	e0844003 	add	r4, r4, r3
   23468:	e0833000 	add	r3, r3, r0
   2346c:	e58630cc 	str	r3, [r6, #204]	; 0xcc
   23470:	e5c458cc 	strb	r5, [r4, #2252]	; 0x8cc
   23474:	e59630cc 	ldr	r3, [r6, #204]	; 0xcc
   23478:	e1a03a83 	lsl	r3, r3, #21
   2347c:	e1a03aa3 	lsr	r3, r3, #21
   23480:	e58630cc 	str	r3, [r6, #204]	; 0xcc
   23484:	e3520000 	cmp	r2, #0
   23488:	0a000002 	beq	23498 <CSerialDevice::Write(unsigned char)+0x84>
   2348c:	e58d0004 	str	r0, [sp, #4]
   23490:	eb0014ad 	bl	2874c <LeaveCritical>
   23494:	e59d0004 	ldr	r0, [sp, #4]
   23498:	e28dd008 	add	sp, sp, #8
   2349c:	e8bd8070 	pop	{r4, r5, r6, pc}
   234a0:	e1a00002 	mov	r0, r2
   234a4:	eb00147e 	bl	286a4 <EnterCritical>
   234a8:	e59630cc 	ldr	r3, [r6, #204]	; 0xcc
   234ac:	e59620d0 	ldr	r2, [r6, #208]	; 0xd0
   234b0:	e2833001 	add	r3, r3, #1
   234b4:	e1a03a83 	lsl	r3, r3, #21
   234b8:	e1a03aa3 	lsr	r3, r3, #21
   234bc:	e1530002 	cmp	r3, r2
   234c0:	03a00000 	moveq	r0, #0
   234c4:	e59620e4 	ldr	r2, [r6, #228]	; 0xe4
   234c8:	1affffe3 	bne	2345c <CSerialDevice::Write(unsigned char)+0x48>
   234cc:	eaffffec 	b	23484 <CSerialDevice::Write(unsigned char)+0x70>
   234d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   234d4:	e5901018 	ldr	r1, [r0, #24]
   234d8:	e2812018 	add	r2, r1, #24
   234dc:	e5923000 	ldr	r3, [r2]
   234e0:	e2133020 	ands	r3, r3, #32
   234e4:	1afffffc 	bne	234dc <CSerialDevice::Write(unsigned char)+0xc8>
   234e8:	e5815000 	str	r5, [r1]
   234ec:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   234f0:	e3a00001 	mov	r0, #1
   234f4:	e28dd008 	add	sp, sp, #8
   234f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   234fc:	e1a00002 	mov	r0, r2
   23500:	e28dd008 	add	sp, sp, #8
   23504:	e8bd8070 	pop	{r4, r5, r6, pc}

00023508 <CSerialDevice::InterruptHandler()>:
   23508:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2350c:	e2805a01 	add	r5, r0, #4096	; 0x1000
   23510:	e1a04000 	mov	r4, r0
   23514:	e59500e4 	ldr	r0, [r5, #228]	; 0xe4
   23518:	e24dd004 	sub	sp, sp, #4
   2351c:	e3500000 	cmp	r0, #0
   23520:	1a00006c 	bne	236d8 <CSerialDevice::InterruptHandler()+0x1d0>
   23524:	e3a01000 	mov	r1, #0
   23528:	ee071f9a 	mcr	15, 0, r1, cr7, cr10, {4}
   2352c:	e5943018 	ldr	r3, [r4, #24]
   23530:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   23534:	e5832044 	str	r2, [r3, #68]	; 0x44
   23538:	e5942018 	ldr	r2, [r4, #24]
   2353c:	e5926018 	ldr	r6, [r2, #24]
   23540:	e2827018 	add	r7, r2, #24
   23544:	e2166010 	ands	r6, r6, #16
   23548:	11a06001 	movne	r6, r1
   2354c:	1a000035 	bne	23628 <CSerialDevice::InterruptHandler()+0x120>
   23550:	e3e0a002 	mvn	sl, #2
   23554:	e3e08001 	mvn	r8, #1
   23558:	e3e09000 	mvn	r9, #0
   2355c:	e595e0d8 	ldr	lr, [r5, #216]	; 0xd8
   23560:	e59fc180 	ldr	ip, [pc, #384]	; 236e8 <CSerialDevice::InterruptHandler()+0x1e0>
   23564:	ea000020 	b	235ec <CSerialDevice::InterruptHandler()+0xe4>
   23568:	e59438c8 	ldr	r3, [r4, #2248]	; 0x8c8
   2356c:	e3530000 	cmp	r3, #0
   23570:	058498c8 	streq	r9, [r4, #2248]	; 0x8c8
   23574:	e35e0000 	cmp	lr, #0
   23578:	0a00000a 	beq	235a8 <CSerialDevice::InterruptHandler()+0xa0>
   2357c:	e59500dc 	ldr	r0, [r5, #220]	; 0xdc
   23580:	e6af3071 	sxtb	r3, r1
   23584:	e1d0b0d0 	ldrsb	fp, [r0]
   23588:	e15b0003 	cmp	fp, r3
   2358c:	1585e0dc 	strne	lr, [r5, #220]	; 0xdc
   23590:	1a000004 	bne	235a8 <CSerialDevice::InterruptHandler()+0xa0>
   23594:	e2803001 	add	r3, r0, #1
   23598:	e58530dc 	str	r3, [r5, #220]	; 0xdc
   2359c:	e1d030d1 	ldrsb	r3, [r0, #1]
   235a0:	e3530000 	cmp	r3, #0
   235a4:	03a06001 	moveq	r6, #1
   235a8:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   235ac:	e59408c4 	ldr	r0, [r4, #2244]	; 0x8c4
   235b0:	e2833001 	add	r3, r3, #1
   235b4:	e003300c 	and	r3, r3, ip
   235b8:	e1530000 	cmp	r3, r0
   235bc:	0a000013 	beq	23610 <CSerialDevice::InterruptHandler()+0x108>
   235c0:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   235c4:	e2830001 	add	r0, r3, #1
   235c8:	e0843003 	add	r3, r4, r3
   235cc:	e58408c0 	str	r0, [r4, #2240]	; 0x8c0
   235d0:	e5c310c0 	strb	r1, [r3, #192]	; 0xc0
   235d4:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
   235d8:	e003300c 	and	r3, r3, ip
   235dc:	e58438c0 	str	r3, [r4, #2240]	; 0x8c0
   235e0:	e5973000 	ldr	r3, [r7]
   235e4:	e3130010 	tst	r3, #16
   235e8:	1a00000e 	bne	23628 <CSerialDevice::InterruptHandler()+0x120>
   235ec:	e5921000 	ldr	r1, [r2]
   235f0:	e3110b01 	tst	r1, #1024	; 0x400
   235f4:	1affffdb 	bne	23568 <CSerialDevice::InterruptHandler()+0x60>
   235f8:	e3110b02 	tst	r1, #2048	; 0x800
   235fc:	0a00002d 	beq	236b8 <CSerialDevice::InterruptHandler()+0x1b0>
   23600:	e59438c8 	ldr	r3, [r4, #2248]	; 0x8c8
   23604:	e3530000 	cmp	r3, #0
   23608:	058488c8 	streq	r8, [r4, #2248]	; 0x8c8
   2360c:	eaffffd8 	b	23574 <CSerialDevice::InterruptHandler()+0x6c>
   23610:	e59438c8 	ldr	r3, [r4, #2248]	; 0x8c8
   23614:	e3530000 	cmp	r3, #0
   23618:	058488c8 	streq	r8, [r4, #2248]	; 0x8c8
   2361c:	e5973000 	ldr	r3, [r7]
   23620:	e3130010 	tst	r3, #16
   23624:	0afffff0 	beq	235ec <CSerialDevice::InterruptHandler()+0xe4>
   23628:	e5973000 	ldr	r3, [r7]
   2362c:	e3130020 	tst	r3, #32
   23630:	1a000015 	bne	2368c <CSerialDevice::InterruptHandler()+0x184>
   23634:	e59f00ac 	ldr	r0, [pc, #172]	; 236e8 <CSerialDevice::InterruptHandler()+0x1e0>
   23638:	ea00000c 	b	23670 <CSerialDevice::InterruptHandler()+0x168>
   2363c:	e59530d0 	ldr	r3, [r5, #208]	; 0xd0
   23640:	e2831001 	add	r1, r3, #1
   23644:	e58510d0 	str	r1, [r5, #208]	; 0xd0
   23648:	e0843003 	add	r3, r4, r3
   2364c:	e5d338cc 	ldrb	r3, [r3, #2252]	; 0x8cc
   23650:	e5823000 	str	r3, [r2]
   23654:	e59530d0 	ldr	r3, [r5, #208]	; 0xd0
   23658:	e0033000 	and	r3, r3, r0
   2365c:	e58530d0 	str	r3, [r5, #208]	; 0xd0
   23660:	e5942018 	ldr	r2, [r4, #24]
   23664:	e5923018 	ldr	r3, [r2, #24]
   23668:	e3130020 	tst	r3, #32
   2366c:	1a000006 	bne	2368c <CSerialDevice::InterruptHandler()+0x184>
   23670:	e59510cc 	ldr	r1, [r5, #204]	; 0xcc
   23674:	e59530d0 	ldr	r3, [r5, #208]	; 0xd0
   23678:	e1510003 	cmp	r1, r3
   2367c:	1affffee 	bne	2363c <CSerialDevice::InterruptHandler()+0x134>
   23680:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   23684:	e3c33020 	bic	r3, r3, #32
   23688:	e5823038 	str	r3, [r2, #56]	; 0x38
   2368c:	e3a03000 	mov	r3, #0
   23690:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   23694:	e59530e4 	ldr	r3, [r5, #228]	; 0xe4
   23698:	e3530000 	cmp	r3, #0
   2369c:	1a00000f 	bne	236e0 <CSerialDevice::InterruptHandler()+0x1d8>
   236a0:	e3560000 	cmp	r6, #0
   236a4:	0a000009 	beq	236d0 <CSerialDevice::InterruptHandler()+0x1c8>
   236a8:	e59530e0 	ldr	r3, [r5, #224]	; 0xe0
   236ac:	e28dd004 	add	sp, sp, #4
   236b0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236b4:	e12fff13 	bx	r3
   236b8:	e3110c01 	tst	r1, #256	; 0x100
   236bc:	0affffac 	beq	23574 <CSerialDevice::InterruptHandler()+0x6c>
   236c0:	e59438c8 	ldr	r3, [r4, #2248]	; 0x8c8
   236c4:	e3530000 	cmp	r3, #0
   236c8:	0584a8c8 	streq	sl, [r4, #2248]	; 0x8c8
   236cc:	eaffffa8 	b	23574 <CSerialDevice::InterruptHandler()+0x6c>
   236d0:	e28dd004 	add	sp, sp, #4
   236d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   236d8:	eb0013f1 	bl	286a4 <EnterCritical>
   236dc:	eaffff90 	b	23524 <CSerialDevice::InterruptHandler()+0x1c>
   236e0:	eb001419 	bl	2874c <LeaveCritical>
   236e4:	eaffffed 	b	236a0 <CSerialDevice::InterruptHandler()+0x198>
   236e8:	000007ff 	.word	0x000007ff

000236ec <CSerialDevice::InterruptStub(void*)>:
   236ec:	e3a03000 	mov	r3, #0
   236f0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   236f4:	e59f302c 	ldr	r3, [pc, #44]	; 23728 <CSerialDevice::InterruptStub(void*)+0x3c>
   236f8:	e593200c 	ldr	r2, [r3, #12]
   236fc:	e3120001 	tst	r2, #1
   23700:	012fff1e 	bxeq	lr
   23704:	e5930010 	ldr	r0, [r3, #16]
   23708:	e3500000 	cmp	r0, #0
   2370c:	0a000000 	beq	23714 <CSerialDevice::InterruptStub(void*)+0x28>
   23710:	eaffff7c 	b	23508 <CSerialDevice::InterruptHandler()>
   23714:	e59f1010 	ldr	r1, [pc, #16]	; 2372c <CSerialDevice::InterruptStub(void*)+0x40>
   23718:	e92d4010 	push	{r4, lr}
   2371c:	e59f200c 	ldr	r2, [pc, #12]	; 23730 <CSerialDevice::InterruptStub(void*)+0x44>
   23720:	e2810e16 	add	r0, r1, #352	; 0x160
   23724:	ebffe7f5 	bl	1d700 <assertion_failed>
   23728:	00034c30 	.word	0x00034c30
   2372c:	000326e4 	.word	0x000326e4
   23730:	000002d9 	.word	0x000002d9

00023734 <CSoundBaseDevice::GetRangeMin() const>:
   23734:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   23738:	e12fff1e 	bx	lr

0002373c <CSoundBaseDevice::GetRangeMax() const>:
   2373c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   23740:	e12fff1e 	bx	lr

00023744 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)>:
   23744:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23748:	e1a04000 	mov	r4, r0
   2374c:	e3a05000 	mov	r5, #0
   23750:	e1a09001 	mov	r9, r1
   23754:	e1a08003 	mov	r8, r3
   23758:	e1a06002 	mov	r6, r2
   2375c:	e5dda020 	ldrb	sl, [sp, #32]
   23760:	e3a07004 	mov	r7, #4
   23764:	ebffe9e0 	bl	1deec <CDevice::CDevice()>
   23768:	e3a03001 	mov	r3, #1
   2376c:	e59f20dc 	ldr	r2, [pc, #220]	; 23850 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0x10c>
   23770:	e584305c 	str	r3, [r4, #92]	; 0x5c
   23774:	e5842000 	str	r2, [r4]
   23778:	e1a01005 	mov	r1, r5
   2377c:	e3a02008 	mov	r2, #8
   23780:	e5c4900c 	strb	r9, [r4, #12]
   23784:	e5848010 	str	r8, [r4, #16]
   23788:	e5c4a014 	strb	sl, [r4, #20]
   2378c:	e5845020 	str	r5, [r4, #32]
   23790:	e5845024 	str	r5, [r4, #36]	; 0x24
   23794:	e584503c 	str	r5, [r4, #60]	; 0x3c
   23798:	e5845048 	str	r5, [r4, #72]	; 0x48
   2379c:	e584504c 	str	r5, [r4, #76]	; 0x4c
   237a0:	e5845050 	str	r5, [r4, #80]	; 0x50
   237a4:	e5845054 	str	r5, [r4, #84]	; 0x54
   237a8:	e5c47038 	strb	r7, [r4, #56]	; 0x38
   237ac:	e2840030 	add	r0, r4, #48	; 0x30
   237b0:	eb000bec 	bl	26768 <memset>
   237b4:	e5d4300c 	ldrb	r3, [r4, #12]
   237b8:	e3530002 	cmp	r3, #2
   237bc:	0a000007 	beq	237e0 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0x9c>
   237c0:	e3530003 	cmp	r3, #3
   237c4:	0a000013 	beq	23818 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0xd4>
   237c8:	e3530001 	cmp	r3, #1
   237cc:	0a00000b 	beq	23800 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0xbc>
   237d0:	e3a02041 	mov	r2, #65	; 0x41
   237d4:	e59f1078 	ldr	r1, [pc, #120]	; 23854 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0x110>
   237d8:	e59f0078 	ldr	r0, [pc, #120]	; 23858 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0x114>
   237dc:	ebffe7c7 	bl	1d700 <assertion_failed>
   237e0:	e5847018 	str	r7, [r4, #24]
   237e4:	e3a07008 	mov	r7, #8
   237e8:	e59f206c 	ldr	r2, [pc, #108]	; 2385c <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0x118>
   237ec:	e59f306c 	ldr	r3, [pc, #108]	; 23860 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0x11c>
   237f0:	e1c422f8 	strd	r2, [r4, #40]	; 0x28
   237f4:	e1a00004 	mov	r0, r4
   237f8:	e584701c 	str	r7, [r4, #28]
   237fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23800:	e3a01002 	mov	r1, #2
   23804:	e59f2058 	ldr	r2, [pc, #88]	; 23864 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0x120>
   23808:	e59f3058 	ldr	r3, [pc, #88]	; 23868 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0x124>
   2380c:	e5841018 	str	r1, [r4, #24]
   23810:	e1c422f8 	strd	r2, [r4, #40]	; 0x28
   23814:	eafffff6 	b	237f4 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0xb0>
   23818:	e2466001 	sub	r6, r6, #1
   2381c:	e3560000 	cmp	r6, #0
   23820:	e584602c 	str	r6, [r4, #44]	; 0x2c
   23824:	c1a060c6 	asrgt	r6, r6, #1
   23828:	e5847018 	str	r7, [r4, #24]
   2382c:	e5845028 	str	r5, [r4, #40]	; 0x28
   23830:	c3a07008 	movgt	r7, #8
   23834:	c5846034 	strgt	r6, [r4, #52]	; 0x34
   23838:	c5846030 	strgt	r6, [r4, #48]	; 0x30
   2383c:	caffffec 	bgt	237f4 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0xb0>
   23840:	e3a0203a 	mov	r2, #58	; 0x3a
   23844:	e59f1008 	ldr	r1, [pc, #8]	; 23854 <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0x110>
   23848:	e59f001c 	ldr	r0, [pc, #28]	; 2386c <CSoundBaseDevice::CSoundBaseDevice(TSoundFormat, unsigned int, unsigned int, bool)+0x128>
   2384c:	ebffe7ab 	bl	1d700 <assertion_failed>
   23850:	00032aa0 	.word	0x00032aa0
   23854:	00032854 	.word	0x00032854
   23858:	0002dbb4 	.word	0x0002dbb4
   2385c:	ff800001 	.word	0xff800001
   23860:	007fffff 	.word	0x007fffff
   23864:	ffff8000 	.word	0xffff8000
   23868:	00007fff 	.word	0x00007fff
   2386c:	00032868 	.word	0x00032868

00023870 <CSoundBaseDevice::~CSoundBaseDevice()>:
   23870:	e3a03000 	mov	r3, #0
   23874:	e92d4010 	push	{r4, lr}
   23878:	e1a04000 	mov	r4, r0
   2387c:	e5900048 	ldr	r0, [r0, #72]	; 0x48
   23880:	e59f2028 	ldr	r2, [pc, #40]	; 238b0 <CSoundBaseDevice::~CSoundBaseDevice()+0x40>
   23884:	e1500003 	cmp	r0, r3
   23888:	e5842000 	str	r2, [r4]
   2388c:	e5843054 	str	r3, [r4, #84]	; 0x54
   23890:	0a000000 	beq	23898 <CSoundBaseDevice::~CSoundBaseDevice()+0x28>
   23894:	eb000fef 	bl	27858 <operator delete[](void*)>
   23898:	e3a03000 	mov	r3, #0
   2389c:	e1a00004 	mov	r0, r4
   238a0:	e5843048 	str	r3, [r4, #72]	; 0x48
   238a4:	ebffe96e 	bl	1de64 <CDevice::~CDevice()>
   238a8:	e1a00004 	mov	r0, r4
   238ac:	e8bd8010 	pop	{r4, pc}
   238b0:	00032aa0 	.word	0x00032aa0

000238b4 <CSoundBaseDevice::~CSoundBaseDevice()>:
   238b4:	e92d4010 	push	{r4, lr}
   238b8:	e1a04000 	mov	r4, r0
   238bc:	ebffffeb 	bl	23870 <CSoundBaseDevice::~CSoundBaseDevice()>
   238c0:	e1a00004 	mov	r0, r4
   238c4:	e3a01060 	mov	r1, #96	; 0x60
   238c8:	eb000fe3 	bl	2785c <operator delete(void*, unsigned int)>
   238cc:	e1a00004 	mov	r0, r4
   238d0:	e8bd8010 	pop	{r4, pc}

000238d4 <CSoundBaseDevice::AllocateQueue(unsigned int)>:
   238d4:	e5903048 	ldr	r3, [r0, #72]	; 0x48
   238d8:	e92d4010 	push	{r4, lr}
   238dc:	e3530000 	cmp	r3, #0
   238e0:	1a000015 	bne	2393c <CSoundBaseDevice::AllocateQueue(unsigned int)+0x68>
   238e4:	e2413001 	sub	r3, r1, #1
   238e8:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   238ec:	2a000016 	bcs	2394c <CSoundBaseDevice::AllocateQueue(unsigned int)+0x78>
   238f0:	e1a04000 	mov	r4, r0
   238f4:	e590201c 	ldr	r2, [r0, #28]
   238f8:	e5903010 	ldr	r3, [r0, #16]
   238fc:	e59f0058 	ldr	r0, [pc, #88]	; 2395c <CSoundBaseDevice::AllocateQueue(unsigned int)+0x88>
   23900:	e0030293 	mul	r3, r3, r2
   23904:	e0010391 	mul	r1, r1, r3
   23908:	e2811ff9 	add	r1, r1, #996	; 0x3e4
   2390c:	e2811003 	add	r1, r1, #3
   23910:	e0813190 	umull	r3, r1, r0, r1
   23914:	e1a01321 	lsr	r1, r1, #6
   23918:	e2810001 	add	r0, r1, #1
   2391c:	e5840020 	str	r0, [r4, #32]
   23920:	eb000fc5 	bl	2783c <operator new[](unsigned int)>
   23924:	e5943020 	ldr	r3, [r4, #32]
   23928:	e5840048 	str	r0, [r4, #72]	; 0x48
   2392c:	e1a030a3 	lsr	r3, r3, #1
   23930:	e3a00001 	mov	r0, #1
   23934:	e5843024 	str	r3, [r4, #36]	; 0x24
   23938:	e8bd8010 	pop	{r4, pc}
   2393c:	e3a0205c 	mov	r2, #92	; 0x5c
   23940:	e59f1018 	ldr	r1, [pc, #24]	; 23960 <CSoundBaseDevice::AllocateQueue(unsigned int)+0x8c>
   23944:	e59f0018 	ldr	r0, [pc, #24]	; 23964 <CSoundBaseDevice::AllocateQueue(unsigned int)+0x90>
   23948:	ebffe76c 	bl	1d700 <assertion_failed>
   2394c:	e3a0205d 	mov	r2, #93	; 0x5d
   23950:	e59f1008 	ldr	r1, [pc, #8]	; 23960 <CSoundBaseDevice::AllocateQueue(unsigned int)+0x8c>
   23954:	e59f000c 	ldr	r0, [pc, #12]	; 23968 <CSoundBaseDevice::AllocateQueue(unsigned int)+0x94>
   23958:	ebffe768 	bl	1d700 <assertion_failed>
   2395c:	10624dd3 	.word	0x10624dd3
   23960:	00032854 	.word	0x00032854
   23964:	00032878 	.word	0x00032878
   23968:	00032888 	.word	0x00032888

0002396c <CSoundBaseDevice::AllocateQueueFrames(unsigned int)>:
   2396c:	e5903048 	ldr	r3, [r0, #72]	; 0x48
   23970:	e92d4010 	push	{r4, lr}
   23974:	e3530000 	cmp	r3, #0
   23978:	1a000014 	bne	239d0 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x64>
   2397c:	e3510000 	cmp	r1, #0
   23980:	0a00000e 	beq	239c0 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x54>
   23984:	e5903010 	ldr	r3, [r0, #16]
   23988:	e1a04000 	mov	r4, r0
   2398c:	e1530001 	cmp	r3, r1
   23990:	3a00000a 	bcc	239c0 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x54>
   23994:	e590001c 	ldr	r0, [r0, #28]
   23998:	e0010190 	mul	r1, r0, r1
   2399c:	e2810001 	add	r0, r1, #1
   239a0:	e5840020 	str	r0, [r4, #32]
   239a4:	eb000fa4 	bl	2783c <operator new[](unsigned int)>
   239a8:	e5943020 	ldr	r3, [r4, #32]
   239ac:	e5840048 	str	r0, [r4, #72]	; 0x48
   239b0:	e1a030a3 	lsr	r3, r3, #1
   239b4:	e3a00001 	mov	r0, #1
   239b8:	e5843024 	str	r3, [r4, #36]	; 0x24
   239bc:	e8bd8010 	pop	{r4, pc}
   239c0:	e3a02070 	mov	r2, #112	; 0x70
   239c4:	e59f1014 	ldr	r1, [pc, #20]	; 239e0 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x74>
   239c8:	e59f0014 	ldr	r0, [pc, #20]	; 239e4 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x78>
   239cc:	ebffe74b 	bl	1d700 <assertion_failed>
   239d0:	e3a0206f 	mov	r2, #111	; 0x6f
   239d4:	e59f1004 	ldr	r1, [pc, #4]	; 239e0 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x74>
   239d8:	e59f0008 	ldr	r0, [pc, #8]	; 239e8 <CSoundBaseDevice::AllocateQueueFrames(unsigned int)+0x7c>
   239dc:	ebffe747 	bl	1d700 <assertion_failed>
   239e0:	00032854 	.word	0x00032854
   239e4:	000328b0 	.word	0x000328b0
   239e8:	00032878 	.word	0x00032878

000239ec <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)>:
   239ec:	e3510003 	cmp	r1, #3
   239f0:	e92d4010 	push	{r4, lr}
   239f4:	8a00001a 	bhi	23a64 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x78>
   239f8:	e2423001 	sub	r3, r2, #1
   239fc:	e3530001 	cmp	r3, #1
   23a00:	e5c01038 	strb	r1, [r0, #56]	; 0x38
   23a04:	8a00001a 	bhi	23a74 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x88>
   23a08:	e3510001 	cmp	r1, #1
   23a0c:	e580203c 	str	r2, [r0, #60]	; 0x3c
   23a10:	0a000009 	beq	23a3c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x50>
   23a14:	e3510002 	cmp	r1, #2
   23a18:	0a00000c 	beq	23a50 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x64>
   23a1c:	e3510000 	cmp	r1, #0
   23a20:	03a03001 	moveq	r3, #1
   23a24:	05803040 	streq	r3, [r0, #64]	; 0x40
   23a28:	0a000006 	beq	23a48 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x5c>
   23a2c:	e3a02097 	mov	r2, #151	; 0x97
   23a30:	e59f104c 	ldr	r1, [pc, #76]	; 23a84 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x98>
   23a34:	e59f004c 	ldr	r0, [pc, #76]	; 23a88 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x9c>
   23a38:	ebffe730 	bl	1d700 <assertion_failed>
   23a3c:	e3a03002 	mov	r3, #2
   23a40:	e1a02082 	lsl	r2, r2, #1
   23a44:	e5803040 	str	r3, [r0, #64]	; 0x40
   23a48:	e5802044 	str	r2, [r0, #68]	; 0x44
   23a4c:	e8bd8010 	pop	{r4, pc}
   23a50:	e3a03003 	mov	r3, #3
   23a54:	e0822082 	add	r2, r2, r2, lsl #1
   23a58:	e5803040 	str	r3, [r0, #64]	; 0x40
   23a5c:	e5802044 	str	r2, [r0, #68]	; 0x44
   23a60:	e8bd8010 	pop	{r4, pc}
   23a64:	e3a02082 	mov	r2, #130	; 0x82
   23a68:	e59f1014 	ldr	r1, [pc, #20]	; 23a84 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x98>
   23a6c:	e59f0018 	ldr	r0, [pc, #24]	; 23a8c <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0xa0>
   23a70:	ebffe722 	bl	1d700 <assertion_failed>
   23a74:	e3a02085 	mov	r2, #133	; 0x85
   23a78:	e59f1004 	ldr	r1, [pc, #4]	; 23a84 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0x98>
   23a7c:	e59f000c 	ldr	r0, [pc, #12]	; 23a90 <CSoundBaseDevice::SetWriteFormat(TSoundFormat, unsigned int)+0xa4>
   23a80:	ebffe71e 	bl	1d700 <assertion_failed>
   23a84:	00032854 	.word	0x00032854
   23a88:	0002dbb4 	.word	0x0002dbb4
   23a8c:	000328e4 	.word	0x000328e4
   23a90:	00032900 	.word	0x00032900

00023a94 <CSoundBaseDevice::GetQueueSizeFrames()>:
   23a94:	e5903020 	ldr	r3, [r0, #32]
   23a98:	e92d4010 	push	{r4, lr}
   23a9c:	e3530000 	cmp	r3, #0
   23aa0:	0a000003 	beq	23ab4 <CSoundBaseDevice::GetQueueSizeFrames()+0x20>
   23aa4:	e590101c 	ldr	r1, [r0, #28]
   23aa8:	e1a00003 	mov	r0, r3
   23aac:	eb001bf4 	bl	2aa84 <__udivsi3>
   23ab0:	e8bd8010 	pop	{r4, pc}
   23ab4:	e3a020f1 	mov	r2, #241	; 0xf1
   23ab8:	e59f1004 	ldr	r1, [pc, #4]	; 23ac4 <CSoundBaseDevice::GetQueueSizeFrames()+0x30>
   23abc:	e59f0004 	ldr	r0, [pc, #4]	; 23ac8 <CSoundBaseDevice::GetQueueSizeFrames()+0x34>
   23ac0:	ebffe70e 	bl	1d700 <assertion_failed>
   23ac4:	00032854 	.word	0x00032854
   23ac8:	00032924 	.word	0x00032924

00023acc <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)>:
   23acc:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   23ad0:	e92d4010 	push	{r4, lr}
   23ad4:	e3530000 	cmp	r3, #0
   23ad8:	1a000004 	bne	23af0 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x24>
   23adc:	e3510000 	cmp	r1, #0
   23ae0:	e5801054 	str	r1, [r0, #84]	; 0x54
   23ae4:	0a000005 	beq	23b00 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x34>
   23ae8:	e5802058 	str	r2, [r0, #88]	; 0x58
   23aec:	e8bd8010 	pop	{r4, pc}
   23af0:	e3a02f41 	mov	r2, #260	; 0x104
   23af4:	e59f1014 	ldr	r1, [pc, #20]	; 23b10 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x44>
   23af8:	e59f0014 	ldr	r0, [pc, #20]	; 23b14 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x48>
   23afc:	ebffe6ff 	bl	1d700 <assertion_failed>
   23b00:	e59f2010 	ldr	r2, [pc, #16]	; 23b18 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x4c>
   23b04:	e59f1004 	ldr	r1, [pc, #4]	; 23b10 <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x44>
   23b08:	e59f000c 	ldr	r0, [pc, #12]	; 23b1c <CSoundBaseDevice::RegisterNeedDataCallback(void (*)(void*), void*)+0x50>
   23b0c:	ebffe6fb 	bl	1d700 <assertion_failed>
   23b10:	00032854 	.word	0x00032854
   23b14:	00032938 	.word	0x00032938
   23b18:	00000106 	.word	0x00000106
   23b1c:	0003294c 	.word	0x0003294c

00023b20 <CSoundBaseDevice::AreChannelsSwapped() const>:
   23b20:	e5d00014 	ldrb	r0, [r0, #20]
   23b24:	e12fff1e 	bx	lr

00023b28 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>:
   23b28:	e5d03038 	ldrb	r3, [r0, #56]	; 0x38
   23b2c:	e1a0c001 	mov	ip, r1
   23b30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23b34:	e1a01002 	mov	r1, r2
   23b38:	e3530004 	cmp	r3, #4
   23b3c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   23b40:	ea000031 	b	23c0c <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xe4>
   23b44:	00023bd8 	.word	0x00023bd8
   23b48:	00023bb8 	.word	0x00023bb8
   23b4c:	00023b68 	.word	0x00023b68
   23b50:	00023c0c 	.word	0x00023c0c
   23b54:	00023b58 	.word	0x00023b58
   23b58:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   23b5c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   23b60:	e1a0000c 	mov	r0, ip
   23b64:	ea000d48 	b	2708c <memcpy>
   23b68:	e5922000 	ldr	r2, [r2]
   23b6c:	e1a02402 	lsl	r2, r2, #8
   23b70:	e5d0300c 	ldrb	r3, [r0, #12]
   23b74:	e3530002 	cmp	r3, #2
   23b78:	0a000013 	beq	23bcc <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xa4>
   23b7c:	e3530003 	cmp	r3, #3
   23b80:	1a000018 	bne	23be8 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xc0>
   23b84:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   23b88:	e1a07fc2 	asr	r7, r2, #31
   23b8c:	e1a06002 	mov	r6, r2
   23b90:	e2922102 	adds	r2, r2, #-2147483648	; 0x80000000
   23b94:	e2a73000 	adc	r3, r7, #0
   23b98:	e0030390 	mul	r3, r0, r3
   23b9c:	e1a05fc0 	asr	r5, r0, #31
   23ba0:	e1a04000 	mov	r4, r0
   23ba4:	e0233592 	mla	r3, r2, r5, r3
   23ba8:	e0810290 	umull	r0, r1, r0, r2
   23bac:	e0833001 	add	r3, r3, r1
   23bb0:	e58c3000 	str	r3, [ip]
   23bb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23bb8:	e5d0300c 	ldrb	r3, [r0, #12]
   23bbc:	e1d220f0 	ldrsh	r2, [r2]
   23bc0:	e3530002 	cmp	r3, #2
   23bc4:	e1a02802 	lsl	r2, r2, #16
   23bc8:	1affffeb 	bne	23b7c <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x54>
   23bcc:	e1a02442 	asr	r2, r2, #8
   23bd0:	e58c2000 	str	r2, [ip]
   23bd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23bd8:	e5d22000 	ldrb	r2, [r2]
   23bdc:	e2422080 	sub	r2, r2, #128	; 0x80
   23be0:	e1a02c02 	lsl	r2, r2, #24
   23be4:	eaffffe1 	b	23b70 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0x48>
   23be8:	e3530001 	cmp	r3, #1
   23bec:	0a000003 	beq	23c00 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xd8>
   23bf0:	e3a02f56 	mov	r2, #344	; 0x158
   23bf4:	e59f1020 	ldr	r1, [pc, #32]	; 23c1c <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xf4>
   23bf8:	e59f0020 	ldr	r0, [pc, #32]	; 23c20 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xf8>
   23bfc:	ebffe6bf 	bl	1d700 <assertion_failed>
   23c00:	e1a02842 	asr	r2, r2, #16
   23c04:	e1cc20b0 	strh	r2, [ip]
   23c08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23c0c:	e59f2010 	ldr	r2, [pc, #16]	; 23c24 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xfc>
   23c10:	e59f1004 	ldr	r1, [pc, #4]	; 23c1c <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xf4>
   23c14:	e59f0004 	ldr	r0, [pc, #4]	; 23c20 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)+0xf8>
   23c18:	ebffe6b8 	bl	1d700 <assertion_failed>
   23c1c:	00032854 	.word	0x00032854
   23c20:	0002dbb4 	.word	0x0002dbb4
   23c24:	0000013d 	.word	0x0000013d

00023c28 <CSoundBaseDevice::GetQueueBytesFree()>:
   23c28:	e5903020 	ldr	r3, [r0, #32]
   23c2c:	e92d4010 	push	{r4, lr}
   23c30:	e3530001 	cmp	r3, #1
   23c34:	9a00000b 	bls	23c68 <CSoundBaseDevice::GetQueueBytesFree()+0x40>
   23c38:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
   23c3c:	e1530002 	cmp	r3, r2
   23c40:	9a00000c 	bls	23c78 <CSoundBaseDevice::GetQueueBytesFree()+0x50>
   23c44:	e5900050 	ldr	r0, [r0, #80]	; 0x50
   23c48:	e1530000 	cmp	r3, r0
   23c4c:	9a00000d 	bls	23c88 <CSoundBaseDevice::GetQueueBytesFree()+0x60>
   23c50:	e1520000 	cmp	r2, r0
   23c54:	20833000 	addcs	r3, r3, r0
   23c58:	22433001 	subcs	r3, r3, #1
   23c5c:	32403001 	subcc	r3, r0, #1
   23c60:	e0430002 	sub	r0, r3, r2
   23c64:	e8bd8010 	pop	{r4, pc}
   23c68:	e3a02f63 	mov	r2, #396	; 0x18c
   23c6c:	e59f1024 	ldr	r1, [pc, #36]	; 23c98 <CSoundBaseDevice::GetQueueBytesFree()+0x70>
   23c70:	e59f0024 	ldr	r0, [pc, #36]	; 23c9c <CSoundBaseDevice::GetQueueBytesFree()+0x74>
   23c74:	ebffe6a1 	bl	1d700 <assertion_failed>
   23c78:	e59f2020 	ldr	r2, [pc, #32]	; 23ca0 <CSoundBaseDevice::GetQueueBytesFree()+0x78>
   23c7c:	e59f1014 	ldr	r1, [pc, #20]	; 23c98 <CSoundBaseDevice::GetQueueBytesFree()+0x70>
   23c80:	e59f001c 	ldr	r0, [pc, #28]	; 23ca4 <CSoundBaseDevice::GetQueueBytesFree()+0x7c>
   23c84:	ebffe69d 	bl	1d700 <assertion_failed>
   23c88:	e59f2018 	ldr	r2, [pc, #24]	; 23ca8 <CSoundBaseDevice::GetQueueBytesFree()+0x80>
   23c8c:	e59f1004 	ldr	r1, [pc, #4]	; 23c98 <CSoundBaseDevice::GetQueueBytesFree()+0x70>
   23c90:	e59f0014 	ldr	r0, [pc, #20]	; 23cac <CSoundBaseDevice::GetQueueBytesFree()+0x84>
   23c94:	ebffe699 	bl	1d700 <assertion_failed>
   23c98:	00032854 	.word	0x00032854
   23c9c:	00032960 	.word	0x00032960
   23ca0:	0000018d 	.word	0x0000018d
   23ca4:	00032974 	.word	0x00032974
   23ca8:	0000018e 	.word	0x0000018e
   23cac:	0003298c 	.word	0x0003298c

00023cb0 <CSoundBaseDevice::GetQueueBytesAvail()>:
   23cb0:	e5903020 	ldr	r3, [r0, #32]
   23cb4:	e92d4010 	push	{r4, lr}
   23cb8:	e3530001 	cmp	r3, #1
   23cbc:	9a00000a 	bls	23cec <CSoundBaseDevice::GetQueueBytesAvail()+0x3c>
   23cc0:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
   23cc4:	e1530002 	cmp	r3, r2
   23cc8:	9a00000b 	bls	23cfc <CSoundBaseDevice::GetQueueBytesAvail()+0x4c>
   23ccc:	e5900050 	ldr	r0, [r0, #80]	; 0x50
   23cd0:	e1530000 	cmp	r3, r0
   23cd4:	9a00000c 	bls	23d0c <CSoundBaseDevice::GetQueueBytesAvail()+0x5c>
   23cd8:	e1520000 	cmp	r2, r0
   23cdc:	30833002 	addcc	r3, r3, r2
   23ce0:	30430000 	subcc	r0, r3, r0
   23ce4:	20420000 	subcs	r0, r2, r0
   23ce8:	e8bd8010 	pop	{r4, pc}
   23cec:	e59f2028 	ldr	r2, [pc, #40]	; 23d1c <CSoundBaseDevice::GetQueueBytesAvail()+0x6c>
   23cf0:	e59f1028 	ldr	r1, [pc, #40]	; 23d20 <CSoundBaseDevice::GetQueueBytesAvail()+0x70>
   23cf4:	e59f0028 	ldr	r0, [pc, #40]	; 23d24 <CSoundBaseDevice::GetQueueBytesAvail()+0x74>
   23cf8:	ebffe680 	bl	1d700 <assertion_failed>
   23cfc:	e59f2024 	ldr	r2, [pc, #36]	; 23d28 <CSoundBaseDevice::GetQueueBytesAvail()+0x78>
   23d00:	e59f1018 	ldr	r1, [pc, #24]	; 23d20 <CSoundBaseDevice::GetQueueBytesAvail()+0x70>
   23d04:	e59f0020 	ldr	r0, [pc, #32]	; 23d2c <CSoundBaseDevice::GetQueueBytesAvail()+0x7c>
   23d08:	ebffe67c 	bl	1d700 <assertion_failed>
   23d0c:	e3a02f67 	mov	r2, #412	; 0x19c
   23d10:	e59f1008 	ldr	r1, [pc, #8]	; 23d20 <CSoundBaseDevice::GetQueueBytesAvail()+0x70>
   23d14:	e59f0014 	ldr	r0, [pc, #20]	; 23d30 <CSoundBaseDevice::GetQueueBytesAvail()+0x80>
   23d18:	ebffe678 	bl	1d700 <assertion_failed>
   23d1c:	0000019a 	.word	0x0000019a
   23d20:	00032854 	.word	0x00032854
   23d24:	00032960 	.word	0x00032960
   23d28:	0000019b 	.word	0x0000019b
   23d2c:	00032974 	.word	0x00032974
   23d30:	0003298c 	.word	0x0003298c

00023d34 <CSoundBaseDevice::GetQueueFramesAvail()>:
   23d34:	e92d4010 	push	{r4, lr}
   23d38:	e5903020 	ldr	r3, [r0, #32]
   23d3c:	e24dd008 	sub	sp, sp, #8
   23d40:	e3530000 	cmp	r3, #0
   23d44:	0a000016 	beq	23da4 <CSoundBaseDevice::GetQueueFramesAvail()+0x70>
   23d48:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   23d4c:	e1a04000 	mov	r4, r0
   23d50:	e3530000 	cmp	r3, #0
   23d54:	1a000004 	bne	23d6c <CSoundBaseDevice::GetQueueFramesAvail()+0x38>
   23d58:	ebffffd4 	bl	23cb0 <CSoundBaseDevice::GetQueueBytesAvail()>
   23d5c:	e594101c 	ldr	r1, [r4, #28]
   23d60:	eb001b47 	bl	2aa84 <__udivsi3>
   23d64:	e28dd008 	add	sp, sp, #8
   23d68:	e8bd8010 	pop	{r4, pc}
   23d6c:	e1a00003 	mov	r0, r3
   23d70:	eb00124b 	bl	286a4 <EnterCritical>
   23d74:	e1a00004 	mov	r0, r4
   23d78:	ebffffcc 	bl	23cb0 <CSoundBaseDevice::GetQueueBytesAvail()>
   23d7c:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   23d80:	e3530000 	cmp	r3, #0
   23d84:	0afffff4 	beq	23d5c <CSoundBaseDevice::GetQueueFramesAvail()+0x28>
   23d88:	e58d0004 	str	r0, [sp, #4]
   23d8c:	eb00126e 	bl	2874c <LeaveCritical>
   23d90:	e59d0004 	ldr	r0, [sp, #4]
   23d94:	e594101c 	ldr	r1, [r4, #28]
   23d98:	eb001b39 	bl	2aa84 <__udivsi3>
   23d9c:	e28dd008 	add	sp, sp, #8
   23da0:	e8bd8010 	pop	{r4, pc}
   23da4:	e3a020f7 	mov	r2, #247	; 0xf7
   23da8:	e59f1004 	ldr	r1, [pc, #4]	; 23db4 <CSoundBaseDevice::GetQueueFramesAvail()+0x80>
   23dac:	e59f0004 	ldr	r0, [pc, #4]	; 23db8 <CSoundBaseDevice::GetQueueFramesAvail()+0x84>
   23db0:	ebffe652 	bl	1d700 <assertion_failed>
   23db4:	00032854 	.word	0x00032854
   23db8:	00032924 	.word	0x00032924

00023dbc <CSoundBaseDevice::Enqueue(void const*, unsigned int)>:
   23dbc:	e3510000 	cmp	r1, #0
   23dc0:	e92d4010 	push	{r4, lr}
   23dc4:	0a000014 	beq	23e1c <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x60>
   23dc8:	e5903048 	ldr	r3, [r0, #72]	; 0x48
   23dcc:	e3530000 	cmp	r3, #0
   23dd0:	0a000015 	beq	23e2c <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x70>
   23dd4:	e3520000 	cmp	r2, #0
   23dd8:	0a000017 	beq	23e3c <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x80>
   23ddc:	e3a04000 	mov	r4, #0
   23de0:	e081e002 	add	lr, r1, r2
   23de4:	e4d1c001 	ldrb	ip, [r1], #1
   23de8:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
   23dec:	e7c3c002 	strb	ip, [r3, r2]
   23df0:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   23df4:	e5902020 	ldr	r2, [r0, #32]
   23df8:	e2833001 	add	r3, r3, #1
   23dfc:	e1530002 	cmp	r3, r2
   23e00:	11a02003 	movne	r2, r3
   23e04:	01a02004 	moveq	r2, r4
   23e08:	e151000e 	cmp	r1, lr
   23e0c:	e580204c 	str	r2, [r0, #76]	; 0x4c
   23e10:	08bd8010 	popeq	{r4, pc}
   23e14:	e5903048 	ldr	r3, [r0, #72]	; 0x48
   23e18:	eafffff1 	b	23de4 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x28>
   23e1c:	e59f2028 	ldr	r2, [pc, #40]	; 23e4c <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x90>
   23e20:	e59f1028 	ldr	r1, [pc, #40]	; 23e50 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x94>
   23e24:	e59f0028 	ldr	r0, [pc, #40]	; 23e54 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x98>
   23e28:	ebffe634 	bl	1d700 <assertion_failed>
   23e2c:	e59f2024 	ldr	r2, [pc, #36]	; 23e58 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x9c>
   23e30:	e59f1018 	ldr	r1, [pc, #24]	; 23e50 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x94>
   23e34:	e59f0020 	ldr	r0, [pc, #32]	; 23e5c <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0xa0>
   23e38:	ebffe630 	bl	1d700 <assertion_failed>
   23e3c:	e3a02f6b 	mov	r2, #428	; 0x1ac
   23e40:	e59f1008 	ldr	r1, [pc, #8]	; 23e50 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0x94>
   23e44:	e59f0014 	ldr	r0, [pc, #20]	; 23e60 <CSoundBaseDevice::Enqueue(void const*, unsigned int)+0xa4>
   23e48:	ebffe62c 	bl	1d700 <assertion_failed>
   23e4c:	000001a9 	.word	0x000001a9
   23e50:	00032854 	.word	0x00032854
   23e54:	000329a8 	.word	0x000329a8
   23e58:	000001aa 	.word	0x000001aa
   23e5c:	000329b0 	.word	0x000329b0
   23e60:	0002ed04 	.word	0x0002ed04

00023e64 <CSoundBaseDevice::Write(void const*, unsigned int)>:
   23e64:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   23e68:	e5d03038 	ldrb	r3, [r0, #56]	; 0x38
   23e6c:	e24dd00c 	sub	sp, sp, #12
   23e70:	e3530003 	cmp	r3, #3
   23e74:	8a00006a 	bhi	24024 <CSoundBaseDevice::Write(void const*, unsigned int)+0x1c0>
   23e78:	e3510000 	cmp	r1, #0
   23e7c:	e1a05001 	mov	r5, r1
   23e80:	0a00006b 	beq	24034 <CSoundBaseDevice::Write(void const*, unsigned int)+0x1d0>
   23e84:	e1a04000 	mov	r4, r0
   23e88:	e590005c 	ldr	r0, [r0, #92]	; 0x5c
   23e8c:	e1a06002 	mov	r6, r2
   23e90:	e3500000 	cmp	r0, #0
   23e94:	1a00005b 	bne	24008 <CSoundBaseDevice::Write(void const*, unsigned int)+0x1a4>
   23e98:	e5d4200c 	ldrb	r2, [r4, #12]
   23e9c:	e1520003 	cmp	r2, r3
   23ea0:	0a00003e 	beq	23fa0 <CSoundBaseDevice::Write(void const*, unsigned int)+0x13c>
   23ea4:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   23ea8:	e3a07000 	mov	r7, #0
   23eac:	e1560003 	cmp	r6, r3
   23eb0:	2a000015 	bcs	23f0c <CSoundBaseDevice::Write(void const*, unsigned int)+0xa8>
   23eb4:	ea00004d 	b	23ff0 <CSoundBaseDevice::Write(void const*, unsigned int)+0x18c>
   23eb8:	e1a02005 	mov	r2, r5
   23ebc:	e1a0100d 	mov	r1, sp
   23ec0:	e1a00004 	mov	r0, r4
   23ec4:	ebffff17 	bl	23b28 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
   23ec8:	e1c423dc 	ldrd	r2, [r4, #60]	; 0x3c
   23ecc:	e3520002 	cmp	r2, #2
   23ed0:	e0855003 	add	r5, r5, r3
   23ed4:	0a000022 	beq	23f64 <CSoundBaseDevice::Write(void const*, unsigned int)+0x100>
   23ed8:	e5942018 	ldr	r2, [r4, #24]
   23edc:	e1a0100d 	mov	r1, sp
   23ee0:	e08d0002 	add	r0, sp, r2
   23ee4:	eb000c68 	bl	2708c <memcpy>
   23ee8:	e1a0100d 	mov	r1, sp
   23eec:	e1a00004 	mov	r0, r4
   23ef0:	e594201c 	ldr	r2, [r4, #28]
   23ef4:	ebffffb0 	bl	23dbc <CSoundBaseDevice::Enqueue(void const*, unsigned int)>
   23ef8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   23efc:	e0466003 	sub	r6, r6, r3
   23f00:	e1530006 	cmp	r3, r6
   23f04:	e0877003 	add	r7, r7, r3
   23f08:	8a000038 	bhi	23ff0 <CSoundBaseDevice::Write(void const*, unsigned int)+0x18c>
   23f0c:	e1a00004 	mov	r0, r4
   23f10:	ebffff44 	bl	23c28 <CSoundBaseDevice::GetQueueBytesFree()>
   23f14:	e594301c 	ldr	r3, [r4, #28]
   23f18:	e1500003 	cmp	r0, r3
   23f1c:	3a000033 	bcc	23ff0 <CSoundBaseDevice::Write(void const*, unsigned int)+0x18c>
   23f20:	e5d43014 	ldrb	r3, [r4, #20]
   23f24:	e3530000 	cmp	r3, #0
   23f28:	0affffe2 	beq	23eb8 <CSoundBaseDevice::Write(void const*, unsigned int)+0x54>
   23f2c:	e5941018 	ldr	r1, [r4, #24]
   23f30:	e1a02005 	mov	r2, r5
   23f34:	e1a00004 	mov	r0, r4
   23f38:	e08d1001 	add	r1, sp, r1
   23f3c:	ebfffef9 	bl	23b28 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
   23f40:	e1c423dc 	ldrd	r2, [r4, #60]	; 0x3c
   23f44:	e3520002 	cmp	r2, #2
   23f48:	e0855003 	add	r5, r5, r3
   23f4c:	0a00000c 	beq	23f84 <CSoundBaseDevice::Write(void const*, unsigned int)+0x120>
   23f50:	e5942018 	ldr	r2, [r4, #24]
   23f54:	e1a0000d 	mov	r0, sp
   23f58:	e08d1002 	add	r1, sp, r2
   23f5c:	eb000c4a 	bl	2708c <memcpy>
   23f60:	eaffffe0 	b	23ee8 <CSoundBaseDevice::Write(void const*, unsigned int)+0x84>
   23f64:	e5941018 	ldr	r1, [r4, #24]
   23f68:	e1a02005 	mov	r2, r5
   23f6c:	e1a00004 	mov	r0, r4
   23f70:	e08d1001 	add	r1, sp, r1
   23f74:	ebfffeeb 	bl	23b28 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
   23f78:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   23f7c:	e0855003 	add	r5, r5, r3
   23f80:	eaffffd8 	b	23ee8 <CSoundBaseDevice::Write(void const*, unsigned int)+0x84>
   23f84:	e1a02005 	mov	r2, r5
   23f88:	e1a0100d 	mov	r1, sp
   23f8c:	e1a00004 	mov	r0, r4
   23f90:	ebfffee4 	bl	23b28 <CSoundBaseDevice::ConvertSoundFormat(void*, void const*)>
   23f94:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   23f98:	e0855003 	add	r5, r5, r3
   23f9c:	eaffffd1 	b	23ee8 <CSoundBaseDevice::Write(void const*, unsigned int)+0x84>
   23fa0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   23fa4:	e3530002 	cmp	r3, #2
   23fa8:	1affffbd 	bne	23ea4 <CSoundBaseDevice::Write(void const*, unsigned int)+0x40>
   23fac:	e5d43014 	ldrb	r3, [r4, #20]
   23fb0:	e3530000 	cmp	r3, #0
   23fb4:	1affffba 	bne	23ea4 <CSoundBaseDevice::Write(void const*, unsigned int)+0x40>
   23fb8:	e1a00004 	mov	r0, r4
   23fbc:	ebffff19 	bl	23c28 <CSoundBaseDevice::GetQueueBytesFree()>
   23fc0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   23fc4:	e2633000 	rsb	r3, r3, #0
   23fc8:	e1560000 	cmp	r6, r0
   23fcc:	90032006 	andls	r2, r3, r6
   23fd0:	80032000 	andhi	r2, r3, r0
   23fd4:	e3520000 	cmp	r2, #0
   23fd8:	01a07002 	moveq	r7, r2
   23fdc:	0a000003 	beq	23ff0 <CSoundBaseDevice::Write(void const*, unsigned int)+0x18c>
   23fe0:	e1a01005 	mov	r1, r5
   23fe4:	e1a00004 	mov	r0, r4
   23fe8:	e1a07002 	mov	r7, r2
   23fec:	ebffff72 	bl	23dbc <CSoundBaseDevice::Enqueue(void const*, unsigned int)>
   23ff0:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   23ff4:	e3530000 	cmp	r3, #0
   23ff8:	1a000005 	bne	24014 <CSoundBaseDevice::Write(void const*, unsigned int)+0x1b0>
   23ffc:	e1a00007 	mov	r0, r7
   24000:	e28dd00c 	add	sp, sp, #12
   24004:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   24008:	eb0011a5 	bl	286a4 <EnterCritical>
   2400c:	e5d43038 	ldrb	r3, [r4, #56]	; 0x38
   24010:	eaffffa0 	b	23e98 <CSoundBaseDevice::Write(void const*, unsigned int)+0x34>
   24014:	eb0011cc 	bl	2874c <LeaveCritical>
   24018:	e1a00007 	mov	r0, r7
   2401c:	e28dd00c 	add	sp, sp, #12
   24020:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   24024:	e3a020a0 	mov	r2, #160	; 0xa0
   24028:	e59f1014 	ldr	r1, [pc, #20]	; 24044 <CSoundBaseDevice::Write(void const*, unsigned int)+0x1e0>
   2402c:	e59f0014 	ldr	r0, [pc, #20]	; 24048 <CSoundBaseDevice::Write(void const*, unsigned int)+0x1e4>
   24030:	ebffe5b2 	bl	1d700 <assertion_failed>
   24034:	e3a020a2 	mov	r2, #162	; 0xa2
   24038:	e59f1004 	ldr	r1, [pc, #4]	; 24044 <CSoundBaseDevice::Write(void const*, unsigned int)+0x1e0>
   2403c:	e59f0008 	ldr	r0, [pc, #8]	; 2404c <CSoundBaseDevice::Write(void const*, unsigned int)+0x1e8>
   24040:	ebffe5ae 	bl	1d700 <assertion_failed>
   24044:	00032854 	.word	0x00032854
   24048:	000329c0 	.word	0x000329c0
   2404c:	0002e89c 	.word	0x0002e89c

00024050 <CSoundBaseDevice::Dequeue(void*, unsigned int)>:
   24050:	e3510000 	cmp	r1, #0
   24054:	e92d4010 	push	{r4, lr}
   24058:	0a000014 	beq	240b0 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x60>
   2405c:	e5903048 	ldr	r3, [r0, #72]	; 0x48
   24060:	e3530000 	cmp	r3, #0
   24064:	0a000015 	beq	240c0 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x70>
   24068:	e3520000 	cmp	r2, #0
   2406c:	0a000017 	beq	240d0 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x80>
   24070:	e3a0e000 	mov	lr, #0
   24074:	e081c002 	add	ip, r1, r2
   24078:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   2407c:	e7d33002 	ldrb	r3, [r3, r2]
   24080:	e4c13001 	strb	r3, [r1], #1
   24084:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   24088:	e5902020 	ldr	r2, [r0, #32]
   2408c:	e2833001 	add	r3, r3, #1
   24090:	e1530002 	cmp	r3, r2
   24094:	11a02003 	movne	r2, r3
   24098:	01a0200e 	moveq	r2, lr
   2409c:	e151000c 	cmp	r1, ip
   240a0:	e5802050 	str	r2, [r0, #80]	; 0x50
   240a4:	08bd8010 	popeq	{r4, pc}
   240a8:	e5903048 	ldr	r3, [r0, #72]	; 0x48
   240ac:	eafffff1 	b	24078 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x28>
   240b0:	e59f2028 	ldr	r2, [pc, #40]	; 240e0 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x90>
   240b4:	e59f1028 	ldr	r1, [pc, #40]	; 240e4 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x94>
   240b8:	e59f0028 	ldr	r0, [pc, #40]	; 240e8 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x98>
   240bc:	ebffe58f 	bl	1d700 <assertion_failed>
   240c0:	e3a02f6f 	mov	r2, #444	; 0x1bc
   240c4:	e59f1018 	ldr	r1, [pc, #24]	; 240e4 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x94>
   240c8:	e59f001c 	ldr	r0, [pc, #28]	; 240ec <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x9c>
   240cc:	ebffe58b 	bl	1d700 <assertion_failed>
   240d0:	e59f2018 	ldr	r2, [pc, #24]	; 240f0 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0xa0>
   240d4:	e59f1008 	ldr	r1, [pc, #8]	; 240e4 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0x94>
   240d8:	e59f0014 	ldr	r0, [pc, #20]	; 240f4 <CSoundBaseDevice::Dequeue(void*, unsigned int)+0xa4>
   240dc:	ebffe587 	bl	1d700 <assertion_failed>
   240e0:	000001bb 	.word	0x000001bb
   240e4:	00032854 	.word	0x00032854
   240e8:	000329a8 	.word	0x000329a8
   240ec:	000329b0 	.word	0x000329b0
   240f0:	000001be 	.word	0x000001be
   240f4:	0002ed04 	.word	0x0002ed04

000240f8 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)>:
   240f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   240fc:	e2514000 	subs	r4, r1, #0
   24100:	0a00003d 	beq	241fc <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x104>
   24104:	e3520000 	cmp	r2, #0
   24108:	e1a0a002 	mov	sl, r2
   2410c:	0a00003e 	beq	2420c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x114>
   24110:	e3120001 	tst	r2, #1
   24114:	1a000040 	bne	2421c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x124>
   24118:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   2411c:	e5907018 	ldr	r7, [r0, #24]
   24120:	e3530000 	cmp	r3, #0
   24124:	e1a06000 	mov	r6, r0
   24128:	e0070297 	mul	r7, r7, r2
   2412c:	1a00001c 	bne	241a4 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xac>
   24130:	ebfffede 	bl	23cb0 <CSoundBaseDevice::GetQueueBytesAvail()>
   24134:	e1500007 	cmp	r0, r7
   24138:	31a05000 	movcc	r5, r0
   2413c:	21a05007 	movcs	r5, r7
   24140:	e3550000 	cmp	r5, #0
   24144:	e1a09000 	mov	r9, r0
   24148:	1a000024 	bne	241e0 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xe8>
   2414c:	e1550007 	cmp	r5, r7
   24150:	3596201c 	ldrcc	r2, [r6, #28]
   24154:	32868030 	addcc	r8, r6, #48	; 0x30
   24158:	2a000007 	bcs	2417c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x84>
   2415c:	e1a00004 	mov	r0, r4
   24160:	e1a01008 	mov	r1, r8
   24164:	eb000bc8 	bl	2708c <memcpy>
   24168:	e596201c 	ldr	r2, [r6, #28]
   2416c:	e0855002 	add	r5, r5, r2
   24170:	e1570005 	cmp	r7, r5
   24174:	e0844002 	add	r4, r4, r2
   24178:	8afffff7 	bhi	2415c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x64>
   2417c:	e5963054 	ldr	r3, [r6, #84]	; 0x54
   24180:	e3530000 	cmp	r3, #0
   24184:	0a000004 	beq	2419c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xa4>
   24188:	e5962024 	ldr	r2, [r6, #36]	; 0x24
   2418c:	e1520009 	cmp	r2, r9
   24190:	9a000001 	bls	2419c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xa4>
   24194:	e5960058 	ldr	r0, [r6, #88]	; 0x58
   24198:	e12fff33 	blx	r3
   2419c:	e1a0000a 	mov	r0, sl
   241a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   241a4:	e1a00003 	mov	r0, r3
   241a8:	eb00113d 	bl	286a4 <EnterCritical>
   241ac:	e1a00006 	mov	r0, r6
   241b0:	ebfffebe 	bl	23cb0 <CSoundBaseDevice::GetQueueBytesAvail()>
   241b4:	e1570000 	cmp	r7, r0
   241b8:	31a05007 	movcc	r5, r7
   241bc:	21a05000 	movcs	r5, r0
   241c0:	e3550000 	cmp	r5, #0
   241c4:	e1a09000 	mov	r9, r0
   241c8:	1a000004 	bne	241e0 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xe8>
   241cc:	e596305c 	ldr	r3, [r6, #92]	; 0x5c
   241d0:	e3530000 	cmp	r3, #0
   241d4:	0affffdc 	beq	2414c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x54>
   241d8:	eb00115b 	bl	2874c <LeaveCritical>
   241dc:	eaffffda 	b	2414c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x54>
   241e0:	e1a01004 	mov	r1, r4
   241e4:	e1a02005 	mov	r2, r5
   241e8:	e1a00006 	mov	r0, r6
   241ec:	ebffff97 	bl	24050 <CSoundBaseDevice::Dequeue(void*, unsigned int)>
   241f0:	e0499005 	sub	r9, r9, r5
   241f4:	e0844005 	add	r4, r4, r5
   241f8:	eafffff3 	b	241cc <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0xd4>
   241fc:	e3a02e16 	mov	r2, #352	; 0x160
   24200:	e59f1024 	ldr	r1, [pc, #36]	; 2422c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x134>
   24204:	e59f0024 	ldr	r0, [pc, #36]	; 24230 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x138>
   24208:	ebffe53c 	bl	1d700 <assertion_failed>
   2420c:	e59f2020 	ldr	r2, [pc, #32]	; 24234 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x13c>
   24210:	e59f1014 	ldr	r1, [pc, #20]	; 2422c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x134>
   24214:	e59f001c 	ldr	r0, [pc, #28]	; 24238 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x140>
   24218:	ebffe538 	bl	1d700 <assertion_failed>
   2421c:	e59f2018 	ldr	r2, [pc, #24]	; 2423c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x144>
   24220:	e59f1004 	ldr	r1, [pc, #4]	; 2422c <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x134>
   24224:	e59f0014 	ldr	r0, [pc, #20]	; 24240 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)+0x148>
   24228:	ebffe534 	bl	1d700 <assertion_failed>
   2422c:	00032854 	.word	0x00032854
   24230:	000329e4 	.word	0x000329e4
   24234:	00000162 	.word	0x00000162
   24238:	000329f4 	.word	0x000329f4
   2423c:	00000163 	.word	0x00000163
   24240:	00032a04 	.word	0x00032a04

00024244 <CSoundBaseDevice::GetChunk(short*, unsigned int)>:
   24244:	e5d0300c 	ldrb	r3, [r0, #12]
   24248:	e3530001 	cmp	r3, #1
   2424c:	1a000000 	bne	24254 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x10>
   24250:	eaffffa8 	b	240f8 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)>
   24254:	e92d4010 	push	{r4, lr}
   24258:	e59f2008 	ldr	r2, [pc, #8]	; 24268 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x24>
   2425c:	e59f1008 	ldr	r1, [pc, #8]	; 2426c <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x28>
   24260:	e59f0008 	ldr	r0, [pc, #8]	; 24270 <CSoundBaseDevice::GetChunk(short*, unsigned int)+0x2c>
   24264:	ebffe525 	bl	1d700 <assertion_failed>
   24268:	00000112 	.word	0x00000112
   2426c:	00032854 	.word	0x00032854
   24270:	00032a28 	.word	0x00032a28

00024274 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)>:
   24274:	e5d0300c 	ldrb	r3, [r0, #12]
   24278:	e2433002 	sub	r3, r3, #2
   2427c:	e3530001 	cmp	r3, #1
   24280:	8a000000 	bhi	24288 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x14>
   24284:	eaffff9b 	b	240f8 <CSoundBaseDevice::GetChunkInternal(void*, unsigned int)>
   24288:	e92d4010 	push	{r4, lr}
   2428c:	e59f2008 	ldr	r2, [pc, #8]	; 2429c <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x28>
   24290:	e59f1008 	ldr	r1, [pc, #8]	; 242a0 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x2c>
   24294:	e59f0008 	ldr	r0, [pc, #8]	; 242a4 <CSoundBaseDevice::GetChunk(unsigned int*, unsigned int)+0x30>
   24298:	ebffe518 	bl	1d700 <assertion_failed>
   2429c:	00000119 	.word	0x00000119
   242a0:	00032854 	.word	0x00032854
   242a4:	00032a4c 	.word	0x00032a4c

000242a8 <CString::~CString()>:
   242a8:	e92d4010 	push	{r4, lr}
   242ac:	e1a04000 	mov	r4, r0
   242b0:	e5900004 	ldr	r0, [r0, #4]
   242b4:	e59f3014 	ldr	r3, [pc, #20]	; 242d0 <CString::~CString()+0x28>
   242b8:	e3500000 	cmp	r0, #0
   242bc:	e5843000 	str	r3, [r4]
   242c0:	0a000000 	beq	242c8 <CString::~CString()+0x20>
   242c4:	eb000d63 	bl	27858 <operator delete[](void*)>
   242c8:	e1a00004 	mov	r0, r4
   242cc:	e8bd8010 	pop	{r4, pc}
   242d0:	00032af0 	.word	0x00032af0

000242d4 <CString::~CString()>:
   242d4:	e92d4010 	push	{r4, lr}
   242d8:	e1a04000 	mov	r4, r0
   242dc:	e5900004 	ldr	r0, [r0, #4]
   242e0:	e59f3020 	ldr	r3, [pc, #32]	; 24308 <CString::~CString()+0x34>
   242e4:	e3500000 	cmp	r0, #0
   242e8:	e5843000 	str	r3, [r4]
   242ec:	0a000000 	beq	242f4 <CString::~CString()+0x20>
   242f0:	eb000d58 	bl	27858 <operator delete[](void*)>
   242f4:	e1a00004 	mov	r0, r4
   242f8:	e3a01010 	mov	r1, #16
   242fc:	eb000d56 	bl	2785c <operator delete(void*, unsigned int)>
   24300:	e1a00004 	mov	r0, r4
   24304:	e8bd8010 	pop	{r4, pc}
   24308:	00032af0 	.word	0x00032af0

0002430c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   2430c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24310:	e990004c 	ldmib	r0, {r2, r3, r6}
   24314:	e0466002 	sub	r6, r6, r2
   24318:	e0861001 	add	r1, r6, r1
   2431c:	e2812001 	add	r2, r1, #1
   24320:	e1520003 	cmp	r2, r3
   24324:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   24328:	e1a04000 	mov	r4, r0
   2432c:	e2815041 	add	r5, r1, #65	; 0x41
   24330:	e1a00005 	mov	r0, r5
   24334:	eb000d40 	bl	2783c <operator new[](unsigned int)>
   24338:	e3a02000 	mov	r2, #0
   2433c:	e594300c 	ldr	r3, [r4, #12]
   24340:	e1a07000 	mov	r7, r0
   24344:	e5c32000 	strb	r2, [r3]
   24348:	e5941004 	ldr	r1, [r4, #4]
   2434c:	eb0009f7 	bl	26b30 <strcpy>
   24350:	e5940004 	ldr	r0, [r4, #4]
   24354:	e3500000 	cmp	r0, #0
   24358:	0a000000 	beq	24360 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   2435c:	eb000d3d 	bl	27858 <operator delete[](void*)>
   24360:	e0876006 	add	r6, r7, r6
   24364:	e584600c 	str	r6, [r4, #12]
   24368:	e5847004 	str	r7, [r4, #4]
   2436c:	e5845008 	str	r5, [r4, #8]
   24370:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00024374 <CString::CString()>:
   24374:	e3a02000 	mov	r2, #0
   24378:	e59f1008 	ldr	r1, [pc, #8]	; 24388 <CString::CString()+0x14>
   2437c:	e5802008 	str	r2, [r0, #8]
   24380:	e8800006 	stm	r0, {r1, r2}
   24384:	e12fff1e 	bx	lr
   24388:	00032af0 	.word	0x00032af0

0002438c <CString::CString(char const*)>:
   2438c:	e92d4010 	push	{r4, lr}
   24390:	e1a04000 	mov	r4, r0
   24394:	e59f3034 	ldr	r3, [pc, #52]	; 243d0 <CString::CString(char const*)+0x44>
   24398:	e24dd008 	sub	sp, sp, #8
   2439c:	e5843000 	str	r3, [r4]
   243a0:	e1a00001 	mov	r0, r1
   243a4:	e58d1004 	str	r1, [sp, #4]
   243a8:	eb00093c 	bl	268a0 <strlen>
   243ac:	e2800001 	add	r0, r0, #1
   243b0:	e5840008 	str	r0, [r4, #8]
   243b4:	eb000d20 	bl	2783c <operator new[](unsigned int)>
   243b8:	e59d1004 	ldr	r1, [sp, #4]
   243bc:	e5840004 	str	r0, [r4, #4]
   243c0:	eb0009da 	bl	26b30 <strcpy>
   243c4:	e1a00004 	mov	r0, r4
   243c8:	e28dd008 	add	sp, sp, #8
   243cc:	e8bd8010 	pop	{r4, pc}
   243d0:	00032af0 	.word	0x00032af0

000243d4 <CString::operator char const*() const>:
   243d4:	e5900004 	ldr	r0, [r0, #4]
   243d8:	e59f3008 	ldr	r3, [pc, #8]	; 243e8 <CString::operator char const*() const+0x14>
   243dc:	e3500000 	cmp	r0, #0
   243e0:	01a00003 	moveq	r0, r3
   243e4:	e12fff1e 	bx	lr
   243e8:	0002e778 	.word	0x0002e778

000243ec <CString::operator=(char const*)>:
   243ec:	e92d4010 	push	{r4, lr}
   243f0:	e1a04000 	mov	r4, r0
   243f4:	e5900004 	ldr	r0, [r0, #4]
   243f8:	e24dd008 	sub	sp, sp, #8
   243fc:	e3500000 	cmp	r0, #0
   24400:	0a000002 	beq	24410 <CString::operator=(char const*)+0x24>
   24404:	e58d1004 	str	r1, [sp, #4]
   24408:	eb000d12 	bl	27858 <operator delete[](void*)>
   2440c:	e59d1004 	ldr	r1, [sp, #4]
   24410:	e1a00001 	mov	r0, r1
   24414:	e58d1004 	str	r1, [sp, #4]
   24418:	eb000920 	bl	268a0 <strlen>
   2441c:	e2800001 	add	r0, r0, #1
   24420:	e5840008 	str	r0, [r4, #8]
   24424:	eb000d04 	bl	2783c <operator new[](unsigned int)>
   24428:	e59d1004 	ldr	r1, [sp, #4]
   2442c:	e5840004 	str	r0, [r4, #4]
   24430:	eb0009be 	bl	26b30 <strcpy>
   24434:	e5940004 	ldr	r0, [r4, #4]
   24438:	e28dd008 	add	sp, sp, #8
   2443c:	e8bd8010 	pop	{r4, pc}

00024440 <CString::operator=(CString const&)>:
   24440:	e92d4070 	push	{r4, r5, r6, lr}
   24444:	e1a04000 	mov	r4, r0
   24448:	e5900004 	ldr	r0, [r0, #4]
   2444c:	e1a05001 	mov	r5, r1
   24450:	e3500000 	cmp	r0, #0
   24454:	0a000000 	beq	2445c <CString::operator=(CString const&)+0x1c>
   24458:	eb000cfe 	bl	27858 <operator delete[](void*)>
   2445c:	e5950004 	ldr	r0, [r5, #4]
   24460:	e59f6030 	ldr	r6, [pc, #48]	; 24498 <CString::operator=(CString const&)+0x58>
   24464:	e3500000 	cmp	r0, #0
   24468:	01a00006 	moveq	r0, r6
   2446c:	eb00090b 	bl	268a0 <strlen>
   24470:	e2800001 	add	r0, r0, #1
   24474:	e5840008 	str	r0, [r4, #8]
   24478:	eb000cef 	bl	2783c <operator new[](unsigned int)>
   2447c:	e5840004 	str	r0, [r4, #4]
   24480:	e5951004 	ldr	r1, [r5, #4]
   24484:	e3510000 	cmp	r1, #0
   24488:	01a01006 	moveq	r1, r6
   2448c:	eb0009a7 	bl	26b30 <strcpy>
   24490:	e1a00004 	mov	r0, r4
   24494:	e8bd8070 	pop	{r4, r5, r6, pc}
   24498:	0002e778 	.word	0x0002e778

0002449c <CString::GetLength() const>:
   2449c:	e5900004 	ldr	r0, [r0, #4]
   244a0:	e3500000 	cmp	r0, #0
   244a4:	012fff1e 	bxeq	lr
   244a8:	ea0008fc 	b	268a0 <strlen>

000244ac <CString::Append(char const*)>:
   244ac:	e92d4070 	push	{r4, r5, r6, lr}
   244b0:	e3a03001 	mov	r3, #1
   244b4:	e1a04000 	mov	r4, r0
   244b8:	e5900004 	ldr	r0, [r0, #4]
   244bc:	e1a06001 	mov	r6, r1
   244c0:	e3500000 	cmp	r0, #0
   244c4:	e5843008 	str	r3, [r4, #8]
   244c8:	0a000003 	beq	244dc <CString::Append(char const*)+0x30>
   244cc:	eb0008f3 	bl	268a0 <strlen>
   244d0:	e5943008 	ldr	r3, [r4, #8]
   244d4:	e0830000 	add	r0, r3, r0
   244d8:	e5840008 	str	r0, [r4, #8]
   244dc:	e1a00006 	mov	r0, r6
   244e0:	eb0008ee 	bl	268a0 <strlen>
   244e4:	e5943008 	ldr	r3, [r4, #8]
   244e8:	e0800003 	add	r0, r0, r3
   244ec:	e5840008 	str	r0, [r4, #8]
   244f0:	eb000cd1 	bl	2783c <operator new[](unsigned int)>
   244f4:	e5941004 	ldr	r1, [r4, #4]
   244f8:	e1a05000 	mov	r5, r0
   244fc:	e3510000 	cmp	r1, #0
   24500:	05c01000 	strbeq	r1, [r0]
   24504:	0a000004 	beq	2451c <CString::Append(char const*)+0x70>
   24508:	eb000988 	bl	26b30 <strcpy>
   2450c:	e5940004 	ldr	r0, [r4, #4]
   24510:	e3500000 	cmp	r0, #0
   24514:	0a000000 	beq	2451c <CString::Append(char const*)+0x70>
   24518:	eb000cce 	bl	27858 <operator delete[](void*)>
   2451c:	e1a01006 	mov	r1, r6
   24520:	e1a00005 	mov	r0, r5
   24524:	eb00099a 	bl	26b94 <strcat>
   24528:	e5845004 	str	r5, [r4, #4]
   2452c:	e8bd8070 	pop	{r4, r5, r6, pc}

00024530 <CString::Compare(char const*) const>:
   24530:	e5900004 	ldr	r0, [r0, #4]
   24534:	ea0008e3 	b	268c8 <strcmp>

00024538 <CString::Find(char) const>:
   24538:	e5902004 	ldr	r2, [r0, #4]
   2453c:	e1d230d0 	ldrsb	r3, [r2]
   24540:	e3530000 	cmp	r3, #0
   24544:	0a000006 	beq	24564 <CString::Find(char) const+0x2c>
   24548:	e3a00000 	mov	r0, #0
   2454c:	e1510003 	cmp	r1, r3
   24550:	012fff1e 	bxeq	lr
   24554:	e1f230d1 	ldrsb	r3, [r2, #1]!
   24558:	e2800001 	add	r0, r0, #1
   2455c:	e3530000 	cmp	r3, #0
   24560:	1afffff9 	bne	2454c <CString::Find(char) const+0x14>
   24564:	e3e00000 	mvn	r0, #0
   24568:	e12fff1e 	bx	lr

0002456c <CString::PutChar(char, unsigned int)>:
   2456c:	e92d4070 	push	{r4, r5, r6, lr}
   24570:	e2524000 	subs	r4, r2, #0
   24574:	08bd8070 	popeq	{r4, r5, r6, pc}
   24578:	e1a06001 	mov	r6, r1
   2457c:	e1a01004 	mov	r1, r4
   24580:	e1a05000 	mov	r5, r0
   24584:	ebffff60 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   24588:	e2442001 	sub	r2, r4, #1
   2458c:	e595300c 	ldr	r3, [r5, #12]
   24590:	e2422001 	sub	r2, r2, #1
   24594:	e2830001 	add	r0, r3, #1
   24598:	e3720001 	cmn	r2, #1
   2459c:	e585000c 	str	r0, [r5, #12]
   245a0:	e5c36000 	strb	r6, [r3]
   245a4:	1afffff8 	bne	2458c <CString::PutChar(char, unsigned int)+0x20>
   245a8:	e8bd8070 	pop	{r4, r5, r6, pc}

000245ac <CString::PutString(char const*)>:
   245ac:	e92d4070 	push	{r4, r5, r6, lr}
   245b0:	e1a04000 	mov	r4, r0
   245b4:	e1a00001 	mov	r0, r1
   245b8:	e1a06001 	mov	r6, r1
   245bc:	eb0008b7 	bl	268a0 <strlen>
   245c0:	e2505000 	subs	r5, r0, #0
   245c4:	0a000002 	beq	245d4 <CString::PutString(char const*)+0x28>
   245c8:	e1a01005 	mov	r1, r5
   245cc:	e1a00004 	mov	r0, r4
   245d0:	ebffff4d 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   245d4:	e1a01006 	mov	r1, r6
   245d8:	e594000c 	ldr	r0, [r4, #12]
   245dc:	eb000953 	bl	26b30 <strcpy>
   245e0:	e594000c 	ldr	r0, [r4, #12]
   245e4:	e0800005 	add	r0, r0, r5
   245e8:	e584000c 	str	r0, [r4, #12]
   245ec:	e8bd8070 	pop	{r4, r5, r6, pc}

000245f0 <CString::Replace(char const*, char const*)>:
   245f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   245f4:	e1d170d0 	ldrsb	r7, [r1]
   245f8:	e24dd010 	sub	sp, sp, #16
   245fc:	e3570000 	cmp	r7, #0
   24600:	1a000002 	bne	24610 <CString::Replace(char const*, char const*)+0x20>
   24604:	e1a00007 	mov	r0, r7
   24608:	e28dd010 	add	sp, sp, #16
   2460c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24610:	e1a05000 	mov	r5, r0
   24614:	e1a06001 	mov	r6, r1
   24618:	e5901004 	ldr	r1, [r0, #4]
   2461c:	e1a0000d 	mov	r0, sp
   24620:	e1a08002 	mov	r8, r2
   24624:	ebffff58 	bl	2438c <CString::CString(char const*)>
   24628:	e5950004 	ldr	r0, [r5, #4]
   2462c:	e3500000 	cmp	r0, #0
   24630:	0a000000 	beq	24638 <CString::Replace(char const*, char const*)+0x48>
   24634:	eb000c87 	bl	27858 <operator delete[](void*)>
   24638:	e3a00040 	mov	r0, #64	; 0x40
   2463c:	e5850008 	str	r0, [r5, #8]
   24640:	eb000c7d 	bl	2783c <operator new[](unsigned int)>
   24644:	e3a07000 	mov	r7, #0
   24648:	e59d9004 	ldr	r9, [sp, #4]
   2464c:	e5850004 	str	r0, [r5, #4]
   24650:	e585000c 	str	r0, [r5, #12]
   24654:	e1a00009 	mov	r0, r9
   24658:	e1d610d0 	ldrsb	r1, [r6]
   2465c:	eb00095d 	bl	26bd8 <strchr>
   24660:	e2504000 	subs	r4, r0, #0
   24664:	0a00002a 	beq	24714 <CString::Replace(char const*, char const*)+0x124>
   24668:	e1590004 	cmp	r9, r4
   2466c:	3a000016 	bcc	246cc <CString::Replace(char const*, char const*)+0xdc>
   24670:	e1d630d1 	ldrsb	r3, [r6, #1]
   24674:	e2842001 	add	r2, r4, #1
   24678:	e3530000 	cmp	r3, #0
   2467c:	e286e001 	add	lr, r6, #1
   24680:	0a00001d 	beq	246fc <CString::Replace(char const*, char const*)+0x10c>
   24684:	e1a0c002 	mov	ip, r2
   24688:	ea000003 	b	2469c <CString::Replace(char const*, char const*)+0xac>
   2468c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   24690:	e1a0200c 	mov	r2, ip
   24694:	e3530000 	cmp	r3, #0
   24698:	0a000017 	beq	246fc <CString::Replace(char const*, char const*)+0x10c>
   2469c:	e0dc40d1 	ldrsb	r4, [ip], #1
   246a0:	e1540003 	cmp	r4, r3
   246a4:	0afffff8 	beq	2468c <CString::Replace(char const*, char const*)+0x9c>
   246a8:	e3a01001 	mov	r1, #1
   246ac:	e1a00005 	mov	r0, r5
   246b0:	e0d940d1 	ldrsb	r4, [r9], #1
   246b4:	ebffff14 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   246b8:	e595300c 	ldr	r3, [r5, #12]
   246bc:	e2832001 	add	r2, r3, #1
   246c0:	e585200c 	str	r2, [r5, #12]
   246c4:	e5c34000 	strb	r4, [r3]
   246c8:	eaffffe1 	b	24654 <CString::Replace(char const*, char const*)+0x64>
   246cc:	e3a01001 	mov	r1, #1
   246d0:	e1a00005 	mov	r0, r5
   246d4:	e0d9a0d1 	ldrsb	sl, [r9], #1
   246d8:	ebffff0b 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   246dc:	e595300c 	ldr	r3, [r5, #12]
   246e0:	e1540009 	cmp	r4, r9
   246e4:	e2832001 	add	r2, r3, #1
   246e8:	e585200c 	str	r2, [r5, #12]
   246ec:	e5c3a000 	strb	sl, [r3]
   246f0:	1afffff5 	bne	246cc <CString::Replace(char const*, char const*)+0xdc>
   246f4:	e1a09004 	mov	r9, r4
   246f8:	eaffffdc 	b	24670 <CString::Replace(char const*, char const*)+0x80>
   246fc:	e1a01008 	mov	r1, r8
   24700:	e1a00005 	mov	r0, r5
   24704:	e1a09002 	mov	r9, r2
   24708:	e2877001 	add	r7, r7, #1
   2470c:	ebffffa6 	bl	245ac <CString::PutString(char const*)>
   24710:	eaffffcf 	b	24654 <CString::Replace(char const*, char const*)+0x64>
   24714:	e1a00005 	mov	r0, r5
   24718:	e1a01009 	mov	r1, r9
   2471c:	ebffffa2 	bl	245ac <CString::PutString(char const*)>
   24720:	e595200c 	ldr	r2, [r5, #12]
   24724:	e59f3020 	ldr	r3, [pc, #32]	; 2474c <CString::Replace(char const*, char const*)+0x15c>
   24728:	e5c24000 	strb	r4, [r2]
   2472c:	e59d0004 	ldr	r0, [sp, #4]
   24730:	e58d3000 	str	r3, [sp]
   24734:	e3500000 	cmp	r0, #0
   24738:	0affffb1 	beq	24604 <CString::Replace(char const*, char const*)+0x14>
   2473c:	eb000c45 	bl	27858 <operator delete[](void*)>
   24740:	e1a00007 	mov	r0, r7
   24744:	e28dd010 	add	sp, sp, #16
   24748:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2474c:	00032af0 	.word	0x00032af0

00024750 <CString::ReserveSpace(unsigned int)>:
   24750:	e3510000 	cmp	r1, #0
   24754:	012fff1e 	bxeq	lr
   24758:	eafffeeb 	b	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>

0002475c <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   2475c:	e1510002 	cmp	r1, r2
   24760:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24764:	e1a05001 	mov	r5, r1
   24768:	e1a06002 	mov	r6, r2
   2476c:	e1a08000 	mov	r8, r0
   24770:	e1a07003 	mov	r7, r3
   24774:	23a0a001 	movcs	sl, #1
   24778:	3a000023 	bcc	2480c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xb0>
   2477c:	e00a0a96 	mul	sl, r6, sl
   24780:	e1a00005 	mov	r0, r5
   24784:	e1a0100a 	mov	r1, sl
   24788:	eb0018bd 	bl	2aa84 <__udivsi3>
   2478c:	e1500006 	cmp	r0, r6
   24790:	e1a04000 	mov	r4, r0
   24794:	2afffff8 	bcs	2477c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
   24798:	e3570000 	cmp	r7, #0
   2479c:	13a09037 	movne	r9, #55	; 0x37
   247a0:	03a09057 	moveq	r9, #87	; 0x57
   247a4:	e1a07008 	mov	r7, r8
   247a8:	ea000003 	b	247bc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
   247ac:	e1a01000 	mov	r1, r0
   247b0:	e1a00005 	mov	r0, r5
   247b4:	eb0018b2 	bl	2aa84 <__udivsi3>
   247b8:	e1a04000 	mov	r4, r0
   247bc:	e1a00005 	mov	r0, r5
   247c0:	e1a0100a 	mov	r1, sl
   247c4:	eb001929 	bl	2ac70 <__aeabi_uidivmod>
   247c8:	e3540009 	cmp	r4, #9
   247cc:	e2840030 	add	r0, r4, #48	; 0x30
   247d0:	80894004 	addhi	r4, r9, r4
   247d4:	96af4070 	sxtbls	r4, r0
   247d8:	86af4074 	sxtbhi	r4, r4
   247dc:	e1a0000a 	mov	r0, sl
   247e0:	e1a05001 	mov	r5, r1
   247e4:	e4c74001 	strb	r4, [r7], #1
   247e8:	e1a01006 	mov	r1, r6
   247ec:	eb0018a4 	bl	2aa84 <__udivsi3>
   247f0:	e15a0006 	cmp	sl, r6
   247f4:	e1a0a000 	mov	sl, r0
   247f8:	2affffeb 	bcs	247ac <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   247fc:	e3a03000 	mov	r3, #0
   24800:	e1a00008 	mov	r0, r8
   24804:	e5c73000 	strb	r3, [r7]
   24808:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2480c:	e1a04001 	mov	r4, r1
   24810:	e3a0a001 	mov	sl, #1
   24814:	eaffffdf 	b	24798 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

00024818 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   24818:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2481c:	e3a0b000 	mov	fp, #0
   24820:	e1a08002 	mov	r8, r2
   24824:	e24dd01c 	sub	sp, sp, #28
   24828:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
   2482c:	e15b0003 	cmp	fp, r3
   24830:	e1a09003 	mov	r9, r3
   24834:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
   24838:	01520008 	cmpeq	r2, r8
   2483c:	e1a0a002 	mov	sl, r2
   24840:	93a06001 	movls	r6, #1
   24844:	93a07000 	movls	r7, #0
   24848:	e58d0014 	str	r0, [sp, #20]
   2484c:	e58d3004 	str	r3, [sp, #4]
   24850:	8a000041 	bhi	2495c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x144>
   24854:	e0030b96 	mul	r3, r6, fp
   24858:	e023379a 	mla	r3, sl, r7, r3
   2485c:	e0876a96 	umull	r6, r7, r6, sl
   24860:	e0837007 	add	r7, r3, r7
   24864:	e1a02006 	mov	r2, r6
   24868:	e1a03007 	mov	r3, r7
   2486c:	e1a00008 	mov	r0, r8
   24870:	e1a01009 	mov	r1, r9
   24874:	eb0019cb 	bl	2afa8 <__aeabi_uldivmod>
   24878:	e15b0001 	cmp	fp, r1
   2487c:	015a0000 	cmpeq	sl, r0
   24880:	e1a04000 	mov	r4, r0
   24884:	e1a05001 	mov	r5, r1
   24888:	9afffff1 	bls	24854 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x3c>
   2488c:	e59d3004 	ldr	r3, [sp, #4]
   24890:	e3530000 	cmp	r3, #0
   24894:	13a03037 	movne	r3, #55	; 0x37
   24898:	03a03057 	moveq	r3, #87	; 0x57
   2489c:	e58d3010 	str	r3, [sp, #16]
   248a0:	e59d3014 	ldr	r3, [sp, #20]
   248a4:	e58d3004 	str	r3, [sp, #4]
   248a8:	ea00000a 	b	248d8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xc0>
   248ac:	e58d000c 	str	r0, [sp, #12]
   248b0:	e58d1008 	str	r1, [sp, #8]
   248b4:	e1a00008 	mov	r0, r8
   248b8:	e1a01009 	mov	r1, r9
   248bc:	eb0019b9 	bl	2afa8 <__aeabi_uldivmod>
   248c0:	e59d200c 	ldr	r2, [sp, #12]
   248c4:	e59d3008 	ldr	r3, [sp, #8]
   248c8:	e1a04000 	mov	r4, r0
   248cc:	e1a06002 	mov	r6, r2
   248d0:	e1a05001 	mov	r5, r1
   248d4:	e1a07003 	mov	r7, r3
   248d8:	e1a00008 	mov	r0, r8
   248dc:	e1a01009 	mov	r1, r9
   248e0:	e1a02006 	mov	r2, r6
   248e4:	e1a03007 	mov	r3, r7
   248e8:	eb0019ae 	bl	2afa8 <__aeabi_uldivmod>
   248ec:	e3550000 	cmp	r5, #0
   248f0:	03540009 	cmpeq	r4, #9
   248f4:	e1a09003 	mov	r9, r3
   248f8:	859d3010 	ldrhi	r3, [sp, #16]
   248fc:	e1a08002 	mov	r8, r2
   24900:	e2842030 	add	r2, r4, #48	; 0x30
   24904:	80834004 	addhi	r4, r3, r4
   24908:	e59d3004 	ldr	r3, [sp, #4]
   2490c:	96af4072 	sxtbls	r4, r2
   24910:	86af4074 	sxtbhi	r4, r4
   24914:	e4c34001 	strb	r4, [r3], #1
   24918:	e1a0200a 	mov	r2, sl
   2491c:	e58d3004 	str	r3, [sp, #4]
   24920:	e1a00006 	mov	r0, r6
   24924:	e1a0300b 	mov	r3, fp
   24928:	e1a01007 	mov	r1, r7
   2492c:	eb00199d 	bl	2afa8 <__aeabi_uldivmod>
   24930:	e15b0007 	cmp	fp, r7
   24934:	015a0006 	cmpeq	sl, r6
   24938:	e1a02000 	mov	r2, r0
   2493c:	e1a03001 	mov	r3, r1
   24940:	9affffd9 	bls	248ac <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x94>
   24944:	e3a03000 	mov	r3, #0
   24948:	e59d0014 	ldr	r0, [sp, #20]
   2494c:	e59d2004 	ldr	r2, [sp, #4]
   24950:	e5c23000 	strb	r3, [r2]
   24954:	e28dd01c 	add	sp, sp, #28
   24958:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2495c:	e1a04008 	mov	r4, r8
   24960:	e1a05009 	mov	r5, r9
   24964:	e3a06001 	mov	r6, #1
   24968:	e3a07000 	mov	r7, #0
   2496c:	eaffffc6 	b	2488c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x74>

00024970 <CString::ftoa(char*, double, unsigned int)>:
   24970:	eeb50bc0 	vcmpe.f64	d0, #0.0
   24974:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   24978:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2497c:	ed9f7b97 	vldr	d7, [pc, #604]	; 24be0 <CString::ftoa(char*, double, unsigned int)+0x270>
   24980:	ed2d8b02 	vpush	{d8}
   24984:	eeb08b40 	vmov.f64	d8, d0
   24988:	4eb18b40 	vnegmi.f64	d8, d0
   2498c:	43a0302d 	movmi	r3, #45	; 0x2d
   24990:	e1a0b000 	mov	fp, r0
   24994:	eeb48bc7 	vcmpe.f64	d8, d7
   24998:	44cb3001 	strbmi	r3, [fp], #1
   2499c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   249a0:	e24dd01c 	sub	sp, sp, #28
   249a4:	e1a09000 	mov	r9, r0
   249a8:	e58d1004 	str	r1, [sp, #4]
   249ac:	ca00007c 	bgt	24ba4 <CString::ftoa(char*, double, unsigned int)+0x234>
   249b0:	eefc7bc8 	vcvt.u32.f64	s15, d8
   249b4:	ee177a90 	vmov	r7, s15
   249b8:	e3570009 	cmp	r7, #9
   249bc:	83a04001 	movhi	r4, #1
   249c0:	9a00007e 	bls	24bc0 <CString::ftoa(char*, double, unsigned int)+0x250>
   249c4:	e0844104 	add	r4, r4, r4, lsl #2
   249c8:	e1a04084 	lsl	r4, r4, #1
   249cc:	e1a01004 	mov	r1, r4
   249d0:	e1a00007 	mov	r0, r7
   249d4:	eb00182a 	bl	2aa84 <__udivsi3>
   249d8:	e3500009 	cmp	r0, #9
   249dc:	e1a05000 	mov	r5, r0
   249e0:	8afffff7 	bhi	249c4 <CString::ftoa(char*, double, unsigned int)+0x54>
   249e4:	e1a0600b 	mov	r6, fp
   249e8:	e1a0a007 	mov	sl, r7
   249ec:	e59f81fc 	ldr	r8, [pc, #508]	; 24bf0 <CString::ftoa(char*, double, unsigned int)+0x280>
   249f0:	ea000003 	b	24a04 <CString::ftoa(char*, double, unsigned int)+0x94>
   249f4:	e1a01004 	mov	r1, r4
   249f8:	e1a0000a 	mov	r0, sl
   249fc:	eb001820 	bl	2aa84 <__udivsi3>
   24a00:	e1a05000 	mov	r5, r0
   24a04:	e1a0000a 	mov	r0, sl
   24a08:	e1a01004 	mov	r1, r4
   24a0c:	eb001897 	bl	2ac70 <__aeabi_uidivmod>
   24a10:	e1a0a001 	mov	sl, r1
   24a14:	e0813498 	umull	r3, r1, r8, r4
   24a18:	e3550009 	cmp	r5, #9
   24a1c:	e2850030 	add	r0, r5, #48	; 0x30
   24a20:	82855057 	addhi	r5, r5, #87	; 0x57
   24a24:	96af5070 	sxtbls	r5, r0
   24a28:	86af5075 	sxtbhi	r5, r5
   24a2c:	e3540009 	cmp	r4, #9
   24a30:	e4c65001 	strb	r5, [r6], #1
   24a34:	e1a041a1 	lsr	r4, r1, #3
   24a38:	8affffed 	bhi	249f4 <CString::ftoa(char*, double, unsigned int)+0x84>
   24a3c:	e3a03000 	mov	r3, #0
   24a40:	e59d4004 	ldr	r4, [sp, #4]
   24a44:	e5c63000 	strb	r3, [r6]
   24a48:	e1540003 	cmp	r4, r3
   24a4c:	1a000003 	bne	24a60 <CString::ftoa(char*, double, unsigned int)+0xf0>
   24a50:	e1a00009 	mov	r0, r9
   24a54:	e28dd01c 	add	sp, sp, #28
   24a58:	ecbd8b02 	vpop	{d8}
   24a5c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a60:	e1a0000b 	mov	r0, fp
   24a64:	eb00078d 	bl	268a0 <strlen>
   24a68:	e3a0302e 	mov	r3, #46	; 0x2e
   24a6c:	e3540009 	cmp	r4, #9
   24a70:	e08b1000 	add	r1, fp, r0
   24a74:	e7cb3000 	strb	r3, [fp, r0]
   24a78:	31a0b004 	movcc	fp, r4
   24a7c:	23a0b009 	movcs	fp, #9
   24a80:	e3540001 	cmp	r4, #1
   24a84:	e58d1004 	str	r1, [sp, #4]
   24a88:	e281a001 	add	sl, r1, #1
   24a8c:	9a000051 	bls	24bd8 <CString::ftoa(char*, double, unsigned int)+0x268>
   24a90:	e3a02002 	mov	r2, #2
   24a94:	e3a0300a 	mov	r3, #10
   24a98:	e2822001 	add	r2, r2, #1
   24a9c:	e0833103 	add	r3, r3, r3, lsl #2
   24aa0:	e152000b 	cmp	r2, fp
   24aa4:	e1a03083 	lsl	r3, r3, #1
   24aa8:	9afffffa 	bls	24a98 <CString::ftoa(char*, double, unsigned int)+0x128>
   24aac:	ee073a90 	vmov	s15, r3
   24ab0:	eeb87b67 	vcvt.f64.u32	d7, s15
   24ab4:	ee067a90 	vmov	s13, r7
   24ab8:	eeb86b66 	vcvt.f64.u32	d6, s13
   24abc:	ee386b46 	vsub.f64	d6, d8, d6
   24ac0:	ee267b07 	vmul.f64	d7, d6, d7
   24ac4:	eefc7bc7 	vcvt.u32.f64	s15, d7
   24ac8:	ee178a90 	vmov	r8, s15
   24acc:	e3580009 	cmp	r8, #9
   24ad0:	83a04001 	movhi	r4, #1
   24ad4:	9a00003c 	bls	24bcc <CString::ftoa(char*, double, unsigned int)+0x25c>
   24ad8:	e0844104 	add	r4, r4, r4, lsl #2
   24adc:	e1a04084 	lsl	r4, r4, #1
   24ae0:	e1a01004 	mov	r1, r4
   24ae4:	e1a00008 	mov	r0, r8
   24ae8:	eb0017e5 	bl	2aa84 <__udivsi3>
   24aec:	e3500009 	cmp	r0, #9
   24af0:	e1a05000 	mov	r5, r0
   24af4:	8afffff7 	bhi	24ad8 <CString::ftoa(char*, double, unsigned int)+0x168>
   24af8:	e59f70f0 	ldr	r7, [pc, #240]	; 24bf0 <CString::ftoa(char*, double, unsigned int)+0x280>
   24afc:	e28d600c 	add	r6, sp, #12
   24b00:	ea000003 	b	24b14 <CString::ftoa(char*, double, unsigned int)+0x1a4>
   24b04:	e1a01004 	mov	r1, r4
   24b08:	e1a00008 	mov	r0, r8
   24b0c:	eb0017dc 	bl	2aa84 <__udivsi3>
   24b10:	e1a05000 	mov	r5, r0
   24b14:	e1a00008 	mov	r0, r8
   24b18:	e1a01004 	mov	r1, r4
   24b1c:	eb001853 	bl	2ac70 <__aeabi_uidivmod>
   24b20:	e1a08001 	mov	r8, r1
   24b24:	e0813497 	umull	r3, r1, r7, r4
   24b28:	e3550009 	cmp	r5, #9
   24b2c:	e2852030 	add	r2, r5, #48	; 0x30
   24b30:	82855057 	addhi	r5, r5, #87	; 0x57
   24b34:	96af5072 	sxtbls	r5, r2
   24b38:	86af5075 	sxtbhi	r5, r5
   24b3c:	e3540009 	cmp	r4, #9
   24b40:	e4c65001 	strb	r5, [r6], #1
   24b44:	e1a041a1 	lsr	r4, r1, #3
   24b48:	8affffed 	bhi	24b04 <CString::ftoa(char*, double, unsigned int)+0x194>
   24b4c:	e3a03000 	mov	r3, #0
   24b50:	e28d000c 	add	r0, sp, #12
   24b54:	e5c63000 	strb	r3, [r6]
   24b58:	eb000750 	bl	268a0 <strlen>
   24b5c:	e05b0000 	subs	r0, fp, r0
   24b60:	0a000008 	beq	24b88 <CString::ftoa(char*, double, unsigned int)+0x218>
   24b64:	e1a0300a 	mov	r3, sl
   24b68:	e3a02030 	mov	r2, #48	; 0x30
   24b6c:	e59dc004 	ldr	ip, [sp, #4]
   24b70:	e2801001 	add	r1, r0, #1
   24b74:	e08c8001 	add	r8, ip, r1
   24b78:	e4c32001 	strb	r2, [r3], #1
   24b7c:	e1530008 	cmp	r3, r8
   24b80:	1afffffc 	bne	24b78 <CString::ftoa(char*, double, unsigned int)+0x208>
   24b84:	e08aa000 	add	sl, sl, r0
   24b88:	e1a0000a 	mov	r0, sl
   24b8c:	e28d100c 	add	r1, sp, #12
   24b90:	eb0007e6 	bl	26b30 <strcpy>
   24b94:	e1a00009 	mov	r0, r9
   24b98:	e28dd01c 	add	sp, sp, #28
   24b9c:	ecbd8b02 	vpop	{d8}
   24ba0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ba4:	e1a0000b 	mov	r0, fp
   24ba8:	e59f1044 	ldr	r1, [pc, #68]	; 24bf4 <CString::ftoa(char*, double, unsigned int)+0x284>
   24bac:	eb0007df 	bl	26b30 <strcpy>
   24bb0:	e1a00009 	mov	r0, r9
   24bb4:	e28dd01c 	add	sp, sp, #28
   24bb8:	ecbd8b02 	vpop	{d8}
   24bbc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24bc0:	ee175a90 	vmov	r5, s15
   24bc4:	e3a04001 	mov	r4, #1
   24bc8:	eaffff85 	b	249e4 <CString::ftoa(char*, double, unsigned int)+0x74>
   24bcc:	ee175a90 	vmov	r5, s15
   24bd0:	e3a04001 	mov	r4, #1
   24bd4:	eaffffc7 	b	24af8 <CString::ftoa(char*, double, unsigned int)+0x188>
   24bd8:	ed9f7b02 	vldr	d7, [pc, #8]	; 24be8 <CString::ftoa(char*, double, unsigned int)+0x278>
   24bdc:	eaffffb4 	b	24ab4 <CString::ftoa(char*, double, unsigned int)+0x144>
   24be0:	ffe00000 	.word	0xffe00000
   24be4:	41efffff 	.word	0x41efffff
   24be8:	00000000 	.word	0x00000000
   24bec:	40240000 	.word	0x40240000
   24bf0:	cccccccd 	.word	0xcccccccd
   24bf4:	00032ad4 	.word	0x00032ad4

00024bf8 <CString::FormatV(char const*, std::__va_list)>:
   24bf8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24bfc:	ed2d8b02 	vpush	{d8}
   24c00:	e24dd064 	sub	sp, sp, #100	; 0x64
   24c04:	e58d0028 	str	r0, [sp, #40]	; 0x28
   24c08:	e5900004 	ldr	r0, [r0, #4]
   24c0c:	e1a0b001 	mov	fp, r1
   24c10:	e3500000 	cmp	r0, #0
   24c14:	e58d2018 	str	r2, [sp, #24]
   24c18:	0a000000 	beq	24c20 <CString::FormatV(char const*, std::__va_list)+0x28>
   24c1c:	eb000b0d 	bl	27858 <operator delete[](void*)>
   24c20:	e3a00040 	mov	r0, #64	; 0x40
   24c24:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   24c28:	e5850008 	str	r0, [r5, #8]
   24c2c:	eb000b02 	bl	2783c <operator new[](unsigned int)>
   24c30:	e5850004 	str	r0, [r5, #4]
   24c34:	e585000c 	str	r0, [r5, #12]
   24c38:	e1db40d0 	ldrsb	r4, [fp]
   24c3c:	e3540000 	cmp	r4, #0
   24c40:	0a00006b 	beq	24df4 <CString::FormatV(char const*, std::__va_list)+0x1fc>
   24c44:	e3540025 	cmp	r4, #37	; 0x25
   24c48:	1a00005c 	bne	24dc0 <CString::FormatV(char const*, std::__va_list)+0x1c8>
   24c4c:	e1db30d1 	ldrsb	r3, [fp, #1]
   24c50:	e3530025 	cmp	r3, #37	; 0x25
   24c54:	0a00006b 	beq	24e08 <CString::FormatV(char const*, std::__va_list)+0x210>
   24c58:	e3530023 	cmp	r3, #35	; 0x23
   24c5c:	01db30d2 	ldrsbeq	r3, [fp, #2]
   24c60:	13a00000 	movne	r0, #0
   24c64:	028bb002 	addeq	fp, fp, #2
   24c68:	03a00001 	moveq	r0, #1
   24c6c:	128bb001 	addne	fp, fp, #1
   24c70:	e353002d 	cmp	r3, #45	; 0x2d
   24c74:	03a02001 	moveq	r2, #1
   24c78:	13a02000 	movne	r2, #0
   24c7c:	01db30d1 	ldrsbeq	r3, [fp, #1]
   24c80:	058d201c 	streq	r2, [sp, #28]
   24c84:	008bb002 	addeq	fp, fp, r2
   24c88:	158d201c 	strne	r2, [sp, #28]
   24c8c:	e3530030 	cmp	r3, #48	; 0x30
   24c90:	03a02001 	moveq	r2, #1
   24c94:	13a02000 	movne	r2, #0
   24c98:	01db30d1 	ldrsbeq	r3, [fp, #1]
   24c9c:	058d2020 	streq	r2, [sp, #32]
   24ca0:	008bb002 	addeq	fp, fp, r2
   24ca4:	158d2020 	strne	r2, [sp, #32]
   24ca8:	e2432030 	sub	r2, r3, #48	; 0x30
   24cac:	e6ef2072 	uxtb	r2, r2
   24cb0:	e3520009 	cmp	r2, #9
   24cb4:	e3a04000 	mov	r4, #0
   24cb8:	8a000007 	bhi	24cdc <CString::FormatV(char const*, std::__va_list)+0xe4>
   24cbc:	e0844104 	add	r4, r4, r4, lsl #2
   24cc0:	e0834084 	add	r4, r3, r4, lsl #1
   24cc4:	e1fb30d1 	ldrsb	r3, [fp, #1]!
   24cc8:	e2444030 	sub	r4, r4, #48	; 0x30
   24ccc:	e2432030 	sub	r2, r3, #48	; 0x30
   24cd0:	e6ef2072 	uxtb	r2, r2
   24cd4:	e3520009 	cmp	r2, #9
   24cd8:	9afffff7 	bls	24cbc <CString::FormatV(char const*, std::__va_list)+0xc4>
   24cdc:	e353002e 	cmp	r3, #46	; 0x2e
   24ce0:	0a000051 	beq	24e2c <CString::FormatV(char const*, std::__va_list)+0x234>
   24ce4:	e3a01006 	mov	r1, #6
   24ce8:	e1dba0d0 	ldrsb	sl, [fp]
   24cec:	e35a006c 	cmp	sl, #108	; 0x6c
   24cf0:	13a03000 	movne	r3, #0
   24cf4:	11a06003 	movne	r6, r3
   24cf8:	158d3004 	strne	r3, [sp, #4]
   24cfc:	1a00000a 	bne	24d2c <CString::FormatV(char const*, std::__va_list)+0x134>
   24d00:	e1dba0d1 	ldrsb	sl, [fp, #1]
   24d04:	e35a006c 	cmp	sl, #108	; 0x6c
   24d08:	03a03001 	moveq	r3, #1
   24d0c:	13a03000 	movne	r3, #0
   24d10:	03a06000 	moveq	r6, #0
   24d14:	13a06001 	movne	r6, #1
   24d18:	01dba0d2 	ldrsbeq	sl, [fp, #2]
   24d1c:	008bb003 	addeq	fp, fp, r3
   24d20:	058d3004 	streq	r3, [sp, #4]
   24d24:	158d3004 	strne	r3, [sp, #4]
   24d28:	e28bb001 	add	fp, fp, #1
   24d2c:	e24a3058 	sub	r3, sl, #88	; 0x58
   24d30:	e3530020 	cmp	r3, #32
   24d34:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   24d38:	ea00004b 	b	24e6c <CString::FormatV(char const*, std::__va_list)+0x274>
   24d3c:	00024e9c 	.word	0x00024e9c
   24d40:	00024e6c 	.word	0x00024e6c
   24d44:	00024e6c 	.word	0x00024e6c
   24d48:	00024e6c 	.word	0x00024e6c
   24d4c:	00024e6c 	.word	0x00024e6c
   24d50:	00024e6c 	.word	0x00024e6c
   24d54:	00024e6c 	.word	0x00024e6c
   24d58:	00024e6c 	.word	0x00024e6c
   24d5c:	00024e6c 	.word	0x00024e6c
   24d60:	00024e6c 	.word	0x00024e6c
   24d64:	00024e6c 	.word	0x00024e6c
   24d68:	000253a8 	.word	0x000253a8
   24d6c:	00025088 	.word	0x00025088
   24d70:	00024e6c 	.word	0x00024e6c
   24d74:	000253ec 	.word	0x000253ec
   24d78:	00024e6c 	.word	0x00024e6c
   24d7c:	00024e6c 	.word	0x00024e6c
   24d80:	00025088 	.word	0x00025088
   24d84:	00024e6c 	.word	0x00024e6c
   24d88:	00024e6c 	.word	0x00024e6c
   24d8c:	00024e6c 	.word	0x00024e6c
   24d90:	00024e6c 	.word	0x00024e6c
   24d94:	00024e6c 	.word	0x00024e6c
   24d98:	000252b0 	.word	0x000252b0
   24d9c:	00024e9c 	.word	0x00024e9c
   24da0:	00024e6c 	.word	0x00024e6c
   24da4:	00024e6c 	.word	0x00024e6c
   24da8:	00025274 	.word	0x00025274
   24dac:	00024e6c 	.word	0x00024e6c
   24db0:	00025628 	.word	0x00025628
   24db4:	00024e6c 	.word	0x00024e6c
   24db8:	00024e6c 	.word	0x00024e6c
   24dbc:	00024e9c 	.word	0x00024e9c
   24dc0:	e3a01001 	mov	r1, #1
   24dc4:	e1a00005 	mov	r0, r5
   24dc8:	ebfffd4f 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   24dcc:	e595300c 	ldr	r3, [r5, #12]
   24dd0:	e2832001 	add	r2, r3, #1
   24dd4:	e585200c 	str	r2, [r5, #12]
   24dd8:	e5c34000 	strb	r4, [r3]
   24ddc:	e28bb001 	add	fp, fp, #1
   24de0:	e1db40d0 	ldrsb	r4, [fp]
   24de4:	e3540000 	cmp	r4, #0
   24de8:	1affff95 	bne	24c44 <CString::FormatV(char const*, std::__va_list)+0x4c>
   24dec:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   24df0:	e593000c 	ldr	r0, [r3, #12]
   24df4:	e3a03000 	mov	r3, #0
   24df8:	e5c03000 	strb	r3, [r0]
   24dfc:	e28dd064 	add	sp, sp, #100	; 0x64
   24e00:	ecbd8b02 	vpop	{d8}
   24e04:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e08:	e3a01001 	mov	r1, #1
   24e0c:	e1a00005 	mov	r0, r5
   24e10:	ebfffd3d 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   24e14:	e595300c 	ldr	r3, [r5, #12]
   24e18:	e28bb002 	add	fp, fp, #2
   24e1c:	e2832001 	add	r2, r3, #1
   24e20:	e585200c 	str	r2, [r5, #12]
   24e24:	e5c34000 	strb	r4, [r3]
   24e28:	eaffffec 	b	24de0 <CString::FormatV(char const*, std::__va_list)+0x1e8>
   24e2c:	e1dba0d1 	ldrsb	sl, [fp, #1]
   24e30:	e3a01000 	mov	r1, #0
   24e34:	e24a3030 	sub	r3, sl, #48	; 0x30
   24e38:	e6ef3073 	uxtb	r3, r3
   24e3c:	e3530009 	cmp	r3, #9
   24e40:	e28bb001 	add	fp, fp, #1
   24e44:	8affffa8 	bhi	24cec <CString::FormatV(char const*, std::__va_list)+0xf4>
   24e48:	e0811101 	add	r1, r1, r1, lsl #2
   24e4c:	e08a1081 	add	r1, sl, r1, lsl #1
   24e50:	e1fba0d1 	ldrsb	sl, [fp, #1]!
   24e54:	e2411030 	sub	r1, r1, #48	; 0x30
   24e58:	e24a3030 	sub	r3, sl, #48	; 0x30
   24e5c:	e6ef3073 	uxtb	r3, r3
   24e60:	e3530009 	cmp	r3, #9
   24e64:	9afffff7 	bls	24e48 <CString::FormatV(char const*, std::__va_list)+0x250>
   24e68:	eaffff9f 	b	24cec <CString::FormatV(char const*, std::__va_list)+0xf4>
   24e6c:	e3a01001 	mov	r1, #1
   24e70:	e1a00005 	mov	r0, r5
   24e74:	ebfffd24 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   24e78:	e3a01001 	mov	r1, #1
   24e7c:	e3a02025 	mov	r2, #37	; 0x25
   24e80:	e595300c 	ldr	r3, [r5, #12]
   24e84:	e0830001 	add	r0, r3, r1
   24e88:	e585000c 	str	r0, [r5, #12]
   24e8c:	e5c32000 	strb	r2, [r3]
   24e90:	e1a00005 	mov	r0, r5
   24e94:	e1db40d0 	ldrsb	r4, [fp]
   24e98:	eaffffca 	b	24dc8 <CString::FormatV(char const*, std::__va_list)+0x1d0>
   24e9c:	e3500000 	cmp	r0, #0
   24ea0:	03a08010 	moveq	r8, #16
   24ea4:	0a000007 	beq	24ec8 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   24ea8:	e3a08010 	mov	r8, #16
   24eac:	e59f39cc 	ldr	r3, [pc, #2508]	; 25880 <CString::FormatV(char const*, std::__va_list)+0xc88>
   24eb0:	e35a0058 	cmp	sl, #88	; 0x58
   24eb4:	e59f19c8 	ldr	r1, [pc, #2504]	; 25884 <CString::FormatV(char const*, std::__va_list)+0xc8c>
   24eb8:	e1a00005 	mov	r0, r5
   24ebc:	01a01003 	moveq	r1, r3
   24ec0:	ebfffdb9 	bl	245ac <CString::PutString(char const*)>
   24ec4:	e1dba0d0 	ldrsb	sl, [fp]
   24ec8:	e59d3004 	ldr	r3, [sp, #4]
   24ecc:	e3530000 	cmp	r3, #0
   24ed0:	0a000106 	beq	252f0 <CString::FormatV(char const*, std::__va_list)+0x6f8>
   24ed4:	e3a01000 	mov	r1, #0
   24ed8:	e1a00008 	mov	r0, r8
   24edc:	e59d3018 	ldr	r3, [sp, #24]
   24ee0:	e1cd01f0 	strd	r0, [sp, #16]
   24ee4:	e2833007 	add	r3, r3, #7
   24ee8:	e3c3c007 	bic	ip, r3, #7
   24eec:	e0cc20d8 	ldrd	r2, [ip], #8
   24ef0:	e1530001 	cmp	r3, r1
   24ef4:	01520008 	cmpeq	r2, r8
   24ef8:	e1cd20f8 	strd	r2, [sp, #8]
   24efc:	e58dc018 	str	ip, [sp, #24]
   24f00:	3a000239 	bcc	257ec <CString::FormatV(char const*, std::__va_list)+0xbf4>
   24f04:	e58da004 	str	sl, [sp, #4]
   24f08:	e58d4024 	str	r4, [sp, #36]	; 0x24
   24f0c:	e58d502c 	str	r5, [sp, #44]	; 0x2c
   24f10:	e58db030 	str	fp, [sp, #48]	; 0x30
   24f14:	e3a08001 	mov	r8, #1
   24f18:	e3a09000 	mov	r9, #0
   24f1c:	e1a04000 	mov	r4, r0
   24f20:	e1a05001 	mov	r5, r1
   24f24:	e1a0a002 	mov	sl, r2
   24f28:	e1a0b003 	mov	fp, r3
   24f2c:	e0030598 	mul	r3, r8, r5
   24f30:	e0233994 	mla	r3, r4, r9, r3
   24f34:	e0898498 	umull	r8, r9, r8, r4
   24f38:	e0839009 	add	r9, r3, r9
   24f3c:	e1a02008 	mov	r2, r8
   24f40:	e1a03009 	mov	r3, r9
   24f44:	e1a0000a 	mov	r0, sl
   24f48:	e1a0100b 	mov	r1, fp
   24f4c:	eb001815 	bl	2afa8 <__aeabi_uldivmod>
   24f50:	e1510005 	cmp	r1, r5
   24f54:	01500004 	cmpeq	r0, r4
   24f58:	e1a06000 	mov	r6, r0
   24f5c:	e1a07001 	mov	r7, r1
   24f60:	2afffff1 	bcs	24f2c <CString::FormatV(char const*, std::__va_list)+0x334>
   24f64:	e59da004 	ldr	sl, [sp, #4]
   24f68:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   24f6c:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
   24f70:	e59db030 	ldr	fp, [sp, #48]	; 0x30
   24f74:	e35a0058 	cmp	sl, #88	; 0x58
   24f78:	13a03057 	movne	r3, #87	; 0x57
   24f7c:	03a03037 	moveq	r3, #55	; 0x37
   24f80:	e28da03c 	add	sl, sp, #60	; 0x3c
   24f84:	ee08aa10 	vmov	s16, sl
   24f88:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   24f8c:	e58da004 	str	sl, [sp, #4]
   24f90:	e58d5030 	str	r5, [sp, #48]	; 0x30
   24f94:	e58db034 	str	fp, [sp, #52]	; 0x34
   24f98:	e58d3024 	str	r3, [sp, #36]	; 0x24
   24f9c:	e1cd40d8 	ldrd	r4, [sp, #8]
   24fa0:	e1cda1d0 	ldrd	sl, [sp, #16]
   24fa4:	ea00000a 	b	24fd4 <CString::FormatV(char const*, std::__va_list)+0x3dc>
   24fa8:	e58d0010 	str	r0, [sp, #16]
   24fac:	e58d1008 	str	r1, [sp, #8]
   24fb0:	e1a00004 	mov	r0, r4
   24fb4:	e1a01005 	mov	r1, r5
   24fb8:	eb0017fa 	bl	2afa8 <__aeabi_uldivmod>
   24fbc:	e59d2010 	ldr	r2, [sp, #16]
   24fc0:	e59d3008 	ldr	r3, [sp, #8]
   24fc4:	e1a06000 	mov	r6, r0
   24fc8:	e1a08002 	mov	r8, r2
   24fcc:	e1a07001 	mov	r7, r1
   24fd0:	e1a09003 	mov	r9, r3
   24fd4:	e1a00004 	mov	r0, r4
   24fd8:	e1a01005 	mov	r1, r5
   24fdc:	e1a02008 	mov	r2, r8
   24fe0:	e1a03009 	mov	r3, r9
   24fe4:	eb0017ef 	bl	2afa8 <__aeabi_uldivmod>
   24fe8:	e3570000 	cmp	r7, #0
   24fec:	03560009 	cmpeq	r6, #9
   24ff0:	e1a05003 	mov	r5, r3
   24ff4:	859d3024 	ldrhi	r3, [sp, #36]	; 0x24
   24ff8:	e59dc004 	ldr	ip, [sp, #4]
   24ffc:	e1a04002 	mov	r4, r2
   25000:	e2862030 	add	r2, r6, #48	; 0x30
   25004:	80836006 	addhi	r6, r3, r6
   25008:	96af6072 	sxtbls	r6, r2
   2500c:	86af6076 	sxtbhi	r6, r6
   25010:	e1a0200a 	mov	r2, sl
   25014:	e1a0300b 	mov	r3, fp
   25018:	e4cc6001 	strb	r6, [ip], #1
   2501c:	e1a00008 	mov	r0, r8
   25020:	e1a01009 	mov	r1, r9
   25024:	e58dc004 	str	ip, [sp, #4]
   25028:	eb0017de 	bl	2afa8 <__aeabi_uldivmod>
   2502c:	e159000b 	cmp	r9, fp
   25030:	0158000a 	cmpeq	r8, sl
   25034:	e1a02000 	mov	r2, r0
   25038:	e1a03001 	mov	r3, r1
   2503c:	2affffd9 	bcs	24fa8 <CString::FormatV(char const*, std::__va_list)+0x3b0>
   25040:	e3a03000 	mov	r3, #0
   25044:	e59da004 	ldr	sl, [sp, #4]
   25048:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   2504c:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   25050:	e59db034 	ldr	fp, [sp, #52]	; 0x34
   25054:	e5ca3000 	strb	r3, [sl]
   25058:	ee180a10 	vmov	r0, s16
   2505c:	eb00060f 	bl	268a0 <strlen>
   25060:	e59d301c 	ldr	r3, [sp, #28]
   25064:	e1a06000 	mov	r6, r0
   25068:	e3530000 	cmp	r3, #0
   2506c:	1a0000fe 	bne	2546c <CString::FormatV(char const*, std::__va_list)+0x874>
   25070:	e1500004 	cmp	r0, r4
   25074:	3a00010f 	bcc	254b8 <CString::FormatV(char const*, std::__va_list)+0x8c0>
   25078:	ee181a10 	vmov	r1, s16
   2507c:	e1a00005 	mov	r0, r5
   25080:	ebfffd49 	bl	245ac <CString::PutString(char const*)>
   25084:	eaffff54 	b	24ddc <CString::FormatV(char const*, std::__va_list)+0x1e4>
   25088:	e59d3004 	ldr	r3, [sp, #4]
   2508c:	e3530000 	cmp	r3, #0
   25090:	e59d3018 	ldr	r3, [sp, #24]
   25094:	0a000139 	beq	25580 <CString::FormatV(char const*, std::__va_list)+0x988>
   25098:	e2833007 	add	r3, r3, #7
   2509c:	e3c31007 	bic	r1, r3, #7
   250a0:	e0c120d8 	ldrd	r2, [r1], #8
   250a4:	e3520000 	cmp	r2, #0
   250a8:	e1a07003 	mov	r7, r3
   250ac:	e2d33000 	sbcs	r3, r3, #0
   250b0:	a3a03000 	movge	r3, #0
   250b4:	e1a06002 	mov	r6, r2
   250b8:	e58d1018 	str	r1, [sp, #24]
   250bc:	a58d3004 	strge	r3, [sp, #4]
   250c0:	aa000003 	bge	250d4 <CString::FormatV(char const*, std::__va_list)+0x4dc>
   250c4:	e2762000 	rsbs	r2, r6, #0
   250c8:	e2e73000 	rsc	r3, r7, #0
   250cc:	e1a06002 	mov	r6, r2
   250d0:	e1a07003 	mov	r7, r3
   250d4:	e356000a 	cmp	r6, #10
   250d8:	e2d71000 	sbcs	r1, r7, #0
   250dc:	e1a02006 	mov	r2, r6
   250e0:	e1a03007 	mov	r3, r7
   250e4:	e1a08006 	mov	r8, r6
   250e8:	e1a09007 	mov	r9, r7
   250ec:	ba0001d8 	blt	25854 <CString::FormatV(char const*, std::__va_list)+0xc5c>
   250f0:	e58db008 	str	fp, [sp, #8]
   250f4:	e3a06001 	mov	r6, #1
   250f8:	e3a07000 	mov	r7, #0
   250fc:	e1a0a002 	mov	sl, r2
   25100:	e1a0b003 	mov	fp, r3
   25104:	e1a02107 	lsl	r2, r7, #2
   25108:	e1a03106 	lsl	r3, r6, #2
   2510c:	e0933006 	adds	r3, r3, r6
   25110:	e1822f26 	orr	r2, r2, r6, lsr #30
   25114:	e0a22007 	adc	r2, r2, r7
   25118:	e0936003 	adds	r6, r3, r3
   2511c:	e0a27002 	adc	r7, r2, r2
   25120:	e1a03007 	mov	r3, r7
   25124:	e1a02006 	mov	r2, r6
   25128:	e1a0000a 	mov	r0, sl
   2512c:	e1a0100b 	mov	r1, fp
   25130:	eb00179c 	bl	2afa8 <__aeabi_uldivmod>
   25134:	e3510000 	cmp	r1, #0
   25138:	03500009 	cmpeq	r0, #9
   2513c:	8afffff0 	bhi	25104 <CString::FormatV(char const*, std::__va_list)+0x50c>
   25140:	e59db008 	ldr	fp, [sp, #8]
   25144:	e28d303c 	add	r3, sp, #60	; 0x3c
   25148:	e58d4010 	str	r4, [sp, #16]
   2514c:	e58d5024 	str	r5, [sp, #36]	; 0x24
   25150:	ee083a10 	vmov	s16, r3
   25154:	e1a0a003 	mov	sl, r3
   25158:	e1a04000 	mov	r4, r0
   2515c:	e1a05001 	mov	r5, r1
   25160:	e58db02c 	str	fp, [sp, #44]	; 0x2c
   25164:	ea000009 	b	25190 <CString::FormatV(char const*, std::__va_list)+0x598>
   25168:	e1a03001 	mov	r3, r1
   2516c:	e58d0008 	str	r0, [sp, #8]
   25170:	e1a01009 	mov	r1, r9
   25174:	e1a00008 	mov	r0, r8
   25178:	eb00178a 	bl	2afa8 <__aeabi_uldivmod>
   2517c:	e59d2008 	ldr	r2, [sp, #8]
   25180:	e1a04000 	mov	r4, r0
   25184:	e1a06002 	mov	r6, r2
   25188:	e1a05001 	mov	r5, r1
   2518c:	e1a0700b 	mov	r7, fp
   25190:	e1a00008 	mov	r0, r8
   25194:	e1a01009 	mov	r1, r9
   25198:	e1a02006 	mov	r2, r6
   2519c:	e1a03007 	mov	r3, r7
   251a0:	eb001780 	bl	2afa8 <__aeabi_uldivmod>
   251a4:	e3550000 	cmp	r5, #0
   251a8:	03540009 	cmpeq	r4, #9
   251ac:	e2841030 	add	r1, r4, #48	; 0x30
   251b0:	82844057 	addhi	r4, r4, #87	; 0x57
   251b4:	96af4071 	sxtbls	r4, r1
   251b8:	86af4074 	sxtbhi	r4, r4
   251bc:	e1a08002 	mov	r8, r2
   251c0:	e1a09003 	mov	r9, r3
   251c4:	e3a0200a 	mov	r2, #10
   251c8:	e3a03000 	mov	r3, #0
   251cc:	e1a00006 	mov	r0, r6
   251d0:	e1a01007 	mov	r1, r7
   251d4:	e4ca4001 	strb	r4, [sl], #1
   251d8:	eb001772 	bl	2afa8 <__aeabi_uldivmod>
   251dc:	e3570000 	cmp	r7, #0
   251e0:	03560009 	cmpeq	r6, #9
   251e4:	e1a02000 	mov	r2, r0
   251e8:	e1a0b001 	mov	fp, r1
   251ec:	8affffdd 	bhi	25168 <CString::FormatV(char const*, std::__va_list)+0x570>
   251f0:	e3a03000 	mov	r3, #0
   251f4:	e59d4010 	ldr	r4, [sp, #16]
   251f8:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   251fc:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
   25200:	e5ca3000 	strb	r3, [sl]
   25204:	ee180a10 	vmov	r0, s16
   25208:	eb0005a4 	bl	268a0 <strlen>
   2520c:	e59d3004 	ldr	r3, [sp, #4]
   25210:	e1a06000 	mov	r6, r0
   25214:	e3530000 	cmp	r3, #0
   25218:	e59d301c 	ldr	r3, [sp, #28]
   2521c:	1a0000b6 	bne	254fc <CString::FormatV(char const*, std::__va_list)+0x904>
   25220:	e3530000 	cmp	r3, #0
   25224:	0a00011b 	beq	25698 <CString::FormatV(char const*, std::__va_list)+0xaa0>
   25228:	ee181a10 	vmov	r1, s16
   2522c:	e1a00005 	mov	r0, r5
   25230:	ebfffcdd 	bl	245ac <CString::PutString(char const*)>
   25234:	e1540006 	cmp	r4, r6
   25238:	9afffee7 	bls	24ddc <CString::FormatV(char const*, std::__va_list)+0x1e4>
   2523c:	e0444006 	sub	r4, r4, r6
   25240:	e1a00005 	mov	r0, r5
   25244:	e1a01004 	mov	r1, r4
   25248:	ebfffc2f 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2524c:	e3a00020 	mov	r0, #32
   25250:	e2443001 	sub	r3, r4, #1
   25254:	e595200c 	ldr	r2, [r5, #12]
   25258:	e2433001 	sub	r3, r3, #1
   2525c:	e2821001 	add	r1, r2, #1
   25260:	e3730001 	cmn	r3, #1
   25264:	e585100c 	str	r1, [r5, #12]
   25268:	e5c20000 	strb	r0, [r2]
   2526c:	1afffff8 	bne	25254 <CString::FormatV(char const*, std::__va_list)+0x65c>
   25270:	eafffed9 	b	24ddc <CString::FormatV(char const*, std::__va_list)+0x1e4>
   25274:	e59d7018 	ldr	r7, [sp, #24]
   25278:	e4978004 	ldr	r8, [r7], #4
   2527c:	e1a00008 	mov	r0, r8
   25280:	eb000586 	bl	268a0 <strlen>
   25284:	e59d301c 	ldr	r3, [sp, #28]
   25288:	e1a06000 	mov	r6, r0
   2528c:	e3530000 	cmp	r3, #0
   25290:	1a000131 	bne	2575c <CString::FormatV(char const*, std::__va_list)+0xb64>
   25294:	e1500004 	cmp	r0, r4
   25298:	3a000142 	bcc	257a8 <CString::FormatV(char const*, std::__va_list)+0xbb0>
   2529c:	e1a01008 	mov	r1, r8
   252a0:	e1a00005 	mov	r0, r5
   252a4:	e58d7018 	str	r7, [sp, #24]
   252a8:	ebfffcbf 	bl	245ac <CString::PutString(char const*)>
   252ac:	eafffeca 	b	24ddc <CString::FormatV(char const*, std::__va_list)+0x1e4>
   252b0:	e3500000 	cmp	r0, #0
   252b4:	03a08008 	moveq	r8, #8
   252b8:	0affff02 	beq	24ec8 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   252bc:	e3a01001 	mov	r1, #1
   252c0:	e1a00005 	mov	r0, r5
   252c4:	ebfffc10 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   252c8:	e3a02030 	mov	r2, #48	; 0x30
   252cc:	e595300c 	ldr	r3, [r5, #12]
   252d0:	e3a08008 	mov	r8, #8
   252d4:	e2831001 	add	r1, r3, #1
   252d8:	e585100c 	str	r1, [r5, #12]
   252dc:	e5c32000 	strb	r2, [r3]
   252e0:	e59d3004 	ldr	r3, [sp, #4]
   252e4:	e1dba0d0 	ldrsb	sl, [fp]
   252e8:	e3530000 	cmp	r3, #0
   252ec:	1afffef8 	bne	24ed4 <CString::FormatV(char const*, std::__va_list)+0x2dc>
   252f0:	e59d2018 	ldr	r2, [sp, #24]
   252f4:	e4929004 	ldr	r9, [r2], #4
   252f8:	e1580009 	cmp	r8, r9
   252fc:	e58d2018 	str	r2, [sp, #24]
   25300:	8a000136 	bhi	257e0 <CString::FormatV(char const*, std::__va_list)+0xbe8>
   25304:	e3a07001 	mov	r7, #1
   25308:	e0070798 	mul	r7, r8, r7
   2530c:	e1a00009 	mov	r0, r9
   25310:	e1a01007 	mov	r1, r7
   25314:	eb0015da 	bl	2aa84 <__udivsi3>
   25318:	e1580000 	cmp	r8, r0
   2531c:	9afffff9 	bls	25308 <CString::FormatV(char const*, std::__va_list)+0x710>
   25320:	e1a06000 	mov	r6, r0
   25324:	e35a0058 	cmp	sl, #88	; 0x58
   25328:	13a03057 	movne	r3, #87	; 0x57
   2532c:	03a03037 	moveq	r3, #55	; 0x37
   25330:	e28da03c 	add	sl, sp, #60	; 0x3c
   25334:	e58d4004 	str	r4, [sp, #4]
   25338:	ee08aa10 	vmov	s16, sl
   2533c:	e1a04007 	mov	r4, r7
   25340:	e1a07003 	mov	r7, r3
   25344:	ea000003 	b	25358 <CString::FormatV(char const*, std::__va_list)+0x760>
   25348:	e1a01000 	mov	r1, r0
   2534c:	e1a00009 	mov	r0, r9
   25350:	eb0015cb 	bl	2aa84 <__udivsi3>
   25354:	e1a06000 	mov	r6, r0
   25358:	e1a00009 	mov	r0, r9
   2535c:	e1a01004 	mov	r1, r4
   25360:	eb001642 	bl	2ac70 <__aeabi_uidivmod>
   25364:	e3560009 	cmp	r6, #9
   25368:	e2862030 	add	r2, r6, #48	; 0x30
   2536c:	80876006 	addhi	r6, r7, r6
   25370:	96af6072 	sxtbls	r6, r2
   25374:	86af6076 	sxtbhi	r6, r6
   25378:	e1a00004 	mov	r0, r4
   2537c:	e1a09001 	mov	r9, r1
   25380:	e4ca6001 	strb	r6, [sl], #1
   25384:	e1a01008 	mov	r1, r8
   25388:	eb0015bd 	bl	2aa84 <__udivsi3>
   2538c:	e1580004 	cmp	r8, r4
   25390:	e1a04000 	mov	r4, r0
   25394:	9affffeb 	bls	25348 <CString::FormatV(char const*, std::__va_list)+0x750>
   25398:	e3a03000 	mov	r3, #0
   2539c:	e59d4004 	ldr	r4, [sp, #4]
   253a0:	e5ca3000 	strb	r3, [sl]
   253a4:	eaffff2b 	b	25058 <CString::FormatV(char const*, std::__va_list)+0x460>
   253a8:	e59d7018 	ldr	r7, [sp, #24]
   253ac:	e59d301c 	ldr	r3, [sp, #28]
   253b0:	e4976004 	ldr	r6, [r7], #4
   253b4:	e3530000 	cmp	r3, #0
   253b8:	e6af6076 	sxtb	r6, r6
   253bc:	1a0000c8 	bne	256e4 <CString::FormatV(char const*, std::__va_list)+0xaec>
   253c0:	e3540001 	cmp	r4, #1
   253c4:	8a000099 	bhi	25630 <CString::FormatV(char const*, std::__va_list)+0xa38>
   253c8:	e3a01001 	mov	r1, #1
   253cc:	e1a00005 	mov	r0, r5
   253d0:	ebfffbcd 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   253d4:	e595300c 	ldr	r3, [r5, #12]
   253d8:	e58d7018 	str	r7, [sp, #24]
   253dc:	e2832001 	add	r2, r3, #1
   253e0:	e585200c 	str	r2, [r5, #12]
   253e4:	e5c36000 	strb	r6, [r3]
   253e8:	eafffe7b 	b	24ddc <CString::FormatV(char const*, std::__va_list)+0x1e4>
   253ec:	e59d3018 	ldr	r3, [sp, #24]
   253f0:	e28d203c 	add	r2, sp, #60	; 0x3c
   253f4:	e2833007 	add	r3, r3, #7
   253f8:	e3c33007 	bic	r3, r3, #7
   253fc:	e1a06002 	mov	r6, r2
   25400:	ecb30b02 	vldmia	r3!, {d0}
   25404:	e1a00002 	mov	r0, r2
   25408:	e58d3018 	str	r3, [sp, #24]
   2540c:	ee082a10 	vmov	s16, r2
   25410:	ebfffd56 	bl	24970 <CString::ftoa(char*, double, unsigned int)>
   25414:	e1a00006 	mov	r0, r6
   25418:	eb000520 	bl	268a0 <strlen>
   2541c:	e59d301c 	ldr	r3, [sp, #28]
   25420:	e1a06000 	mov	r6, r0
   25424:	e3530000 	cmp	r3, #0
   25428:	1a0000b8 	bne	25710 <CString::FormatV(char const*, std::__va_list)+0xb18>
   2542c:	e1500004 	cmp	r0, r4
   25430:	2affff10 	bcs	25078 <CString::FormatV(char const*, std::__va_list)+0x480>
   25434:	e0444000 	sub	r4, r4, r0
   25438:	e1a01004 	mov	r1, r4
   2543c:	e1a00005 	mov	r0, r5
   25440:	ebfffbb1 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   25444:	e3a00020 	mov	r0, #32
   25448:	e2443001 	sub	r3, r4, #1
   2544c:	e595200c 	ldr	r2, [r5, #12]
   25450:	e2433001 	sub	r3, r3, #1
   25454:	e2821001 	add	r1, r2, #1
   25458:	e3730001 	cmn	r3, #1
   2545c:	e585100c 	str	r1, [r5, #12]
   25460:	e5c20000 	strb	r0, [r2]
   25464:	1afffff8 	bne	2544c <CString::FormatV(char const*, std::__va_list)+0x854>
   25468:	eaffff02 	b	25078 <CString::FormatV(char const*, std::__va_list)+0x480>
   2546c:	ee181a10 	vmov	r1, s16
   25470:	e1a00005 	mov	r0, r5
   25474:	ebfffc4c 	bl	245ac <CString::PutString(char const*)>
   25478:	e1560004 	cmp	r6, r4
   2547c:	2afffe56 	bcs	24ddc <CString::FormatV(char const*, std::__va_list)+0x1e4>
   25480:	e0444006 	sub	r4, r4, r6
   25484:	e1a00005 	mov	r0, r5
   25488:	e1a01004 	mov	r1, r4
   2548c:	ebfffb9e 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   25490:	e3a00020 	mov	r0, #32
   25494:	e2443001 	sub	r3, r4, #1
   25498:	e595200c 	ldr	r2, [r5, #12]
   2549c:	e2433001 	sub	r3, r3, #1
   254a0:	e2821001 	add	r1, r2, #1
   254a4:	e3730001 	cmn	r3, #1
   254a8:	e585100c 	str	r1, [r5, #12]
   254ac:	e5c20000 	strb	r0, [r2]
   254b0:	1afffff8 	bne	25498 <CString::FormatV(char const*, std::__va_list)+0x8a0>
   254b4:	eafffe48 	b	24ddc <CString::FormatV(char const*, std::__va_list)+0x1e4>
   254b8:	e59d3020 	ldr	r3, [sp, #32]
   254bc:	e0444000 	sub	r4, r4, r0
   254c0:	e3530000 	cmp	r3, #0
   254c4:	e1a01004 	mov	r1, r4
   254c8:	e1a00005 	mov	r0, r5
   254cc:	13a06030 	movne	r6, #48	; 0x30
   254d0:	03a06020 	moveq	r6, #32
   254d4:	ebfffb8c 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   254d8:	e2443001 	sub	r3, r4, #1
   254dc:	e595200c 	ldr	r2, [r5, #12]
   254e0:	e2433001 	sub	r3, r3, #1
   254e4:	e2821001 	add	r1, r2, #1
   254e8:	e3730001 	cmn	r3, #1
   254ec:	e585100c 	str	r1, [r5, #12]
   254f0:	e5c26000 	strb	r6, [r2]
   254f4:	1afffff8 	bne	254dc <CString::FormatV(char const*, std::__va_list)+0x8e4>
   254f8:	eafffede 	b	25078 <CString::FormatV(char const*, std::__va_list)+0x480>
   254fc:	e3530000 	cmp	r3, #0
   25500:	e2806001 	add	r6, r0, #1
   25504:	1a00005a 	bne	25674 <CString::FormatV(char const*, std::__va_list)+0xa7c>
   25508:	e59d3020 	ldr	r3, [sp, #32]
   2550c:	e3530000 	cmp	r3, #0
   25510:	1a0000c6 	bne	25830 <CString::FormatV(char const*, std::__va_list)+0xc38>
   25514:	e1540006 	cmp	r4, r6
   25518:	9a00000f 	bls	2555c <CString::FormatV(char const*, std::__va_list)+0x964>
   2551c:	e0444006 	sub	r4, r4, r6
   25520:	e1a00005 	mov	r0, r5
   25524:	e1a01004 	mov	r1, r4
   25528:	ebfffb77 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2552c:	e3a00020 	mov	r0, #32
   25530:	e2443001 	sub	r3, r4, #1
   25534:	e595200c 	ldr	r2, [r5, #12]
   25538:	e2433001 	sub	r3, r3, #1
   2553c:	e2821001 	add	r1, r2, #1
   25540:	e3730001 	cmn	r3, #1
   25544:	e585100c 	str	r1, [r5, #12]
   25548:	e5c20000 	strb	r0, [r2]
   2554c:	1afffff8 	bne	25534 <CString::FormatV(char const*, std::__va_list)+0x93c>
   25550:	e59d3004 	ldr	r3, [sp, #4]
   25554:	e3530000 	cmp	r3, #0
   25558:	0afffec6 	beq	25078 <CString::FormatV(char const*, std::__va_list)+0x480>
   2555c:	e3a01001 	mov	r1, #1
   25560:	e1a00005 	mov	r0, r5
   25564:	ebfffb68 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   25568:	e3a0202d 	mov	r2, #45	; 0x2d
   2556c:	e595300c 	ldr	r3, [r5, #12]
   25570:	e2831001 	add	r1, r3, #1
   25574:	e585100c 	str	r1, [r5, #12]
   25578:	e5c32000 	strb	r2, [r3]
   2557c:	eafffebd 	b	25078 <CString::FormatV(char const*, std::__va_list)+0x480>
   25580:	e4937004 	ldr	r7, [r3], #4
   25584:	e3570000 	cmp	r7, #0
   25588:	e58d3018 	str	r3, [sp, #24]
   2558c:	ba000034 	blt	25664 <CString::FormatV(char const*, std::__va_list)+0xa6c>
   25590:	e3570009 	cmp	r7, #9
   25594:	e1a09007 	mov	r9, r7
   25598:	da0000b2 	ble	25868 <CString::FormatV(char const*, std::__va_list)+0xc70>
   2559c:	e3a06001 	mov	r6, #1
   255a0:	e0866106 	add	r6, r6, r6, lsl #2
   255a4:	e1a06086 	lsl	r6, r6, #1
   255a8:	e1a01006 	mov	r1, r6
   255ac:	e1a00007 	mov	r0, r7
   255b0:	eb001533 	bl	2aa84 <__udivsi3>
   255b4:	e3500009 	cmp	r0, #9
   255b8:	8afffff8 	bhi	255a0 <CString::FormatV(char const*, std::__va_list)+0x9a8>
   255bc:	e1a08000 	mov	r8, r0
   255c0:	e28d303c 	add	r3, sp, #60	; 0x3c
   255c4:	ee083a10 	vmov	s16, r3
   255c8:	e1a07003 	mov	r7, r3
   255cc:	ea000003 	b	255e0 <CString::FormatV(char const*, std::__va_list)+0x9e8>
   255d0:	e1a01006 	mov	r1, r6
   255d4:	e1a00009 	mov	r0, r9
   255d8:	eb001529 	bl	2aa84 <__udivsi3>
   255dc:	e1a08000 	mov	r8, r0
   255e0:	e1a00009 	mov	r0, r9
   255e4:	e1a01006 	mov	r1, r6
   255e8:	eb0015a0 	bl	2ac70 <__aeabi_uidivmod>
   255ec:	e3580009 	cmp	r8, #9
   255f0:	e2883030 	add	r3, r8, #48	; 0x30
   255f4:	96af8073 	sxtbls	r8, r3
   255f8:	e59f3288 	ldr	r3, [pc, #648]	; 25888 <CString::FormatV(char const*, std::__va_list)+0xc90>
   255fc:	e1a09001 	mov	r9, r1
   25600:	e0813693 	umull	r3, r1, r3, r6
   25604:	82888057 	addhi	r8, r8, #87	; 0x57
   25608:	86af8078 	sxtbhi	r8, r8
   2560c:	e3560009 	cmp	r6, #9
   25610:	e4c78001 	strb	r8, [r7], #1
   25614:	e1a061a1 	lsr	r6, r1, #3
   25618:	8affffec 	bhi	255d0 <CString::FormatV(char const*, std::__va_list)+0x9d8>
   2561c:	e3a03000 	mov	r3, #0
   25620:	e5c73000 	strb	r3, [r7]
   25624:	eafffef6 	b	25204 <CString::FormatV(char const*, std::__va_list)+0x60c>
   25628:	e3a0800a 	mov	r8, #10
   2562c:	eafffe25 	b	24ec8 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   25630:	e2441001 	sub	r1, r4, #1
   25634:	e1a00005 	mov	r0, r5
   25638:	ebfffb33 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2563c:	e3a01020 	mov	r1, #32
   25640:	e2444002 	sub	r4, r4, #2
   25644:	e595300c 	ldr	r3, [r5, #12]
   25648:	e2444001 	sub	r4, r4, #1
   2564c:	e2832001 	add	r2, r3, #1
   25650:	e3740001 	cmn	r4, #1
   25654:	e585200c 	str	r2, [r5, #12]
   25658:	e5c31000 	strb	r1, [r3]
   2565c:	1afffff8 	bne	25644 <CString::FormatV(char const*, std::__va_list)+0xa4c>
   25660:	eaffff58 	b	253c8 <CString::FormatV(char const*, std::__va_list)+0x7d0>
   25664:	e3a03001 	mov	r3, #1
   25668:	e2677000 	rsb	r7, r7, #0
   2566c:	e58d3004 	str	r3, [sp, #4]
   25670:	eaffffc6 	b	25590 <CString::FormatV(char const*, std::__va_list)+0x998>
   25674:	e3a01001 	mov	r1, #1
   25678:	e1a00005 	mov	r0, r5
   2567c:	ebfffb22 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   25680:	e3a0202d 	mov	r2, #45	; 0x2d
   25684:	e595300c 	ldr	r3, [r5, #12]
   25688:	e2831001 	add	r1, r3, #1
   2568c:	e585100c 	str	r1, [r5, #12]
   25690:	e5c32000 	strb	r2, [r3]
   25694:	eafffee3 	b	25228 <CString::FormatV(char const*, std::__va_list)+0x630>
   25698:	e59d3020 	ldr	r3, [sp, #32]
   2569c:	e3530000 	cmp	r3, #0
   256a0:	0a000073 	beq	25874 <CString::FormatV(char const*, std::__va_list)+0xc7c>
   256a4:	e1560004 	cmp	r6, r4
   256a8:	2afffe72 	bcs	25078 <CString::FormatV(char const*, std::__va_list)+0x480>
   256ac:	e0444006 	sub	r4, r4, r6
   256b0:	e1a00005 	mov	r0, r5
   256b4:	e1a01004 	mov	r1, r4
   256b8:	ebfffb13 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   256bc:	e3a00030 	mov	r0, #48	; 0x30
   256c0:	e2443001 	sub	r3, r4, #1
   256c4:	e595200c 	ldr	r2, [r5, #12]
   256c8:	e2433001 	sub	r3, r3, #1
   256cc:	e2821001 	add	r1, r2, #1
   256d0:	e3730001 	cmn	r3, #1
   256d4:	e585100c 	str	r1, [r5, #12]
   256d8:	e5c20000 	strb	r0, [r2]
   256dc:	1afffff8 	bne	256c4 <CString::FormatV(char const*, std::__va_list)+0xacc>
   256e0:	eafffe64 	b	25078 <CString::FormatV(char const*, std::__va_list)+0x480>
   256e4:	e3a01001 	mov	r1, #1
   256e8:	e1a00005 	mov	r0, r5
   256ec:	ebfffb06 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   256f0:	e595300c 	ldr	r3, [r5, #12]
   256f4:	e3540001 	cmp	r4, #1
   256f8:	e2832001 	add	r2, r3, #1
   256fc:	e585200c 	str	r2, [r5, #12]
   25700:	e5c36000 	strb	r6, [r3]
   25704:	8a00003c 	bhi	257fc <CString::FormatV(char const*, std::__va_list)+0xc04>
   25708:	e58d7018 	str	r7, [sp, #24]
   2570c:	eafffdb2 	b	24ddc <CString::FormatV(char const*, std::__va_list)+0x1e4>
   25710:	ee181a10 	vmov	r1, s16
   25714:	e1a00005 	mov	r0, r5
   25718:	ebfffba3 	bl	245ac <CString::PutString(char const*)>
   2571c:	e1560004 	cmp	r6, r4
   25720:	2afffdad 	bcs	24ddc <CString::FormatV(char const*, std::__va_list)+0x1e4>
   25724:	e0444006 	sub	r4, r4, r6
   25728:	e1a00005 	mov	r0, r5
   2572c:	e1a01004 	mov	r1, r4
   25730:	ebfffaf5 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   25734:	e3a00020 	mov	r0, #32
   25738:	e2443001 	sub	r3, r4, #1
   2573c:	e595200c 	ldr	r2, [r5, #12]
   25740:	e2433001 	sub	r3, r3, #1
   25744:	e2821001 	add	r1, r2, #1
   25748:	e3730001 	cmn	r3, #1
   2574c:	e585100c 	str	r1, [r5, #12]
   25750:	e5c20000 	strb	r0, [r2]
   25754:	1afffff8 	bne	2573c <CString::FormatV(char const*, std::__va_list)+0xb44>
   25758:	eafffd9f 	b	24ddc <CString::FormatV(char const*, std::__va_list)+0x1e4>
   2575c:	e1a01008 	mov	r1, r8
   25760:	e1a00005 	mov	r0, r5
   25764:	ebfffb90 	bl	245ac <CString::PutString(char const*)>
   25768:	e1560004 	cmp	r6, r4
   2576c:	2affffe5 	bcs	25708 <CString::FormatV(char const*, std::__va_list)+0xb10>
   25770:	e0444006 	sub	r4, r4, r6
   25774:	e1a00005 	mov	r0, r5
   25778:	e1a01004 	mov	r1, r4
   2577c:	ebfffae2 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   25780:	e3a00020 	mov	r0, #32
   25784:	e2443001 	sub	r3, r4, #1
   25788:	e595200c 	ldr	r2, [r5, #12]
   2578c:	e2433001 	sub	r3, r3, #1
   25790:	e2821001 	add	r1, r2, #1
   25794:	e3730001 	cmn	r3, #1
   25798:	e585100c 	str	r1, [r5, #12]
   2579c:	e5c20000 	strb	r0, [r2]
   257a0:	1afffff8 	bne	25788 <CString::FormatV(char const*, std::__va_list)+0xb90>
   257a4:	eaffffd7 	b	25708 <CString::FormatV(char const*, std::__va_list)+0xb10>
   257a8:	e0444000 	sub	r4, r4, r0
   257ac:	e1a01004 	mov	r1, r4
   257b0:	e1a00005 	mov	r0, r5
   257b4:	ebfffad4 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   257b8:	e3a00020 	mov	r0, #32
   257bc:	e2443001 	sub	r3, r4, #1
   257c0:	e595200c 	ldr	r2, [r5, #12]
   257c4:	e2433001 	sub	r3, r3, #1
   257c8:	e2821001 	add	r1, r2, #1
   257cc:	e3730001 	cmn	r3, #1
   257d0:	e585100c 	str	r1, [r5, #12]
   257d4:	e5c20000 	strb	r0, [r2]
   257d8:	1afffff8 	bne	257c0 <CString::FormatV(char const*, std::__va_list)+0xbc8>
   257dc:	eafffeae 	b	2529c <CString::FormatV(char const*, std::__va_list)+0x6a4>
   257e0:	e1a06009 	mov	r6, r9
   257e4:	e3a07001 	mov	r7, #1
   257e8:	eafffecd 	b	25324 <CString::FormatV(char const*, std::__va_list)+0x72c>
   257ec:	e3a08001 	mov	r8, #1
   257f0:	e1cd60d8 	ldrd	r6, [sp, #8]
   257f4:	e3a09000 	mov	r9, #0
   257f8:	eafffddd 	b	24f74 <CString::FormatV(char const*, std::__va_list)+0x37c>
   257fc:	e2441001 	sub	r1, r4, #1
   25800:	e1a00005 	mov	r0, r5
   25804:	ebfffac0 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   25808:	e3a01020 	mov	r1, #32
   2580c:	e2444002 	sub	r4, r4, #2
   25810:	e595300c 	ldr	r3, [r5, #12]
   25814:	e2444001 	sub	r4, r4, #1
   25818:	e2832001 	add	r2, r3, #1
   2581c:	e3740001 	cmn	r4, #1
   25820:	e585200c 	str	r2, [r5, #12]
   25824:	e5c31000 	strb	r1, [r3]
   25828:	1afffff8 	bne	25810 <CString::FormatV(char const*, std::__va_list)+0xc18>
   2582c:	eaffffb5 	b	25708 <CString::FormatV(char const*, std::__va_list)+0xb10>
   25830:	e3a01001 	mov	r1, #1
   25834:	e1a00005 	mov	r0, r5
   25838:	ebfffab3 	bl	2430c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2583c:	e3a0202d 	mov	r2, #45	; 0x2d
   25840:	e595300c 	ldr	r3, [r5, #12]
   25844:	e2831001 	add	r1, r3, #1
   25848:	e585100c 	str	r1, [r5, #12]
   2584c:	e5c32000 	strb	r2, [r3]
   25850:	eaffff93 	b	256a4 <CString::FormatV(char const*, std::__va_list)+0xaac>
   25854:	e1a00008 	mov	r0, r8
   25858:	e3a06001 	mov	r6, #1
   2585c:	e3a07000 	mov	r7, #0
   25860:	e1a01009 	mov	r1, r9
   25864:	eafffe36 	b	25144 <CString::FormatV(char const*, std::__va_list)+0x54c>
   25868:	e1a08009 	mov	r8, r9
   2586c:	e3a06001 	mov	r6, #1
   25870:	eaffff52 	b	255c0 <CString::FormatV(char const*, std::__va_list)+0x9c8>
   25874:	e1500004 	cmp	r0, r4
   25878:	2afffdfe 	bcs	25078 <CString::FormatV(char const*, std::__va_list)+0x480>
   2587c:	eaffff26 	b	2551c <CString::FormatV(char const*, std::__va_list)+0x924>
   25880:	00032ae4 	.word	0x00032ae4
   25884:	00032ae0 	.word	0x00032ae0
   25888:	cccccccd 	.word	0xcccccccd

0002588c <CString::Format(char const*, ...)>:
   2588c:	e92d000e 	push	{r1, r2, r3}
   25890:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   25894:	e24dd008 	sub	sp, sp, #8
   25898:	e28d2010 	add	r2, sp, #16
   2589c:	e59d100c 	ldr	r1, [sp, #12]
   258a0:	e58d2004 	str	r2, [sp, #4]
   258a4:	ebfffcd3 	bl	24bf8 <CString::FormatV(char const*, std::__va_list)>
   258a8:	e28dd008 	add	sp, sp, #8
   258ac:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   258b0:	e28dd00c 	add	sp, sp, #12
   258b4:	e12fff1e 	bx	lr

000258b8 <__aeabi_atexit>:
   258b8:	e12fff1e 	bx	lr

000258bc <__errno>:
   258bc:	e59f0000 	ldr	r0, [pc]	; 258c4 <__errno+0x8>
   258c0:	e12fff1e 	bx	lr
   258c4:	00034c48 	.word	0x00034c48

000258c8 <set_qemu_exit_status>:
   258c8:	e59f3004 	ldr	r3, [pc, #4]	; 258d4 <set_qemu_exit_status+0xc>
   258cc:	e5830008 	str	r0, [r3, #8]
   258d0:	e12fff1e 	bx	lr
   258d4:	00034c44 	.word	0x00034c44

000258d8 <halt>:
   258d8:	f10c0080 	cpsid	i
   258dc:	f10c0040 	cpsid	f
   258e0:	eafffffe 	b	258e0 <halt+0x8>

000258e4 <reboot>:
   258e4:	e3a03000 	mov	r3, #0
   258e8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   258ec:	e59f3010 	ldr	r3, [pc, #16]	; 25904 <reboot+0x20>
   258f0:	e59f1010 	ldr	r1, [pc, #16]	; 25908 <reboot+0x24>
   258f4:	e59f2010 	ldr	r2, [pc, #16]	; 2590c <reboot+0x28>
   258f8:	e5831024 	str	r1, [r3, #36]	; 0x24
   258fc:	e583201c 	str	r2, [r3, #28]
   25900:	eafffffe 	b	25900 <reboot+0x1c>
   25904:	20100000 	.word	0x20100000
   25908:	5a000001 	.word	0x5a000001
   2590c:	5a000020 	.word	0x5a000020

00025910 <vfpinit>:
   25910:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   25914:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   25918:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   2591c:	e3a03000 	mov	r3, #0
   25920:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   25924:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   25928:	eee83a10 	vmsr	fpexc, r3
   2592c:	e3a03402 	mov	r3, #33554432	; 0x2000000
   25930:	eee13a10 	vmsr	fpscr, r3
   25934:	e12fff1e 	bx	lr

00025938 <sysinit>:
   25938:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2593c:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   25940:	f1080040 	cpsie	f
   25944:	f1080080 	cpsie	i
   25948:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   2594c:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   25950:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   25954:	e3a01000 	mov	r1, #0
   25958:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
   2595c:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   25960:	eee83a10 	vmsr	fpexc, r3
   25964:	e3a03402 	mov	r3, #33554432	; 0x2000000
   25968:	eee13a10 	vmsr	fpscr, r3
   2596c:	e59f0088 	ldr	r0, [pc, #136]	; 259fc <sysinit+0xc4>
   25970:	e59f2088 	ldr	r2, [pc, #136]	; 25a00 <sysinit+0xc8>
   25974:	e59f5088 	ldr	r5, [pc, #136]	; 25a04 <sysinit+0xcc>
   25978:	e0422000 	sub	r2, r2, r0
   2597c:	eb000379 	bl	26768 <memset>
   25980:	e1a0000d 	mov	r0, sp
   25984:	ebffe965 	bl	1ff20 <CMachineInfo::CMachineInfo()>
   25988:	e3a01001 	mov	r1, #1
   2598c:	e28d001c 	add	r0, sp, #28
   25990:	eb000a4e 	bl	282d0 <CMemorySystem::CMemorySystem(bool)>
   25994:	e59f306c 	ldr	r3, [pc, #108]	; 25a08 <sysinit+0xd0>
   25998:	e1550003 	cmp	r5, r3
   2599c:	2a000009 	bcs	259c8 <sysinit+0x90>
   259a0:	e2433001 	sub	r3, r3, #1
   259a4:	e0433005 	sub	r3, r3, r5
   259a8:	e3c33003 	bic	r3, r3, #3
   259ac:	e2833004 	add	r3, r3, #4
   259b0:	e1a04005 	mov	r4, r5
   259b4:	e0855003 	add	r5, r5, r3
   259b8:	e4943004 	ldr	r3, [r4], #4
   259bc:	e12fff33 	blx	r3
   259c0:	e1540005 	cmp	r4, r5
   259c4:	1afffffb 	bne	259b8 <sysinit+0x80>
   259c8:	ebff89a6 	bl	8068 <main>
   259cc:	e3500001 	cmp	r0, #1
   259d0:	0a000000 	beq	259d8 <sysinit+0xa0>
   259d4:	ebffffbf 	bl	258d8 <halt>
   259d8:	eb0006a1 	bl	27464 <IsChainBootEnabled>
   259dc:	e3500000 	cmp	r0, #0
   259e0:	1a000000 	bne	259e8 <sysinit+0xb0>
   259e4:	ebffffbe 	bl	258e4 <reboot>
   259e8:	e28d001c 	add	r0, sp, #28
   259ec:	eb000a9b 	bl	28460 <CMemorySystem::Destructor()>
   259f0:	f10c0040 	cpsid	f
   259f4:	eb0006a0 	bl	2747c <DoChainBoot>
   259f8:	eafffff9 	b	259e4 <sysinit+0xac>
   259fc:	00034b40 	.word	0x00034b40
   25a00:	00034ce0 	.word	0x00034ce0
   25a04:	000346e8 	.word	0x000346e8
   25a08:	00034720 	.word	0x00034720

00025a0c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
   25a0c:	e3a03000 	mov	r3, #0
   25a10:	e2800001 	add	r0, r0, #1
   25a14:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25a18:	e59f3020 	ldr	r3, [pc, #32]	; 25a40 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x34>
   25a1c:	e1a01003 	mov	r1, r3
   25a20:	e5932004 	ldr	r2, [r3, #4]
   25a24:	e5913004 	ldr	r3, [r1, #4]
   25a28:	e0433002 	sub	r3, r3, r2
   25a2c:	e1500003 	cmp	r0, r3
   25a30:	8afffffb 	bhi	25a24 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0x18>
   25a34:	e3a03000 	mov	r3, #0
   25a38:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25a3c:	e12fff1e 	bx	lr
   25a40:	20003000 	.word	0x20003000

00025a44 <CTimer::CTimer(CInterruptSystem*)>:
   25a44:	e92d4070 	push	{r4, r5, r6, lr}
   25a48:	e3a05000 	mov	r5, #0
   25a4c:	e3a06001 	mov	r6, #1
   25a50:	e1a04000 	mov	r4, r0
   25a54:	e5805004 	str	r5, [r0, #4]
   25a58:	e5801000 	str	r1, [r0]
   25a5c:	e5805008 	str	r5, [r0, #8]
   25a60:	e5805014 	str	r5, [r0, #20]
   25a64:	e5806010 	str	r6, [r0, #16]
   25a68:	e580500c 	str	r5, [r0, #12]
   25a6c:	e2800018 	add	r0, r0, #24
   25a70:	ebffeb2f 	bl	20734 <CPtrList::CPtrList()>
   25a74:	e3a020c8 	mov	r2, #200	; 0xc8
   25a78:	e59f3038 	ldr	r3, [pc, #56]	; 25ab8 <CTimer::CTimer(CInterruptSystem*)+0x74>
   25a7c:	e59f1038 	ldr	r1, [pc, #56]	; 25abc <CTimer::CTimer(CInterruptSystem*)+0x78>
   25a80:	e5930000 	ldr	r0, [r3]
   25a84:	e584601c 	str	r6, [r4, #28]
   25a88:	e1500005 	cmp	r0, r5
   25a8c:	e5845038 	str	r5, [r4, #56]	; 0x38
   25a90:	e5841020 	str	r1, [r4, #32]
   25a94:	e5842024 	str	r2, [r4, #36]	; 0x24
   25a98:	1a000002 	bne	25aa8 <CTimer::CTimer(CInterruptSystem*)+0x64>
   25a9c:	e1a00004 	mov	r0, r4
   25aa0:	e5834000 	str	r4, [r3]
   25aa4:	e8bd8070 	pop	{r4, r5, r6, pc}
   25aa8:	e3a02041 	mov	r2, #65	; 0x41
   25aac:	e59f100c 	ldr	r1, [pc, #12]	; 25ac0 <CTimer::CTimer(CInterruptSystem*)+0x7c>
   25ab0:	e59f000c 	ldr	r0, [pc, #12]	; 25ac4 <CTimer::CTimer(CInterruptSystem*)+0x80>
   25ab4:	ebffdf11 	bl	1d700 <assertion_failed>
   25ab8:	00034c50 	.word	0x00034c50
   25abc:	00030d40 	.word	0x00030d40
   25ac0:	00032af8 	.word	0x00032af8
   25ac4:	00032b04 	.word	0x00032b04

00025ac8 <CTimer::~CTimer()>:
   25ac8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25acc:	e1a06000 	mov	r6, r0
   25ad0:	e5900000 	ldr	r0, [r0]
   25ad4:	e24dd00c 	sub	sp, sp, #12
   25ad8:	e3500000 	cmp	r0, #0
   25adc:	0a000028 	beq	25b84 <CTimer::~CTimer()+0xbc>
   25ae0:	e3a01003 	mov	r1, #3
   25ae4:	e2865018 	add	r5, r6, #24
   25ae8:	eb000c1f 	bl	28b6c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   25aec:	e1a00005 	mov	r0, r5
   25af0:	ebffeb1c 	bl	20768 <CPtrList::GetFirst()>
   25af4:	e2501000 	subs	r1, r0, #0
   25af8:	e59f7094 	ldr	r7, [pc, #148]	; 25b94 <CTimer::~CTimer()+0xcc>
   25afc:	0a000011 	beq	25b48 <CTimer::~CTimer()+0x80>
   25b00:	e1a00005 	mov	r0, r5
   25b04:	e58d1004 	str	r1, [sp, #4]
   25b08:	ebffeb2d 	bl	207c4 <CPtrList::GetPtr(TPtrListElement*)>
   25b0c:	e2504000 	subs	r4, r0, #0
   25b10:	e59d1004 	ldr	r1, [sp, #4]
   25b14:	0a000012 	beq	25b64 <CTimer::~CTimer()+0x9c>
   25b18:	e5943000 	ldr	r3, [r4]
   25b1c:	e1530007 	cmp	r3, r7
   25b20:	1a000013 	bne	25b74 <CTimer::~CTimer()+0xac>
   25b24:	e1a00005 	mov	r0, r5
   25b28:	ebffebad 	bl	209e4 <CPtrList::Remove(TPtrListElement*)>
   25b2c:	e3a01014 	mov	r1, #20
   25b30:	e1a00004 	mov	r0, r4
   25b34:	eb000748 	bl	2785c <operator delete(void*, unsigned int)>
   25b38:	e1a00005 	mov	r0, r5
   25b3c:	ebffeb09 	bl	20768 <CPtrList::GetFirst()>
   25b40:	e2501000 	subs	r1, r0, #0
   25b44:	1affffed 	bne	25b00 <CTimer::~CTimer()+0x38>
   25b48:	e59f3048 	ldr	r3, [pc, #72]	; 25b98 <CTimer::~CTimer()+0xd0>
   25b4c:	e1a00005 	mov	r0, r5
   25b50:	e5831000 	str	r1, [r3]
   25b54:	ebffeaf9 	bl	20740 <CPtrList::~CPtrList()>
   25b58:	e1a00006 	mov	r0, r6
   25b5c:	e28dd00c 	add	sp, sp, #12
   25b60:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   25b64:	e3a02058 	mov	r2, #88	; 0x58
   25b68:	e59f102c 	ldr	r1, [pc, #44]	; 25b9c <CTimer::~CTimer()+0xd4>
   25b6c:	e59f002c 	ldr	r0, [pc, #44]	; 25ba0 <CTimer::~CTimer()+0xd8>
   25b70:	ebffdee2 	bl	1d700 <assertion_failed>
   25b74:	e3a02059 	mov	r2, #89	; 0x59
   25b78:	e59f101c 	ldr	r1, [pc, #28]	; 25b9c <CTimer::~CTimer()+0xd4>
   25b7c:	e59f0020 	ldr	r0, [pc, #32]	; 25ba4 <CTimer::~CTimer()+0xdc>
   25b80:	ebffdede 	bl	1d700 <assertion_failed>
   25b84:	e3a02047 	mov	r2, #71	; 0x47
   25b88:	e59f100c 	ldr	r1, [pc, #12]	; 25b9c <CTimer::~CTimer()+0xd4>
   25b8c:	e59f0014 	ldr	r0, [pc, #20]	; 25ba8 <CTimer::~CTimer()+0xe0>
   25b90:	ebffdeda 	bl	1d700 <assertion_failed>
   25b94:	4b544d43 	.word	0x4b544d43
   25b98:	00034c50 	.word	0x00034c50
   25b9c:	00032af8 	.word	0x00032af8
   25ba0:	0002f340 	.word	0x0002f340
   25ba4:	00032b14 	.word	0x00032b14
   25ba8:	0002cf38 	.word	0x0002cf38

00025bac <CTimer::SetTimeZone(int)>:
   25bac:	e59f2018 	ldr	r2, [pc, #24]	; 25bcc <CTimer::SetTimeZone(int)+0x20>
   25bb0:	e2813e59 	add	r3, r1, #1424	; 0x590
   25bb4:	e283300f 	add	r3, r3, #15
   25bb8:	e1530002 	cmp	r3, r2
   25bbc:	95801014 	strls	r1, [r0, #20]
   25bc0:	93a00001 	movls	r0, #1
   25bc4:	83a00000 	movhi	r0, #0
   25bc8:	e12fff1e 	bx	lr
   25bcc:	00000b3e 	.word	0x00000b3e

00025bd0 <CTimer::GetTimeZone() const>:
   25bd0:	e5900014 	ldr	r0, [r0, #20]
   25bd4:	e12fff1e 	bx	lr

00025bd8 <CTimer::SetTime(unsigned int, bool)>:
   25bd8:	e3520000 	cmp	r2, #0
   25bdc:	e92d4070 	push	{r4, r5, r6, lr}
   25be0:	e1a04000 	mov	r4, r0
   25be4:	e1a05001 	mov	r5, r1
   25be8:	1a000004 	bne	25c00 <CTimer::SetTime(unsigned int, bool)+0x28>
   25bec:	e5903014 	ldr	r3, [r0, #20]
   25bf0:	e0633203 	rsb	r3, r3, r3, lsl #4
   25bf4:	e1b03103 	lsls	r3, r3, #2
   25bf8:	4a000006 	bmi	25c18 <CTimer::SetTime(unsigned int, bool)+0x40>
   25bfc:	e0855003 	add	r5, r5, r3
   25c00:	e5940010 	ldr	r0, [r4, #16]
   25c04:	e3500000 	cmp	r0, #0
   25c08:	1a000007 	bne	25c2c <CTimer::SetTime(unsigned int, bool)+0x54>
   25c0c:	e3a00001 	mov	r0, #1
   25c10:	e584500c 	str	r5, [r4, #12]
   25c14:	e8bd8070 	pop	{r4, r5, r6, pc}
   25c18:	e2631000 	rsb	r1, r3, #0
   25c1c:	e1510005 	cmp	r1, r5
   25c20:	dafffff5 	ble	25bfc <CTimer::SetTime(unsigned int, bool)+0x24>
   25c24:	e1a00002 	mov	r0, r2
   25c28:	e8bd8070 	pop	{r4, r5, r6, pc}
   25c2c:	eb000a9c 	bl	286a4 <EnterCritical>
   25c30:	e5943010 	ldr	r3, [r4, #16]
   25c34:	e584500c 	str	r5, [r4, #12]
   25c38:	e3530000 	cmp	r3, #0
   25c3c:	0a000002 	beq	25c4c <CTimer::SetTime(unsigned int, bool)+0x74>
   25c40:	eb000ac1 	bl	2874c <LeaveCritical>
   25c44:	e3a00001 	mov	r0, #1
   25c48:	e8bd8070 	pop	{r4, r5, r6, pc}
   25c4c:	e3a00001 	mov	r0, #1
   25c50:	e8bd8070 	pop	{r4, r5, r6, pc}

00025c54 <CTimer::GetClockTicks()>:
   25c54:	e3a03000 	mov	r3, #0
   25c58:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25c5c:	e59f2008 	ldr	r2, [pc, #8]	; 25c6c <CTimer::GetClockTicks()+0x18>
   25c60:	e5920004 	ldr	r0, [r2, #4]
   25c64:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25c68:	e12fff1e 	bx	lr
   25c6c:	20003000 	.word	0x20003000

00025c70 <CTimer::GetTicks() const>:
   25c70:	e5900004 	ldr	r0, [r0, #4]
   25c74:	e12fff1e 	bx	lr

00025c78 <CTimer::GetUptime() const>:
   25c78:	e5900008 	ldr	r0, [r0, #8]
   25c7c:	e12fff1e 	bx	lr

00025c80 <CTimer::GetTime() const>:
   25c80:	e590000c 	ldr	r0, [r0, #12]
   25c84:	e12fff1e 	bx	lr

00025c88 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   25c88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25c8c:	e1a04000 	mov	r4, r0
   25c90:	e5900010 	ldr	r0, [r0, #16]
   25c94:	e1a06001 	mov	r6, r1
   25c98:	e3500000 	cmp	r0, #0
   25c9c:	e1a05002 	mov	r5, r2
   25ca0:	1a000013 	bne	25cf4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x6c>
   25ca4:	e594700c 	ldr	r7, [r4, #12]
   25ca8:	e5944004 	ldr	r4, [r4, #4]
   25cac:	e3560000 	cmp	r6, #0
   25cb0:	0a000018 	beq	25d18 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x90>
   25cb4:	e3550000 	cmp	r5, #0
   25cb8:	e5867000 	str	r7, [r6]
   25cbc:	0a000019 	beq	25d28 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
   25cc0:	e59f3070 	ldr	r3, [pc, #112]	; 25d38 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   25cc4:	e3a00001 	mov	r0, #1
   25cc8:	e0832493 	umull	r2, r3, r3, r4
   25ccc:	e1a032a3 	lsr	r3, r3, #5
   25cd0:	e0833103 	add	r3, r3, r3, lsl #2
   25cd4:	e0833103 	add	r3, r3, r3, lsl #2
   25cd8:	e0443103 	sub	r3, r4, r3, lsl #2
   25cdc:	e0632283 	rsb	r2, r3, r3, lsl #5
   25ce0:	e0833102 	add	r3, r3, r2, lsl #2
   25ce4:	e0833103 	add	r3, r3, r3, lsl #2
   25ce8:	e1a03203 	lsl	r3, r3, #4
   25cec:	e5853000 	str	r3, [r5]
   25cf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25cf4:	eb000a6a 	bl	286a4 <EnterCritical>
   25cf8:	e5943010 	ldr	r3, [r4, #16]
   25cfc:	e594700c 	ldr	r7, [r4, #12]
   25d00:	e3530000 	cmp	r3, #0
   25d04:	e5944004 	ldr	r4, [r4, #4]
   25d08:	0affffe7 	beq	25cac <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   25d0c:	eb000a8e 	bl	2874c <LeaveCritical>
   25d10:	e3560000 	cmp	r6, #0
   25d14:	1affffe6 	bne	25cb4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   25d18:	e3a02f41 	mov	r2, #260	; 0x104
   25d1c:	e59f1018 	ldr	r1, [pc, #24]	; 25d3c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   25d20:	e59f0018 	ldr	r0, [pc, #24]	; 25d40 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   25d24:	ebffde75 	bl	1d700 <assertion_failed>
   25d28:	e59f2014 	ldr	r2, [pc, #20]	; 25d44 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   25d2c:	e59f1008 	ldr	r1, [pc, #8]	; 25d3c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   25d30:	e59f0010 	ldr	r0, [pc, #16]	; 25d48 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xc0>
   25d34:	ebffde71 	bl	1d700 <assertion_failed>
   25d38:	51eb851f 	.word	0x51eb851f
   25d3c:	00032af8 	.word	0x00032af8
   25d40:	00032b3c 	.word	0x00032b3c
   25d44:	00000107 	.word	0x00000107
   25d48:	00032b4c 	.word	0x00032b4c

00025d4c <CTimer::GetUniversalTime() const>:
   25d4c:	e5903014 	ldr	r3, [r0, #20]
   25d50:	e590000c 	ldr	r0, [r0, #12]
   25d54:	e0633203 	rsb	r3, r3, r3, lsl #4
   25d58:	e1500103 	cmp	r0, r3, lsl #2
   25d5c:	e1a03103 	lsl	r3, r3, #2
   25d60:	a0400003 	subge	r0, r0, r3
   25d64:	b3a00000 	movlt	r0, #0
   25d68:	e12fff1e 	bx	lr

00025d6c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   25d6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25d70:	e1a05000 	mov	r5, r0
   25d74:	e5900010 	ldr	r0, [r0, #16]
   25d78:	e1a06001 	mov	r6, r1
   25d7c:	e3500000 	cmp	r0, #0
   25d80:	e1a04002 	mov	r4, r2
   25d84:	1a00001b 	bne	25df8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x8c>
   25d88:	e595800c 	ldr	r8, [r5, #12]
   25d8c:	e5957004 	ldr	r7, [r5, #4]
   25d90:	e5950014 	ldr	r0, [r5, #20]
   25d94:	e0600200 	rsb	r0, r0, r0, lsl #4
   25d98:	e1580100 	cmp	r8, r0, lsl #2
   25d9c:	e1a00100 	lsl	r0, r0, #2
   25da0:	ba000012 	blt	25df0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   25da4:	e3560000 	cmp	r6, #0
   25da8:	0a00001a 	beq	25e18 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xac>
   25dac:	e0480000 	sub	r0, r8, r0
   25db0:	e3540000 	cmp	r4, #0
   25db4:	e5860000 	str	r0, [r6]
   25db8:	0a00001a 	beq	25e28 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
   25dbc:	e59f3074 	ldr	r3, [pc, #116]	; 25e38 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   25dc0:	e3a00001 	mov	r0, #1
   25dc4:	e0832793 	umull	r2, r3, r3, r7
   25dc8:	e1a032a3 	lsr	r3, r3, #5
   25dcc:	e0833103 	add	r3, r3, r3, lsl #2
   25dd0:	e0833103 	add	r3, r3, r3, lsl #2
   25dd4:	e0473103 	sub	r3, r7, r3, lsl #2
   25dd8:	e0632283 	rsb	r2, r3, r3, lsl #5
   25ddc:	e0833102 	add	r3, r3, r2, lsl #2
   25de0:	e0833103 	add	r3, r3, r3, lsl #2
   25de4:	e1a03203 	lsl	r3, r3, #4
   25de8:	e5843000 	str	r3, [r4]
   25dec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25df0:	e3a00000 	mov	r0, #0
   25df4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25df8:	eb000a29 	bl	286a4 <EnterCritical>
   25dfc:	e5953010 	ldr	r3, [r5, #16]
   25e00:	e595800c 	ldr	r8, [r5, #12]
   25e04:	e3530000 	cmp	r3, #0
   25e08:	e5957004 	ldr	r7, [r5, #4]
   25e0c:	0affffdf 	beq	25d90 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   25e10:	eb000a4d 	bl	2874c <LeaveCritical>
   25e14:	eaffffdd 	b	25d90 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   25e18:	e59f201c 	ldr	r2, [pc, #28]	; 25e3c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   25e1c:	e59f101c 	ldr	r1, [pc, #28]	; 25e40 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   25e20:	e59f001c 	ldr	r0, [pc, #28]	; 25e44 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   25e24:	ebffde35 	bl	1d700 <assertion_failed>
   25e28:	e3a02f4b 	mov	r2, #300	; 0x12c
   25e2c:	e59f100c 	ldr	r1, [pc, #12]	; 25e40 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   25e30:	e59f0010 	ldr	r0, [pc, #16]	; 25e48 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xdc>
   25e34:	ebffde31 	bl	1d700 <assertion_failed>
   25e38:	51eb851f 	.word	0x51eb851f
   25e3c:	00000129 	.word	0x00000129
   25e40:	00032af8 	.word	0x00032af8
   25e44:	00032b3c 	.word	0x00032b3c
   25e48:	00032b4c 	.word	0x00032b4c

00025e4c <CTimer::GetTimeString()>:
   25e4c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e50:	e1a04000 	mov	r4, r0
   25e54:	e5900010 	ldr	r0, [r0, #16]
   25e58:	e24dd014 	sub	sp, sp, #20
   25e5c:	e3500000 	cmp	r0, #0
   25e60:	1a00005e 	bne	25fe0 <CTimer::GetTimeString()+0x194>
   25e64:	e594b00c 	ldr	fp, [r4, #12]
   25e68:	e594a004 	ldr	sl, [r4, #4]
   25e6c:	e19b000a 	orrs	r0, fp, sl
   25e70:	01a0a000 	moveq	sl, r0
   25e74:	0a00004d 	beq	25fb0 <CTimer::GetTimeString()+0x164>
   25e78:	e59f7180 	ldr	r7, [pc, #384]	; 26000 <CTimer::GetTimeString()+0x1b4>
   25e7c:	e59f4180 	ldr	r4, [pc, #384]	; 26004 <CTimer::GetTimeString()+0x1b8>
   25e80:	e0883b97 	umull	r3, r8, r7, fp
   25e84:	e1a082a8 	lsr	r8, r8, #5
   25e88:	e1a02008 	mov	r2, r8
   25e8c:	e0873897 	umull	r3, r7, r7, r8
   25e90:	e1a072a7 	lsr	r7, r7, #5
   25e94:	e0843794 	umull	r3, r4, r4, r7
   25e98:	e1a09007 	mov	r9, r7
   25e9c:	e0688208 	rsb	r8, r8, r8, lsl #4
   25ea0:	e0677207 	rsb	r7, r7, r7, lsl #4
   25ea4:	e59f615c 	ldr	r6, [pc, #348]	; 26008 <CTimer::GetTimeString()+0x1bc>
   25ea8:	e59f515c 	ldr	r5, [pc, #348]	; 2600c <CTimer::GetTimeString()+0x1c0>
   25eac:	e59fe15c 	ldr	lr, [pc, #348]	; 26010 <CTimer::GetTimeString()+0x1c4>
   25eb0:	e59fc15c 	ldr	ip, [pc, #348]	; 26014 <CTimer::GetTimeString()+0x1c8>
   25eb4:	e04b8108 	sub	r8, fp, r8, lsl #2
   25eb8:	e0427107 	sub	r7, r2, r7, lsl #2
   25ebc:	e1a04224 	lsr	r4, r4, #4
   25ec0:	ea000008 	b	25ee8 <CTimer::GetTimeString()+0x9c>
   25ec4:	e3160003 	tst	r6, #3
   25ec8:	03a00001 	moveq	r0, #1
   25ecc:	13a00000 	movne	r0, #0
   25ed0:	e2801f5b 	add	r1, r0, #364	; 0x16c
   25ed4:	e2811001 	add	r1, r1, #1
   25ed8:	e1540001 	cmp	r4, r1
   25edc:	3a00000b 	bcc	25f10 <CTimer::GetTimeString()+0xc4>
   25ee0:	e0444001 	sub	r4, r4, r1
   25ee4:	e2866001 	add	r6, r6, #1
   25ee8:	e0030695 	mul	r3, r5, r6
   25eec:	e15e0163 	cmp	lr, r3, ror #2
   25ef0:	3afffff3 	bcc	25ec4 <CTimer::GetTimeString()+0x78>
   25ef4:	e15c0263 	cmp	ip, r3, ror #4
   25ef8:	23a00001 	movcs	r0, #1
   25efc:	33a00000 	movcc	r0, #0
   25f00:	e2801f5b 	add	r1, r0, #364	; 0x16c
   25f04:	e2811001 	add	r1, r1, #1
   25f08:	e1540001 	cmp	r4, r1
   25f0c:	2afffff3 	bcs	25ee0 <CTimer::GetTimeString()+0x94>
   25f10:	e3a05000 	mov	r5, #0
   25f14:	e59f20fc 	ldr	r2, [pc, #252]	; 26018 <CTimer::GetTimeString()+0x1cc>
   25f18:	ea000001 	b	25f24 <CTimer::GetTimeString()+0xd8>
   25f1c:	e0444001 	sub	r4, r4, r1
   25f20:	e2855001 	add	r5, r5, #1
   25f24:	e3550001 	cmp	r5, #1
   25f28:	13a03000 	movne	r3, #0
   25f2c:	02003001 	andeq	r3, r0, #1
   25f30:	e3530000 	cmp	r3, #0
   25f34:	13a0101d 	movne	r1, #29
   25f38:	07921105 	ldreq	r1, [r2, r5, lsl #2]
   25f3c:	e1540001 	cmp	r4, r1
   25f40:	2afffff5 	bcs	25f1c <CTimer::GetTimeString()+0xd0>
   25f44:	e3a00010 	mov	r0, #16
   25f48:	eb000635 	bl	27824 <operator new(unsigned int)>
   25f4c:	e59fb0c8 	ldr	fp, [pc, #200]	; 2601c <CTimer::GetTimeString()+0x1d0>
   25f50:	e08b3a9b 	umull	r3, fp, fp, sl
   25f54:	e1a0b2ab 	lsr	fp, fp, #5
   25f58:	e08bb10b 	add	fp, fp, fp, lsl #2
   25f5c:	e08bb10b 	add	fp, fp, fp, lsl #2
   25f60:	e04ab10b 	sub	fp, sl, fp, lsl #2
   25f64:	e1a0a000 	mov	sl, r0
   25f68:	ebfff901 	bl	24374 <CString::CString()>
   25f6c:	e59f30ac 	ldr	r3, [pc, #172]	; 26020 <CTimer::GetTimeString()+0x1d4>
   25f70:	e1560003 	cmp	r6, r3
   25f74:	9a000010 	bls	25fbc <CTimer::GetTimeString()+0x170>
   25f78:	e59f3084 	ldr	r3, [pc, #132]	; 26004 <CTimer::GetTimeString()+0x1b8>
   25f7c:	e98d0180 	stmib	sp, {r7, r8}
   25f80:	e0832993 	umull	r2, r3, r3, r9
   25f84:	e1a03223 	lsr	r3, r3, #4
   25f88:	e0833083 	add	r3, r3, r3, lsl #1
   25f8c:	e0499183 	sub	r9, r9, r3, lsl #3
   25f90:	e59f208c 	ldr	r2, [pc, #140]	; 26024 <CTimer::GetTimeString()+0x1d8>
   25f94:	e58db00c 	str	fp, [sp, #12]
   25f98:	e58d9000 	str	r9, [sp]
   25f9c:	e1a0000a 	mov	r0, sl
   25fa0:	e7922105 	ldr	r2, [r2, r5, lsl #2]
   25fa4:	e59f107c 	ldr	r1, [pc, #124]	; 26028 <CTimer::GetTimeString()+0x1dc>
   25fa8:	e2843001 	add	r3, r4, #1
   25fac:	ebfffe36 	bl	2588c <CString::Format(char const*, ...)>
   25fb0:	e1a0000a 	mov	r0, sl
   25fb4:	e28dd014 	add	sp, sp, #20
   25fb8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fbc:	e1a0000a 	mov	r0, sl
   25fc0:	e1a03007 	mov	r3, r7
   25fc4:	e1a02009 	mov	r2, r9
   25fc8:	e88d0900 	stm	sp, {r8, fp}
   25fcc:	e59f1058 	ldr	r1, [pc, #88]	; 2602c <CTimer::GetTimeString()+0x1e0>
   25fd0:	ebfffe2d 	bl	2588c <CString::Format(char const*, ...)>
   25fd4:	e1a0000a 	mov	r0, sl
   25fd8:	e28dd014 	add	sp, sp, #20
   25fdc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fe0:	eb0009af 	bl	286a4 <EnterCritical>
   25fe4:	e5943010 	ldr	r3, [r4, #16]
   25fe8:	e594b00c 	ldr	fp, [r4, #12]
   25fec:	e3530000 	cmp	r3, #0
   25ff0:	e594a004 	ldr	sl, [r4, #4]
   25ff4:	0affff9c 	beq	25e6c <CTimer::GetTimeString()+0x20>
   25ff8:	eb0009d3 	bl	2874c <LeaveCritical>
   25ffc:	eaffff9a 	b	25e6c <CTimer::GetTimeString()+0x20>
   26000:	88888889 	.word	0x88888889
   26004:	aaaaaaab 	.word	0xaaaaaaab
   26008:	000007b2 	.word	0x000007b2
   2600c:	c28f5c29 	.word	0xc28f5c29
   26010:	028f5c28 	.word	0x028f5c28
   26014:	00a3d70a 	.word	0x00a3d70a
   26018:	00032c44 	.word	0x00032c44
   2601c:	51eb851f 	.word	0x51eb851f
   26020:	000007b7 	.word	0x000007b7
   26024:	00034aa8 	.word	0x00034aa8
   26028:	00032b60 	.word	0x00032b60
   2602c:	00032b7c 	.word	0x00032b7c

00026030 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   26030:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26034:	e1a07000 	mov	r7, r0
   26038:	e1a04002 	mov	r4, r2
   2603c:	e1a06001 	mov	r6, r1
   26040:	e3a00014 	mov	r0, #20
   26044:	e1a08003 	mov	r8, r3
   26048:	eb0005f5 	bl	27824 <operator new(unsigned int)>
   2604c:	e5971004 	ldr	r1, [r7, #4]
   26050:	e3540000 	cmp	r4, #0
   26054:	e0816006 	add	r6, r1, r6
   26058:	0a000034 	beq	26130 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x100>
   2605c:	e1a05000 	mov	r5, r0
   26060:	e597001c 	ldr	r0, [r7, #28]
   26064:	e59f30f0 	ldr	r3, [pc, #240]	; 2615c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   26068:	e59d2020 	ldr	r2, [sp, #32]
   2606c:	e3500000 	cmp	r0, #0
   26070:	e5854004 	str	r4, [r5, #4]
   26074:	e5856008 	str	r6, [r5, #8]
   26078:	e585800c 	str	r8, [r5, #12]
   2607c:	e5852010 	str	r2, [r5, #16]
   26080:	e5853000 	str	r3, [r5]
   26084:	1a000020 	bne	2610c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
   26088:	e2874018 	add	r4, r7, #24
   2608c:	e1a00004 	mov	r0, r4
   26090:	ebffe9b4 	bl	20768 <CPtrList::GetFirst()>
   26094:	e2509000 	subs	r9, r0, #0
   26098:	0a00002a 	beq	26148 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   2609c:	e59f80b8 	ldr	r8, [pc, #184]	; 2615c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   260a0:	e1a01009 	mov	r1, r9
   260a4:	e1a00004 	mov	r0, r4
   260a8:	ebffe9c5 	bl	207c4 <CPtrList::GetPtr(TPtrListElement*)>
   260ac:	e2503000 	subs	r3, r0, #0
   260b0:	0a00000d 	beq	260ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xbc>
   260b4:	e5932000 	ldr	r2, [r3]
   260b8:	e1520008 	cmp	r2, r8
   260bc:	1a00000e 	bne	260fc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xcc>
   260c0:	e5933008 	ldr	r3, [r3, #8]
   260c4:	e1a01009 	mov	r1, r9
   260c8:	e0433006 	sub	r3, r3, r6
   260cc:	e3530000 	cmp	r3, #0
   260d0:	e1a00004 	mov	r0, r4
   260d4:	ca00000e 	bgt	26114 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
   260d8:	ebffe9a4 	bl	20770 <CPtrList::GetNext(TPtrListElement*)>
   260dc:	e3500000 	cmp	r0, #0
   260e0:	0a000018 	beq	26148 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   260e4:	e1a09000 	mov	r9, r0
   260e8:	eaffffec 	b	260a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x70>
   260ec:	e59f206c 	ldr	r2, [pc, #108]	; 26160 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
   260f0:	e59f106c 	ldr	r1, [pc, #108]	; 26164 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   260f4:	e59f006c 	ldr	r0, [pc, #108]	; 26168 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
   260f8:	ebffdd80 	bl	1d700 <assertion_failed>
   260fc:	e3a02f65 	mov	r2, #404	; 0x194
   26100:	e59f105c 	ldr	r1, [pc, #92]	; 26164 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   26104:	e59f0060 	ldr	r0, [pc, #96]	; 2616c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
   26108:	ebffdd7c 	bl	1d700 <assertion_failed>
   2610c:	eb000964 	bl	286a4 <EnterCritical>
   26110:	eaffffdc 	b	26088 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
   26114:	e1a02005 	mov	r2, r5
   26118:	ebffe9be 	bl	20818 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   2611c:	e597301c 	ldr	r3, [r7, #28]
   26120:	e3530000 	cmp	r3, #0
   26124:	1a000005 	bne	26140 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x110>
   26128:	e1a00005 	mov	r0, r5
   2612c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26130:	e59f2038 	ldr	r2, [pc, #56]	; 26170 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
   26134:	e59f1028 	ldr	r1, [pc, #40]	; 26164 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   26138:	e59f0034 	ldr	r0, [pc, #52]	; 26174 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
   2613c:	ebffdd6f 	bl	1d700 <assertion_failed>
   26140:	eb000981 	bl	2874c <LeaveCritical>
   26144:	eafffff7 	b	26128 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
   26148:	e1a01009 	mov	r1, r9
   2614c:	e1a00004 	mov	r0, r4
   26150:	e1a02005 	mov	r2, r5
   26154:	ebffe9e9 	bl	20900 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   26158:	eaffffef 	b	2611c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xec>
   2615c:	4b544d43 	.word	0x4b544d43
   26160:	00000193 	.word	0x00000193
   26164:	00032af8 	.word	0x00032af8
   26168:	00032b90 	.word	0x00032b90
   2616c:	00032ba0 	.word	0x00032ba0
   26170:	00000183 	.word	0x00000183
   26174:	000330ec 	.word	0x000330ec

00026178 <CTimer::CancelKernelTimer(unsigned int)>:
   26178:	e92d4070 	push	{r4, r5, r6, lr}
   2617c:	e2514000 	subs	r4, r1, #0
   26180:	0a000019 	beq	261ec <CTimer::CancelKernelTimer(unsigned int)+0x74>
   26184:	e1a05000 	mov	r5, r0
   26188:	e590001c 	ldr	r0, [r0, #28]
   2618c:	e3500000 	cmp	r0, #0
   26190:	1a000013 	bne	261e4 <CTimer::CancelKernelTimer(unsigned int)+0x6c>
   26194:	e2856018 	add	r6, r5, #24
   26198:	e1a01004 	mov	r1, r4
   2619c:	e1a00006 	mov	r0, r6
   261a0:	ebffea53 	bl	20af4 <CPtrList::Find(void*)>
   261a4:	e2501000 	subs	r1, r0, #0
   261a8:	0a000008 	beq	261d0 <CTimer::CancelKernelTimer(unsigned int)+0x58>
   261ac:	e59f3058 	ldr	r3, [pc, #88]	; 2620c <CTimer::CancelKernelTimer(unsigned int)+0x94>
   261b0:	e5942000 	ldr	r2, [r4]
   261b4:	e1520003 	cmp	r2, r3
   261b8:	1a00000f 	bne	261fc <CTimer::CancelKernelTimer(unsigned int)+0x84>
   261bc:	e1a00006 	mov	r0, r6
   261c0:	ebffea07 	bl	209e4 <CPtrList::Remove(TPtrListElement*)>
   261c4:	e1a00004 	mov	r0, r4
   261c8:	e3a01014 	mov	r1, #20
   261cc:	eb0005a2 	bl	2785c <operator delete(void*, unsigned int)>
   261d0:	e595301c 	ldr	r3, [r5, #28]
   261d4:	e3530000 	cmp	r3, #0
   261d8:	08bd8070 	popeq	{r4, r5, r6, pc}
   261dc:	e8bd4070 	pop	{r4, r5, r6, lr}
   261e0:	ea000959 	b	2874c <LeaveCritical>
   261e4:	eb00092e 	bl	286a4 <EnterCritical>
   261e8:	eaffffe9 	b	26194 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   261ec:	e3a02e1b 	mov	r2, #432	; 0x1b0
   261f0:	e59f1018 	ldr	r1, [pc, #24]	; 26210 <CTimer::CancelKernelTimer(unsigned int)+0x98>
   261f4:	e59f0018 	ldr	r0, [pc, #24]	; 26214 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
   261f8:	ebffdd40 	bl	1d700 <assertion_failed>
   261fc:	e59f2014 	ldr	r2, [pc, #20]	; 26218 <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   26200:	e59f1008 	ldr	r1, [pc, #8]	; 26210 <CTimer::CancelKernelTimer(unsigned int)+0x98>
   26204:	e59f0010 	ldr	r0, [pc, #16]	; 2621c <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   26208:	ebffdd3c 	bl	1d700 <assertion_failed>
   2620c:	4b544d43 	.word	0x4b544d43
   26210:	00032af8 	.word	0x00032af8
   26214:	0002f340 	.word	0x0002f340
   26218:	000001b7 	.word	0x000001b7
   2621c:	00032b14 	.word	0x00032b14

00026220 <CTimer::PollKernelTimers()>:
   26220:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26224:	e1a05000 	mov	r5, r0
   26228:	e590001c 	ldr	r0, [r0, #28]
   2622c:	e24dd008 	sub	sp, sp, #8
   26230:	e3500000 	cmp	r0, #0
   26234:	1a000038 	bne	2631c <CTimer::PollKernelTimers()+0xfc>
   26238:	e2857018 	add	r7, r5, #24
   2623c:	e1a00007 	mov	r0, r7
   26240:	ebffe948 	bl	20768 <CPtrList::GetFirst()>
   26244:	e2501000 	subs	r1, r0, #0
   26248:	0a00003d 	beq	26344 <CTimer::PollKernelTimers()+0x124>
   2624c:	e59f8110 	ldr	r8, [pc, #272]	; 26364 <CTimer::PollKernelTimers()+0x144>
   26250:	e1a00007 	mov	r0, r7
   26254:	e58d1004 	str	r1, [sp, #4]
   26258:	ebffe959 	bl	207c4 <CPtrList::GetPtr(TPtrListElement*)>
   2625c:	e2504000 	subs	r4, r0, #0
   26260:	e59d1004 	ldr	r1, [sp, #4]
   26264:	0a00002e 	beq	26324 <CTimer::PollKernelTimers()+0x104>
   26268:	e5943000 	ldr	r3, [r4]
   2626c:	e1530008 	cmp	r3, r8
   26270:	1a00002f 	bne	26334 <CTimer::PollKernelTimers()+0x114>
   26274:	e5952004 	ldr	r2, [r5, #4]
   26278:	e5943008 	ldr	r3, [r4, #8]
   2627c:	e0433002 	sub	r3, r3, r2
   26280:	e3530000 	cmp	r3, #0
   26284:	ca00002e 	bgt	26344 <CTimer::PollKernelTimers()+0x124>
   26288:	e1a00007 	mov	r0, r7
   2628c:	e58d1004 	str	r1, [sp, #4]
   26290:	ebffe936 	bl	20770 <CPtrList::GetNext(TPtrListElement*)>
   26294:	e59d1004 	ldr	r1, [sp, #4]
   26298:	e1a06000 	mov	r6, r0
   2629c:	e1a00007 	mov	r0, r7
   262a0:	ebffe9cf 	bl	209e4 <CPtrList::Remove(TPtrListElement*)>
   262a4:	e595301c 	ldr	r3, [r5, #28]
   262a8:	e3530000 	cmp	r3, #0
   262ac:	1a000010 	bne	262f4 <CTimer::PollKernelTimers()+0xd4>
   262b0:	e5943004 	ldr	r3, [r4, #4]
   262b4:	e3530000 	cmp	r3, #0
   262b8:	0a000011 	beq	26304 <CTimer::PollKernelTimers()+0xe4>
   262bc:	e1a00004 	mov	r0, r4
   262c0:	e5942010 	ldr	r2, [r4, #16]
   262c4:	e594100c 	ldr	r1, [r4, #12]
   262c8:	e12fff33 	blx	r3
   262cc:	e1a00004 	mov	r0, r4
   262d0:	e3a01014 	mov	r1, #20
   262d4:	eb000560 	bl	2785c <operator delete(void*, unsigned int)>
   262d8:	e595001c 	ldr	r0, [r5, #28]
   262dc:	e3500000 	cmp	r0, #0
   262e0:	1a00000b 	bne	26314 <CTimer::PollKernelTimers()+0xf4>
   262e4:	e3560000 	cmp	r6, #0
   262e8:	0a000015 	beq	26344 <CTimer::PollKernelTimers()+0x124>
   262ec:	e1a01006 	mov	r1, r6
   262f0:	eaffffd6 	b	26250 <CTimer::PollKernelTimers()+0x30>
   262f4:	eb000914 	bl	2874c <LeaveCritical>
   262f8:	e5943004 	ldr	r3, [r4, #4]
   262fc:	e3530000 	cmp	r3, #0
   26300:	1affffed 	bne	262bc <CTimer::PollKernelTimers()+0x9c>
   26304:	e59f205c 	ldr	r2, [pc, #92]	; 26368 <CTimer::PollKernelTimers()+0x148>
   26308:	e59f105c 	ldr	r1, [pc, #92]	; 2636c <CTimer::PollKernelTimers()+0x14c>
   2630c:	e59f005c 	ldr	r0, [pc, #92]	; 26370 <CTimer::PollKernelTimers()+0x150>
   26310:	ebffdcfa 	bl	1d700 <assertion_failed>
   26314:	eb0008e2 	bl	286a4 <EnterCritical>
   26318:	eafffff1 	b	262e4 <CTimer::PollKernelTimers()+0xc4>
   2631c:	eb0008e0 	bl	286a4 <EnterCritical>
   26320:	eaffffc4 	b	26238 <CTimer::PollKernelTimers()+0x18>
   26324:	e3a02f73 	mov	r2, #460	; 0x1cc
   26328:	e59f103c 	ldr	r1, [pc, #60]	; 2636c <CTimer::PollKernelTimers()+0x14c>
   2632c:	e59f0040 	ldr	r0, [pc, #64]	; 26374 <CTimer::PollKernelTimers()+0x154>
   26330:	ebffdcf2 	bl	1d700 <assertion_failed>
   26334:	e59f203c 	ldr	r2, [pc, #60]	; 26378 <CTimer::PollKernelTimers()+0x158>
   26338:	e59f102c 	ldr	r1, [pc, #44]	; 2636c <CTimer::PollKernelTimers()+0x14c>
   2633c:	e59f0038 	ldr	r0, [pc, #56]	; 2637c <CTimer::PollKernelTimers()+0x15c>
   26340:	ebffdcee 	bl	1d700 <assertion_failed>
   26344:	e595301c 	ldr	r3, [r5, #28]
   26348:	e3530000 	cmp	r3, #0
   2634c:	1a000001 	bne	26358 <CTimer::PollKernelTimers()+0x138>
   26350:	e28dd008 	add	sp, sp, #8
   26354:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26358:	e28dd008 	add	sp, sp, #8
   2635c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   26360:	ea0008f9 	b	2874c <LeaveCritical>
   26364:	4b544d43 	.word	0x4b544d43
   26368:	000001db 	.word	0x000001db
   2636c:	00032af8 	.word	0x00032af8
   26370:	000330ec 	.word	0x000330ec
   26374:	0002f340 	.word	0x0002f340
   26378:	000001cd 	.word	0x000001cd
   2637c:	00032b14 	.word	0x00032b14

00026380 <CTimer::InterruptHandler()>:
   26380:	e92d4070 	push	{r4, r5, r6, lr}
   26384:	e3a03000 	mov	r3, #0
   26388:	e1a04000 	mov	r4, r0
   2638c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   26390:	e59f20f4 	ldr	r2, [pc, #244]	; 2648c <CTimer::InterruptHandler()+0x10c>
   26394:	e5923018 	ldr	r3, [r2, #24]
   26398:	e2833c27 	add	r3, r3, #9984	; 0x2700
   2639c:	e2833010 	add	r3, r3, #16
   263a0:	e5823018 	str	r3, [r2, #24]
   263a4:	e5921004 	ldr	r1, [r2, #4]
   263a8:	e1530001 	cmp	r3, r1
   263ac:	e3a01008 	mov	r1, #8
   263b0:	35923004 	ldrcc	r3, [r2, #4]
   263b4:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   263b8:	32833010 	addcc	r3, r3, #16
   263bc:	35823018 	strcc	r3, [r2, #24]
   263c0:	e59f20c4 	ldr	r2, [pc, #196]	; 2648c <CTimer::InterruptHandler()+0x10c>
   263c4:	e3a03000 	mov	r3, #0
   263c8:	e5821000 	str	r1, [r2]
   263cc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   263d0:	e5900010 	ldr	r0, [r0, #16]
   263d4:	e1500003 	cmp	r0, r3
   263d8:	1a000017 	bne	2643c <CTimer::InterruptHandler()+0xbc>
   263dc:	e5942004 	ldr	r2, [r4, #4]
   263e0:	e59f30a8 	ldr	r3, [pc, #168]	; 26490 <CTimer::InterruptHandler()+0x110>
   263e4:	e2822001 	add	r2, r2, #1
   263e8:	e0831293 	umull	r1, r3, r3, r2
   263ec:	e1a032a3 	lsr	r3, r3, #5
   263f0:	e0833103 	add	r3, r3, r3, lsl #2
   263f4:	e0833103 	add	r3, r3, r3, lsl #2
   263f8:	e0523103 	subs	r3, r2, r3, lsl #2
   263fc:	e5842004 	str	r2, [r4, #4]
   26400:	0a000017 	beq	26464 <CTimer::InterruptHandler()+0xe4>
   26404:	e1a00004 	mov	r0, r4
   26408:	ebffff84 	bl	26220 <CTimer::PollKernelTimers()>
   2640c:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   26410:	e3530000 	cmp	r3, #0
   26414:	08bd8070 	popeq	{r4, r5, r6, pc}
   26418:	e3a05000 	mov	r5, #0
   2641c:	e2846028 	add	r6, r4, #40	; 0x28
   26420:	e4963004 	ldr	r3, [r6], #4
   26424:	e12fff33 	blx	r3
   26428:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   2642c:	e2855001 	add	r5, r5, #1
   26430:	e1530005 	cmp	r3, r5
   26434:	8afffff9 	bhi	26420 <CTimer::InterruptHandler()+0xa0>
   26438:	e8bd8070 	pop	{r4, r5, r6, pc}
   2643c:	eb000898 	bl	286a4 <EnterCritical>
   26440:	e5943004 	ldr	r3, [r4, #4]
   26444:	e59f2048 	ldr	r2, [pc, #72]	; 26494 <CTimer::InterruptHandler()+0x114>
   26448:	e2833001 	add	r3, r3, #1
   2644c:	e0020392 	mul	r2, r2, r3
   26450:	e59f1040 	ldr	r1, [pc, #64]	; 26498 <CTimer::InterruptHandler()+0x118>
   26454:	e5843004 	str	r3, [r4, #4]
   26458:	e1510162 	cmp	r1, r2, ror #2
   2645c:	e5943010 	ldr	r3, [r4, #16]
   26460:	3a000005 	bcc	2647c <CTimer::InterruptHandler()+0xfc>
   26464:	e5942008 	ldr	r2, [r4, #8]
   26468:	e2822001 	add	r2, r2, #1
   2646c:	e5842008 	str	r2, [r4, #8]
   26470:	e594200c 	ldr	r2, [r4, #12]
   26474:	e2822001 	add	r2, r2, #1
   26478:	e584200c 	str	r2, [r4, #12]
   2647c:	e3530000 	cmp	r3, #0
   26480:	0affffdf 	beq	26404 <CTimer::InterruptHandler()+0x84>
   26484:	eb0008b0 	bl	2874c <LeaveCritical>
   26488:	eaffffdd 	b	26404 <CTimer::InterruptHandler()+0x84>
   2648c:	20003000 	.word	0x20003000
   26490:	51eb851f 	.word	0x51eb851f
   26494:	c28f5c29 	.word	0xc28f5c29
   26498:	028f5c28 	.word	0x028f5c28

0002649c <CTimer::InterruptHandler(void*)>:
   2649c:	e3500000 	cmp	r0, #0
   264a0:	0a000000 	beq	264a8 <CTimer::InterruptHandler(void*)+0xc>
   264a4:	eaffffb5 	b	26380 <CTimer::InterruptHandler()>
   264a8:	e92d4010 	push	{r4, lr}
   264ac:	e59f2008 	ldr	r2, [pc, #8]	; 264bc <CTimer::InterruptHandler(void*)+0x20>
   264b0:	e59f1008 	ldr	r1, [pc, #8]	; 264c0 <CTimer::InterruptHandler(void*)+0x24>
   264b4:	e59f0008 	ldr	r0, [pc, #8]	; 264c4 <CTimer::InterruptHandler(void*)+0x28>
   264b8:	ebffdc90 	bl	1d700 <assertion_failed>
   264bc:	00000223 	.word	0x00000223
   264c0:	00032af8 	.word	0x00032af8
   264c4:	0002c8c4 	.word	0x0002c8c4

000264c8 <CTimer::TuneMsDelay()>:
   264c8:	e92d4070 	push	{r4, r5, r6, lr}
   264cc:	e1a05000 	mov	r5, r0
   264d0:	e5900020 	ldr	r0, [r0, #32]
   264d4:	e24dd008 	sub	sp, sp, #8
   264d8:	e0603280 	rsb	r3, r0, r0, lsl #5
   264dc:	e0800103 	add	r0, r0, r3, lsl #2
   264e0:	e1a00180 	lsl	r0, r0, #3
   264e4:	e5954004 	ldr	r4, [r5, #4]
   264e8:	eb000c4e 	bl	29628 <DelayLoop>
   264ec:	e5951004 	ldr	r1, [r5, #4]
   264f0:	e59f0068 	ldr	r0, [pc, #104]	; 26560 <CTimer::TuneMsDelay()+0x98>
   264f4:	e0411004 	sub	r1, r1, r4
   264f8:	eb001161 	bl	2aa84 <__udivsi3>
   264fc:	e1a06000 	mov	r6, r0
   26500:	e5953020 	ldr	r3, [r5, #32]
   26504:	e59f4058 	ldr	r4, [pc, #88]	; 26564 <CTimer::TuneMsDelay()+0x9c>
   26508:	e0030093 	mul	r3, r3, r0
   2650c:	e0832394 	umull	r2, r3, r4, r3
   26510:	e59f1050 	ldr	r1, [pc, #80]	; 26568 <CTimer::TuneMsDelay()+0xa0>
   26514:	e1a032a3 	lsr	r3, r3, #5
   26518:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   2651c:	e0821291 	umull	r1, r2, r1, r2
   26520:	e1a02322 	lsr	r2, r2, #6
   26524:	e5852024 	str	r2, [r5, #36]	; 0x24
   26528:	e5853020 	str	r3, [r5, #32]
   2652c:	ebffe573 	bl	1fb00 <CLogger::Get()>
   26530:	e0832694 	umull	r2, r3, r4, r6
   26534:	e1a032a3 	lsr	r3, r3, #5
   26538:	e0832103 	add	r2, r3, r3, lsl #2
   2653c:	e0822102 	add	r2, r2, r2, lsl #2
   26540:	e0466102 	sub	r6, r6, r2, lsl #2
   26544:	e88d0048 	stm	sp, {r3, r6}
   26548:	e3a02003 	mov	r2, #3
   2654c:	e59f3018 	ldr	r3, [pc, #24]	; 2656c <CTimer::TuneMsDelay()+0xa4>
   26550:	e59f1018 	ldr	r1, [pc, #24]	; 26570 <CTimer::TuneMsDelay()+0xa8>
   26554:	ebffe4ab 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26558:	e28dd008 	add	sp, sp, #8
   2655c:	e8bd8070 	pop	{r4, r5, r6, pc}
   26560:	00002710 	.word	0x00002710
   26564:	51eb851f 	.word	0x51eb851f
   26568:	10624dd3 	.word	0x10624dd3
   2656c:	00032bc8 	.word	0x00032bc8
   26570:	00032c74 	.word	0x00032c74

00026574 <CTimer::Initialize()>:
   26574:	e92d4070 	push	{r4, r5, r6, lr}
   26578:	e1a04000 	mov	r4, r0
   2657c:	e5900000 	ldr	r0, [r0]
   26580:	e3500000 	cmp	r0, #0
   26584:	0a000011 	beq	265d0 <CTimer::Initialize()+0x5c>
   26588:	e1a03004 	mov	r3, r4
   2658c:	e3a01003 	mov	r1, #3
   26590:	e59f2048 	ldr	r2, [pc, #72]	; 265e0 <CTimer::Initialize()+0x6c>
   26594:	eb000940 	bl	28a9c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   26598:	e3a05000 	mov	r5, #0
   2659c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   265a0:	e59f203c 	ldr	r2, [pc, #60]	; 265e4 <CTimer::Initialize()+0x70>
   265a4:	e59f303c 	ldr	r3, [pc, #60]	; 265e8 <CTimer::Initialize()+0x74>
   265a8:	e1a00004 	mov	r0, r4
   265ac:	e5823004 	str	r3, [r2, #4]
   265b0:	e5923004 	ldr	r3, [r2, #4]
   265b4:	e2833c27 	add	r3, r3, #9984	; 0x2700
   265b8:	e2833010 	add	r3, r3, #16
   265bc:	e5823018 	str	r3, [r2, #24]
   265c0:	ebffffc0 	bl	264c8 <CTimer::TuneMsDelay()>
   265c4:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   265c8:	e3a00001 	mov	r0, #1
   265cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   265d0:	e3a02065 	mov	r2, #101	; 0x65
   265d4:	e59f1010 	ldr	r1, [pc, #16]	; 265ec <CTimer::Initialize()+0x78>
   265d8:	e59f0010 	ldr	r0, [pc, #16]	; 265f0 <CTimer::Initialize()+0x7c>
   265dc:	ebffdc47 	bl	1d700 <assertion_failed>
   265e0:	0002649c 	.word	0x0002649c
   265e4:	20003000 	.word	0x20003000
   265e8:	fe363c80 	.word	0xfe363c80
   265ec:	00032af8 	.word	0x00032af8
   265f0:	0002cf38 	.word	0x0002cf38

000265f4 <CTimer::RegisterPeriodicHandler(void (*)())>:
   265f4:	e3510000 	cmp	r1, #0
   265f8:	e92d4010 	push	{r4, lr}
   265fc:	0a00000b 	beq	26630 <CTimer::RegisterPeriodicHandler(void (*)())+0x3c>
   26600:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   26604:	e3530003 	cmp	r3, #3
   26608:	8a00000c 	bhi	26640 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   2660c:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   26610:	e3a02000 	mov	r2, #0
   26614:	e283300a 	add	r3, r3, #10
   26618:	e7801103 	str	r1, [r0, r3, lsl #2]
   2661c:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   26620:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   26624:	e2833001 	add	r3, r3, #1
   26628:	e5803038 	str	r3, [r0, #56]	; 0x38
   2662c:	e8bd8010 	pop	{r4, pc}
   26630:	e59f2018 	ldr	r2, [pc, #24]	; 26650 <CTimer::RegisterPeriodicHandler(void (*)())+0x5c>
   26634:	e59f1018 	ldr	r1, [pc, #24]	; 26654 <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   26638:	e59f0018 	ldr	r0, [pc, #24]	; 26658 <CTimer::RegisterPeriodicHandler(void (*)())+0x64>
   2663c:	ebffdc2f 	bl	1d700 <assertion_failed>
   26640:	e59f2014 	ldr	r2, [pc, #20]	; 2665c <CTimer::RegisterPeriodicHandler(void (*)())+0x68>
   26644:	e59f1008 	ldr	r1, [pc, #8]	; 26654 <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   26648:	e59f0010 	ldr	r0, [pc, #16]	; 26660 <CTimer::RegisterPeriodicHandler(void (*)())+0x6c>
   2664c:	ebffdc2b 	bl	1d700 <assertion_failed>
   26650:	00000239 	.word	0x00000239
   26654:	00032af8 	.word	0x00032af8
   26658:	000330ec 	.word	0x000330ec
   2665c:	0000023b 	.word	0x0000023b
   26660:	00032be0 	.word	0x00032be0

00026664 <CTimer::SimpleMsDelay(unsigned int)>:
   26664:	e3500000 	cmp	r0, #0
   26668:	012fff1e 	bxeq	lr
   2666c:	e0603280 	rsb	r3, r0, r0, lsl #5
   26670:	e0800103 	add	r0, r0, r3, lsl #2
   26674:	e1b00180 	lsls	r0, r0, #3
   26678:	012fff1e 	bxeq	lr
   2667c:	eafffce2 	b	25a0c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

00026680 <CTimer::SimpleusDelay(unsigned int)>:
   26680:	e3500000 	cmp	r0, #0
   26684:	012fff1e 	bxeq	lr
   26688:	eafffcdf 	b	25a0c <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>

0002668c <CTimer::IsLeapYear(unsigned int)>:
   2668c:	e59f3030 	ldr	r3, [pc, #48]	; 266c4 <CTimer::IsLeapYear(unsigned int)+0x38>
   26690:	e59f2030 	ldr	r2, [pc, #48]	; 266c8 <CTimer::IsLeapYear(unsigned int)+0x3c>
   26694:	e0030093 	mul	r3, r3, r0
   26698:	e1520163 	cmp	r2, r3, ror #2
   2669c:	2a000003 	bcs	266b0 <CTimer::IsLeapYear(unsigned int)+0x24>
   266a0:	e3100003 	tst	r0, #3
   266a4:	03a00001 	moveq	r0, #1
   266a8:	13a00000 	movne	r0, #0
   266ac:	e12fff1e 	bx	lr
   266b0:	e59f2014 	ldr	r2, [pc, #20]	; 266cc <CTimer::IsLeapYear(unsigned int)+0x40>
   266b4:	e1520263 	cmp	r2, r3, ror #4
   266b8:	23a00001 	movcs	r0, #1
   266bc:	33a00000 	movcc	r0, #0
   266c0:	e12fff1e 	bx	lr
   266c4:	c28f5c29 	.word	0xc28f5c29
   266c8:	028f5c28 	.word	0x028f5c28
   266cc:	00a3d70a 	.word	0x00a3d70a

000266d0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   266d0:	e3500001 	cmp	r0, #1
   266d4:	0a000002 	beq	266e4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   266d8:	e59f3048 	ldr	r3, [pc, #72]	; 26728 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x58>
   266dc:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   266e0:	e12fff1e 	bx	lr
   266e4:	e59f3040 	ldr	r3, [pc, #64]	; 2672c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x5c>
   266e8:	e59f2040 	ldr	r2, [pc, #64]	; 26730 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
   266ec:	e0030193 	mul	r3, r3, r1
   266f0:	e1520163 	cmp	r2, r3, ror #2
   266f4:	2a000006 	bcs	26714 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
   266f8:	e3110003 	tst	r1, #3
   266fc:	03a03001 	moveq	r3, #1
   26700:	13a03000 	movne	r3, #0
   26704:	e3530000 	cmp	r3, #0
   26708:	0afffff2 	beq	266d8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   2670c:	e3a0001d 	mov	r0, #29
   26710:	e12fff1e 	bx	lr
   26714:	e59f2018 	ldr	r2, [pc, #24]	; 26734 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x64>
   26718:	e1520263 	cmp	r2, r3, ror #4
   2671c:	23a03001 	movcs	r3, #1
   26720:	33a03000 	movcc	r3, #0
   26724:	eafffff6 	b	26704 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x34>
   26728:	00032c44 	.word	0x00032c44
   2672c:	c28f5c29 	.word	0xc28f5c29
   26730:	028f5c28 	.word	0x028f5c28
   26734:	00a3d70a 	.word	0x00a3d70a

00026738 <CTimer::Get()>:
   26738:	e59f301c 	ldr	r3, [pc, #28]	; 2675c <CTimer::Get()+0x24>
   2673c:	e5930000 	ldr	r0, [r3]
   26740:	e3500000 	cmp	r0, #0
   26744:	112fff1e 	bxne	lr
   26748:	e3a02f9f 	mov	r2, #636	; 0x27c
   2674c:	e92d4010 	push	{r4, lr}
   26750:	e59f1008 	ldr	r1, [pc, #8]	; 26760 <CTimer::Get()+0x28>
   26754:	e59f0008 	ldr	r0, [pc, #8]	; 26764 <CTimer::Get()+0x2c>
   26758:	ebffdbe8 	bl	1d700 <assertion_failed>
   2675c:	00034c50 	.word	0x00034c50
   26760:	00032af8 	.word	0x00032af8
   26764:	0002c704 	.word	0x0002c704

00026768 <memset>:
   26768:	e352000f 	cmp	r2, #15
   2676c:	e200c003 	and	ip, r0, #3
   26770:	93a03000 	movls	r3, #0
   26774:	83a03001 	movhi	r3, #1
   26778:	e35c0000 	cmp	ip, #0
   2677c:	13a03000 	movne	r3, #0
   26780:	e3530000 	cmp	r3, #0
   26784:	1a000008 	bne	267ac <memset+0x44>
   26788:	e3520000 	cmp	r2, #0
   2678c:	e1a03000 	mov	r3, r0
   26790:	012fff1e 	bxeq	lr
   26794:	e6af1071 	sxtb	r1, r1
   26798:	e0802002 	add	r2, r0, r2
   2679c:	e4c31001 	strb	r1, [r3], #1
   267a0:	e1530002 	cmp	r3, r2
   267a4:	1afffffc 	bne	2679c <memset+0x34>
   267a8:	e12fff1e 	bx	lr
   267ac:	e2423010 	sub	r3, r2, #16
   267b0:	e3c3c00f 	bic	ip, r3, #15
   267b4:	e92d4010 	push	{r4, lr}
   267b8:	e2804020 	add	r4, r0, #32
   267bc:	e181e401 	orr	lr, r1, r1, lsl #8
   267c0:	e084400c 	add	r4, r4, ip
   267c4:	e1a03223 	lsr	r3, r3, #4
   267c8:	e18ee80e 	orr	lr, lr, lr, lsl #16
   267cc:	e280c010 	add	ip, r0, #16
   267d0:	e50ce010 	str	lr, [ip, #-16]
   267d4:	e50ce00c 	str	lr, [ip, #-12]
   267d8:	e50ce008 	str	lr, [ip, #-8]
   267dc:	e50ce004 	str	lr, [ip, #-4]
   267e0:	e28cc010 	add	ip, ip, #16
   267e4:	e15c0004 	cmp	ip, r4
   267e8:	1afffff8 	bne	267d0 <memset+0x68>
   267ec:	e202200f 	and	r2, r2, #15
   267f0:	e2833001 	add	r3, r3, #1
   267f4:	e3520000 	cmp	r2, #0
   267f8:	e0803203 	add	r3, r0, r3, lsl #4
   267fc:	08bd8010 	popeq	{r4, pc}
   26800:	e6af1071 	sxtb	r1, r1
   26804:	e0832002 	add	r2, r3, r2
   26808:	e4c31001 	strb	r1, [r3], #1
   2680c:	e1530002 	cmp	r3, r2
   26810:	1afffffc 	bne	26808 <memset+0xa0>
   26814:	e8bd8010 	pop	{r4, pc}

00026818 <memmove>:
   26818:	e1500001 	cmp	r0, r1
   2681c:	9a000002 	bls	2682c <memmove+0x14>
   26820:	e0813002 	add	r3, r1, r2
   26824:	e1530000 	cmp	r3, r0
   26828:	8a000000 	bhi	26830 <memmove+0x18>
   2682c:	ea000216 	b	2708c <memcpy>
   26830:	e3520000 	cmp	r2, #0
   26834:	e0802002 	add	r2, r0, r2
   26838:	012fff1e 	bxeq	lr
   2683c:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   26840:	e1510003 	cmp	r1, r3
   26844:	e562c001 	strb	ip, [r2, #-1]!
   26848:	1afffffb 	bne	2683c <memmove+0x24>
   2684c:	e12fff1e 	bx	lr

00026850 <memcmp>:
   26850:	e3520000 	cmp	r2, #0
   26854:	e242c001 	sub	ip, r2, #1
   26858:	0a00000c 	beq	26890 <memcmp+0x40>
   2685c:	e080c00c 	add	ip, r0, ip
   26860:	e2411001 	sub	r1, r1, #1
   26864:	e2400001 	sub	r0, r0, #1
   26868:	ea000002 	b	26878 <memcmp+0x28>
   2686c:	3a000009 	bcc	26898 <memcmp+0x48>
   26870:	e150000c 	cmp	r0, ip
   26874:	0a000005 	beq	26890 <memcmp+0x40>
   26878:	e5f02001 	ldrb	r2, [r0, #1]!
   2687c:	e5f13001 	ldrb	r3, [r1, #1]!
   26880:	e1520003 	cmp	r2, r3
   26884:	9afffff8 	bls	2686c <memcmp+0x1c>
   26888:	e3a00001 	mov	r0, #1
   2688c:	e12fff1e 	bx	lr
   26890:	e3a00000 	mov	r0, #0
   26894:	e12fff1e 	bx	lr
   26898:	e3e00000 	mvn	r0, #0
   2689c:	e12fff1e 	bx	lr

000268a0 <strlen>:
   268a0:	e0d030d1 	ldrsb	r3, [r0], #1
   268a4:	e3530000 	cmp	r3, #0
   268a8:	0a000004 	beq	268c0 <strlen+0x20>
   268ac:	e3a03000 	mov	r3, #0
   268b0:	e0d020d1 	ldrsb	r2, [r0], #1
   268b4:	e2833001 	add	r3, r3, #1
   268b8:	e3520000 	cmp	r2, #0
   268bc:	1afffffb 	bne	268b0 <strlen+0x10>
   268c0:	e1a00003 	mov	r0, r3
   268c4:	e12fff1e 	bx	lr

000268c8 <strcmp>:
   268c8:	e1d030d0 	ldrsb	r3, [r0]
   268cc:	e3530000 	cmp	r3, #0
   268d0:	1a000006 	bne	268f0 <strcmp+0x28>
   268d4:	ea000016 	b	26934 <strcmp+0x6c>
   268d8:	e1520003 	cmp	r2, r3
   268dc:	ba00000c 	blt	26914 <strcmp+0x4c>
   268e0:	ca00000d 	bgt	2691c <strcmp+0x54>
   268e4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   268e8:	e3530000 	cmp	r3, #0
   268ec:	0a00000c 	beq	26924 <strcmp+0x5c>
   268f0:	e1a0c001 	mov	ip, r1
   268f4:	e0d120d1 	ldrsb	r2, [r1], #1
   268f8:	e3520000 	cmp	r2, #0
   268fc:	1afffff5 	bne	268d8 <strcmp+0x10>
   26900:	e1530002 	cmp	r3, r2
   26904:	ca000002 	bgt	26914 <strcmp+0x4c>
   26908:	b3e00000 	mvnlt	r0, #0
   2690c:	a3a00000 	movge	r0, #0
   26910:	e12fff1e 	bx	lr
   26914:	e3a00001 	mov	r0, #1
   26918:	e12fff1e 	bx	lr
   2691c:	e3e00000 	mvn	r0, #0
   26920:	e12fff1e 	bx	lr
   26924:	e1dc20d1 	ldrsb	r2, [ip, #1]
   26928:	e1530002 	cmp	r3, r2
   2692c:	dafffff5 	ble	26908 <strcmp+0x40>
   26930:	eafffff7 	b	26914 <strcmp+0x4c>
   26934:	e1d120d0 	ldrsb	r2, [r1]
   26938:	eafffff0 	b	26900 <strcmp+0x38>

0002693c <strcasecmp>:
   2693c:	e2400001 	sub	r0, r0, #1
   26940:	ea000009 	b	2696c <strcasecmp+0x30>
   26944:	e0d130d1 	ldrsb	r3, [r1], #1
   26948:	e243c061 	sub	ip, r3, #97	; 0x61
   2694c:	e35c0019 	cmp	ip, #25
   26950:	92433020 	subls	r3, r3, #32
   26954:	9a000001 	bls	26960 <strcasecmp+0x24>
   26958:	e3530000 	cmp	r3, #0
   2695c:	0a000012 	beq	269ac <strcasecmp+0x70>
   26960:	e1520003 	cmp	r2, r3
   26964:	ca000012 	bgt	269b4 <strcasecmp+0x78>
   26968:	ba000013 	blt	269bc <strcasecmp+0x80>
   2696c:	e1f020d1 	ldrsb	r2, [r0, #1]!
   26970:	e2423061 	sub	r3, r2, #97	; 0x61
   26974:	e3530019 	cmp	r3, #25
   26978:	92422020 	subls	r2, r2, #32
   2697c:	9afffff0 	bls	26944 <strcasecmp+0x8>
   26980:	e3520000 	cmp	r2, #0
   26984:	1affffee 	bne	26944 <strcasecmp+0x8>
   26988:	e1d130d0 	ldrsb	r3, [r1]
   2698c:	e2431061 	sub	r1, r3, #97	; 0x61
   26990:	e3510019 	cmp	r1, #25
   26994:	92433020 	subls	r3, r3, #32
   26998:	8a000003 	bhi	269ac <strcasecmp+0x70>
   2699c:	e1530002 	cmp	r3, r2
   269a0:	d3a00000 	movle	r0, #0
   269a4:	c3e00000 	mvngt	r0, #0
   269a8:	e12fff1e 	bx	lr
   269ac:	e1530002 	cmp	r3, r2
   269b0:	aafffff9 	bge	2699c <strcasecmp+0x60>
   269b4:	e3a00001 	mov	r0, #1
   269b8:	e12fff1e 	bx	lr
   269bc:	e3e00000 	mvn	r0, #0
   269c0:	e12fff1e 	bx	lr

000269c4 <strncmp>:
   269c4:	e3520000 	cmp	r2, #0
   269c8:	0a000015 	beq	26a24 <strncmp+0x60>
   269cc:	e240c001 	sub	ip, r0, #1
   269d0:	e0810002 	add	r0, r1, r2
   269d4:	ea000007 	b	269f8 <strncmp+0x34>
   269d8:	e0d120d1 	ldrsb	r2, [r1], #1
   269dc:	e3520000 	cmp	r2, #0
   269e0:	0a000008 	beq	26a08 <strncmp+0x44>
   269e4:	e1530002 	cmp	r3, r2
   269e8:	ca00000b 	bgt	26a1c <strncmp+0x58>
   269ec:	ba00000e 	blt	26a2c <strncmp+0x68>
   269f0:	e1510000 	cmp	r1, r0
   269f4:	0a00000a 	beq	26a24 <strncmp+0x60>
   269f8:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   269fc:	e3530000 	cmp	r3, #0
   26a00:	1afffff4 	bne	269d8 <strncmp+0x14>
   26a04:	e1d120d0 	ldrsb	r2, [r1]
   26a08:	e1520003 	cmp	r2, r3
   26a0c:	ba000002 	blt	26a1c <strncmp+0x58>
   26a10:	c3e00000 	mvngt	r0, #0
   26a14:	d3a00000 	movle	r0, #0
   26a18:	e12fff1e 	bx	lr
   26a1c:	e3a00001 	mov	r0, #1
   26a20:	e12fff1e 	bx	lr
   26a24:	e3a00000 	mov	r0, #0
   26a28:	e12fff1e 	bx	lr
   26a2c:	e3e00000 	mvn	r0, #0
   26a30:	e12fff1e 	bx	lr

00026a34 <strncasecmp>:
   26a34:	e3520000 	cmp	r2, #0
   26a38:	0a00001e 	beq	26ab8 <strncasecmp+0x84>
   26a3c:	e240c001 	sub	ip, r0, #1
   26a40:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   26a44:	e2430061 	sub	r0, r3, #97	; 0x61
   26a48:	e3500019 	cmp	r0, #25
   26a4c:	92433020 	subls	r3, r3, #32
   26a50:	8a00000e 	bhi	26a90 <strncasecmp+0x5c>
   26a54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   26a58:	e0d100d1 	ldrsb	r0, [r1], #1
   26a5c:	e240e061 	sub	lr, r0, #97	; 0x61
   26a60:	e35e0019 	cmp	lr, #25
   26a64:	92400020 	subls	r0, r0, #32
   26a68:	9a000014 	bls	26ac0 <strncasecmp+0x8c>
   26a6c:	e3500000 	cmp	r0, #0
   26a70:	1a000012 	bne	26ac0 <strncasecmp+0x8c>
   26a74:	e1530000 	cmp	r3, r0
   26a78:	ca000022 	bgt	26b08 <strncasecmp+0xd4>
   26a7c:	e1500003 	cmp	r0, r3
   26a80:	d3a02000 	movle	r2, #0
   26a84:	c3e02000 	mvngt	r2, #0
   26a88:	e1a00002 	mov	r0, r2
   26a8c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   26a90:	e3530000 	cmp	r3, #0
   26a94:	1affffee 	bne	26a54 <strncasecmp+0x20>
   26a98:	e1d100d0 	ldrsb	r0, [r1]
   26a9c:	e2402061 	sub	r2, r0, #97	; 0x61
   26aa0:	e3520019 	cmp	r2, #25
   26aa4:	92400020 	subls	r0, r0, #32
   26aa8:	8a00001c 	bhi	26b20 <strncasecmp+0xec>
   26aac:	e1500003 	cmp	r0, r3
   26ab0:	d3a02000 	movle	r2, #0
   26ab4:	c3e02000 	mvngt	r2, #0
   26ab8:	e1a00002 	mov	r0, r2
   26abc:	e12fff1e 	bx	lr
   26ac0:	e1530000 	cmp	r3, r0
   26ac4:	ca00000f 	bgt	26b08 <strncasecmp+0xd4>
   26ac8:	ba000011 	blt	26b14 <strncasecmp+0xe0>
   26acc:	e2522001 	subs	r2, r2, #1
   26ad0:	0affffec 	beq	26a88 <strncasecmp+0x54>
   26ad4:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   26ad8:	e2430061 	sub	r0, r3, #97	; 0x61
   26adc:	e3500019 	cmp	r0, #25
   26ae0:	92433020 	subls	r3, r3, #32
   26ae4:	9affffdb 	bls	26a58 <strncasecmp+0x24>
   26ae8:	e3530000 	cmp	r3, #0
   26aec:	1affffd9 	bne	26a58 <strncasecmp+0x24>
   26af0:	e1d100d0 	ldrsb	r0, [r1]
   26af4:	e2402061 	sub	r2, r0, #97	; 0x61
   26af8:	e3520019 	cmp	r2, #25
   26afc:	92400020 	subls	r0, r0, #32
   26b00:	9affffdd 	bls	26a7c <strncasecmp+0x48>
   26b04:	eaffffda 	b	26a74 <strncasecmp+0x40>
   26b08:	e3a02001 	mov	r2, #1
   26b0c:	e1a00002 	mov	r0, r2
   26b10:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   26b14:	e3e02000 	mvn	r2, #0
   26b18:	e1a00002 	mov	r0, r2
   26b1c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   26b20:	e1530000 	cmp	r3, r0
   26b24:	c3a02001 	movgt	r2, #1
   26b28:	daffffdf 	ble	26aac <strncasecmp+0x78>
   26b2c:	eaffffe1 	b	26ab8 <strncasecmp+0x84>

00026b30 <strcpy>:
   26b30:	e1d130d0 	ldrsb	r3, [r1]
   26b34:	e1a02000 	mov	r2, r0
   26b38:	e3530000 	cmp	r3, #0
   26b3c:	0a000003 	beq	26b50 <strcpy+0x20>
   26b40:	e4c23001 	strb	r3, [r2], #1
   26b44:	e1f130d1 	ldrsb	r3, [r1, #1]!
   26b48:	e3530000 	cmp	r3, #0
   26b4c:	1afffffb 	bne	26b40 <strcpy+0x10>
   26b50:	e3a03000 	mov	r3, #0
   26b54:	e5c23000 	strb	r3, [r2]
   26b58:	e12fff1e 	bx	lr

00026b5c <strncpy>:
   26b5c:	e3520000 	cmp	r2, #0
   26b60:	012fff1e 	bxeq	lr
   26b64:	e1a0c000 	mov	ip, r0
   26b68:	e2411001 	sub	r1, r1, #1
   26b6c:	e0802002 	add	r2, r0, r2
   26b70:	ea000002 	b	26b80 <strncpy+0x24>
   26b74:	e4cc3001 	strb	r3, [ip], #1
   26b78:	e15c0002 	cmp	ip, r2
   26b7c:	012fff1e 	bxeq	lr
   26b80:	e1f130d1 	ldrsb	r3, [r1, #1]!
   26b84:	e3530000 	cmp	r3, #0
   26b88:	1afffff9 	bne	26b74 <strncpy+0x18>
   26b8c:	e5cc3000 	strb	r3, [ip]
   26b90:	e12fff1e 	bx	lr

00026b94 <strcat>:
   26b94:	e1d030d0 	ldrsb	r3, [r0]
   26b98:	e3530000 	cmp	r3, #0
   26b9c:	e1a03000 	mov	r3, r0
   26ba0:	0a000002 	beq	26bb0 <strcat+0x1c>
   26ba4:	e1f320d1 	ldrsb	r2, [r3, #1]!
   26ba8:	e3520000 	cmp	r2, #0
   26bac:	1afffffc 	bne	26ba4 <strcat+0x10>
   26bb0:	e1d120d0 	ldrsb	r2, [r1]
   26bb4:	e3520000 	cmp	r2, #0
   26bb8:	0a000003 	beq	26bcc <strcat+0x38>
   26bbc:	e4c32001 	strb	r2, [r3], #1
   26bc0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   26bc4:	e3520000 	cmp	r2, #0
   26bc8:	1afffffb 	bne	26bbc <strcat+0x28>
   26bcc:	e3a02000 	mov	r2, #0
   26bd0:	e5c32000 	strb	r2, [r3]
   26bd4:	e12fff1e 	bx	lr

00026bd8 <strchr>:
   26bd8:	e1d030d0 	ldrsb	r3, [r0]
   26bdc:	e3530000 	cmp	r3, #0
   26be0:	0a000004 	beq	26bf8 <strchr+0x20>
   26be4:	e1530001 	cmp	r3, r1
   26be8:	012fff1e 	bxeq	lr
   26bec:	e1f030d1 	ldrsb	r3, [r0, #1]!
   26bf0:	e3530000 	cmp	r3, #0
   26bf4:	1afffffa 	bne	26be4 <strchr+0xc>
   26bf8:	e1a00003 	mov	r0, r3
   26bfc:	e12fff1e 	bx	lr

00026c00 <strstr>:
   26c00:	e1d030d0 	ldrsb	r3, [r0]
   26c04:	e3530000 	cmp	r3, #0
   26c08:	1a000003 	bne	26c1c <strstr+0x1c>
   26c0c:	e1d130d0 	ldrsb	r3, [r1]
   26c10:	e3530000 	cmp	r3, #0
   26c14:	13a00000 	movne	r0, #0
   26c18:	e12fff1e 	bx	lr
   26c1c:	e92d4010 	push	{r4, lr}
   26c20:	e1d140d0 	ldrsb	r4, [r1]
   26c24:	e3540000 	cmp	r4, #0
   26c28:	08bd8010 	popeq	{r4, pc}
   26c2c:	e1a0e001 	mov	lr, r1
   26c30:	e1a03004 	mov	r3, r4
   26c34:	e2402001 	sub	r2, r0, #1
   26c38:	ea000002 	b	26c48 <strstr+0x48>
   26c3c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   26c40:	e3530000 	cmp	r3, #0
   26c44:	08bd8010 	popeq	{r4, pc}
   26c48:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   26c4c:	e15c0003 	cmp	ip, r3
   26c50:	0afffff9 	beq	26c3c <strstr+0x3c>
   26c54:	e1f030d1 	ldrsb	r3, [r0, #1]!
   26c58:	e3530000 	cmp	r3, #0
   26c5c:	1afffff0 	bne	26c24 <strstr+0x24>
   26c60:	e1a00003 	mov	r0, r3
   26c64:	e8bd8010 	pop	{r4, pc}

00026c68 <strtok_r>:
   26c68:	e3500000 	cmp	r0, #0
   26c6c:	0a000027 	beq	26d10 <strtok_r+0xa8>
   26c70:	e1d0c0d0 	ldrsb	ip, [r0]
   26c74:	e35c0000 	cmp	ip, #0
   26c78:	0a00002a 	beq	26d28 <strtok_r+0xc0>
   26c7c:	e92d4030 	push	{r4, r5, lr}
   26c80:	e1d140d0 	ldrsb	r4, [r1]
   26c84:	e3540000 	cmp	r4, #0
   26c88:	0a00000a 	beq	26cb8 <strtok_r+0x50>
   26c8c:	e1a0e001 	mov	lr, r1
   26c90:	e1a03004 	mov	r3, r4
   26c94:	ea000002 	b	26ca4 <strtok_r+0x3c>
   26c98:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   26c9c:	e3530000 	cmp	r3, #0
   26ca0:	0a000004 	beq	26cb8 <strtok_r+0x50>
   26ca4:	e153000c 	cmp	r3, ip
   26ca8:	1afffffa 	bne	26c98 <strtok_r+0x30>
   26cac:	e3540000 	cmp	r4, #0
   26cb0:	e1f0c0d1 	ldrsb	ip, [r0, #1]!
   26cb4:	1afffff4 	bne	26c8c <strtok_r+0x24>
   26cb8:	e35c0000 	cmp	ip, #0
   26cbc:	11a05000 	movne	r5, r0
   26cc0:	0a00001b 	beq	26d34 <strtok_r+0xcc>
   26cc4:	e3540000 	cmp	r4, #0
   26cc8:	0a00000b 	beq	26cfc <strtok_r+0x94>
   26ccc:	e1a03004 	mov	r3, r4
   26cd0:	e1a0e001 	mov	lr, r1
   26cd4:	ea000002 	b	26ce4 <strtok_r+0x7c>
   26cd8:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   26cdc:	e3530000 	cmp	r3, #0
   26ce0:	0a000005 	beq	26cfc <strtok_r+0x94>
   26ce4:	e153000c 	cmp	r3, ip
   26ce8:	1afffffa 	bne	26cd8 <strtok_r+0x70>
   26cec:	e3a03000 	mov	r3, #0
   26cf0:	e4c53001 	strb	r3, [r5], #1
   26cf4:	e5825000 	str	r5, [r2]
   26cf8:	e8bd8030 	pop	{r4, r5, pc}
   26cfc:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
   26d00:	e35c0000 	cmp	ip, #0
   26d04:	1affffee 	bne	26cc4 <strtok_r+0x5c>
   26d08:	e5825000 	str	r5, [r2]
   26d0c:	e8bd8030 	pop	{r4, r5, pc}
   26d10:	e5920000 	ldr	r0, [r2]
   26d14:	e3500000 	cmp	r0, #0
   26d18:	012fff1e 	bxeq	lr
   26d1c:	e1d0c0d0 	ldrsb	ip, [r0]
   26d20:	e35c0000 	cmp	ip, #0
   26d24:	1affffd4 	bne	26c7c <strtok_r+0x14>
   26d28:	e3a00000 	mov	r0, #0
   26d2c:	e5820000 	str	r0, [r2]
   26d30:	e12fff1e 	bx	lr
   26d34:	e3a00000 	mov	r0, #0
   26d38:	e5820000 	str	r0, [r2]
   26d3c:	e8bd8030 	pop	{r4, r5, pc}

00026d40 <strtoul>:
   26d40:	e3510000 	cmp	r1, #0
   26d44:	e2423002 	sub	r3, r2, #2
   26d48:	15810000 	strne	r0, [r1]
   26d4c:	e3520000 	cmp	r2, #0
   26d50:	13530022 	cmpne	r3, #34	; 0x22
   26d54:	8a000044 	bhi	26e6c <strtoul+0x12c>
   26d58:	e92d4070 	push	{r4, r5, r6, lr}
   26d5c:	e1a0e000 	mov	lr, r0
   26d60:	e1de30d0 	ldrsb	r3, [lr]
   26d64:	e1a0c00e 	mov	ip, lr
   26d68:	e2430009 	sub	r0, r3, #9
   26d6c:	e3530020 	cmp	r3, #32
   26d70:	e28ee001 	add	lr, lr, #1
   26d74:	e6ef0070 	uxtb	r0, r0
   26d78:	0afffff8 	beq	26d60 <strtoul+0x20>
   26d7c:	e3500004 	cmp	r0, #4
   26d80:	9afffff6 	bls	26d60 <strtoul+0x20>
   26d84:	e353002b 	cmp	r3, #43	; 0x2b
   26d88:	0a000027 	beq	26e2c <strtoul+0xec>
   26d8c:	e353002d 	cmp	r3, #45	; 0x2d
   26d90:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   26d94:	03a06001 	moveq	r6, #1
   26d98:	01a0c00e 	moveq	ip, lr
   26d9c:	13a06000 	movne	r6, #0
   26da0:	e3530030 	cmp	r3, #48	; 0x30
   26da4:	0a000025 	beq	26e40 <strtoul+0x100>
   26da8:	e3520000 	cmp	r2, #0
   26dac:	03a0200a 	moveq	r2, #10
   26db0:	e353002f 	cmp	r3, #47	; 0x2f
   26db4:	e1a0e003 	mov	lr, r3
   26db8:	da00003c 	ble	26eb0 <strtoul+0x170>
   26dbc:	e3a05001 	mov	r5, #1
   26dc0:	e3a04000 	mov	r4, #0
   26dc4:	ea000008 	b	26dec <strtoul+0xac>
   26dc8:	e020e294 	mla	r0, r4, r2, lr
   26dcc:	e1500004 	cmp	r0, r4
   26dd0:	3a00002b 	bcc	26e84 <strtoul+0x144>
   26dd4:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   26dd8:	e3a05000 	mov	r5, #0
   26ddc:	e35e002f 	cmp	lr, #47	; 0x2f
   26de0:	e1a0300e 	mov	r3, lr
   26de4:	da00002b 	ble	26e98 <strtoul+0x158>
   26de8:	e1a04000 	mov	r4, r0
   26dec:	e2433061 	sub	r3, r3, #97	; 0x61
   26df0:	e3530019 	cmp	r3, #25
   26df4:	924ee020 	subls	lr, lr, #32
   26df8:	e35e0040 	cmp	lr, #64	; 0x40
   26dfc:	c24ee007 	subgt	lr, lr, #7
   26e00:	e24ee030 	sub	lr, lr, #48	; 0x30
   26e04:	e15e0002 	cmp	lr, r2
   26e08:	baffffee 	blt	26dc8 <strtoul+0x88>
   26e0c:	e1a00004 	mov	r0, r4
   26e10:	e2255001 	eor	r5, r5, #1
   26e14:	e3510000 	cmp	r1, #0
   26e18:	e0055006 	and	r5, r5, r6
   26e1c:	1581c000 	strne	ip, [r1]
   26e20:	e3550000 	cmp	r5, #0
   26e24:	12600000 	rsbne	r0, r0, #0
   26e28:	e8bd8070 	pop	{r4, r5, r6, pc}
   26e2c:	e1dc30d1 	ldrsb	r3, [ip, #1]
   26e30:	e3a06000 	mov	r6, #0
   26e34:	e3530030 	cmp	r3, #48	; 0x30
   26e38:	e1a0c00e 	mov	ip, lr
   26e3c:	1affffd9 	bne	26da8 <strtoul+0x68>
   26e40:	e1dc30d1 	ldrsb	r3, [ip, #1]
   26e44:	e28ce001 	add	lr, ip, #1
   26e48:	e3c30020 	bic	r0, r3, #32
   26e4c:	e3500058 	cmp	r0, #88	; 0x58
   26e50:	1a000007 	bne	26e74 <strtoul+0x134>
   26e54:	e3d23010 	bics	r3, r2, #16
   26e58:	1a000012 	bne	26ea8 <strtoul+0x168>
   26e5c:	e1dc30d2 	ldrsb	r3, [ip, #2]
   26e60:	e3a02010 	mov	r2, #16
   26e64:	e28cc002 	add	ip, ip, #2
   26e68:	eaffffd0 	b	26db0 <strtoul+0x70>
   26e6c:	e3a00000 	mov	r0, #0
   26e70:	e12fff1e 	bx	lr
   26e74:	e3520000 	cmp	r2, #0
   26e78:	e1a0c00e 	mov	ip, lr
   26e7c:	03a02008 	moveq	r2, #8
   26e80:	eaffffca 	b	26db0 <strtoul+0x70>
   26e84:	e3510000 	cmp	r1, #0
   26e88:	0a000004 	beq	26ea0 <strtoul+0x160>
   26e8c:	e3e00000 	mvn	r0, #0
   26e90:	e581c000 	str	ip, [r1]
   26e94:	e8bd8070 	pop	{r4, r5, r6, pc}
   26e98:	e3a05001 	mov	r5, #1
   26e9c:	eaffffdc 	b	26e14 <strtoul+0xd4>
   26ea0:	e3e00000 	mvn	r0, #0
   26ea4:	e8bd8070 	pop	{r4, r5, r6, pc}
   26ea8:	e3a00000 	mov	r0, #0
   26eac:	e8bd8070 	pop	{r4, r5, r6, pc}
   26eb0:	e3510000 	cmp	r1, #0
   26eb4:	0afffffb 	beq	26ea8 <strtoul+0x168>
   26eb8:	e3a00000 	mov	r0, #0
   26ebc:	e581c000 	str	ip, [r1]
   26ec0:	e8bd8070 	pop	{r4, r5, r6, pc}

00026ec4 <strtoull>:
   26ec4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26ec8:	e2423002 	sub	r3, r2, #2
   26ecc:	e251e000 	subs	lr, r1, #0
   26ed0:	158e0000 	strne	r0, [lr]
   26ed4:	e3520000 	cmp	r2, #0
   26ed8:	13530022 	cmpne	r3, #34	; 0x22
   26edc:	8a00004f 	bhi	27020 <strtoull+0x15c>
   26ee0:	e1a01000 	mov	r1, r0
   26ee4:	e1d130d0 	ldrsb	r3, [r1]
   26ee8:	e1a0c001 	mov	ip, r1
   26eec:	e2430009 	sub	r0, r3, #9
   26ef0:	e3530020 	cmp	r3, #32
   26ef4:	e2811001 	add	r1, r1, #1
   26ef8:	e6ef0070 	uxtb	r0, r0
   26efc:	0afffff8 	beq	26ee4 <strtoull+0x20>
   26f00:	e3500004 	cmp	r0, #4
   26f04:	9afffff6 	bls	26ee4 <strtoull+0x20>
   26f08:	e353002b 	cmp	r3, #43	; 0x2b
   26f0c:	0a000034 	beq	26fe4 <strtoull+0x120>
   26f10:	e353002d 	cmp	r3, #45	; 0x2d
   26f14:	01dc30d1 	ldrsbeq	r3, [ip, #1]
   26f18:	03a08001 	moveq	r8, #1
   26f1c:	01a0c001 	moveq	ip, r1
   26f20:	13a08000 	movne	r8, #0
   26f24:	e3530030 	cmp	r3, #48	; 0x30
   26f28:	0a000032 	beq	26ff8 <strtoull+0x134>
   26f2c:	e3520000 	cmp	r2, #0
   26f30:	03a0200a 	moveq	r2, #10
   26f34:	e353002f 	cmp	r3, #47	; 0x2f
   26f38:	e1a09003 	mov	r9, r3
   26f3c:	da000049 	ble	27068 <strtoull+0x1a4>
   26f40:	e3a0a001 	mov	sl, #1
   26f44:	e3a04000 	mov	r4, #0
   26f48:	e3a05000 	mov	r5, #0
   26f4c:	e1a06002 	mov	r6, r2
   26f50:	e1a07fc2 	asr	r7, r2, #31
   26f54:	ea00000f 	b	26f98 <strtoull+0xd4>
   26f58:	e0030592 	mul	r3, r2, r5
   26f5c:	e0810492 	umull	r0, r1, r2, r4
   26f60:	e0233794 	mla	r3, r4, r7, r3
   26f64:	e0900009 	adds	r0, r0, r9
   26f68:	e0831001 	add	r1, r3, r1
   26f6c:	e0a11fc9 	adc	r1, r1, r9, asr #31
   26f70:	e1510005 	cmp	r1, r5
   26f74:	01500004 	cmpeq	r0, r4
   26f78:	3a00002f 	bcc	2703c <strtoull+0x178>
   26f7c:	e1fc90d1 	ldrsb	r9, [ip, #1]!
   26f80:	e3a0a000 	mov	sl, #0
   26f84:	e359002f 	cmp	r9, #47	; 0x2f
   26f88:	e1a03009 	mov	r3, r9
   26f8c:	da000030 	ble	27054 <strtoull+0x190>
   26f90:	e1a04000 	mov	r4, r0
   26f94:	e1a05001 	mov	r5, r1
   26f98:	e2433061 	sub	r3, r3, #97	; 0x61
   26f9c:	e3530019 	cmp	r3, #25
   26fa0:	92499020 	subls	r9, r9, #32
   26fa4:	e3590040 	cmp	r9, #64	; 0x40
   26fa8:	c2499007 	subgt	r9, r9, #7
   26fac:	e2499030 	sub	r9, r9, #48	; 0x30
   26fb0:	e1590002 	cmp	r9, r2
   26fb4:	baffffe7 	blt	26f58 <strtoull+0x94>
   26fb8:	e1a00004 	mov	r0, r4
   26fbc:	e1a01005 	mov	r1, r5
   26fc0:	e22aa001 	eor	sl, sl, #1
   26fc4:	e35e0000 	cmp	lr, #0
   26fc8:	e008800a 	and	r8, r8, sl
   26fcc:	158ec000 	strne	ip, [lr]
   26fd0:	e3580000 	cmp	r8, #0
   26fd4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   26fd8:	e2700000 	rsbs	r0, r0, #0
   26fdc:	e2e11000 	rsc	r1, r1, #0
   26fe0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26fe4:	e1dc30d1 	ldrsb	r3, [ip, #1]
   26fe8:	e3a08000 	mov	r8, #0
   26fec:	e3530030 	cmp	r3, #48	; 0x30
   26ff0:	e1a0c001 	mov	ip, r1
   26ff4:	1affffcc 	bne	26f2c <strtoull+0x68>
   26ff8:	e1dc30d1 	ldrsb	r3, [ip, #1]
   26ffc:	e28c0001 	add	r0, ip, #1
   27000:	e3c31020 	bic	r1, r3, #32
   27004:	e3510058 	cmp	r1, #88	; 0x58
   27008:	1a000007 	bne	2702c <strtoull+0x168>
   2700c:	e3d23010 	bics	r3, r2, #16
   27010:	01dc30d2 	ldrsbeq	r3, [ip, #2]
   27014:	03a02010 	moveq	r2, #16
   27018:	028cc002 	addeq	ip, ip, #2
   2701c:	0affffc4 	beq	26f34 <strtoull+0x70>
   27020:	e3a00000 	mov	r0, #0
   27024:	e3a01000 	mov	r1, #0
   27028:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2702c:	e3520000 	cmp	r2, #0
   27030:	e1a0c000 	mov	ip, r0
   27034:	03a02008 	moveq	r2, #8
   27038:	eaffffbd 	b	26f34 <strtoull+0x70>
   2703c:	e35e0000 	cmp	lr, #0
   27040:	0a000005 	beq	2705c <strtoull+0x198>
   27044:	e3e00000 	mvn	r0, #0
   27048:	e3a01000 	mov	r1, #0
   2704c:	e58ec000 	str	ip, [lr]
   27050:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27054:	e3a0a001 	mov	sl, #1
   27058:	eaffffd9 	b	26fc4 <strtoull+0x100>
   2705c:	e3e00000 	mvn	r0, #0
   27060:	e3a01000 	mov	r1, #0
   27064:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27068:	e35e0000 	cmp	lr, #0
   2706c:	e3a00000 	mov	r0, #0
   27070:	e3a01000 	mov	r1, #0
   27074:	158ec000 	strne	ip, [lr]
   27078:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002707c <atoi>:
   2707c:	e3a0200a 	mov	r2, #10
   27080:	e3a01000 	mov	r1, #0
   27084:	eaffff2d 	b	26d40 <strtoul>

00027088 <char2int>:
   27088:	e12fff1e 	bx	lr

0002708c <memcpy>:
   2708c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   27090:	e352007f 	cmp	r2, #127	; 0x7f
   27094:	9a00000b 	bls	270c8 <memcpy+0x3c>
   27098:	e3110003 	tst	r1, #3
   2709c:	1a000009 	bne	270c8 <memcpy+0x3c>
   270a0:	e3100003 	tst	r0, #3
   270a4:	1a000007 	bne	270c8 <memcpy+0x3c>
   270a8:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   270ac:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   270b0:	e2422020 	sub	r2, r2, #32
   270b4:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   270b8:	f5d1f040 	pld	[r1, #64]	; 0x40
   270bc:	e352001f 	cmp	r2, #31
   270c0:	8afffff9 	bhi	270ac <memcpy+0x20>
   270c4:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   270c8:	e3520000 	cmp	r2, #0
   270cc:	0a000003 	beq	270e0 <memcpy+0x54>
   270d0:	e4d13001 	ldrb	r3, [r1], #1
   270d4:	e2522001 	subs	r2, r2, #1
   270d8:	e4c03001 	strb	r3, [r0], #1
   270dc:	1afffffb 	bne	270d0 <memcpy+0x44>
   270e0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   270e4:	e12fff1e 	bx	lr

000270e8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   270e8:	e3a03000 	mov	r3, #0
   270ec:	e3510001 	cmp	r1, #1
   270f0:	91a0c002 	movls	ip, r2
   270f4:	8382c001 	orrhi	ip, r2, #1
   270f8:	e92d4070 	push	{r4, r5, r6, lr}
   270fc:	e1a04000 	mov	r4, r0
   27100:	e59f0128 	ldr	r0, [pc, #296]	; 27230 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x148>
   27104:	e15c0003 	cmp	ip, r3
   27108:	e24dd020 	sub	sp, sp, #32
   2710c:	e5c42004 	strb	r2, [r4, #4]
   27110:	e5841008 	str	r1, [r4, #8]
   27114:	e5840000 	str	r0, [r4]
   27118:	e5843010 	str	r3, [r4, #16]
   2711c:	0a000002 	beq	2712c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
   27120:	e1a00004 	mov	r0, r4
   27124:	e28dd020 	add	sp, sp, #32
   27128:	e8bd8070 	pop	{r4, r5, r6, pc}
   2712c:	e59f5100 	ldr	r5, [pc, #256]	; 27234 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x14c>
   27130:	e5950004 	ldr	r0, [r5, #4]
   27134:	e1500003 	cmp	r0, r3
   27138:	1a00000e 	bne	27178 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x90>
   2713c:	e5956000 	ldr	r6, [r5]
   27140:	e3560000 	cmp	r6, #0
   27144:	0a00000f 	beq	27188 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa0>
   27148:	e3a02000 	mov	r2, #0
   2714c:	e5943008 	ldr	r3, [r4, #8]
   27150:	e7862103 	str	r2, [r6, r3, lsl #2]
   27154:	e5953004 	ldr	r3, [r5, #4]
   27158:	e3530000 	cmp	r3, #0
   2715c:	1a000025 	bne	271f8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x110>
   27160:	e1a00004 	mov	r0, r4
   27164:	e3a01000 	mov	r1, #0
   27168:	eb00003b 	bl	2725c <CVirtualGPIOPin::Write(unsigned int)>
   2716c:	e1a00004 	mov	r0, r4
   27170:	e28dd020 	add	sp, sp, #32
   27174:	e8bd8070 	pop	{r4, r5, r6, pc}
   27178:	eb000549 	bl	286a4 <EnterCritical>
   2717c:	e5956000 	ldr	r6, [r5]
   27180:	e3560000 	cmp	r6, #0
   27184:	1affffef 	bne	27148 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   27188:	e3a00001 	mov	r0, #1
   2718c:	eb000505 	bl	285a8 <CMemorySystem::GetCoherentPage(unsigned int)>
   27190:	e1a03000 	mov	r3, r0
   27194:	e1a01006 	mov	r1, r6
   27198:	e28d0008 	add	r0, sp, #8
   2719c:	e5853000 	str	r3, [r5]
   271a0:	ebffd977 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   271a4:	e3a03004 	mov	r3, #4
   271a8:	e595c000 	ldr	ip, [r5]
   271ac:	e58d3000 	str	r3, [sp]
   271b0:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   271b4:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   271b8:	e3a03010 	mov	r3, #16
   271bc:	e59f1074 	ldr	r1, [pc, #116]	; 27238 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x150>
   271c0:	e28d0008 	add	r0, sp, #8
   271c4:	e28d2010 	add	r2, sp, #16
   271c8:	e58dc01c 	str	ip, [sp, #28]
   271cc:	ebffd978 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   271d0:	e3500000 	cmp	r0, #0
   271d4:	0a000009 	beq	27200 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x118>
   271d8:	e28d0008 	add	r0, sp, #8
   271dc:	ebffd96f 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   271e0:	e5956000 	ldr	r6, [r5]
   271e4:	e3560000 	cmp	r6, #0
   271e8:	1affffd6 	bne	27148 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   271ec:	e5953004 	ldr	r3, [r5, #4]
   271f0:	e3530000 	cmp	r3, #0
   271f4:	0affffd9 	beq	27160 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   271f8:	eb000553 	bl	2874c <LeaveCritical>
   271fc:	eaffffd7 	b	27160 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   27200:	e3a03010 	mov	r3, #16
   27204:	e58d0000 	str	r0, [sp]
   27208:	e59f102c 	ldr	r1, [pc, #44]	; 2723c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x154>
   2720c:	e28d2010 	add	r2, sp, #16
   27210:	e28d0008 	add	r0, sp, #8
   27214:	ebffd966 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   27218:	e3500000 	cmp	r0, #0
   2721c:	159d301c 	ldrne	r3, [sp, #28]
   27220:	05850000 	streq	r0, [r5]
   27224:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   27228:	15853000 	strne	r3, [r5]
   2722c:	eaffffe9 	b	271d8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>
   27230:	00032c84 	.word	0x00032c84
   27234:	00034c54 	.word	0x00034c54
   27238:	00048020 	.word	0x00048020
   2723c:	00040010 	.word	0x00040010

00027240 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   27240:	e12fff1e 	bx	lr

00027244 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   27244:	e92d4010 	push	{r4, lr}
   27248:	e1a04000 	mov	r4, r0
   2724c:	e3a01014 	mov	r1, #20
   27250:	eb000181 	bl	2785c <operator delete(void*, unsigned int)>
   27254:	e1a00004 	mov	r0, r4
   27258:	e8bd8010 	pop	{r4, pc}

0002725c <CVirtualGPIOPin::Write(unsigned int)>:
   2725c:	e92d4070 	push	{r4, r5, r6, lr}
   27260:	e5d03004 	ldrb	r3, [r0, #4]
   27264:	e1a04000 	mov	r4, r0
   27268:	e3530000 	cmp	r3, #0
   2726c:	e1a05001 	mov	r5, r1
   27270:	e24dd028 	sub	sp, sp, #40	; 0x28
   27274:	0a000012 	beq	272c4 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   27278:	e5901008 	ldr	r1, [r0, #8]
   2727c:	e3510000 	cmp	r1, #0
   27280:	1a000033 	bne	27354 <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   27284:	e28d000c 	add	r0, sp, #12
   27288:	ebffd93d 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2728c:	e3a03008 	mov	r3, #8
   27290:	e58d3000 	str	r3, [sp]
   27294:	e3a03014 	mov	r3, #20
   27298:	e3a0c082 	mov	ip, #130	; 0x82
   2729c:	e59f10e0 	ldr	r1, [pc, #224]	; 27384 <CVirtualGPIOPin::Write(unsigned int)+0x128>
   272a0:	e28d000c 	add	r0, sp, #12
   272a4:	e08d2003 	add	r2, sp, r3
   272a8:	e58d5024 	str	r5, [sp, #36]	; 0x24
   272ac:	e58dc020 	str	ip, [sp, #32]
   272b0:	ebffd93f 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   272b4:	e28d000c 	add	r0, sp, #12
   272b8:	ebffd938 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   272bc:	e28dd028 	add	sp, sp, #40	; 0x28
   272c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   272c4:	e5903008 	ldr	r3, [r0, #8]
   272c8:	e3530001 	cmp	r3, #1
   272cc:	8afffffa 	bhi	272bc <CVirtualGPIOPin::Write(unsigned int)+0x60>
   272d0:	e59f60b0 	ldr	r6, [pc, #176]	; 27388 <CVirtualGPIOPin::Write(unsigned int)+0x12c>
   272d4:	e3510001 	cmp	r1, #1
   272d8:	e5962000 	ldr	r2, [r6]
   272dc:	93a03000 	movls	r3, #0
   272e0:	83a03001 	movhi	r3, #1
   272e4:	e3520000 	cmp	r2, #0
   272e8:	03a03001 	moveq	r3, #1
   272ec:	e3530000 	cmp	r3, #0
   272f0:	1afffff1 	bne	272bc <CVirtualGPIOPin::Write(unsigned int)+0x60>
   272f4:	e5960004 	ldr	r0, [r6, #4]
   272f8:	e3500000 	cmp	r0, #0
   272fc:	1a00001e 	bne	2737c <CVirtualGPIOPin::Write(unsigned int)+0x120>
   27300:	e1d421b0 	ldrh	r2, [r4, #16]
   27304:	e1d431b2 	ldrh	r3, [r4, #18]
   27308:	e584500c 	str	r5, [r4, #12]
   2730c:	e0421003 	sub	r1, r2, r3
   27310:	e6bf1071 	sxth	r1, r1
   27314:	e3510000 	cmp	r1, #0
   27318:	da000011 	ble	27364 <CVirtualGPIOPin::Write(unsigned int)+0x108>
   2731c:	e3550000 	cmp	r5, #0
   27320:	02833001 	addeq	r3, r3, #1
   27324:	06ff3073 	uxtheq	r3, r3
   27328:	01c431b2 	strheq	r3, [r4, #18]
   2732c:	1a000003 	bne	27340 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   27330:	e5940008 	ldr	r0, [r4, #8]
   27334:	e5961000 	ldr	r1, [r6]
   27338:	e1833802 	orr	r3, r3, r2, lsl #16
   2733c:	e7813100 	str	r3, [r1, r0, lsl #2]
   27340:	e5963004 	ldr	r3, [r6, #4]
   27344:	e3530000 	cmp	r3, #0
   27348:	0affffdb 	beq	272bc <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2734c:	eb0004fe 	bl	2874c <LeaveCritical>
   27350:	eaffffd9 	b	272bc <CVirtualGPIOPin::Write(unsigned int)+0x60>
   27354:	e59f1030 	ldr	r1, [pc, #48]	; 2738c <CVirtualGPIOPin::Write(unsigned int)+0x130>
   27358:	e3a0205b 	mov	r2, #91	; 0x5b
   2735c:	e2810014 	add	r0, r1, #20
   27360:	ebffd8e6 	bl	1d700 <assertion_failed>
   27364:	e3550000 	cmp	r5, #0
   27368:	0afffff4 	beq	27340 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2736c:	e2822001 	add	r2, r2, #1
   27370:	e6ff2072 	uxth	r2, r2
   27374:	e1c421b0 	strh	r2, [r4, #16]
   27378:	eaffffec 	b	27330 <CVirtualGPIOPin::Write(unsigned int)+0xd4>
   2737c:	eb0004c8 	bl	286a4 <EnterCritical>
   27380:	eaffffde 	b	27300 <CVirtualGPIOPin::Write(unsigned int)+0xa4>
   27384:	00038041 	.word	0x00038041
   27388:	00034c54 	.word	0x00034c54
   2738c:	00032c8c 	.word	0x00032c8c

00027390 <CVirtualGPIOPin::Invert()>:
   27390:	e590100c 	ldr	r1, [r0, #12]
   27394:	e2211001 	eor	r1, r1, #1
   27398:	eaffffaf 	b	2725c <CVirtualGPIOPin::Write(unsigned int)>

0002739c <__static_initialization_and_destruction_0(int, int)>:
   2739c:	e59f3014 	ldr	r3, [pc, #20]	; 273b8 <__static_initialization_and_destruction_0(int, int)+0x1c>
   273a0:	e1510003 	cmp	r1, r3
   273a4:	03500001 	cmpeq	r0, #1
   273a8:	03a02000 	moveq	r2, #0
   273ac:	059f3008 	ldreq	r3, [pc, #8]	; 273bc <__static_initialization_and_destruction_0(int, int)+0x20>
   273b0:	05832004 	streq	r2, [r3, #4]
   273b4:	e12fff1e 	bx	lr
   273b8:	0000ffff 	.word	0x0000ffff
   273bc:	00034c54 	.word	0x00034c54

000273c0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   273c0:	e3a02000 	mov	r2, #0
   273c4:	e59f3004 	ldr	r3, [pc, #4]	; 273d0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   273c8:	e5832004 	str	r2, [r3, #4]
   273cc:	e12fff1e 	bx	lr
   273d0:	00034c54 	.word	0x00034c54

000273d4 <ChainBootStub(void const*, unsigned int)>:
   273d4:	e2811003 	add	r1, r1, #3
   273d8:	e1b01121 	lsrs	r1, r1, #2
   273dc:	0a000007 	beq	27400 <ChainBootStub(void const*, unsigned int)+0x2c>
   273e0:	e1a03000 	mov	r3, r0
   273e4:	e0800101 	add	r0, r0, r1, lsl #2
   273e8:	e263c902 	rsb	ip, r3, #32768	; 0x8000
   273ec:	e083200c 	add	r2, r3, ip
   273f0:	e4931004 	ldr	r1, [r3], #4
   273f4:	e1530000 	cmp	r3, r0
   273f8:	e5821000 	str	r1, [r2]
   273fc:	1afffffa 	bne	273ec <ChainBootStub(void const*, unsigned int)+0x18>
   27400:	e3a03000 	mov	r3, #0
   27404:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   27408:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2740c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   27410:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   27414:	e3a03902 	mov	r3, #32768	; 0x8000
   27418:	e12fff13 	bx	r3

0002741c <EnableChainBoot>:
   2741c:	e92d4010 	push	{r4, lr}
   27420:	e1a0c001 	mov	ip, r1
   27424:	e1a0e000 	mov	lr, r0
   27428:	e59f302c 	ldr	r3, [pc, #44]	; 2745c <EnableChainBoot+0x40>
   2742c:	e3a02b01 	mov	r2, #1024	; 0x400
   27430:	e59f1028 	ldr	r1, [pc, #40]	; 27460 <EnableChainBoot+0x44>
   27434:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   27438:	e583e000 	str	lr, [r3]
   2743c:	e583c004 	str	ip, [r3, #4]
   27440:	ebffff11 	bl	2708c <memcpy>
   27444:	e3a03000 	mov	r3, #0
   27448:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2744c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   27450:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   27454:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   27458:	e8bd8010 	pop	{r4, pc}
   2745c:	00034c5c 	.word	0x00034c5c
   27460:	000273d4 	.word	0x000273d4

00027464 <IsChainBootEnabled>:
   27464:	e59f300c 	ldr	r3, [pc, #12]	; 27478 <IsChainBootEnabled+0x14>
   27468:	e5930000 	ldr	r0, [r3]
   2746c:	e2500000 	subs	r0, r0, #0
   27470:	13a00001 	movne	r0, #1
   27474:	e12fff1e 	bx	lr
   27478:	00034c5c 	.word	0x00034c5c

0002747c <DoChainBoot>:
   2747c:	e59f3008 	ldr	r3, [pc, #8]	; 2748c <DoChainBoot+0x10>
   27480:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   27484:	e1c300d0 	ldrd	r0, [r3]
   27488:	e12fff12 	bx	r2
   2748c:	00034c5c 	.word	0x00034c5c

00027490 <CMACAddress::CMACAddress()>:
   27490:	e3a02000 	mov	r2, #0
   27494:	e5c02000 	strb	r2, [r0]
   27498:	e12fff1e 	bx	lr

0002749c <CMACAddress::~CMACAddress()>:
   2749c:	e12fff1e 	bx	lr

000274a0 <CMACAddress::operator==(CMACAddress const&) const>:
   274a0:	e5d03000 	ldrb	r3, [r0]
   274a4:	e92d4010 	push	{r4, lr}
   274a8:	e3530000 	cmp	r3, #0
   274ac:	0a000009 	beq	274d8 <CMACAddress::operator==(CMACAddress const&) const+0x38>
   274b0:	e5d13000 	ldrb	r3, [r1]
   274b4:	e2800001 	add	r0, r0, #1
   274b8:	e3530000 	cmp	r3, #0
   274bc:	0a000009 	beq	274e8 <CMACAddress::operator==(CMACAddress const&) const+0x48>
   274c0:	e3a02006 	mov	r2, #6
   274c4:	e2811001 	add	r1, r1, #1
   274c8:	ebfffce0 	bl	26850 <memcmp>
   274cc:	e16f0f10 	clz	r0, r0
   274d0:	e1a002a0 	lsr	r0, r0, #5
   274d4:	e8bd8010 	pop	{r4, pc}
   274d8:	e3a02029 	mov	r2, #41	; 0x29
   274dc:	e59f1014 	ldr	r1, [pc, #20]	; 274f8 <CMACAddress::operator==(CMACAddress const&) const+0x58>
   274e0:	e59f0014 	ldr	r0, [pc, #20]	; 274fc <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   274e4:	ebffd885 	bl	1d700 <assertion_failed>
   274e8:	e3a02041 	mov	r2, #65	; 0x41
   274ec:	e59f1004 	ldr	r1, [pc, #4]	; 274f8 <CMACAddress::operator==(CMACAddress const&) const+0x58>
   274f0:	e59f0004 	ldr	r0, [pc, #4]	; 274fc <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   274f4:	ebffd881 	bl	1d700 <assertion_failed>
   274f8:	00032cac 	.word	0x00032cac
   274fc:	0002d6f8 	.word	0x0002d6f8

00027500 <CMACAddress::operator!=(CMACAddress const&) const>:
   27500:	e92d4010 	push	{r4, lr}
   27504:	ebffffe5 	bl	274a0 <CMACAddress::operator==(CMACAddress const&) const>
   27508:	e2200001 	eor	r0, r0, #1
   2750c:	e6ef0070 	uxtb	r0, r0
   27510:	e8bd8010 	pop	{r4, pc}

00027514 <CMACAddress::Set(unsigned char const*)>:
   27514:	e3510000 	cmp	r1, #0
   27518:	e92d4010 	push	{r4, lr}
   2751c:	0a000006 	beq	2753c <CMACAddress::Set(unsigned char const*)+0x28>
   27520:	e1a04000 	mov	r4, r0
   27524:	e3a02006 	mov	r2, #6
   27528:	e2800001 	add	r0, r0, #1
   2752c:	ebfffed6 	bl	2708c <memcpy>
   27530:	e3a03001 	mov	r3, #1
   27534:	e5c43000 	strb	r3, [r4]
   27538:	e8bd8010 	pop	{r4, pc}
   2753c:	e3a02034 	mov	r2, #52	; 0x34
   27540:	e59f1004 	ldr	r1, [pc, #4]	; 2754c <CMACAddress::Set(unsigned char const*)+0x38>
   27544:	e59f0004 	ldr	r0, [pc, #4]	; 27550 <CMACAddress::Set(unsigned char const*)+0x3c>
   27548:	ebffd86c 	bl	1d700 <assertion_failed>
   2754c:	00032cac 	.word	0x00032cac
   27550:	00032cbc 	.word	0x00032cbc

00027554 <CMACAddress::CMACAddress(unsigned char const*)>:
   27554:	e92d4010 	push	{r4, lr}
   27558:	e1a04000 	mov	r4, r0
   2755c:	ebffffec 	bl	27514 <CMACAddress::Set(unsigned char const*)>
   27560:	e1a00004 	mov	r0, r4
   27564:	e8bd8010 	pop	{r4, pc}

00027568 <CMACAddress::SetBroadcast()>:
   27568:	e92d4010 	push	{r4, lr}
   2756c:	e3a02006 	mov	r2, #6
   27570:	e1a04000 	mov	r4, r0
   27574:	e3a010ff 	mov	r1, #255	; 0xff
   27578:	e2800001 	add	r0, r0, #1
   2757c:	ebfffc79 	bl	26768 <memset>
   27580:	e3a03001 	mov	r3, #1
   27584:	e5c43000 	strb	r3, [r4]
   27588:	e8bd8010 	pop	{r4, pc}

0002758c <CMACAddress::Get() const>:
   2758c:	e5d03000 	ldrb	r3, [r0]
   27590:	e3530000 	cmp	r3, #0
   27594:	0a000001 	beq	275a0 <CMACAddress::Get() const+0x14>
   27598:	e2800001 	add	r0, r0, #1
   2759c:	e12fff1e 	bx	lr
   275a0:	e3a02041 	mov	r2, #65	; 0x41
   275a4:	e92d4010 	push	{r4, lr}
   275a8:	e59f1004 	ldr	r1, [pc, #4]	; 275b4 <CMACAddress::Get() const+0x28>
   275ac:	e59f0004 	ldr	r0, [pc, #4]	; 275b8 <CMACAddress::Get() const+0x2c>
   275b0:	ebffd852 	bl	1d700 <assertion_failed>
   275b4:	00032cac 	.word	0x00032cac
   275b8:	0002d6f8 	.word	0x0002d6f8

000275bc <CMACAddress::CopyTo(unsigned char*) const>:
   275bc:	e5d02000 	ldrb	r2, [r0]
   275c0:	e92d4010 	push	{r4, lr}
   275c4:	e3520000 	cmp	r2, #0
   275c8:	0a000007 	beq	275ec <CMACAddress::CopyTo(unsigned char*) const+0x30>
   275cc:	e3510000 	cmp	r1, #0
   275d0:	e1a03000 	mov	r3, r0
   275d4:	e1a00001 	mov	r0, r1
   275d8:	0a000007 	beq	275fc <CMACAddress::CopyTo(unsigned char*) const+0x40>
   275dc:	e8bd4010 	pop	{r4, lr}
   275e0:	e3a02006 	mov	r2, #6
   275e4:	e2831001 	add	r1, r3, #1
   275e8:	eafffea7 	b	2708c <memcpy>
   275ec:	e3a02047 	mov	r2, #71	; 0x47
   275f0:	e59f1014 	ldr	r1, [pc, #20]	; 2760c <CMACAddress::CopyTo(unsigned char*) const+0x50>
   275f4:	e59f0014 	ldr	r0, [pc, #20]	; 27610 <CMACAddress::CopyTo(unsigned char*) const+0x54>
   275f8:	ebffd840 	bl	1d700 <assertion_failed>
   275fc:	e3a02048 	mov	r2, #72	; 0x48
   27600:	e59f1004 	ldr	r1, [pc, #4]	; 2760c <CMACAddress::CopyTo(unsigned char*) const+0x50>
   27604:	e59f0008 	ldr	r0, [pc, #8]	; 27614 <CMACAddress::CopyTo(unsigned char*) const+0x58>
   27608:	ebffd83c 	bl	1d700 <assertion_failed>
   2760c:	00032cac 	.word	0x00032cac
   27610:	0002d6f8 	.word	0x0002d6f8
   27614:	0002e89c 	.word	0x0002e89c

00027618 <CMACAddress::IsBroadcast() const>:
   27618:	e1a02000 	mov	r2, r0
   2761c:	e5d00000 	ldrb	r0, [r0]
   27620:	e3500000 	cmp	r0, #0
   27624:	12823001 	addne	r3, r2, #1
   27628:	12822007 	addne	r2, r2, #7
   2762c:	0a000009 	beq	27658 <CMACAddress::IsBroadcast() const+0x40>
   27630:	e4d31001 	ldrb	r1, [r3], #1
   27634:	e35100ff 	cmp	r1, #255	; 0xff
   27638:	1a000004 	bne	27650 <CMACAddress::IsBroadcast() const+0x38>
   2763c:	e1530002 	cmp	r3, r2
   27640:	012fff1e 	bxeq	lr
   27644:	e4d31001 	ldrb	r1, [r3], #1
   27648:	e35100ff 	cmp	r1, #255	; 0xff
   2764c:	0afffffa 	beq	2763c <CMACAddress::IsBroadcast() const+0x24>
   27650:	e3a00000 	mov	r0, #0
   27654:	e12fff1e 	bx	lr
   27658:	e3a0204e 	mov	r2, #78	; 0x4e
   2765c:	e92d4010 	push	{r4, lr}
   27660:	e59f1004 	ldr	r1, [pc, #4]	; 2766c <CMACAddress::IsBroadcast() const+0x54>
   27664:	e59f0004 	ldr	r0, [pc, #4]	; 27670 <CMACAddress::IsBroadcast() const+0x58>
   27668:	ebffd824 	bl	1d700 <assertion_failed>
   2766c:	00032cac 	.word	0x00032cac
   27670:	0002d6f8 	.word	0x0002d6f8

00027674 <CMACAddress::GetSize() const>:
   27674:	e3a00006 	mov	r0, #6
   27678:	e12fff1e 	bx	lr

0002767c <CMACAddress::Format(CString*) const>:
   2767c:	e92d4010 	push	{r4, lr}
   27680:	e5d03000 	ldrb	r3, [r0]
   27684:	e24dd010 	sub	sp, sp, #16
   27688:	e3530000 	cmp	r3, #0
   2768c:	0a00000f 	beq	276d0 <CMACAddress::Format(CString*) const+0x54>
   27690:	e3510000 	cmp	r1, #0
   27694:	e1a02000 	mov	r2, r0
   27698:	e1a00001 	mov	r0, r1
   2769c:	0a00000f 	beq	276e0 <CMACAddress::Format(CString*) const+0x64>
   276a0:	e5d2e005 	ldrb	lr, [r2, #5]
   276a4:	e5d2c004 	ldrb	ip, [r2, #4]
   276a8:	e5d23003 	ldrb	r3, [r2, #3]
   276ac:	e5d24006 	ldrb	r4, [r2, #6]
   276b0:	e88d5008 	stm	sp, {r3, ip, lr}
   276b4:	e58d400c 	str	r4, [sp, #12]
   276b8:	e5d23002 	ldrb	r3, [r2, #2]
   276bc:	e59f102c 	ldr	r1, [pc, #44]	; 276f0 <CMACAddress::Format(CString*) const+0x74>
   276c0:	e5d22001 	ldrb	r2, [r2, #1]
   276c4:	ebfff870 	bl	2588c <CString::Format(char const*, ...)>
   276c8:	e28dd010 	add	sp, sp, #16
   276cc:	e8bd8010 	pop	{r4, pc}
   276d0:	e3a02062 	mov	r2, #98	; 0x62
   276d4:	e59f1018 	ldr	r1, [pc, #24]	; 276f4 <CMACAddress::Format(CString*) const+0x78>
   276d8:	e59f0018 	ldr	r0, [pc, #24]	; 276f8 <CMACAddress::Format(CString*) const+0x7c>
   276dc:	ebffd807 	bl	1d700 <assertion_failed>
   276e0:	e3a02063 	mov	r2, #99	; 0x63
   276e4:	e59f1008 	ldr	r1, [pc, #8]	; 276f4 <CMACAddress::Format(CString*) const+0x78>
   276e8:	e59f000c 	ldr	r0, [pc, #12]	; 276fc <CMACAddress::Format(CString*) const+0x80>
   276ec:	ebffd803 	bl	1d700 <assertion_failed>
   276f0:	00032cdc 	.word	0x00032cdc
   276f4:	00032cac 	.word	0x00032cac
   276f8:	0002d6f8 	.word	0x0002d6f8
   276fc:	00032ccc 	.word	0x00032ccc

00027700 <CNetDevice::AddNetDevice()>:
   27700:	e59f2018 	ldr	r2, [pc, #24]	; 27720 <CNetDevice::AddNetDevice()+0x20>
   27704:	e5923000 	ldr	r3, [r2]
   27708:	e3530004 	cmp	r3, #4
   2770c:	92831001 	addls	r1, r3, #1
   27710:	90823103 	addls	r3, r2, r3, lsl #2
   27714:	95821000 	strls	r1, [r2]
   27718:	95830004 	strls	r0, [r3, #4]
   2771c:	e12fff1e 	bx	lr
   27720:	00034c64 	.word	0x00034c64

00027724 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   27724:	e3500005 	cmp	r0, #5
   27728:	959f3008 	ldrls	r3, [pc, #8]	; 27738 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x14>
   2772c:	97930100 	ldrls	r0, [r3, r0, lsl #2]
   27730:	859f0004 	ldrhi	r0, [pc, #4]	; 2773c <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   27734:	e12fff1e 	bx	lr
   27738:	00034ad8 	.word	0x00034ad8
   2773c:	000328f8 	.word	0x000328f8

00027740 <CNetDevice::GetNetDevice(unsigned int)>:
   27740:	e59f3014 	ldr	r3, [pc, #20]	; 2775c <CNetDevice::GetNetDevice(unsigned int)+0x1c>
   27744:	e5932000 	ldr	r2, [r3]
   27748:	e1520000 	cmp	r2, r0
   2774c:	80830100 	addhi	r0, r3, r0, lsl #2
   27750:	85900004 	ldrhi	r0, [r0, #4]
   27754:	93a00000 	movls	r0, #0
   27758:	e12fff1e 	bx	lr
   2775c:	00034c64 	.word	0x00034c64

00027760 <CNetDevice::GetNetDevice(TNetDeviceType)>:
   27760:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27764:	e59f8084 	ldr	r8, [pc, #132]	; 277f0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x90>
   27768:	e5983000 	ldr	r3, [r8]
   2776c:	e3530000 	cmp	r3, #0
   27770:	0a00001b 	beq	277e4 <CNetDevice::GetNetDevice(TNetDeviceType)+0x84>
   27774:	e1a06000 	mov	r6, r0
   27778:	e3a05000 	mov	r5, #0
   2777c:	e59f9070 	ldr	r9, [pc, #112]	; 277f4 <CNetDevice::GetNetDevice(TNetDeviceType)+0x94>
   27780:	e2887004 	add	r7, r8, #4
   27784:	ea000005 	b	277a0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x40>
   27788:	e1500006 	cmp	r0, r6
   2778c:	e2855001 	add	r5, r5, #1
   27790:	0a000011 	beq	277dc <CNetDevice::GetNetDevice(TNetDeviceType)+0x7c>
   27794:	e5983000 	ldr	r3, [r8]
   27798:	e1530005 	cmp	r3, r5
   2779c:	9a000010 	bls	277e4 <CNetDevice::GetNetDevice(TNetDeviceType)+0x84>
   277a0:	e4974004 	ldr	r4, [r7], #4
   277a4:	e3540000 	cmp	r4, #0
   277a8:	0a00000d 	beq	277e4 <CNetDevice::GetNetDevice(TNetDeviceType)+0x84>
   277ac:	e3560002 	cmp	r6, #2
   277b0:	0a000009 	beq	277dc <CNetDevice::GetNetDevice(TNetDeviceType)+0x7c>
   277b4:	e5943000 	ldr	r3, [r4]
   277b8:	e5933008 	ldr	r3, [r3, #8]
   277bc:	e1530009 	cmp	r3, r9
   277c0:	03a00000 	moveq	r0, #0
   277c4:	0affffef 	beq	27788 <CNetDevice::GetNetDevice(TNetDeviceType)+0x28>
   277c8:	e1a00004 	mov	r0, r4
   277cc:	e12fff33 	blx	r3
   277d0:	e1500006 	cmp	r0, r6
   277d4:	e2855001 	add	r5, r5, #1
   277d8:	1affffed 	bne	27794 <CNetDevice::GetNetDevice(TNetDeviceType)+0x34>
   277dc:	e1a00004 	mov	r0, r4
   277e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   277e4:	e3a04000 	mov	r4, #0
   277e8:	e1a00004 	mov	r0, r4
   277ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   277f0:	00034c64 	.word	0x00034c64
   277f4:	0001982c 	.word	0x0001982c

000277f8 <operator new(unsigned int, int)>:
   277f8:	e3d13002 	bics	r3, r1, #2
   277fc:	e1a01000 	mov	r1, r0
   27800:	0a000001 	beq	2780c <operator new(unsigned int, int)+0x14>
   27804:	e3a00000 	mov	r0, #0
   27808:	e12fff1e 	bx	lr
   2780c:	e59f3008 	ldr	r3, [pc, #8]	; 2781c <operator new(unsigned int, int)+0x24>
   27810:	e5930000 	ldr	r0, [r3]
   27814:	e280000c 	add	r0, r0, #12
   27818:	ea000035 	b	278f4 <CHeapAllocator::Allocate(unsigned int)>
   2781c:	00034c80 	.word	0x00034c80

00027820 <operator new[](unsigned int, int)>:
   27820:	eafffff4 	b	277f8 <operator new(unsigned int, int)>

00027824 <operator new(unsigned int)>:
   27824:	e59f300c 	ldr	r3, [pc, #12]	; 27838 <operator new(unsigned int)+0x14>
   27828:	e1a01000 	mov	r1, r0
   2782c:	e5930000 	ldr	r0, [r3]
   27830:	e280000c 	add	r0, r0, #12
   27834:	ea00002e 	b	278f4 <CHeapAllocator::Allocate(unsigned int)>
   27838:	00034c80 	.word	0x00034c80

0002783c <operator new[](unsigned int)>:
   2783c:	eafffff8 	b	27824 <operator new(unsigned int)>

00027840 <operator delete(void*)>:
   27840:	e59f300c 	ldr	r3, [pc, #12]	; 27854 <operator delete(void*)+0x14>
   27844:	e1a01000 	mov	r1, r0
   27848:	e5930000 	ldr	r0, [r3]
   2784c:	e280000c 	add	r0, r0, #12
   27850:	ea0000a4 	b	27ae8 <CHeapAllocator::Free(void*)>
   27854:	00034c80 	.word	0x00034c80

00027858 <operator delete[](void*)>:
   27858:	eafffff8 	b	27840 <operator delete(void*)>

0002785c <operator delete(void*, unsigned int)>:
   2785c:	e59f300c 	ldr	r3, [pc, #12]	; 27870 <operator delete(void*, unsigned int)+0x14>
   27860:	e1a01000 	mov	r1, r0
   27864:	e5930000 	ldr	r0, [r3]
   27868:	e280000c 	add	r0, r0, #12
   2786c:	ea00009d 	b	27ae8 <CHeapAllocator::Free(void*)>
   27870:	00034c80 	.word	0x00034c80

00027874 <operator delete[](void*, unsigned int)>:
   27874:	eafffff8 	b	2785c <operator delete(void*, unsigned int)>

00027878 <CHeapAllocator::CHeapAllocator(char const*)>:
   27878:	e3a03000 	mov	r3, #0
   2787c:	e3a02001 	mov	r2, #1
   27880:	e92d4010 	push	{r4, lr}
   27884:	e1a04000 	mov	r4, r0
   27888:	e5801000 	str	r1, [r0]
   2788c:	e58020b8 	str	r2, [r0, #184]	; 0xb8
   27890:	e5803004 	str	r3, [r0, #4]
   27894:	e5803008 	str	r3, [r0, #8]
   27898:	e580300c 	str	r3, [r0, #12]
   2789c:	e1a01003 	mov	r1, r3
   278a0:	e3a020a8 	mov	r2, #168	; 0xa8
   278a4:	e2800010 	add	r0, r0, #16
   278a8:	ebfffbae 	bl	26768 <memset>
   278ac:	e1a03004 	mov	r3, r4
   278b0:	e59f201c 	ldr	r2, [pc, #28]	; 278d4 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   278b4:	e2840038 	add	r0, r4, #56	; 0x38
   278b8:	e4921004 	ldr	r1, [r2], #4
   278bc:	e2833008 	add	r3, r3, #8
   278c0:	e5831008 	str	r1, [r3, #8]
   278c4:	e1530000 	cmp	r3, r0
   278c8:	1afffffa 	bne	278b8 <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   278cc:	e1a00004 	mov	r0, r4
   278d0:	e8bd8010 	pop	{r4, pc}
   278d4:	00034af0 	.word	0x00034af0

000278d8 <CHeapAllocator::~CHeapAllocator()>:
   278d8:	e12fff1e 	bx	lr

000278dc <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   278dc:	e0812002 	add	r2, r1, r2
   278e0:	e980000e 	stmib	r0, {r1, r2, r3}
   278e4:	e12fff1e 	bx	lr

000278e8 <CHeapAllocator::GetFreeSpace() const>:
   278e8:	e9900005 	ldmib	r0, {r0, r2}
   278ec:	e0420000 	sub	r0, r2, r0
   278f0:	e12fff1e 	bx	lr

000278f4 <CHeapAllocator::Allocate(unsigned int)>:
   278f4:	e5903004 	ldr	r3, [r0, #4]
   278f8:	e3530000 	cmp	r3, #0
   278fc:	0a000072 	beq	27acc <CHeapAllocator::Allocate(unsigned int)+0x1d8>
   27900:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27904:	e1a05000 	mov	r5, r0
   27908:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   2790c:	e1a04001 	mov	r4, r1
   27910:	e3500000 	cmp	r0, #0
   27914:	1a000055 	bne	27a70 <CHeapAllocator::Allocate(unsigned int)+0x17c>
   27918:	e5953010 	ldr	r3, [r5, #16]
   2791c:	e3530000 	cmp	r3, #0
   27920:	0a00002b 	beq	279d4 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   27924:	e2852010 	add	r2, r5, #16
   27928:	ea000002 	b	27938 <CHeapAllocator::Allocate(unsigned int)+0x44>
   2792c:	e5b23008 	ldr	r3, [r2, #8]!
   27930:	e3530000 	cmp	r3, #0
   27934:	0a000026 	beq	279d4 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   27938:	e1540003 	cmp	r4, r3
   2793c:	8afffffa 	bhi	2792c <CHeapAllocator::Allocate(unsigned int)+0x38>
   27940:	e5926004 	ldr	r6, [r2, #4]
   27944:	e3560000 	cmp	r6, #0
   27948:	01a04003 	moveq	r4, r3
   2794c:	0a000020 	beq	279d4 <CHeapAllocator::Allocate(unsigned int)+0xe0>
   27950:	e5d60001 	ldrb	r0, [r6, #1]
   27954:	e5d63000 	ldrb	r3, [r6]
   27958:	e5d61002 	ldrb	r1, [r6, #2]
   2795c:	e1833400 	orr	r3, r3, r0, lsl #8
   27960:	e5d60003 	ldrb	r0, [r6, #3]
   27964:	e1833801 	orr	r3, r3, r1, lsl #16
   27968:	e59f1164 	ldr	r1, [pc, #356]	; 27ad4 <CHeapAllocator::Allocate(unsigned int)+0x1e0>
   2796c:	e1833c00 	orr	r3, r3, r0, lsl #24
   27970:	e1530001 	cmp	r3, r1
   27974:	1a000050 	bne	27abc <CHeapAllocator::Allocate(unsigned int)+0x1c8>
   27978:	e5d61009 	ldrb	r1, [r6, #9]
   2797c:	e5d63008 	ldrb	r3, [r6, #8]
   27980:	e5d6000a 	ldrb	r0, [r6, #10]
   27984:	e1833401 	orr	r3, r3, r1, lsl #8
   27988:	e5d6100b 	ldrb	r1, [r6, #11]
   2798c:	e1833800 	orr	r3, r3, r0, lsl #16
   27990:	e1833c01 	orr	r3, r3, r1, lsl #24
   27994:	e5823004 	str	r3, [r2, #4]
   27998:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   2799c:	e3530000 	cmp	r3, #0
   279a0:	1a000030 	bne	27a68 <CHeapAllocator::Allocate(unsigned int)+0x174>
   279a4:	e3a03000 	mov	r3, #0
   279a8:	e316001f 	tst	r6, #31
   279ac:	e5c63008 	strb	r3, [r6, #8]
   279b0:	e5c63009 	strb	r3, [r6, #9]
   279b4:	e5c6300a 	strb	r3, [r6, #10]
   279b8:	e5c6300b 	strb	r3, [r6, #11]
   279bc:	e2860020 	add	r0, r6, #32
   279c0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   279c4:	e3a0208e 	mov	r2, #142	; 0x8e
   279c8:	e59f1108 	ldr	r1, [pc, #264]	; 27ad8 <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   279cc:	e59f0108 	ldr	r0, [pc, #264]	; 27adc <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   279d0:	ebffd74a 	bl	1d700 <assertion_failed>
   279d4:	e5956004 	ldr	r6, [r5, #4]
   279d8:	e284303f 	add	r3, r4, #63	; 0x3f
   279dc:	e3c3301f 	bic	r3, r3, #31
   279e0:	e0863003 	add	r3, r6, r3
   279e4:	e1560003 	cmp	r6, r3
   279e8:	e595700c 	ldr	r7, [r5, #12]
   279ec:	3a000006 	bcc	27a0c <CHeapAllocator::Allocate(unsigned int)+0x118>
   279f0:	e3570000 	cmp	r7, #0
   279f4:	1a00001f 	bne	27a78 <CHeapAllocator::Allocate(unsigned int)+0x184>
   279f8:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   279fc:	e3530000 	cmp	r3, #0
   27a00:	1a000028 	bne	27aa8 <CHeapAllocator::Allocate(unsigned int)+0x1b4>
   27a04:	e3a00000 	mov	r0, #0
   27a08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   27a0c:	e5952008 	ldr	r2, [r5, #8]
   27a10:	e0422007 	sub	r2, r2, r7
   27a14:	e1530002 	cmp	r3, r2
   27a18:	8afffff4 	bhi	279f0 <CHeapAllocator::Allocate(unsigned int)+0xfc>
   27a1c:	e3a0204d 	mov	r2, #77	; 0x4d
   27a20:	e3a0c043 	mov	ip, #67	; 0x43
   27a24:	e3a0004c 	mov	r0, #76	; 0x4c
   27a28:	e3a01042 	mov	r1, #66	; 0x42
   27a2c:	e5853004 	str	r3, [r5, #4]
   27a30:	e1a03824 	lsr	r3, r4, #16
   27a34:	e5c64004 	strb	r4, [r6, #4]
   27a38:	e5c62001 	strb	r2, [r6, #1]
   27a3c:	e1a02424 	lsr	r2, r4, #8
   27a40:	e1a04c24 	lsr	r4, r4, #24
   27a44:	e5c6c000 	strb	ip, [r6]
   27a48:	e5c60002 	strb	r0, [r6, #2]
   27a4c:	e5c61003 	strb	r1, [r6, #3]
   27a50:	e5c62005 	strb	r2, [r6, #5]
   27a54:	e5c63006 	strb	r3, [r6, #6]
   27a58:	e5c64007 	strb	r4, [r6, #7]
   27a5c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   27a60:	e3530000 	cmp	r3, #0
   27a64:	0affffce 	beq	279a4 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   27a68:	eb000337 	bl	2874c <LeaveCritical>
   27a6c:	eaffffcc 	b	279a4 <CHeapAllocator::Allocate(unsigned int)+0xb0>
   27a70:	eb00030b 	bl	286a4 <EnterCritical>
   27a74:	eaffffa7 	b	27918 <CHeapAllocator::Allocate(unsigned int)+0x24>
   27a78:	e3a02000 	mov	r2, #0
   27a7c:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   27a80:	e585200c 	str	r2, [r5, #12]
   27a84:	e1530002 	cmp	r3, r2
   27a88:	1a000009 	bne	27ab4 <CHeapAllocator::Allocate(unsigned int)+0x1c0>
   27a8c:	ebffe01b 	bl	1fb00 <CLogger::Get()>
   27a90:	e3a02000 	mov	r2, #0
   27a94:	e5951000 	ldr	r1, [r5]
   27a98:	e59f3040 	ldr	r3, [pc, #64]	; 27ae0 <CHeapAllocator::Allocate(unsigned int)+0x1ec>
   27a9c:	ebffdf59 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   27aa0:	e3a00000 	mov	r0, #0
   27aa4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   27aa8:	eb000327 	bl	2874c <LeaveCritical>
   27aac:	e1a00007 	mov	r0, r7
   27ab0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   27ab4:	eb000324 	bl	2874c <LeaveCritical>
   27ab8:	eafffff3 	b	27a8c <CHeapAllocator::Allocate(unsigned int)+0x198>
   27abc:	e3a0205e 	mov	r2, #94	; 0x5e
   27ac0:	e59f1010 	ldr	r1, [pc, #16]	; 27ad8 <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   27ac4:	e59f0018 	ldr	r0, [pc, #24]	; 27ae4 <CHeapAllocator::Allocate(unsigned int)+0x1f0>
   27ac8:	ebffd70c 	bl	1d700 <assertion_failed>
   27acc:	e3a00000 	mov	r0, #0
   27ad0:	e12fff1e 	bx	lr
   27ad4:	424c4d43 	.word	0x424c4d43
   27ad8:	00032d8c 	.word	0x00032d8c
   27adc:	00032ddc 	.word	0x00032ddc
   27ae0:	00032dcc 	.word	0x00032dcc
   27ae4:	00032da0 	.word	0x00032da0

00027ae8 <CHeapAllocator::Free(void*)>:
   27ae8:	e3510000 	cmp	r1, #0
   27aec:	012fff1e 	bxeq	lr
   27af0:	e92d4070 	push	{r4, r5, r6, lr}
   27af4:	e1a06000 	mov	r6, r0
   27af8:	e5513020 	ldrb	r3, [r1, #-32]	; 0xffffffe0
   27afc:	e551001f 	ldrb	r0, [r1, #-31]	; 0xffffffe1
   27b00:	e551201e 	ldrb	r2, [r1, #-30]	; 0xffffffe2
   27b04:	e1833400 	orr	r3, r3, r0, lsl #8
   27b08:	e551001d 	ldrb	r0, [r1, #-29]	; 0xffffffe3
   27b0c:	e1833802 	orr	r3, r3, r2, lsl #16
   27b10:	e59f20d0 	ldr	r2, [pc, #208]	; 27be8 <CHeapAllocator::Free(void*)+0x100>
   27b14:	e1833c00 	orr	r3, r3, r0, lsl #24
   27b18:	e1530002 	cmp	r3, r2
   27b1c:	e2415020 	sub	r5, r1, #32
   27b20:	1a00002c 	bne	27bd8 <CHeapAllocator::Free(void*)+0xf0>
   27b24:	e5963010 	ldr	r3, [r6, #16]
   27b28:	e3530000 	cmp	r3, #0
   27b2c:	08bd8070 	popeq	{r4, r5, r6, pc}
   27b30:	e5d51005 	ldrb	r1, [r5, #5]
   27b34:	e5d52004 	ldrb	r2, [r5, #4]
   27b38:	e5d50006 	ldrb	r0, [r5, #6]
   27b3c:	e1822401 	orr	r2, r2, r1, lsl #8
   27b40:	e5d51007 	ldrb	r1, [r5, #7]
   27b44:	e1822800 	orr	r2, r2, r0, lsl #16
   27b48:	e1822c01 	orr	r2, r2, r1, lsl #24
   27b4c:	e2864010 	add	r4, r6, #16
   27b50:	ea000002 	b	27b60 <CHeapAllocator::Free(void*)+0x78>
   27b54:	e5b43008 	ldr	r3, [r4, #8]!
   27b58:	e3530000 	cmp	r3, #0
   27b5c:	08bd8070 	popeq	{r4, r5, r6, pc}
   27b60:	e1530002 	cmp	r3, r2
   27b64:	1afffffa 	bne	27b54 <CHeapAllocator::Free(void*)+0x6c>
   27b68:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   27b6c:	e3500000 	cmp	r0, #0
   27b70:	1a000009 	bne	27b9c <CHeapAllocator::Free(void*)+0xb4>
   27b74:	e5943004 	ldr	r3, [r4, #4]
   27b78:	e1a00423 	lsr	r0, r3, #8
   27b7c:	e1a01823 	lsr	r1, r3, #16
   27b80:	e1a02c23 	lsr	r2, r3, #24
   27b84:	e5c53008 	strb	r3, [r5, #8]
   27b88:	e5c50009 	strb	r0, [r5, #9]
   27b8c:	e5c5100a 	strb	r1, [r5, #10]
   27b90:	e5c5200b 	strb	r2, [r5, #11]
   27b94:	e5845004 	str	r5, [r4, #4]
   27b98:	e8bd8070 	pop	{r4, r5, r6, pc}
   27b9c:	eb0002c0 	bl	286a4 <EnterCritical>
   27ba0:	e5943004 	ldr	r3, [r4, #4]
   27ba4:	e59620b8 	ldr	r2, [r6, #184]	; 0xb8
   27ba8:	e1a00423 	lsr	r0, r3, #8
   27bac:	e3520000 	cmp	r2, #0
   27bb0:	e1a01823 	lsr	r1, r3, #16
   27bb4:	e1a02c23 	lsr	r2, r3, #24
   27bb8:	e5c53008 	strb	r3, [r5, #8]
   27bbc:	e5c50009 	strb	r0, [r5, #9]
   27bc0:	e5c5100a 	strb	r1, [r5, #10]
   27bc4:	e5c5200b 	strb	r2, [r5, #11]
   27bc8:	e5845004 	str	r5, [r4, #4]
   27bcc:	08bd8070 	popeq	{r4, r5, r6, pc}
   27bd0:	e8bd4070 	pop	{r4, r5, r6, lr}
   27bd4:	ea0002dc 	b	2874c <LeaveCritical>
   27bd8:	e3a020bf 	mov	r2, #191	; 0xbf
   27bdc:	e59f1008 	ldr	r1, [pc, #8]	; 27bec <CHeapAllocator::Free(void*)+0x104>
   27be0:	e59f0008 	ldr	r0, [pc, #8]	; 27bf0 <CHeapAllocator::Free(void*)+0x108>
   27be4:	ebffd6c5 	bl	1d700 <assertion_failed>
   27be8:	424c4d43 	.word	0x424c4d43
   27bec:	00032d8c 	.word	0x00032d8c
   27bf0:	00032da0 	.word	0x00032da0

00027bf4 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   27bf4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   27bf8:	e2514000 	subs	r4, r1, #0
   27bfc:	e24dd00c 	sub	sp, sp, #12
   27c00:	0a00002d 	beq	27cbc <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc8>
   27c04:	e3520000 	cmp	r2, #0
   27c08:	0a00002f 	beq	27ccc <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd8>
   27c0c:	e554c01f 	ldrb	ip, [r4, #-31]	; 0xffffffe1
   27c10:	e5543020 	ldrb	r3, [r4, #-32]	; 0xffffffe0
   27c14:	e554101e 	ldrb	r1, [r4, #-30]	; 0xffffffe2
   27c18:	e183340c 	orr	r3, r3, ip, lsl #8
   27c1c:	e554c01d 	ldrb	ip, [r4, #-29]	; 0xffffffe3
   27c20:	e1833801 	orr	r3, r3, r1, lsl #16
   27c24:	e59f10c4 	ldr	r1, [pc, #196]	; 27cf0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xfc>
   27c28:	e1833c0c 	orr	r3, r3, ip, lsl #24
   27c2c:	e1530001 	cmp	r3, r1
   27c30:	e2446020 	sub	r6, r4, #32
   27c34:	1a000029 	bne	27ce0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xec>
   27c38:	e5d61005 	ldrb	r1, [r6, #5]
   27c3c:	e5d63004 	ldrb	r3, [r6, #4]
   27c40:	e5d6c006 	ldrb	ip, [r6, #6]
   27c44:	e1833401 	orr	r3, r3, r1, lsl #8
   27c48:	e5d61007 	ldrb	r1, [r6, #7]
   27c4c:	e183380c 	orr	r3, r3, ip, lsl #16
   27c50:	e1833c01 	orr	r3, r3, r1, lsl #24
   27c54:	e1530002 	cmp	r3, r2
   27c58:	21a07004 	movcs	r7, r4
   27c5c:	3a000002 	bcc	27c6c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x78>
   27c60:	e1a00007 	mov	r0, r7
   27c64:	e28dd00c 	add	sp, sp, #12
   27c68:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   27c6c:	e1a01002 	mov	r1, r2
   27c70:	e1a05000 	mov	r5, r0
   27c74:	ebffff1e 	bl	278f4 <CHeapAllocator::Allocate(unsigned int)>
   27c78:	e2507000 	subs	r7, r0, #0
   27c7c:	0afffff7 	beq	27c60 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   27c80:	e5d62005 	ldrb	r2, [r6, #5]
   27c84:	e5d63004 	ldrb	r3, [r6, #4]
   27c88:	e5d61006 	ldrb	r1, [r6, #6]
   27c8c:	e1833402 	orr	r3, r3, r2, lsl #8
   27c90:	e5d62007 	ldrb	r2, [r6, #7]
   27c94:	e1833801 	orr	r3, r3, r1, lsl #16
   27c98:	e1832c02 	orr	r2, r3, r2, lsl #24
   27c9c:	e1a01004 	mov	r1, r4
   27ca0:	ebfffcf9 	bl	2708c <memcpy>
   27ca4:	e1a00005 	mov	r0, r5
   27ca8:	e1a01004 	mov	r1, r4
   27cac:	ebffff8d 	bl	27ae8 <CHeapAllocator::Free(void*)>
   27cb0:	e1a00007 	mov	r0, r7
   27cb4:	e28dd00c 	add	sp, sp, #12
   27cb8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   27cbc:	e1a01002 	mov	r1, r2
   27cc0:	e28dd00c 	add	sp, sp, #12
   27cc4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   27cc8:	eaffff09 	b	278f4 <CHeapAllocator::Allocate(unsigned int)>
   27ccc:	e58d2004 	str	r2, [sp, #4]
   27cd0:	ebffff84 	bl	27ae8 <CHeapAllocator::Free(void*)>
   27cd4:	e59d2004 	ldr	r2, [sp, #4]
   27cd8:	e1a07002 	mov	r7, r2
   27cdc:	eaffffdf 	b	27c60 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x6c>
   27ce0:	e3a020a3 	mov	r2, #163	; 0xa3
   27ce4:	e59f1008 	ldr	r1, [pc, #8]	; 27cf4 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x100>
   27ce8:	e59f0008 	ldr	r0, [pc, #8]	; 27cf8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x104>
   27cec:	ebffd683 	bl	1d700 <assertion_failed>
   27cf0:	424c4d43 	.word	0x424c4d43
   27cf4:	00032d8c 	.word	0x00032d8c
   27cf8:	00032da0 	.word	0x00032da0

00027cfc <CNumberPool::CNumberPool(unsigned int, unsigned int)>:
   27cfc:	e92d4070 	push	{r4, r5, r6, lr}
   27d00:	e3a04000 	mov	r4, #0
   27d04:	e3a05000 	mov	r5, #0
   27d08:	e352003f 	cmp	r2, #63	; 0x3f
   27d0c:	e8800006 	stm	r0, {r1, r2}
   27d10:	e1c040f8 	strd	r4, [r0, #8]
   27d14:	8a000005 	bhi	27d30 <CNumberPool::CNumberPool(unsigned int, unsigned int)+0x34>
   27d18:	e1510002 	cmp	r1, r2
   27d1c:	98bd8070 	popls	{r4, r5, r6, pc}
   27d20:	e3a0201e 	mov	r2, #30
   27d24:	e59f1014 	ldr	r1, [pc, #20]	; 27d40 <CNumberPool::CNumberPool(unsigned int, unsigned int)+0x44>
   27d28:	e59f0014 	ldr	r0, [pc, #20]	; 27d44 <CNumberPool::CNumberPool(unsigned int, unsigned int)+0x48>
   27d2c:	ebffd673 	bl	1d700 <assertion_failed>
   27d30:	e3a0201d 	mov	r2, #29
   27d34:	e59f1004 	ldr	r1, [pc, #4]	; 27d40 <CNumberPool::CNumberPool(unsigned int, unsigned int)+0x44>
   27d38:	e59f0008 	ldr	r0, [pc, #8]	; 27d48 <CNumberPool::CNumberPool(unsigned int, unsigned int)+0x4c>
   27d3c:	ebffd66f 	bl	1d700 <assertion_failed>
   27d40:	00032e08 	.word	0x00032e08
   27d44:	00032e28 	.word	0x00032e28
   27d48:	00032e18 	.word	0x00032e18

00027d4c <CNumberPool::~CNumberPool()>:
   27d4c:	e12fff1e 	bx	lr

00027d50 <CNumberPool::AllocateNumber(bool, char const*)>:
   27d50:	e1a0c001 	mov	ip, r1
   27d54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d58:	e5903000 	ldr	r3, [r0]
   27d5c:	e5901004 	ldr	r1, [r0, #4]
   27d60:	e24dd00c 	sub	sp, sp, #12
   27d64:	e1530001 	cmp	r3, r1
   27d68:	e1a0b002 	mov	fp, r2
   27d6c:	e58dc004 	str	ip, [sp, #4]
   27d70:	8a000014 	bhi	27dc8 <CNumberPool::AllocateNumber(bool, char const*)+0x78>
   27d74:	e3a0c001 	mov	ip, #1
   27d78:	e590a008 	ldr	sl, [r0, #8]
   27d7c:	e1a0231c 	lsl	r2, ip, r3
   27d80:	e590e00c 	ldr	lr, [r0, #12]
   27d84:	e1a07fc2 	asr	r7, r2, #31
   27d88:	e002800a 	and	r8, r2, sl
   27d8c:	e007900e 	and	r9, r7, lr
   27d90:	e1a06002 	mov	r6, r2
   27d94:	e1982009 	orrs	r2, r8, r9
   27d98:	1a000007 	bne	27dbc <CNumberPool::AllocateNumber(bool, char const*)+0x6c>
   27d9c:	ea000018 	b	27e04 <CNumberPool::AllocateNumber(bool, char const*)+0xb4>
   27da0:	e1a0231c 	lsl	r2, ip, r3
   27da4:	e1a07fc2 	asr	r7, r2, #31
   27da8:	e002400a 	and	r4, r2, sl
   27dac:	e007500e 	and	r5, r7, lr
   27db0:	e1a06002 	mov	r6, r2
   27db4:	e1942005 	orrs	r2, r4, r5
   27db8:	0a000011 	beq	27e04 <CNumberPool::AllocateNumber(bool, char const*)+0xb4>
   27dbc:	e2833001 	add	r3, r3, #1
   27dc0:	e1530001 	cmp	r3, r1
   27dc4:	9afffff5 	bls	27da0 <CNumberPool::AllocateNumber(bool, char const*)+0x50>
   27dc8:	e59d3004 	ldr	r3, [sp, #4]
   27dcc:	e3530000 	cmp	r3, #0
   27dd0:	03a03040 	moveq	r3, #64	; 0x40
   27dd4:	0a000007 	beq	27df8 <CNumberPool::AllocateNumber(bool, char const*)+0xa8>
   27dd8:	e35b0000 	cmp	fp, #0
   27ddc:	0a00000f 	beq	27e20 <CNumberPool::AllocateNumber(bool, char const*)+0xd0>
   27de0:	ebffdf46 	bl	1fb00 <CLogger::Get()>
   27de4:	e59f3044 	ldr	r3, [pc, #68]	; 27e30 <CNumberPool::AllocateNumber(bool, char const*)+0xe0>
   27de8:	e1a0100b 	mov	r1, fp
   27dec:	e3a02000 	mov	r2, #0
   27df0:	ebffde84 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   27df4:	e3a03040 	mov	r3, #64	; 0x40
   27df8:	e1a00003 	mov	r0, r3
   27dfc:	e28dd00c 	add	sp, sp, #12
   27e00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e04:	e186a00a 	orr	sl, r6, sl
   27e08:	e187e00e 	orr	lr, r7, lr
   27e0c:	e580a008 	str	sl, [r0, #8]
   27e10:	e580e00c 	str	lr, [r0, #12]
   27e14:	e1a00003 	mov	r0, r3
   27e18:	e28dd00c 	add	sp, sp, #12
   27e1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e20:	e3a02034 	mov	r2, #52	; 0x34
   27e24:	e59f1008 	ldr	r1, [pc, #8]	; 27e34 <CNumberPool::AllocateNumber(bool, char const*)+0xe4>
   27e28:	e59f0008 	ldr	r0, [pc, #8]	; 27e38 <CNumberPool::AllocateNumber(bool, char const*)+0xe8>
   27e2c:	ebffd633 	bl	1d700 <assertion_failed>
   27e30:	00032e44 	.word	0x00032e44
   27e34:	00032e08 	.word	0x00032e08
   27e38:	00032e38 	.word	0x00032e38

00027e3c <CNumberPool::FreeNumber(unsigned int)>:
   27e3c:	e5903000 	ldr	r3, [r0]
   27e40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27e44:	e1530001 	cmp	r3, r1
   27e48:	8a000013 	bhi	27e9c <CNumberPool::FreeNumber(unsigned int)+0x60>
   27e4c:	e5903004 	ldr	r3, [r0, #4]
   27e50:	e1530001 	cmp	r3, r1
   27e54:	3a000010 	bcc	27e9c <CNumberPool::FreeNumber(unsigned int)+0x60>
   27e58:	e3a03001 	mov	r3, #1
   27e5c:	e1a01113 	lsl	r1, r3, r1
   27e60:	e1a07fc1 	asr	r7, r1, #31
   27e64:	e1c020d8 	ldrd	r2, [r0, #8]
   27e68:	e0014002 	and	r4, r1, r2
   27e6c:	e0075003 	and	r5, r7, r3
   27e70:	e194c005 	orrs	ip, r4, r5
   27e74:	e1a06001 	mov	r6, r1
   27e78:	0a00000b 	beq	27eac <CNumberPool::FreeNumber(unsigned int)+0x70>
   27e7c:	e1e01001 	mvn	r1, r1
   27e80:	e1a05fc1 	asr	r5, r1, #31
   27e84:	e1a04001 	mov	r4, r1
   27e88:	e0033005 	and	r3, r3, r5
   27e8c:	e0011002 	and	r1, r1, r2
   27e90:	e5801008 	str	r1, [r0, #8]
   27e94:	e580300c 	str	r3, [r0, #12]
   27e98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   27e9c:	e3a02042 	mov	r2, #66	; 0x42
   27ea0:	e59f1014 	ldr	r1, [pc, #20]	; 27ebc <CNumberPool::FreeNumber(unsigned int)+0x80>
   27ea4:	e59f0014 	ldr	r0, [pc, #20]	; 27ec0 <CNumberPool::FreeNumber(unsigned int)+0x84>
   27ea8:	ebffd614 	bl	1d700 <assertion_failed>
   27eac:	e3a02043 	mov	r2, #67	; 0x43
   27eb0:	e59f1004 	ldr	r1, [pc, #4]	; 27ebc <CNumberPool::FreeNumber(unsigned int)+0x80>
   27eb4:	e59f0008 	ldr	r0, [pc, #8]	; 27ec4 <CNumberPool::FreeNumber(unsigned int)+0x88>
   27eb8:	ebffd610 	bl	1d700 <assertion_failed>
   27ebc:	00032e08 	.word	0x00032e08
   27ec0:	00032e5c 	.word	0x00032e5c
   27ec4:	00032e84 	.word	0x00032e84

00027ec8 <CExceptionHandler::Get() [clone .part.0]>:
   27ec8:	e3a02087 	mov	r2, #135	; 0x87
   27ecc:	e92d4010 	push	{r4, lr}
   27ed0:	e59f1004 	ldr	r1, [pc, #4]	; 27edc <CExceptionHandler::Get() [clone .part.0]+0x14>
   27ed4:	e59f0004 	ldr	r0, [pc, #4]	; 27ee0 <CExceptionHandler::Get() [clone .part.0]+0x18>
   27ed8:	ebffd608 	bl	1d700 <assertion_failed>
   27edc:	00032e9c 	.word	0x00032e9c
   27ee0:	0002c704 	.word	0x0002c704

00027ee4 <CExceptionHandler::CExceptionHandler()>:
   27ee4:	e59fc074 	ldr	ip, [pc, #116]	; 27f60 <CExceptionHandler::CExceptionHandler()+0x7c>
   27ee8:	e92d4010 	push	{r4, lr}
   27eec:	e1a04000 	mov	r4, r0
   27ef0:	e59c0000 	ldr	r0, [ip]
   27ef4:	e3500000 	cmp	r0, #0
   27ef8:	1a000014 	bne	27f50 <CExceptionHandler::CExceptionHandler()+0x6c>
   27efc:	e59f1060 	ldr	r1, [pc, #96]	; 27f64 <CExceptionHandler::CExceptionHandler()+0x80>
   27f00:	e59f2060 	ldr	r2, [pc, #96]	; 27f68 <CExceptionHandler::CExceptionHandler()+0x84>
   27f04:	e59f3060 	ldr	r3, [pc, #96]	; 27f6c <CExceptionHandler::CExceptionHandler()+0x88>
   27f08:	e2411004 	sub	r1, r1, #4
   27f0c:	e242200c 	sub	r2, r2, #12
   27f10:	e2433010 	sub	r3, r3, #16
   27f14:	e1a01141 	asr	r1, r1, #2
   27f18:	e1a02142 	asr	r2, r2, #2
   27f1c:	e1a03143 	asr	r3, r3, #2
   27f20:	e2411002 	sub	r1, r1, #2
   27f24:	e2422002 	sub	r2, r2, #2
   27f28:	e2433002 	sub	r3, r3, #2
   27f2c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   27f30:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   27f34:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   27f38:	e58c4000 	str	r4, [ip]
   27f3c:	e1c020fc 	strd	r2, [r0, #12]
   27f40:	e5801004 	str	r1, [r0, #4]
   27f44:	eb000225 	bl	287e0 <SyncDataAndInstructionCache>
   27f48:	e1a00004 	mov	r0, r4
   27f4c:	e8bd8010 	pop	{r4, pc}
   27f50:	e3a02030 	mov	r2, #48	; 0x30
   27f54:	e59f1014 	ldr	r1, [pc, #20]	; 27f70 <CExceptionHandler::CExceptionHandler()+0x8c>
   27f58:	e59f0014 	ldr	r0, [pc, #20]	; 27f74 <CExceptionHandler::CExceptionHandler()+0x90>
   27f5c:	ebffd5e7 	bl	1d700 <assertion_failed>
   27f60:	00034c7c 	.word	0x00034c7c
   27f64:	00028238 	.word	0x00028238
   27f68:	00028198 	.word	0x00028198
   27f6c:	000281e8 	.word	0x000281e8
   27f70:	00032e9c 	.word	0x00032e9c
   27f74:	00032b04 	.word	0x00032b04

00027f78 <CExceptionHandler::~CExceptionHandler()>:
   27f78:	e3a02000 	mov	r2, #0
   27f7c:	e59f3004 	ldr	r3, [pc, #4]	; 27f88 <CExceptionHandler::~CExceptionHandler()+0x10>
   27f80:	e5832000 	str	r2, [r3]
   27f84:	e12fff1e 	bx	lr
   27f88:	00034c7c 	.word	0x00034c7c

00027f8c <CExceptionHandler::Throw(unsigned int)>:
   27f8c:	e92d4010 	push	{r4, lr}
   27f90:	e1a04001 	mov	r4, r1
   27f94:	e24dd008 	sub	sp, sp, #8
   27f98:	ebffded8 	bl	1fb00 <CLogger::Get()>
   27f9c:	e59f201c 	ldr	r2, [pc, #28]	; 27fc0 <CExceptionHandler::Throw(unsigned int)+0x34>
   27fa0:	e59f301c 	ldr	r3, [pc, #28]	; 27fc4 <CExceptionHandler::Throw(unsigned int)+0x38>
   27fa4:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   27fa8:	e3a02000 	mov	r2, #0
   27fac:	e58d1000 	str	r1, [sp]
   27fb0:	e59f1010 	ldr	r1, [pc, #16]	; 27fc8 <CExceptionHandler::Throw(unsigned int)+0x3c>
   27fb4:	ebffde13 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   27fb8:	e28dd008 	add	sp, sp, #8
   27fbc:	e8bd8010 	pop	{r4, pc}
   27fc0:	00034b0c 	.word	0x00034b0c
   27fc4:	00032eb4 	.word	0x00032eb4
   27fc8:	00032f58 	.word	0x00032f58

00027fcc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   27fcc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   27fd0:	e3510002 	cmp	r1, #2
   27fd4:	e1a06001 	mov	r6, r1
   27fd8:	e1a04002 	mov	r4, r2
   27fdc:	e24dd024 	sub	sp, sp, #36	; 0x24
   27fe0:	0a000026 	beq	28080 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   27fe4:	e3510003 	cmp	r1, #3
   27fe8:	13a07000 	movne	r7, #0
   27fec:	11a09007 	movne	r9, r7
   27ff0:	1a000001 	bne	27ffc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   27ff4:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   27ff8:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   27ffc:	e3540000 	cmp	r4, #0
   28000:	0a000024 	beq	28098 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
   28004:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   28008:	e5948048 	ldr	r8, [r4, #72]	; 0x48
   2800c:	e203301f 	and	r3, r3, #31
   28010:	e3530011 	cmp	r3, #17
   28014:	e5945044 	ldr	r5, [r4, #68]	; 0x44
   28018:	0a00001b 	beq	2808c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc0>
   2801c:	e3530012 	cmp	r3, #18
   28020:	0a000014 	beq	28078 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
   28024:	e1a00005 	mov	r0, r5
   28028:	e59f1078 	ldr	r1, [pc, #120]	; 280a8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2802c:	ebffd768 	bl	1ddd4 <debug_stacktrace(unsigned int const*, char const*)>
   28030:	ebffdeb2 	bl	1fb00 <CLogger::Get()>
   28034:	e59f3070 	ldr	r3, [pc, #112]	; 280ac <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   28038:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   2803c:	e7931106 	ldr	r1, [r3, r6, lsl #2]
   28040:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   28044:	e58d1000 	str	r1, [sp]
   28048:	e58d2018 	str	r2, [sp, #24]
   2804c:	e58d3004 	str	r3, [sp, #4]
   28050:	e3a02000 	mov	r2, #0
   28054:	e59f3054 	ldr	r3, [pc, #84]	; 280b0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   28058:	e59f1048 	ldr	r1, [pc, #72]	; 280a8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2805c:	e58d8014 	str	r8, [sp, #20]
   28060:	e58d5010 	str	r5, [sp, #16]
   28064:	e58d700c 	str	r7, [sp, #12]
   28068:	e58d9008 	str	r9, [sp, #8]
   2806c:	ebffdde5 	bl	1f808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   28070:	e28dd024 	add	sp, sp, #36	; 0x24
   28074:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   28078:	e8940120 	ldm	r4, {r5, r8}
   2807c:	eaffffe8 	b	28024 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>
   28080:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   28084:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   28088:	eaffffdb 	b	27ffc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   2808c:	e594800c 	ldr	r8, [r4, #12]
   28090:	e5945008 	ldr	r5, [r4, #8]
   28094:	eaffffe2 	b	28024 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>
   28098:	e3a02069 	mov	r2, #105	; 0x69
   2809c:	e59f1010 	ldr	r1, [pc, #16]	; 280b4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   280a0:	e59f0010 	ldr	r0, [pc, #16]	; 280b8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   280a4:	ebffd595 	bl	1d700 <assertion_failed>
   280a8:	00032f58 	.word	0x00032f58
   280ac:	00034b0c 	.word	0x00034b0c
   280b0:	00032ed0 	.word	0x00032ed0
   280b4:	00032e9c 	.word	0x00032e9c
   280b8:	00032ec4 	.word	0x00032ec4

000280bc <CExceptionHandler::Get()>:
   280bc:	e59f3010 	ldr	r3, [pc, #16]	; 280d4 <CExceptionHandler::Get()+0x18>
   280c0:	e5930000 	ldr	r0, [r3]
   280c4:	e3500000 	cmp	r0, #0
   280c8:	112fff1e 	bxne	lr
   280cc:	e92d4010 	push	{r4, lr}
   280d0:	ebffff7c 	bl	27ec8 <CExceptionHandler::Get() [clone .part.0]>
   280d4:	00034c7c 	.word	0x00034c7c

000280d8 <ExceptionHandler>:
   280d8:	e92d4070 	push	{r4, r5, r6, lr}
   280dc:	e3a03000 	mov	r3, #0
   280e0:	e1a04000 	mov	r4, r0
   280e4:	e1a05001 	mov	r5, r1
   280e8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   280ec:	eb0002c9 	bl	28c18 <CInterruptSystem::DisableFIQ()>
   280f0:	f1080040 	cpsie	f
   280f4:	e59f301c 	ldr	r3, [pc, #28]	; 28118 <ExceptionHandler+0x40>
   280f8:	e5930000 	ldr	r0, [r3]
   280fc:	e3500000 	cmp	r0, #0
   28100:	0a000003 	beq	28114 <ExceptionHandler+0x3c>
   28104:	e1a02005 	mov	r2, r5
   28108:	e1a01004 	mov	r1, r4
   2810c:	e8bd4070 	pop	{r4, r5, r6, lr}
   28110:	eaffffad 	b	27fcc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   28114:	ebffff6b 	bl	27ec8 <CExceptionHandler::Get() [clone .part.0]>
   28118:	00034c7c 	.word	0x00034c7c

0002811c <raise>:
   2811c:	e59f3020 	ldr	r3, [pc, #32]	; 28144 <raise+0x28>
   28120:	e92d4010 	push	{r4, lr}
   28124:	e5930000 	ldr	r0, [r3]
   28128:	e3500000 	cmp	r0, #0
   2812c:	0a000003 	beq	28140 <raise+0x24>
   28130:	e3a01004 	mov	r1, #4
   28134:	ebffff94 	bl	27f8c <CExceptionHandler::Throw(unsigned int)>
   28138:	e3a00000 	mov	r0, #0
   2813c:	e8bd8010 	pop	{r4, pc}
   28140:	ebffff60 	bl	27ec8 <CExceptionHandler::Get() [clone .part.0]>
   28144:	00034c7c 	.word	0x00034c7c

00028148 <UndefinedInstructionInternal>:
   28148:	e24dd004 	sub	sp, sp, #4
   2814c:	e24ee004 	sub	lr, lr, #4
   28150:	e92d4000 	stmfd	sp!, {lr}
   28154:	e14fe000 	mrs	lr, SPSR
   28158:	e92d4000 	stmfd	sp!, {lr}
   2815c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   28160:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   28164:	e1a0100d 	mov	r1, sp
   28168:	f1020012 	cps	#18
   2816c:	e1a0200d 	mov	r2, sp
   28170:	e1a0300e 	mov	r3, lr
   28174:	f1020011 	cps	#17
   28178:	e1a0400d 	mov	r4, sp
   2817c:	e1a0500e 	mov	r5, lr
   28180:	f102001f 	cps	#31
   28184:	e1a0d001 	mov	sp, r1
   28188:	e92d003c 	push	{r2, r3, r4, r5}
   2818c:	e1a0100d 	mov	r1, sp
   28190:	e3a00001 	mov	r0, #1
   28194:	eaffffcf 	b	280d8 <ExceptionHandler>

00028198 <PrefetchAbortStub>:
   28198:	e24dd004 	sub	sp, sp, #4
   2819c:	e24ee004 	sub	lr, lr, #4
   281a0:	e92d4000 	stmfd	sp!, {lr}
   281a4:	e14fe000 	mrs	lr, SPSR
   281a8:	e92d4000 	stmfd	sp!, {lr}
   281ac:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   281b0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   281b4:	e1a0100d 	mov	r1, sp
   281b8:	f1020012 	cps	#18
   281bc:	e1a0200d 	mov	r2, sp
   281c0:	e1a0300e 	mov	r3, lr
   281c4:	f1020011 	cps	#17
   281c8:	e1a0400d 	mov	r4, sp
   281cc:	e1a0500e 	mov	r5, lr
   281d0:	f102001f 	cps	#31
   281d4:	e1a0d001 	mov	sp, r1
   281d8:	e92d003c 	push	{r2, r3, r4, r5}
   281dc:	e1a0100d 	mov	r1, sp
   281e0:	e3a00002 	mov	r0, #2
   281e4:	eaffffbb 	b	280d8 <ExceptionHandler>

000281e8 <DataAbortStub>:
   281e8:	e24dd004 	sub	sp, sp, #4
   281ec:	e24ee008 	sub	lr, lr, #8
   281f0:	e92d4000 	stmfd	sp!, {lr}
   281f4:	e14fe000 	mrs	lr, SPSR
   281f8:	e92d4000 	stmfd	sp!, {lr}
   281fc:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   28200:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   28204:	e1a0100d 	mov	r1, sp
   28208:	f1020012 	cps	#18
   2820c:	e1a0200d 	mov	r2, sp
   28210:	e1a0300e 	mov	r3, lr
   28214:	f1020011 	cps	#17
   28218:	e1a0400d 	mov	r4, sp
   2821c:	e1a0500e 	mov	r5, lr
   28220:	f102001f 	cps	#31
   28224:	e1a0d001 	mov	sp, r1
   28228:	e92d003c 	push	{r2, r3, r4, r5}
   2822c:	e1a0100d 	mov	r1, sp
   28230:	e3a00003 	mov	r0, #3
   28234:	eaffffa7 	b	280d8 <ExceptionHandler>

00028238 <UndefinedInstructionStub>:
   28238:	e92d4001 	push	{r0, lr}
   2823c:	eef80a10 	vmrs	r0, fpexc
   28240:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   28244:	0affffbf 	beq	28148 <UndefinedInstructionInternal>
   28248:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   2824c:	eee80a10 	vmsr	fpexc, r0
   28250:	e8fd8001 	ldm	sp!, {r0, pc}^

00028254 <IRQStub>:
   28254:	e24ee004 	sub	lr, lr, #4
   28258:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2825c:	e59f0060 	ldr	r0, [pc, #96]	; 282c4 <FIQStub+0x58>
   28260:	e580e000 	str	lr, [r0]
   28264:	eb0002c4 	bl	28d7c <InterruptHandler>
   28268:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

0002826c <FIQStub>:
   2826c:	e24ee004 	sub	lr, lr, #4
   28270:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   28274:	e3a03000 	mov	r3, #0
   28278:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2827c:	e59f2044 	ldr	r2, [pc, #68]	; 282c8 <FIQStub+0x5c>
   28280:	e5921000 	ldr	r1, [r2]
   28284:	e3510000 	cmp	r1, #0
   28288:	0a000004 	beq	282a0 <FIQStub+0x34>
   2828c:	e5920004 	ldr	r0, [r2, #4]
   28290:	e12fff31 	blx	r1
   28294:	e3a03000 	mov	r3, #0
   28298:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2829c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   282a0:	e3a03000 	mov	r3, #0
   282a4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   282a8:	e59f101c 	ldr	r1, [pc, #28]	; 282cc <FIQStub+0x60>
   282ac:	e3a00000 	mov	r0, #0
   282b0:	e5810000 	str	r0, [r1]
   282b4:	e3a03000 	mov	r3, #0
   282b8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   282bc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   282c0:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   282c4:	00034b2c 	.word	0x00034b2c
   282c8:	00034b20 	.word	0x00034b20
   282cc:	2000b20c 	.word	0x2000b20c

000282d0 <CMemorySystem::CMemorySystem(bool)>:
   282d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   282d4:	e1a04000 	mov	r4, r0
   282d8:	e3a05000 	mov	r5, #0
   282dc:	e280700c 	add	r7, r0, #12
   282e0:	e5c01000 	strb	r1, [r0]
   282e4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   282e8:	e59f1110 	ldr	r1, [pc, #272]	; 28400 <CMemorySystem::CMemorySystem(bool)+0x130>
   282ec:	e5845004 	str	r5, [r4, #4]
   282f0:	e5845008 	str	r5, [r4, #8]
   282f4:	e1a00007 	mov	r0, r7
   282f8:	e28460c8 	add	r6, r4, #200	; 0xc8
   282fc:	ebfffd5d 	bl	27878 <CHeapAllocator::CHeapAllocator(char const*)>
   28300:	e1a00006 	mov	r0, r6
   28304:	eb000973 	bl	2a8d8 <CPageAllocator::CPageAllocator()>
   28308:	e59f30f4 	ldr	r3, [pc, #244]	; 28404 <CMemorySystem::CMemorySystem(bool)+0x134>
   2830c:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   28310:	e5935000 	ldr	r5, [r3]
   28314:	e3550000 	cmp	r5, #0
   28318:	0a000002 	beq	28328 <CMemorySystem::CMemorySystem(bool)+0x58>
   2831c:	e1a00004 	mov	r0, r4
   28320:	e28dd02c 	add	sp, sp, #44	; 0x2c
   28324:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   28328:	e3a01001 	mov	r1, #1
   2832c:	e28d000c 	add	r0, sp, #12
   28330:	e5834000 	str	r4, [r3]
   28334:	ebffd512 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   28338:	e3a03014 	mov	r3, #20
   2833c:	e59f10c4 	ldr	r1, [pc, #196]	; 28408 <CMemorySystem::CMemorySystem(bool)+0x138>
   28340:	e58d5000 	str	r5, [sp]
   28344:	e28d000c 	add	r0, sp, #12
   28348:	e08d2003 	add	r2, sp, r3
   2834c:	ebffd518 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   28350:	e3500000 	cmp	r0, #0
   28354:	0a000016 	beq	283b4 <CMemorySystem::CMemorySystem(bool)+0xe4>
   28358:	e59d3020 	ldr	r3, [sp, #32]
   2835c:	e3530000 	cmp	r3, #0
   28360:	1a000022 	bne	283f0 <CMemorySystem::CMemorySystem(bool)+0x120>
   28364:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28368:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   2836c:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   28370:	e1a00007 	mov	r0, r7
   28374:	e3a01605 	mov	r1, #5242880	; 0x500000
   28378:	e5843004 	str	r3, [r4, #4]
   2837c:	e3a03701 	mov	r3, #262144	; 0x40000
   28380:	ebfffd55 	bl	278dc <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   28384:	e1a01005 	mov	r1, r5
   28388:	e1a00006 	mov	r0, r6
   2838c:	e3a02501 	mov	r2, #4194304	; 0x400000
   28390:	eb000958 	bl	2a8f8 <CPageAllocator::Setup(unsigned int, unsigned int)>
   28394:	e5d43000 	ldrb	r3, [r4]
   28398:	e3530000 	cmp	r3, #0
   2839c:	1a00000a 	bne	283cc <CMemorySystem::CMemorySystem(bool)+0xfc>
   283a0:	e28d000c 	add	r0, sp, #12
   283a4:	ebffd4fd 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   283a8:	e1a00004 	mov	r0, r4
   283ac:	e28dd02c 	add	sp, sp, #44	; 0x2c
   283b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   283b4:	e3a03303 	mov	r3, #201326592	; 0xc000000
   283b8:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   283bc:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   283c0:	e58d0020 	str	r0, [sp, #32]
   283c4:	e58d3024 	str	r3, [sp, #36]	; 0x24
   283c8:	eaffffe8 	b	28370 <CMemorySystem::CMemorySystem(bool)+0xa0>
   283cc:	e3a00004 	mov	r0, #4
   283d0:	ebfffd13 	bl	27824 <operator new(unsigned int)>
   283d4:	e1a05000 	mov	r5, r0
   283d8:	e5941004 	ldr	r1, [r4, #4]
   283dc:	eb00007f 	bl	285e0 <CPageTable::CPageTable(unsigned int)>
   283e0:	e1a00004 	mov	r0, r4
   283e4:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   283e8:	eb000040 	bl	284f0 <CMemorySystem::EnableMMU()>
   283ec:	eaffffeb 	b	283a0 <CMemorySystem::CMemorySystem(bool)+0xd0>
   283f0:	e59f1014 	ldr	r1, [pc, #20]	; 2840c <CMemorySystem::CMemorySystem(bool)+0x13c>
   283f4:	e3a0204e 	mov	r2, #78	; 0x4e
   283f8:	e281000c 	add	r0, r1, #12
   283fc:	ebffd4bf 	bl	1d700 <assertion_failed>
   28400:	00032f60 	.word	0x00032f60
   28404:	00034c80 	.word	0x00034c80
   28408:	00010005 	.word	0x00010005
   2840c:	00032f68 	.word	0x00032f68

00028410 <CMemorySystem::~CMemorySystem()>:
   28410:	e59f3044 	ldr	r3, [pc, #68]	; 2845c <CMemorySystem::~CMemorySystem()+0x4c>
   28414:	e92d4010 	push	{r4, lr}
   28418:	e5932000 	ldr	r2, [r3]
   2841c:	e1a04000 	mov	r4, r0
   28420:	e1500002 	cmp	r0, r2
   28424:	0a000005 	beq	28440 <CMemorySystem::~CMemorySystem()+0x30>
   28428:	e28400c8 	add	r0, r4, #200	; 0xc8
   2842c:	eb000930 	bl	2a8f4 <CPageAllocator::~CPageAllocator()>
   28430:	e284000c 	add	r0, r4, #12
   28434:	ebfffd27 	bl	278d8 <CHeapAllocator::~CHeapAllocator()>
   28438:	e1a00004 	mov	r0, r4
   2843c:	e8bd8010 	pop	{r4, pc}
   28440:	e3a01000 	mov	r1, #0
   28444:	e5d02000 	ldrb	r2, [r0]
   28448:	e5831000 	str	r1, [r3]
   2844c:	e1520001 	cmp	r2, r1
   28450:	0afffff4 	beq	28428 <CMemorySystem::~CMemorySystem()+0x18>
   28454:	eb000056 	bl	285b4 <CMemorySystem::Destructor() [clone .part.0]>
   28458:	eafffff2 	b	28428 <CMemorySystem::~CMemorySystem()+0x18>
   2845c:	00034c80 	.word	0x00034c80

00028460 <CMemorySystem::Destructor()>:
   28460:	e59f3020 	ldr	r3, [pc, #32]	; 28488 <CMemorySystem::Destructor()+0x28>
   28464:	e5932000 	ldr	r2, [r3]
   28468:	e1520000 	cmp	r2, r0
   2846c:	112fff1e 	bxne	lr
   28470:	e3a01000 	mov	r1, #0
   28474:	e5d22000 	ldrb	r2, [r2]
   28478:	e5831000 	str	r1, [r3]
   2847c:	e1520001 	cmp	r2, r1
   28480:	012fff1e 	bxeq	lr
   28484:	ea00004a 	b	285b4 <CMemorySystem::Destructor() [clone .part.0]>
   28488:	00034c80 	.word	0x00034c80

0002848c <CMemorySystem::GetMemSize() const>:
   2848c:	e59f3028 	ldr	r3, [pc, #40]	; 284bc <CMemorySystem::GetMemSize() const+0x30>
   28490:	e5933000 	ldr	r3, [r3]
   28494:	e3530000 	cmp	r3, #0
   28498:	0a000002 	beq	284a8 <CMemorySystem::GetMemSize() const+0x1c>
   2849c:	e9930009 	ldmib	r3, {r0, r3}
   284a0:	e0800003 	add	r0, r0, r3
   284a4:	e12fff1e 	bx	lr
   284a8:	e59f1010 	ldr	r1, [pc, #16]	; 284c0 <CMemorySystem::GetMemSize() const+0x34>
   284ac:	e3a020a0 	mov	r2, #160	; 0xa0
   284b0:	e92d4010 	push	{r4, lr}
   284b4:	e2810028 	add	r0, r1, #40	; 0x28
   284b8:	ebffd490 	bl	1d700 <assertion_failed>
   284bc:	00034c80 	.word	0x00034c80
   284c0:	00032f68 	.word	0x00032f68

000284c4 <CMemorySystem::Get()>:
   284c4:	e59f301c 	ldr	r3, [pc, #28]	; 284e8 <CMemorySystem::Get()+0x24>
   284c8:	e5930000 	ldr	r0, [r3]
   284cc:	e3500000 	cmp	r0, #0
   284d0:	112fff1e 	bxne	lr
   284d4:	e59f1010 	ldr	r1, [pc, #16]	; 284ec <CMemorySystem::Get()+0x28>
   284d8:	e3a020a6 	mov	r2, #166	; 0xa6
   284dc:	e92d4010 	push	{r4, lr}
   284e0:	e2810028 	add	r0, r1, #40	; 0x28
   284e4:	ebffd485 	bl	1d700 <assertion_failed>
   284e8:	00034c80 	.word	0x00034c80
   284ec:	00032f68 	.word	0x00032f68

000284f0 <CMemorySystem::EnableMMU()>:
   284f0:	e5d03000 	ldrb	r3, [r0]
   284f4:	e92d4010 	push	{r4, lr}
   284f8:	e3530000 	cmp	r3, #0
   284fc:	0a00001b 	beq	28570 <CMemorySystem::EnableMMU()+0x80>
   28500:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   28504:	e3833040 	orr	r3, r3, #64	; 0x40
   28508:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   2850c:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   28510:	e3130001 	tst	r3, #1
   28514:	1a000019 	bne	28580 <CMemorySystem::EnableMMU()+0x90>
   28518:	e3a04000 	mov	r4, #0
   2851c:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   28520:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   28524:	e1500004 	cmp	r0, r4
   28528:	0a000018 	beq	28590 <CMemorySystem::EnableMMU()+0xa0>
   2852c:	eb000053 	bl	28680 <CPageTable::GetBaseAddress() const>
   28530:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   28534:	e3a03001 	mov	r3, #1
   28538:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   2853c:	ee074f16 	mcr	15, 0, r4, cr7, cr6, {0}
   28540:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   28544:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   28548:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   2854c:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   28550:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   28554:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   28558:	ee112f10 	mrc	15, 0, r2, cr1, cr0, {0}
   2855c:	e59f303c 	ldr	r3, [pc, #60]	; 285a0 <CMemorySystem::EnableMMU()+0xb0>
   28560:	e3c22002 	bic	r2, r2, #2
   28564:	e1823003 	orr	r3, r2, r3
   28568:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2856c:	e8bd8010 	pop	{r4, pc}
   28570:	e59f102c 	ldr	r1, [pc, #44]	; 285a4 <CMemorySystem::EnableMMU()+0xb4>
   28574:	e3a020ac 	mov	r2, #172	; 0xac
   28578:	e2810038 	add	r0, r1, #56	; 0x38
   2857c:	ebffd45f 	bl	1d700 <assertion_failed>
   28580:	e59f101c 	ldr	r1, [pc, #28]	; 285a4 <CMemorySystem::EnableMMU()+0xb4>
   28584:	e3a020ba 	mov	r2, #186	; 0xba
   28588:	e2810048 	add	r0, r1, #72	; 0x48
   2858c:	ebffd45b 	bl	1d700 <assertion_failed>
   28590:	e59f100c 	ldr	r1, [pc, #12]	; 285a4 <CMemorySystem::EnableMMU()+0xb4>
   28594:	e3a020c0 	mov	r2, #192	; 0xc0
   28598:	e2810074 	add	r0, r1, #116	; 0x74
   2859c:	ebffd457 	bl	1d700 <assertion_failed>
   285a0:	00c01805 	.word	0x00c01805
   285a4:	00032f68 	.word	0x00032f68

000285a8 <CMemorySystem::GetCoherentPage(unsigned int)>:
   285a8:	e1a00600 	lsl	r0, r0, #12
   285ac:	e2800501 	add	r0, r0, #4194304	; 0x400000
   285b0:	e12fff1e 	bx	lr

000285b4 <CMemorySystem::Destructor() [clone .part.0]>:
   285b4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   285b8:	e3c33005 	bic	r3, r3, #5
   285bc:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   285c0:	e3a03000 	mov	r3, #0
   285c4:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   285c8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   285cc:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   285d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   285d4:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   285d8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   285dc:	e12fff1e 	bx	lr

000285e0 <CPageTable::CPageTable(unsigned int)>:
   285e0:	e3a0c709 	mov	ip, #2359296	; 0x240000
   285e4:	e59f207c 	ldr	r2, [pc, #124]	; 28668 <CPageTable::CPageTable(unsigned int)+0x88>
   285e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   285ec:	e3a03000 	mov	r3, #0
   285f0:	e1a04002 	mov	r4, r2
   285f4:	e3e064df 	mvn	r6, #-553648128	; 0xdf000000
   285f8:	e59fe06c 	ldr	lr, [pc, #108]	; 2866c <CPageTable::CPageTable(unsigned int)+0x8c>
   285fc:	e59f806c 	ldr	r8, [pc, #108]	; 28670 <CPageTable::CPageTable(unsigned int)+0x90>
   28600:	e59f706c 	ldr	r7, [pc, #108]	; 28674 <CPageTable::CPageTable(unsigned int)+0x94>
   28604:	e59f506c 	ldr	r5, [pc, #108]	; 28678 <CPageTable::CPageTable(unsigned int)+0x98>
   28608:	e580c000 	str	ip, [r0]
   2860c:	ea00000c 	b	28644 <CPageTable::CPageTable(unsigned int)+0x64>
   28610:	e153000e 	cmp	r3, lr
   28614:	31a02004 	movcc	r2, r4
   28618:	3a000008 	bcc	28640 <CPageTable::CPageTable(unsigned int)+0x60>
   2861c:	e3530501 	cmp	r3, #4194304	; 0x400000
   28620:	01a02008 	moveq	r2, r8
   28624:	0a000005 	beq	28640 <CPageTable::CPageTable(unsigned int)+0x60>
   28628:	e1530001 	cmp	r3, r1
   2862c:	31a02007 	movcc	r2, r7
   28630:	3a000002 	bcc	28640 <CPageTable::CPageTable(unsigned int)+0x60>
   28634:	e1530006 	cmp	r3, r6
   28638:	31a02005 	movcc	r2, r5
   2863c:	23a02000 	movcs	r2, #0
   28640:	e28cc004 	add	ip, ip, #4
   28644:	e1822003 	orr	r2, r2, r3
   28648:	e3730601 	cmn	r3, #1048576	; 0x100000
   2864c:	e58c2000 	str	r2, [ip]
   28650:	e2833601 	add	r3, r3, #1048576	; 0x100000
   28654:	1affffed 	bne	28610 <CPageTable::CPageTable(unsigned int)+0x30>
   28658:	e3a03000 	mov	r3, #0
   2865c:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   28660:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   28664:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28668:	0000040e 	.word	0x0000040e
   2866c:	0002c368 	.word	0x0002c368
   28670:	00010412 	.word	0x00010412
   28674:	0000041e 	.word	0x0000041e
   28678:	00010416 	.word	0x00010416

0002867c <CPageTable::~CPageTable()>:
   2867c:	e12fff1e 	bx	lr

00028680 <CPageTable::GetBaseAddress() const>:
   28680:	e5900000 	ldr	r0, [r0]
   28684:	e3800001 	orr	r0, r0, #1
   28688:	e12fff1e 	bx	lr

0002868c <CurrentExecutionLevel>:
   2868c:	e10f0000 	mrs	r0, CPSR
   28690:	e3100040 	tst	r0, #64	; 0x40
   28694:	01a003a0 	lsreq	r0, r0, #7
   28698:	02000001 	andeq	r0, r0, #1
   2869c:	13a00002 	movne	r0, #2
   286a0:	e12fff1e 	bx	lr

000286a4 <EnterCritical>:
   286a4:	e2403001 	sub	r3, r0, #1
   286a8:	e3530001 	cmp	r3, #1
   286ac:	e92d4010 	push	{r4, lr}
   286b0:	8a000012 	bhi	28700 <EnterCritical+0x5c>
   286b4:	e10f1000 	mrs	r1, CPSR
   286b8:	e3500002 	cmp	r0, #2
   286bc:	1a000013 	bne	28710 <EnterCritical+0x6c>
   286c0:	f10c00c0 	cpsid	if
   286c4:	e59f306c 	ldr	r3, [pc, #108]	; 28738 <EnterCritical+0x94>
   286c8:	e5932000 	ldr	r2, [r3]
   286cc:	e3520013 	cmp	r2, #19
   286d0:	8a000014 	bhi	28728 <EnterCritical+0x84>
   286d4:	e5932000 	ldr	r2, [r3]
   286d8:	e3500001 	cmp	r0, #1
   286dc:	e2820001 	add	r0, r2, #1
   286e0:	e0832102 	add	r2, r3, r2, lsl #2
   286e4:	e5830000 	str	r0, [r3]
   286e8:	e5821004 	str	r1, [r2, #4]
   286ec:	1a000000 	bne	286f4 <EnterCritical+0x50>
   286f0:	f1080040 	cpsie	f
   286f4:	e3a03000 	mov	r3, #0
   286f8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   286fc:	e8bd8010 	pop	{r4, pc}
   28700:	e3a02064 	mov	r2, #100	; 0x64
   28704:	e59f1030 	ldr	r1, [pc, #48]	; 2873c <EnterCritical+0x98>
   28708:	e59f0030 	ldr	r0, [pc, #48]	; 28740 <EnterCritical+0x9c>
   2870c:	ebffd3fb 	bl	1d700 <assertion_failed>
   28710:	e3110040 	tst	r1, #64	; 0x40
   28714:	0affffe9 	beq	286c0 <EnterCritical+0x1c>
   28718:	e3a0206a 	mov	r2, #106	; 0x6a
   2871c:	e59f1018 	ldr	r1, [pc, #24]	; 2873c <EnterCritical+0x98>
   28720:	e59f001c 	ldr	r0, [pc, #28]	; 28744 <EnterCritical+0xa0>
   28724:	ebffd3f5 	bl	1d700 <assertion_failed>
   28728:	e3a0206e 	mov	r2, #110	; 0x6e
   2872c:	e59f1008 	ldr	r1, [pc, #8]	; 2873c <EnterCritical+0x98>
   28730:	e59f0010 	ldr	r0, [pc, #16]	; 28748 <EnterCritical+0xa4>
   28734:	ebffd3f1 	bl	1d700 <assertion_failed>
   28738:	00034c84 	.word	0x00034c84
   2873c:	00032ff0 	.word	0x00032ff0
   28740:	00033000 	.word	0x00033000
   28744:	00033038 	.word	0x00033038
   28748:	00033068 	.word	0x00033068

0002874c <LeaveCritical>:
   2874c:	e3a03000 	mov	r3, #0
   28750:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   28754:	f10c0040 	cpsid	f
   28758:	e59f3038 	ldr	r3, [pc, #56]	; 28798 <LeaveCritical+0x4c>
   2875c:	e5932000 	ldr	r2, [r3]
   28760:	e3520000 	cmp	r2, #0
   28764:	0a000006 	beq	28784 <LeaveCritical+0x38>
   28768:	e5932000 	ldr	r2, [r3]
   2876c:	e2422001 	sub	r2, r2, #1
   28770:	e5832000 	str	r2, [r3]
   28774:	e0833102 	add	r3, r3, r2, lsl #2
   28778:	e5933004 	ldr	r3, [r3, #4]
   2877c:	e121f003 	msr	CPSR_c, r3
   28780:	e12fff1e 	bx	lr
   28784:	e3a0207f 	mov	r2, #127	; 0x7f
   28788:	e92d4010 	push	{r4, lr}
   2878c:	e59f1008 	ldr	r1, [pc, #8]	; 2879c <LeaveCritical+0x50>
   28790:	e59f0008 	ldr	r0, [pc, #8]	; 287a0 <LeaveCritical+0x54>
   28794:	ebffd3d9 	bl	1d700 <assertion_failed>
   28798:	00034c84 	.word	0x00034c84
   2879c:	00032ff0 	.word	0x00032ff0
   287a0:	00033090 	.word	0x00033090

000287a4 <CleanAndInvalidateDataCacheRange>:
   287a4:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   287a8:	e3510020 	cmp	r1, #32
   287ac:	9a000008 	bls	287d4 <CleanAndInvalidateDataCacheRange+0x30>
   287b0:	e2413021 	sub	r3, r1, #33	; 0x21
   287b4:	e3c3301f 	bic	r3, r3, #31
   287b8:	e2800020 	add	r0, r0, #32
   287bc:	e0833000 	add	r3, r3, r0
   287c0:	ea000000 	b	287c8 <CleanAndInvalidateDataCacheRange+0x24>
   287c4:	e2800020 	add	r0, r0, #32
   287c8:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   287cc:	e1500003 	cmp	r0, r3
   287d0:	1afffffb 	bne	287c4 <CleanAndInvalidateDataCacheRange+0x20>
   287d4:	e3a03000 	mov	r3, #0
   287d8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   287dc:	e12fff1e 	bx	lr

000287e0 <SyncDataAndInstructionCache>:
   287e0:	e3a03000 	mov	r3, #0
   287e4:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   287e8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   287ec:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   287f0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   287f4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   287f8:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   287fc:	e12fff1e 	bx	lr

00028800 <CInterruptSystem::CInterruptSystem()>:
   28800:	e3a02000 	mov	r2, #0
   28804:	e2403004 	sub	r3, r0, #4
   28808:	e2801f47 	add	r1, r0, #284	; 0x11c
   2880c:	e5a32004 	str	r2, [r3, #4]!
   28810:	e1530001 	cmp	r3, r1
   28814:	e5832120 	str	r2, [r3, #288]	; 0x120
   28818:	1afffffb 	bne	2880c <CInterruptSystem::CInterruptSystem()+0xc>
   2881c:	e59f3004 	ldr	r3, [pc, #4]	; 28828 <CInterruptSystem::CInterruptSystem()+0x28>
   28820:	e5830000 	str	r0, [r3]
   28824:	e12fff1e 	bx	lr
   28828:	00034cd8 	.word	0x00034cd8

0002882c <CInterruptSystem::~CInterruptSystem()>:
   2882c:	f10c0080 	cpsid	i
   28830:	e3a03000 	mov	r3, #0
   28834:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   28838:	e3e01000 	mvn	r1, #0
   2883c:	e59f201c 	ldr	r2, [pc, #28]	; 28860 <CInterruptSystem::~CInterruptSystem()+0x34>
   28840:	e582320c 	str	r3, [r2, #524]	; 0x20c
   28844:	e582121c 	str	r1, [r2, #540]	; 0x21c
   28848:	e5821220 	str	r1, [r2, #544]	; 0x220
   2884c:	e5821224 	str	r1, [r2, #548]	; 0x224
   28850:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   28854:	e59f2008 	ldr	r2, [pc, #8]	; 28864 <CInterruptSystem::~CInterruptSystem()+0x38>
   28858:	e5823000 	str	r3, [r2]
   2885c:	e12fff1e 	bx	lr
   28860:	2000b000 	.word	0x2000b000
   28864:	00034cd8 	.word	0x00034cd8

00028868 <CInterruptSystem::Initialize()>:
   28868:	e92d4010 	push	{r4, lr}
   2886c:	e3a04000 	mov	r4, #0
   28870:	e59f2054 	ldr	r2, [pc, #84]	; 288cc <CInterruptSystem::Initialize()+0x64>
   28874:	e59f3054 	ldr	r3, [pc, #84]	; 288d0 <CInterruptSystem::Initialize()+0x68>
   28878:	e2422018 	sub	r2, r2, #24
   2887c:	e243301c 	sub	r3, r3, #28
   28880:	e1a02142 	asr	r2, r2, #2
   28884:	e1a03143 	asr	r3, r3, #2
   28888:	e2422002 	sub	r2, r2, #2
   2888c:	e2433002 	sub	r3, r3, #2
   28890:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   28894:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   28898:	e1c421f8 	strd	r2, [r4, #24]
   2889c:	ebffffcf 	bl	287e0 <SyncDataAndInstructionCache>
   288a0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   288a4:	e3e02000 	mvn	r2, #0
   288a8:	e59f3024 	ldr	r3, [pc, #36]	; 288d4 <CInterruptSystem::Initialize()+0x6c>
   288ac:	e583420c 	str	r4, [r3, #524]	; 0x20c
   288b0:	e583221c 	str	r2, [r3, #540]	; 0x21c
   288b4:	e5832220 	str	r2, [r3, #544]	; 0x220
   288b8:	e5832224 	str	r2, [r3, #548]	; 0x224
   288bc:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   288c0:	f1080080 	cpsie	i
   288c4:	e3a00001 	mov	r0, #1
   288c8:	e8bd8010 	pop	{r4, pc}
   288cc:	00028254 	.word	0x00028254
   288d0:	0002826c 	.word	0x0002826c
   288d4:	2000b000 	.word	0x2000b000

000288d8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   288d8:	e3510047 	cmp	r1, #71	; 0x47
   288dc:	e92d4010 	push	{r4, lr}
   288e0:	8a00001e 	bhi	28960 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   288e4:	e3520000 	cmp	r2, #0
   288e8:	0a000020 	beq	28970 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   288ec:	e59f009c 	ldr	r0, [pc, #156]	; 28990 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   288f0:	e5d0e001 	ldrb	lr, [r0, #1]
   288f4:	e5d0c000 	ldrb	ip, [r0]
   288f8:	e5d04002 	ldrb	r4, [r0, #2]
   288fc:	e18cc40e 	orr	ip, ip, lr, lsl #8
   28900:	e5d0e003 	ldrb	lr, [r0, #3]
   28904:	e18cc804 	orr	ip, ip, r4, lsl #16
   28908:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   2890c:	1a00001b 	bne	28980 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   28910:	e1a04422 	lsr	r4, r2, #8
   28914:	e1a0e822 	lsr	lr, r2, #16
   28918:	e5c02000 	strb	r2, [r0]
   2891c:	e5c03004 	strb	r3, [r0, #4]
   28920:	e1a02c22 	lsr	r2, r2, #24
   28924:	e5c04001 	strb	r4, [r0, #1]
   28928:	e5c0e002 	strb	lr, [r0, #2]
   2892c:	e1a04423 	lsr	r4, r3, #8
   28930:	e1a0e823 	lsr	lr, r3, #16
   28934:	e1a03c23 	lsr	r3, r3, #24
   28938:	e5c02003 	strb	r2, [r0, #3]
   2893c:	e5c04005 	strb	r4, [r0, #5]
   28940:	e5c0e006 	strb	lr, [r0, #6]
   28944:	e5c03007 	strb	r3, [r0, #7]
   28948:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   2894c:	e59f3040 	ldr	r3, [pc, #64]	; 28994 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xbc>
   28950:	e3811080 	orr	r1, r1, #128	; 0x80
   28954:	e583120c 	str	r1, [r3, #524]	; 0x20c
   28958:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
   2895c:	e8bd8010 	pop	{r4, pc}
   28960:	e3a0208f 	mov	r2, #143	; 0x8f
   28964:	e59f102c 	ldr	r1, [pc, #44]	; 28998 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   28968:	e59f002c 	ldr	r0, [pc, #44]	; 2899c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   2896c:	ebffd363 	bl	1d700 <assertion_failed>
   28970:	e3a02090 	mov	r2, #144	; 0x90
   28974:	e59f101c 	ldr	r1, [pc, #28]	; 28998 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   28978:	e59f0020 	ldr	r0, [pc, #32]	; 289a0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   2897c:	ebffd35f 	bl	1d700 <assertion_failed>
   28980:	e3a02091 	mov	r2, #145	; 0x91
   28984:	e59f100c 	ldr	r1, [pc, #12]	; 28998 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   28988:	e59f0014 	ldr	r0, [pc, #20]	; 289a4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   2898c:	ebffd35b 	bl	1d700 <assertion_failed>
   28990:	00034b20 	.word	0x00034b20
   28994:	2000b000 	.word	0x2000b000
   28998:	000330a8 	.word	0x000330a8
   2899c:	000330b8 	.word	0x000330b8
   289a0:	000330ec 	.word	0x000330ec
   289a4:	000330cc 	.word	0x000330cc

000289a8 <CInterruptSystem::DisconnectFIQ()>:
   289a8:	e59f3068 	ldr	r3, [pc, #104]	; 28a18 <CInterruptSystem::DisconnectFIQ()+0x70>
   289ac:	e5d31001 	ldrb	r1, [r3, #1]
   289b0:	e5d32000 	ldrb	r2, [r3]
   289b4:	e5d30002 	ldrb	r0, [r3, #2]
   289b8:	e1822401 	orr	r2, r2, r1, lsl #8
   289bc:	e5d31003 	ldrb	r1, [r3, #3]
   289c0:	e1822800 	orr	r2, r2, r0, lsl #16
   289c4:	e1922c01 	orrs	r2, r2, r1, lsl #24
   289c8:	0a00000d 	beq	28a04 <CInterruptSystem::DisconnectFIQ()+0x5c>
   289cc:	e3a02000 	mov	r2, #0
   289d0:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   289d4:	e59f1040 	ldr	r1, [pc, #64]	; 28a1c <CInterruptSystem::DisconnectFIQ()+0x74>
   289d8:	e581220c 	str	r2, [r1, #524]	; 0x20c
   289dc:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   289e0:	e5c32000 	strb	r2, [r3]
   289e4:	e5c32001 	strb	r2, [r3, #1]
   289e8:	e5c32002 	strb	r2, [r3, #2]
   289ec:	e5c32003 	strb	r2, [r3, #3]
   289f0:	e5c32004 	strb	r2, [r3, #4]
   289f4:	e5c32005 	strb	r2, [r3, #5]
   289f8:	e5c32006 	strb	r2, [r3, #6]
   289fc:	e5c32007 	strb	r2, [r3, #7]
   28a00:	e12fff1e 	bx	lr
   28a04:	e3a0209b 	mov	r2, #155	; 0x9b
   28a08:	e92d4010 	push	{r4, lr}
   28a0c:	e59f100c 	ldr	r1, [pc, #12]	; 28a20 <CInterruptSystem::DisconnectFIQ()+0x78>
   28a10:	e59f000c 	ldr	r0, [pc, #12]	; 28a24 <CInterruptSystem::DisconnectFIQ()+0x7c>
   28a14:	ebffd339 	bl	1d700 <assertion_failed>
   28a18:	00034b20 	.word	0x00034b20
   28a1c:	2000b000 	.word	0x2000b000
   28a20:	000330a8 	.word	0x000330a8
   28a24:	000330e4 	.word	0x000330e4

00028a28 <CInterruptSystem::EnableIRQ(unsigned int)>:
   28a28:	e3a03000 	mov	r3, #0
   28a2c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   28a30:	e3500047 	cmp	r0, #71	; 0x47
   28a34:	8a00000e 	bhi	28a74 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   28a38:	e350001f 	cmp	r0, #31
   28a3c:	8a000007 	bhi	28a60 <CInterruptSystem::EnableIRQ(unsigned int)+0x38>
   28a40:	e59f2040 	ldr	r2, [pc, #64]	; 28a88 <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
   28a44:	e3a03001 	mov	r3, #1
   28a48:	e200001f 	and	r0, r0, #31
   28a4c:	e1a00013 	lsl	r0, r3, r0
   28a50:	e5820000 	str	r0, [r2]
   28a54:	e3a03000 	mov	r3, #0
   28a58:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   28a5c:	e12fff1e 	bx	lr
   28a60:	e59f3024 	ldr	r3, [pc, #36]	; 28a8c <CInterruptSystem::EnableIRQ(unsigned int)+0x64>
   28a64:	e350003f 	cmp	r0, #63	; 0x3f
   28a68:	e59f2020 	ldr	r2, [pc, #32]	; 28a90 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   28a6c:	81a02003 	movhi	r2, r3
   28a70:	eafffff3 	b	28a44 <CInterruptSystem::EnableIRQ(unsigned int)+0x1c>
   28a74:	e3a020a7 	mov	r2, #167	; 0xa7
   28a78:	e92d4010 	push	{r4, lr}
   28a7c:	e59f1010 	ldr	r1, [pc, #16]	; 28a94 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   28a80:	e59f0010 	ldr	r0, [pc, #16]	; 28a98 <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   28a84:	ebffd31d 	bl	1d700 <assertion_failed>
   28a88:	2000b210 	.word	0x2000b210
   28a8c:	2000b218 	.word	0x2000b218
   28a90:	2000b214 	.word	0x2000b214
   28a94:	000330a8 	.word	0x000330a8
   28a98:	000330fc 	.word	0x000330fc

00028a9c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   28a9c:	e3510047 	cmp	r1, #71	; 0x47
   28aa0:	e92d4010 	push	{r4, lr}
   28aa4:	8a000008 	bhi	28acc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>
   28aa8:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   28aac:	e080e101 	add	lr, r0, r1, lsl #2
   28ab0:	e35c0000 	cmp	ip, #0
   28ab4:	1a000008 	bne	28adc <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x40>
   28ab8:	e7802101 	str	r2, [r0, r1, lsl #2]
   28abc:	e58e3120 	str	r3, [lr, #288]	; 0x120
   28ac0:	e1a00001 	mov	r0, r1
   28ac4:	e8bd4010 	pop	{r4, lr}
   28ac8:	eaffffd6 	b	28a28 <CInterruptSystem::EnableIRQ(unsigned int)>
   28acc:	e3a02076 	mov	r2, #118	; 0x76
   28ad0:	e59f1014 	ldr	r1, [pc, #20]	; 28aec <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   28ad4:	e59f0014 	ldr	r0, [pc, #20]	; 28af0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x54>
   28ad8:	ebffd308 	bl	1d700 <assertion_failed>
   28adc:	e3a02077 	mov	r2, #119	; 0x77
   28ae0:	e59f1004 	ldr	r1, [pc, #4]	; 28aec <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   28ae4:	e59f0008 	ldr	r0, [pc, #8]	; 28af4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   28ae8:	ebffd304 	bl	1d700 <assertion_failed>
   28aec:	000330a8 	.word	0x000330a8
   28af0:	000330fc 	.word	0x000330fc
   28af4:	00033110 	.word	0x00033110

00028af8 <CInterruptSystem::DisableIRQ(unsigned int)>:
   28af8:	e3a03000 	mov	r3, #0
   28afc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   28b00:	e3500047 	cmp	r0, #71	; 0x47
   28b04:	8a00000e 	bhi	28b44 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   28b08:	e350001f 	cmp	r0, #31
   28b0c:	8a000007 	bhi	28b30 <CInterruptSystem::DisableIRQ(unsigned int)+0x38>
   28b10:	e59f2040 	ldr	r2, [pc, #64]	; 28b58 <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
   28b14:	e3a03001 	mov	r3, #1
   28b18:	e200001f 	and	r0, r0, #31
   28b1c:	e1a00013 	lsl	r0, r3, r0
   28b20:	e5820000 	str	r0, [r2]
   28b24:	e3a03000 	mov	r3, #0
   28b28:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   28b2c:	e12fff1e 	bx	lr
   28b30:	e59f3024 	ldr	r3, [pc, #36]	; 28b5c <CInterruptSystem::DisableIRQ(unsigned int)+0x64>
   28b34:	e350003f 	cmp	r0, #63	; 0x3f
   28b38:	e59f2020 	ldr	r2, [pc, #32]	; 28b60 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   28b3c:	81a02003 	movhi	r2, r3
   28b40:	eafffff3 	b	28b14 <CInterruptSystem::DisableIRQ(unsigned int)+0x1c>
   28b44:	e3a020bf 	mov	r2, #191	; 0xbf
   28b48:	e92d4010 	push	{r4, lr}
   28b4c:	e59f1010 	ldr	r1, [pc, #16]	; 28b64 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   28b50:	e59f0010 	ldr	r0, [pc, #16]	; 28b68 <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   28b54:	ebffd2e9 	bl	1d700 <assertion_failed>
   28b58:	2000b21c 	.word	0x2000b21c
   28b5c:	2000b224 	.word	0x2000b224
   28b60:	2000b220 	.word	0x2000b220
   28b64:	000330a8 	.word	0x000330a8
   28b68:	000330fc 	.word	0x000330fc

00028b6c <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   28b6c:	e3510047 	cmp	r1, #71	; 0x47
   28b70:	e92d4070 	push	{r4, r5, r6, lr}
   28b74:	8a00000b 	bhi	28ba8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   28b78:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   28b7c:	e1a04001 	mov	r4, r1
   28b80:	e3530000 	cmp	r3, #0
   28b84:	e1a05000 	mov	r5, r0
   28b88:	e0806101 	add	r6, r0, r1, lsl #2
   28b8c:	0a000009 	beq	28bb8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   28b90:	e1a00001 	mov	r0, r1
   28b94:	ebffffd7 	bl	28af8 <CInterruptSystem::DisableIRQ(unsigned int)>
   28b98:	e3a03000 	mov	r3, #0
   28b9c:	e7853104 	str	r3, [r5, r4, lsl #2]
   28ba0:	e5863120 	str	r3, [r6, #288]	; 0x120
   28ba4:	e8bd8070 	pop	{r4, r5, r6, pc}
   28ba8:	e3a02081 	mov	r2, #129	; 0x81
   28bac:	e59f1014 	ldr	r1, [pc, #20]	; 28bc8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   28bb0:	e59f0014 	ldr	r0, [pc, #20]	; 28bcc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x60>
   28bb4:	ebffd2d1 	bl	1d700 <assertion_failed>
   28bb8:	e3a02082 	mov	r2, #130	; 0x82
   28bbc:	e59f1004 	ldr	r1, [pc, #4]	; 28bc8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   28bc0:	e59f0008 	ldr	r0, [pc, #8]	; 28bd0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   28bc4:	ebffd2cd 	bl	1d700 <assertion_failed>
   28bc8:	000330a8 	.word	0x000330a8
   28bcc:	000330fc 	.word	0x000330fc
   28bd0:	0003312c 	.word	0x0003312c

00028bd4 <CInterruptSystem::EnableFIQ(unsigned int)>:
   28bd4:	e3a03000 	mov	r3, #0
   28bd8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   28bdc:	e3500047 	cmp	r0, #71	; 0x47
   28be0:	8a000004 	bhi	28bf8 <CInterruptSystem::EnableFIQ(unsigned int)+0x24>
   28be4:	e59f2020 	ldr	r2, [pc, #32]	; 28c0c <CInterruptSystem::EnableFIQ(unsigned int)+0x38>
   28be8:	e3800080 	orr	r0, r0, #128	; 0x80
   28bec:	e582020c 	str	r0, [r2, #524]	; 0x20c
   28bf0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   28bf4:	e12fff1e 	bx	lr
   28bf8:	e3a020d7 	mov	r2, #215	; 0xd7
   28bfc:	e92d4010 	push	{r4, lr}
   28c00:	e59f1008 	ldr	r1, [pc, #8]	; 28c10 <CInterruptSystem::EnableFIQ(unsigned int)+0x3c>
   28c04:	e59f0008 	ldr	r0, [pc, #8]	; 28c14 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   28c08:	ebffd2bc 	bl	1d700 <assertion_failed>
   28c0c:	2000b000 	.word	0x2000b000
   28c10:	000330a8 	.word	0x000330a8
   28c14:	000330b8 	.word	0x000330b8

00028c18 <CInterruptSystem::DisableFIQ()>:
   28c18:	e3a03000 	mov	r3, #0
   28c1c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   28c20:	e59f2008 	ldr	r2, [pc, #8]	; 28c30 <CInterruptSystem::DisableFIQ()+0x18>
   28c24:	e582320c 	str	r3, [r2, #524]	; 0x20c
   28c28:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   28c2c:	e12fff1e 	bx	lr
   28c30:	2000b000 	.word	0x2000b000

00028c34 <CInterruptSystem::Get()>:
   28c34:	e59f301c 	ldr	r3, [pc, #28]	; 28c58 <CInterruptSystem::Get()+0x24>
   28c38:	e5930000 	ldr	r0, [r3]
   28c3c:	e3500000 	cmp	r0, #0
   28c40:	112fff1e 	bxne	lr
   28c44:	e3a020e9 	mov	r2, #233	; 0xe9
   28c48:	e92d4010 	push	{r4, lr}
   28c4c:	e59f1008 	ldr	r1, [pc, #8]	; 28c5c <CInterruptSystem::Get()+0x28>
   28c50:	e59f0008 	ldr	r0, [pc, #8]	; 28c60 <CInterruptSystem::Get()+0x2c>
   28c54:	ebffd2a9 	bl	1d700 <assertion_failed>
   28c58:	00034cd8 	.word	0x00034cd8
   28c5c:	000330a8 	.word	0x000330a8
   28c60:	0002c704 	.word	0x0002c704

00028c64 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   28c64:	e3510047 	cmp	r1, #71	; 0x47
   28c68:	e92d4010 	push	{r4, lr}
   28c6c:	8a00000b 	bhi	28ca0 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   28c70:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   28c74:	e0803101 	add	r3, r0, r1, lsl #2
   28c78:	e3540000 	cmp	r4, #0
   28c7c:	0a000003 	beq	28c90 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   28c80:	e5930120 	ldr	r0, [r3, #288]	; 0x120
   28c84:	e12fff34 	blx	r4
   28c88:	e3a00001 	mov	r0, #1
   28c8c:	e8bd8010 	pop	{r4, pc}
   28c90:	e1a00001 	mov	r0, r1
   28c94:	ebffff97 	bl	28af8 <CInterruptSystem::DisableIRQ(unsigned int)>
   28c98:	e1a00004 	mov	r0, r4
   28c9c:	e8bd8010 	pop	{r4, pc}
   28ca0:	e3a020ef 	mov	r2, #239	; 0xef
   28ca4:	e59f1004 	ldr	r1, [pc, #4]	; 28cb0 <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
   28ca8:	e59f0004 	ldr	r0, [pc, #4]	; 28cb4 <CInterruptSystem::CallIRQHandler(unsigned int)+0x50>
   28cac:	ebffd293 	bl	1d700 <assertion_failed>
   28cb0:	000330a8 	.word	0x000330a8
   28cb4:	000330fc 	.word	0x000330fc

00028cb8 <CInterruptSystem::InterruptHandler()>:
   28cb8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   28cbc:	e59f80a4 	ldr	r8, [pc, #164]	; 28d68 <CInterruptSystem::InterruptHandler()+0xb0>
   28cc0:	e24dd010 	sub	sp, sp, #16
   28cc4:	e5983000 	ldr	r3, [r8]
   28cc8:	e3530000 	cmp	r3, #0
   28ccc:	0a000021 	beq	28d58 <CInterruptSystem::InterruptHandler()+0xa0>
   28cd0:	e3a06000 	mov	r6, #0
   28cd4:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   28cd8:	e59f308c 	ldr	r3, [pc, #140]	; 28d6c <CInterruptSystem::InterruptHandler()+0xb4>
   28cdc:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   28ce0:	e58d2004 	str	r2, [sp, #4]
   28ce4:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   28ce8:	e58d2008 	str	r2, [sp, #8]
   28cec:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   28cf0:	e6ef3073 	uxtb	r3, r3
   28cf4:	e58d300c 	str	r3, [sp, #12]
   28cf8:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   28cfc:	e28d7004 	add	r7, sp, #4
   28d00:	e4974004 	ldr	r4, [r7], #4
   28d04:	e3540000 	cmp	r4, #0
   28d08:	1a000004 	bne	28d20 <CInterruptSystem::InterruptHandler()+0x68>
   28d0c:	e2866001 	add	r6, r6, #1
   28d10:	e3560003 	cmp	r6, #3
   28d14:	1afffff9 	bne	28d00 <CInterruptSystem::InterruptHandler()+0x48>
   28d18:	e28dd010 	add	sp, sp, #16
   28d1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28d20:	e1a05286 	lsl	r5, r6, #5
   28d24:	ea000002 	b	28d34 <CInterruptSystem::InterruptHandler()+0x7c>
   28d28:	e1b040a4 	lsrs	r4, r4, #1
   28d2c:	e2855001 	add	r5, r5, #1
   28d30:	0afffff5 	beq	28d0c <CInterruptSystem::InterruptHandler()+0x54>
   28d34:	e3140001 	tst	r4, #1
   28d38:	0afffffa 	beq	28d28 <CInterruptSystem::InterruptHandler()+0x70>
   28d3c:	e1a01005 	mov	r1, r5
   28d40:	e5980000 	ldr	r0, [r8]
   28d44:	ebffffc6 	bl	28c64 <CInterruptSystem::CallIRQHandler(unsigned int)>
   28d48:	e3500000 	cmp	r0, #0
   28d4c:	0afffff5 	beq	28d28 <CInterruptSystem::InterruptHandler()+0x70>
   28d50:	e28dd010 	add	sp, sp, #16
   28d54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28d58:	e59f2010 	ldr	r2, [pc, #16]	; 28d70 <CInterruptSystem::InterruptHandler()+0xb8>
   28d5c:	e59f1010 	ldr	r1, [pc, #16]	; 28d74 <CInterruptSystem::InterruptHandler()+0xbc>
   28d60:	e59f0010 	ldr	r0, [pc, #16]	; 28d78 <CInterruptSystem::InterruptHandler()+0xc0>
   28d64:	ebffd265 	bl	1d700 <assertion_failed>
   28d68:	00034cd8 	.word	0x00034cd8
   28d6c:	2000b000 	.word	0x2000b000
   28d70:	00000102 	.word	0x00000102
   28d74:	000330a8 	.word	0x000330a8
   28d78:	0002c704 	.word	0x0002c704

00028d7c <InterruptHandler>:
   28d7c:	e92d4010 	push	{r4, lr}
   28d80:	e3a04000 	mov	r4, #0
   28d84:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   28d88:	ebffffca 	bl	28cb8 <CInterruptSystem::InterruptHandler()>
   28d8c:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   28d90:	e8bd8010 	pop	{r4, pc}

00028d94 <__cxa_pure_virtual>:
   28d94:	e3a02018 	mov	r2, #24
   28d98:	e92d4010 	push	{r4, lr}
   28d9c:	e59f1004 	ldr	r1, [pc, #4]	; 28da8 <__cxa_pure_virtual+0x14>
   28da0:	e59f0004 	ldr	r0, [pc, #4]	; 28dac <__cxa_pure_virtual+0x18>
   28da4:	ebffd255 	bl	1d700 <assertion_failed>
   28da8:	00033148 	.word	0x00033148
   28dac:	0002dbb4 	.word	0x0002dbb4

00028db0 <malloc>:
   28db0:	e59f300c 	ldr	r3, [pc, #12]	; 28dc4 <malloc+0x14>
   28db4:	e1a01000 	mov	r1, r0
   28db8:	e5930000 	ldr	r0, [r3]
   28dbc:	e280000c 	add	r0, r0, #12
   28dc0:	eafffacb 	b	278f4 <CHeapAllocator::Allocate(unsigned int)>
   28dc4:	00034c80 	.word	0x00034c80

00028dc8 <free>:
   28dc8:	e59f300c 	ldr	r3, [pc, #12]	; 28ddc <free+0x14>
   28dcc:	e1a01000 	mov	r1, r0
   28dd0:	e5930000 	ldr	r0, [r3]
   28dd4:	e280000c 	add	r0, r0, #12
   28dd8:	eafffb42 	b	27ae8 <CHeapAllocator::Free(void*)>
   28ddc:	00034c80 	.word	0x00034c80

00028de0 <calloc>:
   28de0:	e0010190 	mul	r1, r0, r1
   28de4:	e3510001 	cmp	r1, #1
   28de8:	e92d4070 	push	{r4, r5, r6, lr}
   28dec:	21a04001 	movcs	r4, r1
   28df0:	33a04001 	movcc	r4, #1
   28df4:	e1500004 	cmp	r0, r4
   28df8:	8a00000b 	bhi	28e2c <calloc+0x4c>
   28dfc:	e59f3038 	ldr	r3, [pc, #56]	; 28e3c <calloc+0x5c>
   28e00:	e1a01004 	mov	r1, r4
   28e04:	e5930000 	ldr	r0, [r3]
   28e08:	e280000c 	add	r0, r0, #12
   28e0c:	ebfffab8 	bl	278f4 <CHeapAllocator::Allocate(unsigned int)>
   28e10:	e2505000 	subs	r5, r0, #0
   28e14:	0a000002 	beq	28e24 <calloc+0x44>
   28e18:	e1a02004 	mov	r2, r4
   28e1c:	e3a01000 	mov	r1, #0
   28e20:	ebfff650 	bl	26768 <memset>
   28e24:	e1a00005 	mov	r0, r5
   28e28:	e8bd8070 	pop	{r4, r5, r6, pc}
   28e2c:	e3a0202b 	mov	r2, #43	; 0x2b
   28e30:	e59f1008 	ldr	r1, [pc, #8]	; 28e40 <calloc+0x60>
   28e34:	e59f0008 	ldr	r0, [pc, #8]	; 28e44 <calloc+0x64>
   28e38:	ebffd230 	bl	1d700 <assertion_failed>
   28e3c:	00034c80 	.word	0x00034c80
   28e40:	00033158 	.word	0x00033158
   28e44:	00033164 	.word	0x00033164

00028e48 <realloc>:
   28e48:	e59f3010 	ldr	r3, [pc, #16]	; 28e60 <realloc+0x18>
   28e4c:	e1a02001 	mov	r2, r1
   28e50:	e5933000 	ldr	r3, [r3]
   28e54:	e1a01000 	mov	r1, r0
   28e58:	e283000c 	add	r0, r3, #12
   28e5c:	eafffb64 	b	27bf4 <CHeapAllocator::ReAllocate(void*, unsigned int)>
   28e60:	00034c80 	.word	0x00034c80

00028e64 <palloc>:
   28e64:	e59f3008 	ldr	r3, [pc, #8]	; 28e74 <palloc+0x10>
   28e68:	e5930000 	ldr	r0, [r3]
   28e6c:	e28000c8 	add	r0, r0, #200	; 0xc8
   28e70:	ea0006bd 	b	2a96c <CPageAllocator::Allocate()>
   28e74:	00034c80 	.word	0x00034c80

00028e78 <pfree>:
   28e78:	e59f300c 	ldr	r3, [pc, #12]	; 28e8c <pfree+0x14>
   28e7c:	e1a01000 	mov	r1, r0
   28e80:	e5930000 	ldr	r0, [r3]
   28e84:	e28000c8 	add	r0, r0, #200	; 0xc8
   28e88:	ea0006e9 	b	2aa34 <CPageAllocator::Free(void*)>
   28e8c:	00034c80 	.word	0x00034c80

00028e90 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   28e90:	e3a01000 	mov	r1, #0
   28e94:	e3a02001 	mov	r2, #1
   28e98:	e92d4030 	push	{r4, r5, lr}
   28e9c:	e1a05000 	mov	r5, r0
   28ea0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   28ea4:	e24dd014 	sub	sp, sp, #20
   28ea8:	e5c32011 	strb	r2, [r3, #17]
   28eac:	e5c3100c 	strb	r1, [r3, #12]
   28eb0:	e5c3100d 	strb	r1, [r3, #13]
   28eb4:	e5c3100e 	strb	r1, [r3, #14]
   28eb8:	e5c3100f 	strb	r1, [r3, #15]
   28ebc:	e5c31010 	strb	r1, [r3, #16]
   28ec0:	e5c31012 	strb	r1, [r3, #18]
   28ec4:	e5c31013 	strb	r1, [r3, #19]
   28ec8:	e28d0008 	add	r0, sp, #8
   28ecc:	ebffd22c 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   28ed0:	e59f306c 	ldr	r3, [pc, #108]	; 28f44 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   28ed4:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   28ed8:	e59f1068 	ldr	r1, [pc, #104]	; 28f48 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   28edc:	e58d3000 	str	r3, [sp]
   28ee0:	e28d0008 	add	r0, sp, #8
   28ee4:	e283300c 	add	r3, r3, #12
   28ee8:	ebffd231 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   28eec:	e2504000 	subs	r4, r0, #0
   28ef0:	0a000008 	beq	28f18 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   28ef4:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   28ef8:	e5d2300c 	ldrb	r3, [r2, #12]
   28efc:	e5d2000d 	ldrb	r0, [r2, #13]
   28f00:	e5d2100e 	ldrb	r1, [r2, #14]
   28f04:	e1833400 	orr	r3, r3, r0, lsl #8
   28f08:	e5d2200f 	ldrb	r2, [r2, #15]
   28f0c:	e1833801 	orr	r3, r3, r1, lsl #16
   28f10:	e1933c02 	orrs	r3, r3, r2, lsl #24
   28f14:	0a000005 	beq	28f30 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   28f18:	e3a04000 	mov	r4, #0
   28f1c:	e28d0008 	add	r0, sp, #8
   28f20:	ebffd21e 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   28f24:	e1a00004 	mov	r0, r4
   28f28:	e28dd014 	add	sp, sp, #20
   28f2c:	e8bd8030 	pop	{r4, r5, pc}
   28f30:	e28d0008 	add	r0, sp, #8
   28f34:	ebffd219 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   28f38:	e1a00004 	mov	r0, r4
   28f3c:	e28dd014 	add	sp, sp, #20
   28f40:	e8bd8030 	pop	{r4, r5, pc}
   28f44:	00000408 	.word	0x00000408
   28f48:	0004800b 	.word	0x0004800b

00028f4c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   28f4c:	e92d4030 	push	{r4, r5, lr}
   28f50:	e1a04000 	mov	r4, r0
   28f54:	e3a00000 	mov	r0, #0
   28f58:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   28f5c:	e59d5040 	ldr	r5, [sp, #64]	; 0x40
   28f60:	e59de03c 	ldr	lr, [sp, #60]	; 0x3c
   28f64:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   28f68:	e1550000 	cmp	r5, r0
   28f6c:	e8840006 	stm	r4, {r1, r2}
   28f70:	e5843010 	str	r3, [r4, #16]
   28f74:	e584e00c 	str	lr, [r4, #12]
   28f78:	e584c008 	str	ip, [r4, #8]
   28f7c:	e5845014 	str	r5, [r4, #20]
   28f80:	e5840018 	str	r0, [r4, #24]
   28f84:	e584001c 	str	r0, [r4, #28]
   28f88:	e5840020 	str	r0, [r4, #32]
   28f8c:	e5840024 	str	r0, [r4, #36]	; 0x24
   28f90:	1a00002e 	bne	29050 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x104>
   28f94:	e1520000 	cmp	r2, r0
   28f98:	11510000 	cmpne	r1, r0
   28f9c:	1a000018 	bne	29004 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xb8>
   28fa0:	e1a01005 	mov	r1, r5
   28fa4:	e28d000c 	add	r0, sp, #12
   28fa8:	ebffd1f5 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   28fac:	e3a03014 	mov	r3, #20
   28fb0:	e59f10d8 	ldr	r1, [pc, #216]	; 29090 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x144>
   28fb4:	e58d5000 	str	r5, [sp]
   28fb8:	e28d000c 	add	r0, sp, #12
   28fbc:	e08d2003 	add	r2, sp, r3
   28fc0:	ebffd1fb 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   28fc4:	e3500000 	cmp	r0, #0
   28fc8:	0a000006 	beq	28fe8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x9c>
   28fcc:	e1cd22d0 	ldrd	r2, [sp, #32]
   28fd0:	e2420d0a 	sub	r0, r2, #640	; 0x280
   28fd4:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   28fd8:	e3510e69 	cmp	r1, #1680	; 0x690
   28fdc:	93500d36 	cmpls	r0, #3456	; 0xd80
   28fe0:	e1c420f0 	strd	r2, [r4]
   28fe4:	9a000002 	bls	28ff4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa8>
   28fe8:	e3a02d0a 	mov	r2, #640	; 0x280
   28fec:	e3a03e1e 	mov	r3, #480	; 0x1e0
   28ff0:	e1c420f0 	strd	r2, [r4]
   28ff4:	e28d000c 	add	r0, sp, #12
   28ff8:	ebffd1e8 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   28ffc:	e594c008 	ldr	ip, [r4, #8]
   29000:	e5943010 	ldr	r3, [r4, #16]
   29004:	e35c0000 	cmp	ip, #0
   29008:	1a000013 	bne	2905c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   2900c:	e8940006 	ldm	r4, {r1, r2}
   29010:	e3530008 	cmp	r3, #8
   29014:	e5841008 	str	r1, [r4, #8]
   29018:	e584200c 	str	r2, [r4, #12]
   2901c:	9a000013 	bls	29070 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x124>
   29020:	e3a02070 	mov	r2, #112	; 0x70
   29024:	e59f1068 	ldr	r1, [pc, #104]	; 29094 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x148>
   29028:	e2840028 	add	r0, r4, #40	; 0x28
   2902c:	ebfff816 	bl	2708c <memcpy>
   29030:	e1c400d4 	ldrd	r0, [r4, #4]
   29034:	e1c420dc 	ldrd	r2, [r4, #12]
   29038:	e594c000 	ldr	ip, [r4]
   2903c:	e5840038 	str	r0, [r4, #56]	; 0x38
   29040:	e584c034 	str	ip, [r4, #52]	; 0x34
   29044:	e5841048 	str	r1, [r4, #72]	; 0x48
   29048:	e584204c 	str	r2, [r4, #76]	; 0x4c
   2904c:	e584305c 	str	r3, [r4, #92]	; 0x5c
   29050:	e1a00004 	mov	r0, r4
   29054:	e28dd02c 	add	sp, sp, #44	; 0x2c
   29058:	e8bd8030 	pop	{r4, r5, pc}
   2905c:	e594200c 	ldr	r2, [r4, #12]
   29060:	e3520000 	cmp	r2, #0
   29064:	0affffe8 	beq	2900c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc0>
   29068:	e3530008 	cmp	r3, #8
   2906c:	8affffeb 	bhi	29020 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
   29070:	e59f0020 	ldr	r0, [pc, #32]	; 29098 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x14c>
   29074:	ebfff9f0 	bl	2783c <operator new[](unsigned int)>
   29078:	e3a02b01 	mov	r2, #1024	; 0x400
   2907c:	e5840024 	str	r0, [r4, #36]	; 0x24
   29080:	e3a01000 	mov	r1, #0
   29084:	e2800014 	add	r0, r0, #20
   29088:	ebfff5b6 	bl	26768 <memset>
   2908c:	eaffffe3 	b	29020 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
   29090:	00040003 	.word	0x00040003
   29094:	00033178 	.word	0x00033178
   29098:	00000414 	.word	0x00000414

0002909c <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   2909c:	e92d4010 	push	{r4, lr}
   290a0:	e1a04000 	mov	r4, r0
   290a4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   290a8:	e3500000 	cmp	r0, #0
   290ac:	0a000001 	beq	290b8 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x1c>
   290b0:	e3a01014 	mov	r1, #20
   290b4:	ebfff9e8 	bl	2785c <operator delete(void*, unsigned int)>
   290b8:	e1a00004 	mov	r0, r4
   290bc:	e8bd8010 	pop	{r4, pc}

000290c0 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   290c0:	e5903010 	ldr	r3, [r0, #16]
   290c4:	e3530008 	cmp	r3, #8
   290c8:	812fff1e 	bxhi	lr
   290cc:	e1a0c982 	lsl	ip, r2, #19
   290d0:	e1a035a2 	lsr	r3, r2, #11
   290d4:	e20cc73e 	and	ip, ip, #16252928	; 0xf80000
   290d8:	e1a02282 	lsl	r2, r2, #5
   290dc:	e18cc183 	orr	ip, ip, r3, lsl #3
   290e0:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   290e4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   290e8:	e182200c 	orr	r2, r2, ip
   290ec:	e38204ff 	orr	r0, r2, #-16777216	; 0xff000000
   290f0:	e2811004 	add	r1, r1, #4
   290f4:	e0831101 	add	r1, r3, r1, lsl #2
   290f8:	e1a0c420 	lsr	ip, r0, #8
   290fc:	e1a03820 	lsr	r3, r0, #16
   29100:	e1a00c20 	lsr	r0, r0, #24
   29104:	e5c12004 	strb	r2, [r1, #4]
   29108:	e5c1c005 	strb	ip, [r1, #5]
   2910c:	e5c13006 	strb	r3, [r1, #6]
   29110:	e5c10007 	strb	r0, [r1, #7]
   29114:	e12fff1e 	bx	lr

00029118 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   29118:	e5903010 	ldr	r3, [r0, #16]
   2911c:	e3530008 	cmp	r3, #8
   29120:	812fff1e 	bxhi	lr
   29124:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   29128:	e2811004 	add	r1, r1, #4
   2912c:	e0831101 	add	r1, r3, r1, lsl #2
   29130:	e1a0c422 	lsr	ip, r2, #8
   29134:	e1a00822 	lsr	r0, r2, #16
   29138:	e1a03c22 	lsr	r3, r2, #24
   2913c:	e5c12004 	strb	r2, [r1, #4]
   29140:	e5c1c005 	strb	ip, [r1, #5]
   29144:	e5c10006 	strb	r0, [r1, #6]
   29148:	e5c13007 	strb	r3, [r1, #7]
   2914c:	e12fff1e 	bx	lr

00029150 <CBcmFrameBuffer::Initialize()>:
   29150:	e92d4030 	push	{r4, r5, lr}
   29154:	e5901014 	ldr	r1, [r0, #20]
   29158:	e24dd00c 	sub	sp, sp, #12
   2915c:	e3510000 	cmp	r1, #0
   29160:	13a05000 	movne	r5, #0
   29164:	0a000002 	beq	29174 <CBcmFrameBuffer::Initialize()+0x24>
   29168:	e1a00005 	mov	r0, r5
   2916c:	e28dd00c 	add	sp, sp, #12
   29170:	e8bd8030 	pop	{r4, r5, pc}
   29174:	e1a04000 	mov	r4, r0
   29178:	e1a0000d 	mov	r0, sp
   2917c:	ebffd180 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   29180:	e1a0000d 	mov	r0, sp
   29184:	e3a02070 	mov	r2, #112	; 0x70
   29188:	e2841028 	add	r1, r4, #40	; 0x28
   2918c:	ebffd1c5 	bl	1d8a8 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   29190:	e2505000 	subs	r5, r0, #0
   29194:	0a00001f 	beq	29218 <CBcmFrameBuffer::Initialize()+0xc8>
   29198:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   2919c:	e3530000 	cmp	r3, #0
   291a0:	0a00001b 	beq	29214 <CBcmFrameBuffer::Initialize()+0xc4>
   291a4:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   291a8:	e3530000 	cmp	r3, #0
   291ac:	0a000018 	beq	29214 <CBcmFrameBuffer::Initialize()+0xc4>
   291b0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   291b4:	e3530000 	cmp	r3, #0
   291b8:	0a000015 	beq	29214 <CBcmFrameBuffer::Initialize()+0xc4>
   291bc:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   291c0:	e3530000 	cmp	r3, #0
   291c4:	0a000012 	beq	29214 <CBcmFrameBuffer::Initialize()+0xc4>
   291c8:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   291cc:	e3530000 	cmp	r3, #0
   291d0:	0a00000f 	beq	29214 <CBcmFrameBuffer::Initialize()+0xc4>
   291d4:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   291d8:	e3530000 	cmp	r3, #0
   291dc:	0a00000c 	beq	29214 <CBcmFrameBuffer::Initialize()+0xc4>
   291e0:	e5942010 	ldr	r2, [r4, #16]
   291e4:	e5941084 	ldr	r1, [r4, #132]	; 0x84
   291e8:	e3520008 	cmp	r2, #8
   291ec:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   291f0:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   291f4:	e5843018 	str	r3, [r4, #24]
   291f8:	e584101c 	str	r1, [r4, #28]
   291fc:	e5842020 	str	r2, [r4, #32]
   29200:	8a000004 	bhi	29218 <CBcmFrameBuffer::Initialize()+0xc8>
   29204:	e1a00004 	mov	r0, r4
   29208:	ebffff20 	bl	28e90 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   2920c:	e1a05000 	mov	r5, r0
   29210:	ea000000 	b	29218 <CBcmFrameBuffer::Initialize()+0xc8>
   29214:	e1a05003 	mov	r5, r3
   29218:	e1a0000d 	mov	r0, sp
   2921c:	ebffd15f 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   29220:	e1a00005 	mov	r0, r5
   29224:	e28dd00c 	add	sp, sp, #12
   29228:	e8bd8030 	pop	{r4, r5, pc}

0002922c <CBcmFrameBuffer::GetWidth() const>:
   2922c:	e5900000 	ldr	r0, [r0]
   29230:	e12fff1e 	bx	lr

00029234 <CBcmFrameBuffer::GetHeight() const>:
   29234:	e5900004 	ldr	r0, [r0, #4]
   29238:	e12fff1e 	bx	lr

0002923c <CBcmFrameBuffer::GetVirtWidth() const>:
   2923c:	e5900008 	ldr	r0, [r0, #8]
   29240:	e12fff1e 	bx	lr

00029244 <CBcmFrameBuffer::GetVirtHeight() const>:
   29244:	e590000c 	ldr	r0, [r0, #12]
   29248:	e12fff1e 	bx	lr

0002924c <CBcmFrameBuffer::GetPitch() const>:
   2924c:	e5900020 	ldr	r0, [r0, #32]
   29250:	e12fff1e 	bx	lr

00029254 <CBcmFrameBuffer::GetDepth() const>:
   29254:	e5900010 	ldr	r0, [r0, #16]
   29258:	e12fff1e 	bx	lr

0002925c <CBcmFrameBuffer::GetBuffer() const>:
   2925c:	e5900018 	ldr	r0, [r0, #24]
   29260:	e12fff1e 	bx	lr

00029264 <CBcmFrameBuffer::GetSize() const>:
   29264:	e590001c 	ldr	r0, [r0, #28]
   29268:	e12fff1e 	bx	lr

0002926c <CBcmFrameBuffer::UpdatePalette()>:
   2926c:	e5903010 	ldr	r3, [r0, #16]
   29270:	e3530008 	cmp	r3, #8
   29274:	9a000001 	bls	29280 <CBcmFrameBuffer::UpdatePalette()+0x14>
   29278:	e3a00001 	mov	r0, #1
   2927c:	e12fff1e 	bx	lr
   29280:	eaffff02 	b	28e90 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

00029284 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   29284:	e92d4070 	push	{r4, r5, r6, lr}
   29288:	e24dd028 	sub	sp, sp, #40	; 0x28
   2928c:	e1a05001 	mov	r5, r1
   29290:	e28d000c 	add	r0, sp, #12
   29294:	e3a01000 	mov	r1, #0
   29298:	e1a06002 	mov	r6, r2
   2929c:	ebffd138 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   292a0:	e3a03008 	mov	r3, #8
   292a4:	e58d3000 	str	r3, [sp]
   292a8:	e3a03014 	mov	r3, #20
   292ac:	e59f1048 	ldr	r1, [pc, #72]	; 292fc <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>
   292b0:	e28d000c 	add	r0, sp, #12
   292b4:	e08d2003 	add	r2, sp, r3
   292b8:	e58d5020 	str	r5, [sp, #32]
   292bc:	e58d6024 	str	r6, [sp, #36]	; 0x24
   292c0:	ebffd13b 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   292c4:	e2504000 	subs	r4, r0, #0
   292c8:	0a000006 	beq	292e8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   292cc:	e59d3020 	ldr	r3, [sp, #32]
   292d0:	e1530005 	cmp	r3, r5
   292d4:	059d0024 	ldreq	r0, [sp, #36]	; 0x24
   292d8:	13a04000 	movne	r4, #0
   292dc:	00404006 	subeq	r4, r0, r6
   292e0:	016f4f14 	clzeq	r4, r4
   292e4:	01a042a4 	lsreq	r4, r4, #5
   292e8:	e28d000c 	add	r0, sp, #12
   292ec:	ebffd12b 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   292f0:	e1a00004 	mov	r0, r4
   292f4:	e28dd028 	add	sp, sp, #40	; 0x28
   292f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   292fc:	00048009 	.word	0x00048009

00029300 <CBcmFrameBuffer::WaitForVerticalSync()>:
   29300:	e92d4010 	push	{r4, lr}
   29304:	e24dd020 	sub	sp, sp, #32
   29308:	e3a01000 	mov	r1, #0
   2930c:	e28d0008 	add	r0, sp, #8
   29310:	ebffd11b 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   29314:	e3a03000 	mov	r3, #0
   29318:	e58d3000 	str	r3, [sp]
   2931c:	e3a03010 	mov	r3, #16
   29320:	e59f1020 	ldr	r1, [pc, #32]	; 29348 <CBcmFrameBuffer::WaitForVerticalSync()+0x48>
   29324:	e08d2003 	add	r2, sp, r3
   29328:	e28d0008 	add	r0, sp, #8
   2932c:	ebffd120 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   29330:	e1a04000 	mov	r4, r0
   29334:	e28d0008 	add	r0, sp, #8
   29338:	ebffd118 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   2933c:	e1a00004 	mov	r0, r4
   29340:	e28dd020 	add	sp, sp, #32
   29344:	e8bd8010 	pop	{r4, pc}
   29348:	0004800e 	.word	0x0004800e

0002934c <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   2934c:	e92d4010 	push	{r4, lr}
   29350:	e24dd020 	sub	sp, sp, #32
   29354:	e1a04001 	mov	r4, r1
   29358:	e28d0008 	add	r0, sp, #8
   2935c:	e3a01000 	mov	r1, #0
   29360:	ebffd107 	bl	1d784 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   29364:	e3a03004 	mov	r3, #4
   29368:	e58d3000 	str	r3, [sp]
   2936c:	e3a03010 	mov	r3, #16
   29370:	e59f1024 	ldr	r1, [pc, #36]	; 2939c <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x50>
   29374:	e08d2003 	add	r2, sp, r3
   29378:	e28d0008 	add	r0, sp, #8
   2937c:	e58d401c 	str	r4, [sp, #28]
   29380:	ebffd10b 	bl	1d7b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   29384:	e1a04000 	mov	r4, r0
   29388:	e28d0008 	add	r0, sp, #8
   2938c:	ebffd103 	bl	1d7a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   29390:	e1a00004 	mov	r0, r4
   29394:	e28dd020 	add	sp, sp, #32
   29398:	e8bd8010 	pop	{r4, pc}
   2939c:	0004800f 	.word	0x0004800f

000293a0 <CBcmFrameBuffer::SetDisplay()>:
   293a0:	e12fff1e 	bx	lr

000293a4 <CBcmFrameBuffer::GetNumDisplays()>:
   293a4:	e3a00001 	mov	r0, #1
   293a8:	e12fff1e 	bx	lr

000293ac <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   293ac:	e5801000 	str	r1, [r0]
   293b0:	e5c02004 	strb	r2, [r0, #4]
   293b4:	e12fff1e 	bx	lr

000293b8 <CBcmMailBox::~CBcmMailBox()>:
   293b8:	e12fff1e 	bx	lr

000293bc <CBcmMailBox::WriteRead(unsigned int)>:
   293bc:	e92d4070 	push	{r4, r5, r6, lr}
   293c0:	e3a03000 	mov	r3, #0
   293c4:	e1a05000 	mov	r5, r0
   293c8:	e1a06001 	mov	r6, r1
   293cc:	e24dd008 	sub	sp, sp, #8
   293d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   293d4:	e5d03004 	ldrb	r3, [r0, #4]
   293d8:	e3530000 	cmp	r3, #0
   293dc:	1a000003 	bne	293f0 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   293e0:	e59f30dc 	ldr	r3, [pc, #220]	; 294c4 <CBcmMailBox::WriteRead(unsigned int)+0x108>
   293e4:	e5930000 	ldr	r0, [r3]
   293e8:	e3500000 	cmp	r0, #0
   293ec:	1a000027 	bne	29490 <CBcmMailBox::WriteRead(unsigned int)+0xd4>
   293f0:	e59f40d0 	ldr	r4, [pc, #208]	; 294c8 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   293f4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   293f8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   293fc:	1a000005 	bne	29418 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   29400:	e3a00014 	mov	r0, #20
   29404:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   29408:	ebfff495 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
   2940c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   29410:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29414:	0afffff9 	beq	29400 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   29418:	e59f00a8 	ldr	r0, [pc, #168]	; 294c8 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2941c:	e59038b8 	ldr	r3, [r0, #2232]	; 0x8b8
   29420:	e3530000 	cmp	r3, #0
   29424:	bafffffc 	blt	2941c <CBcmMailBox::WriteRead(unsigned int)+0x60>
   29428:	e316000f 	tst	r6, #15
   2942c:	1a000020 	bne	294b4 <CBcmMailBox::WriteRead(unsigned int)+0xf8>
   29430:	e5953000 	ldr	r3, [r5]
   29434:	e59f208c 	ldr	r2, [pc, #140]	; 294c8 <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   29438:	e1866003 	orr	r6, r6, r3
   2943c:	e58068a0 	str	r6, [r0, #2208]	; 0x8a0
   29440:	e5950000 	ldr	r0, [r5]
   29444:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   29448:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2944c:	1afffffc 	bne	29444 <CBcmMailBox::WriteRead(unsigned int)+0x88>
   29450:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   29454:	e203100f 	and	r1, r3, #15
   29458:	e1510000 	cmp	r1, r0
   2945c:	1afffff8 	bne	29444 <CBcmMailBox::WriteRead(unsigned int)+0x88>
   29460:	e5d52004 	ldrb	r2, [r5, #4]
   29464:	e3c3000f 	bic	r0, r3, #15
   29468:	e3520000 	cmp	r2, #0
   2946c:	1a000003 	bne	29480 <CBcmMailBox::WriteRead(unsigned int)+0xc4>
   29470:	e59f304c 	ldr	r3, [pc, #76]	; 294c4 <CBcmMailBox::WriteRead(unsigned int)+0x108>
   29474:	e5933000 	ldr	r3, [r3]
   29478:	e3530000 	cmp	r3, #0
   2947c:	1a000005 	bne	29498 <CBcmMailBox::WriteRead(unsigned int)+0xdc>
   29480:	e3a03000 	mov	r3, #0
   29484:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   29488:	e28dd008 	add	sp, sp, #8
   2948c:	e8bd8070 	pop	{r4, r5, r6, pc}
   29490:	ebfffc83 	bl	286a4 <EnterCritical>
   29494:	eaffffd5 	b	293f0 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   29498:	e58d0004 	str	r0, [sp, #4]
   2949c:	ebfffcaa 	bl	2874c <LeaveCritical>
   294a0:	e3a03000 	mov	r3, #0
   294a4:	e59d0004 	ldr	r0, [sp, #4]
   294a8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   294ac:	e28dd008 	add	sp, sp, #8
   294b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   294b4:	e3a02062 	mov	r2, #98	; 0x62
   294b8:	e59f100c 	ldr	r1, [pc, #12]	; 294cc <CBcmMailBox::WriteRead(unsigned int)+0x110>
   294bc:	e59f000c 	ldr	r0, [pc, #12]	; 294d0 <CBcmMailBox::WriteRead(unsigned int)+0x114>
   294c0:	ebffd08e 	bl	1d700 <assertion_failed>
   294c4:	00034cdc 	.word	0x00034cdc
   294c8:	2000b000 	.word	0x2000b000
   294cc:	000331e8 	.word	0x000331e8
   294d0:	000331f8 	.word	0x000331f8

000294d4 <CBcmMailBox::Flush()>:
   294d4:	e92d4010 	push	{r4, lr}
   294d8:	e59f4024 	ldr	r4, [pc, #36]	; 29504 <CBcmMailBox::Flush()+0x30>
   294dc:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   294e0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   294e4:	18bd8010 	popne	{r4, pc}
   294e8:	e3a00014 	mov	r0, #20
   294ec:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   294f0:	ebfff45b 	bl	26664 <CTimer::SimpleMsDelay(unsigned int)>
   294f4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   294f8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   294fc:	0afffff9 	beq	294e8 <CBcmMailBox::Flush()+0x14>
   29500:	e8bd8010 	pop	{r4, pc}
   29504:	2000b000 	.word	0x2000b000

00029508 <CBcmMailBox::Read()>:
   29508:	e59f2024 	ldr	r2, [pc, #36]	; 29534 <CBcmMailBox::Read()+0x2c>
   2950c:	e5901000 	ldr	r1, [r0]
   29510:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   29514:	e3130101 	tst	r3, #1073741824	; 0x40000000
   29518:	1afffffc 	bne	29510 <CBcmMailBox::Read()+0x8>
   2951c:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   29520:	e200300f 	and	r3, r0, #15
   29524:	e1530001 	cmp	r3, r1
   29528:	1afffff8 	bne	29510 <CBcmMailBox::Read()+0x8>
   2952c:	e3c0000f 	bic	r0, r0, #15
   29530:	e12fff1e 	bx	lr
   29534:	2000b000 	.word	0x2000b000

00029538 <CBcmMailBox::Write(unsigned int)>:
   29538:	e59f2034 	ldr	r2, [pc, #52]	; 29574 <CBcmMailBox::Write(unsigned int)+0x3c>
   2953c:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   29540:	e3530000 	cmp	r3, #0
   29544:	bafffffc 	blt	2953c <CBcmMailBox::Write(unsigned int)+0x4>
   29548:	e311000f 	tst	r1, #15
   2954c:	1a000003 	bne	29560 <CBcmMailBox::Write(unsigned int)+0x28>
   29550:	e5903000 	ldr	r3, [r0]
   29554:	e1811003 	orr	r1, r1, r3
   29558:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   2955c:	e12fff1e 	bx	lr
   29560:	e3a02062 	mov	r2, #98	; 0x62
   29564:	e92d4010 	push	{r4, lr}
   29568:	e59f1008 	ldr	r1, [pc, #8]	; 29578 <CBcmMailBox::Write(unsigned int)+0x40>
   2956c:	e59f0008 	ldr	r0, [pc, #8]	; 2957c <CBcmMailBox::Write(unsigned int)+0x44>
   29570:	ebffd062 	bl	1d700 <assertion_failed>
   29574:	2000b000 	.word	0x2000b000
   29578:	000331e8 	.word	0x000331e8
   2957c:	000331f8 	.word	0x000331f8

00029580 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   29580:	e3a02000 	mov	r2, #0
   29584:	e59f3004 	ldr	r3, [pc, #4]	; 29590 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   29588:	e5832000 	str	r2, [r3]
   2958c:	e12fff1e 	bx	lr
   29590:	00034cdc 	.word	0x00034cdc

00029594 <CCharGenerator::CCharGenerator()>:
   29594:	e3a03008 	mov	r3, #8
   29598:	e5803000 	str	r3, [r0]
   2959c:	e12fff1e 	bx	lr

000295a0 <CCharGenerator::~CCharGenerator()>:
   295a0:	e12fff1e 	bx	lr

000295a4 <CCharGenerator::GetCharWidth() const>:
   295a4:	e5900000 	ldr	r0, [r0]
   295a8:	e12fff1e 	bx	lr

000295ac <CCharGenerator::GetCharHeight() const>:
   295ac:	e3a00013 	mov	r0, #19
   295b0:	e12fff1e 	bx	lr

000295b4 <CCharGenerator::GetUnderline() const>:
   295b4:	e3a00010 	mov	r0, #16
   295b8:	e12fff1e 	bx	lr

000295bc <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   295bc:	e6ef1071 	uxtb	r1, r1
   295c0:	e2411021 	sub	r1, r1, #33	; 0x21
   295c4:	e35100de 	cmp	r1, #222	; 0xde
   295c8:	8a00000c 	bhi	29600 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x44>
   295cc:	e5900000 	ldr	r0, [r0]
   295d0:	e1500002 	cmp	r0, r2
   295d4:	9a00000b 	bls	29608 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x4c>
   295d8:	e353000f 	cmp	r3, #15
   295dc:	8a000007 	bhi	29600 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x44>
   295e0:	e3a0c080 	mov	ip, #128	; 0x80
   295e4:	e59f0030 	ldr	r0, [pc, #48]	; 2961c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x60>
   295e8:	e0801201 	add	r1, r0, r1, lsl #4
   295ec:	e7d13003 	ldrb	r3, [r1, r3]
   295f0:	e013325c 	ands	r3, r3, ip, asr r2
   295f4:	13a00001 	movne	r0, #1
   295f8:	03a00000 	moveq	r0, #0
   295fc:	e12fff1e 	bx	lr
   29600:	e3a00000 	mov	r0, #0
   29604:	e12fff1e 	bx	lr
   29608:	e3a0204e 	mov	r2, #78	; 0x4e
   2960c:	e92d4010 	push	{r4, lr}
   29610:	e59f1008 	ldr	r1, [pc, #8]	; 29620 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x64>
   29614:	e59f0008 	ldr	r0, [pc, #8]	; 29624 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x68>
   29618:	ebffd038 	bl	1d700 <assertion_failed>
   2961c:	00033238 	.word	0x00033238
   29620:	0003320c 	.word	0x0003320c
   29624:	00033220 	.word	0x00033220

00029628 <DelayLoop>:
   29628:	e1a01001 	mov	r1, r1
   2962c:	e1a02002 	mov	r2, r2
   29630:	e2500001 	subs	r0, r0, #1
   29634:	8afffffb 	bhi	29628 <DelayLoop>
   29638:	e1a0f00e 	mov	pc, lr

0002963c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   2963c:	e92d4070 	push	{r4, r5, r6, lr}
   29640:	e24dd008 	sub	sp, sp, #8
   29644:	e1a04000 	mov	r4, r0
   29648:	e1a06002 	mov	r6, r2
   2964c:	e58d1004 	str	r1, [sp, #4]
   29650:	ebffdc2b 	bl	20704 <CMachineInfo::Get()>
   29654:	e59d1004 	ldr	r1, [sp, #4]
   29658:	ebffdbd6 	bl	205b8 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   2965c:	e3a05000 	mov	r5, #0
   29660:	e5840000 	str	r0, [r4]
   29664:	e584600c 	str	r6, [r4, #12]
   29668:	e5845004 	str	r5, [r4, #4]
   2966c:	e5845008 	str	r5, [r4, #8]
   29670:	e5c45010 	strb	r5, [r4, #16]
   29674:	e5845014 	str	r5, [r4, #20]
   29678:	e5845018 	str	r5, [r4, #24]
   2967c:	e5c4501c 	strb	r5, [r4, #28]
   29680:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   29684:	e5943000 	ldr	r3, [r4]
   29688:	e3530080 	cmp	r3, #128	; 0x80
   2968c:	0a000023 	beq	29720 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xe4>
   29690:	e353000c 	cmp	r3, #12
   29694:	8a000025 	bhi	29730 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xf4>
   29698:	e1a01005 	mov	r1, r5
   2969c:	e3a0003f 	mov	r0, #63	; 0x3f
   296a0:	ebfff85e 	bl	27820 <operator new[](unsigned int, int)>
   296a4:	e3a0c001 	mov	ip, #1
   296a8:	e280301f 	add	r3, r0, #31
   296ac:	e59f208c 	ldr	r2, [pc, #140]	; 29740 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x104>
   296b0:	e3c3301f 	bic	r3, r3, #31
   296b4:	e9840009 	stmib	r4, {r0, r3}
   296b8:	e5835018 	str	r5, [r3, #24]
   296bc:	e583501c 	str	r5, [r3, #28]
   296c0:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   296c4:	e5941000 	ldr	r1, [r4]
   296c8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   296cc:	e183311c 	orr	r3, r3, ip, lsl r1
   296d0:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   296d4:	ebfff3e9 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
   296d8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   296dc:	e5943000 	ldr	r3, [r4]
   296e0:	e2833602 	add	r3, r3, #2097152	; 0x200000
   296e4:	e2833070 	add	r3, r3, #112	; 0x70
   296e8:	e1a03403 	lsl	r3, r3, #8
   296ec:	e5832000 	str	r2, [r3]
   296f0:	e5942000 	ldr	r2, [r4]
   296f4:	e2822602 	add	r2, r2, #2097152	; 0x200000
   296f8:	e2822070 	add	r2, r2, #112	; 0x70
   296fc:	e1a02402 	lsl	r2, r2, #8
   29700:	e5923000 	ldr	r3, [r2]
   29704:	e3530000 	cmp	r3, #0
   29708:	bafffffc 	blt	29700 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xc4>
   2970c:	e3a03000 	mov	r3, #0
   29710:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   29714:	e1a00004 	mov	r0, r4
   29718:	e28dd008 	add	sp, sp, #8
   2971c:	e8bd8070 	pop	{r4, r5, r6, pc}
   29720:	e59f101c 	ldr	r1, [pc, #28]	; 29744 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x108>
   29724:	e3a02064 	mov	r2, #100	; 0x64
   29728:	e2810010 	add	r0, r1, #16
   2972c:	ebffcff3 	bl	1d700 <assertion_failed>
   29730:	e59f100c 	ldr	r1, [pc, #12]	; 29744 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x108>
   29734:	e3a02065 	mov	r2, #101	; 0x65
   29738:	e2810030 	add	r0, r1, #48	; 0x30
   2973c:	ebffcfef 	bl	1d700 <assertion_failed>
   29740:	20007000 	.word	0x20007000
   29744:	00034028 	.word	0x00034028

00029748 <CDMAChannel::~CDMAChannel()>:
   29748:	e3a03000 	mov	r3, #0
   2974c:	e92d4010 	push	{r4, lr}
   29750:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29754:	e5903000 	ldr	r3, [r0]
   29758:	e353000c 	cmp	r3, #12
   2975c:	8a00002c 	bhi	29814 <CDMAChannel::~CDMAChannel()+0xcc>
   29760:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   29764:	e2833602 	add	r3, r3, #2097152	; 0x200000
   29768:	e2833070 	add	r3, r3, #112	; 0x70
   2976c:	e1a03403 	lsl	r3, r3, #8
   29770:	e5832000 	str	r2, [r3]
   29774:	e1a04000 	mov	r4, r0
   29778:	e5900000 	ldr	r0, [r0]
   2977c:	e2802602 	add	r2, r0, #2097152	; 0x200000
   29780:	e2822070 	add	r2, r2, #112	; 0x70
   29784:	e1a02402 	lsl	r2, r2, #8
   29788:	e5923000 	ldr	r3, [r2]
   2978c:	e3530000 	cmp	r3, #0
   29790:	bafffffc 	blt	29788 <CDMAChannel::~CDMAChannel()+0x40>
   29794:	e3a0c001 	mov	ip, #1
   29798:	e59f1094 	ldr	r1, [pc, #148]	; 29834 <CDMAChannel::~CDMAChannel()+0xec>
   2979c:	e3a02000 	mov	r2, #0
   297a0:	e5913ff0 	ldr	r3, [r1, #4080]	; 0xff0
   297a4:	e1c3301c 	bic	r3, r3, ip, lsl r0
   297a8:	e5813ff0 	str	r3, [r1, #4080]	; 0xff0
   297ac:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   297b0:	e594000c 	ldr	r0, [r4, #12]
   297b4:	e5842014 	str	r2, [r4, #20]
   297b8:	e1500002 	cmp	r0, r2
   297bc:	0a000009 	beq	297e8 <CDMAChannel::~CDMAChannel()+0xa0>
   297c0:	e5d43010 	ldrb	r3, [r4, #16]
   297c4:	e1530002 	cmp	r3, r2
   297c8:	0a000004 	beq	297e0 <CDMAChannel::~CDMAChannel()+0x98>
   297cc:	e5941000 	ldr	r1, [r4]
   297d0:	e351000c 	cmp	r1, #12
   297d4:	8a000012 	bhi	29824 <CDMAChannel::~CDMAChannel()+0xdc>
   297d8:	e2811010 	add	r1, r1, #16
   297dc:	ebfffce2 	bl	28b6c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   297e0:	e3a03000 	mov	r3, #0
   297e4:	e584300c 	str	r3, [r4, #12]
   297e8:	ebffdbc5 	bl	20704 <CMachineInfo::Get()>
   297ec:	e5941000 	ldr	r1, [r4]
   297f0:	ebffdba1 	bl	2067c <CMachineInfo::FreeDMAChannel(unsigned int)>
   297f4:	e3a03000 	mov	r3, #0
   297f8:	e5940004 	ldr	r0, [r4, #4]
   297fc:	e5843008 	str	r3, [r4, #8]
   29800:	e1500003 	cmp	r0, r3
   29804:	0a000000 	beq	2980c <CDMAChannel::~CDMAChannel()+0xc4>
   29808:	ebfff812 	bl	27858 <operator delete[](void*)>
   2980c:	e1a00004 	mov	r0, r4
   29810:	e8bd8010 	pop	{r4, pc}
   29814:	e59f101c 	ldr	r1, [pc, #28]	; 29838 <CDMAChannel::~CDMAChannel()+0xf0>
   29818:	e3a0208d 	mov	r2, #141	; 0x8d
   2981c:	e2810030 	add	r0, r1, #48	; 0x30
   29820:	ebffcfb6 	bl	1d700 <assertion_failed>
   29824:	e59f100c 	ldr	r1, [pc, #12]	; 29838 <CDMAChannel::~CDMAChannel()+0xf0>
   29828:	e3a0209f 	mov	r2, #159	; 0x9f
   2982c:	e281004c 	add	r0, r1, #76	; 0x4c
   29830:	ebffcfb2 	bl	1d700 <assertion_failed>
   29834:	20007000 	.word	0x20007000
   29838:	00034028 	.word	0x00034028

0002983c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   2983c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29840:	e2514000 	subs	r4, r1, #0
   29844:	e59de018 	ldr	lr, [sp, #24]
   29848:	e5dd501c 	ldrb	r5, [sp, #28]
   2984c:	0a000050 	beq	29994 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x158>
   29850:	e3520000 	cmp	r2, #0
   29854:	0a000052 	beq	299a4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x168>
   29858:	e3530000 	cmp	r3, #0
   2985c:	e1a08003 	mov	r8, r3
   29860:	0a000053 	beq	299b4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x178>
   29864:	e35e000f 	cmp	lr, #15
   29868:	8a000055 	bhi	299c4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x188>
   2986c:	e590c008 	ldr	ip, [r0, #8]
   29870:	e35c0000 	cmp	ip, #0
   29874:	0a000056 	beq	299d4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x198>
   29878:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   2987c:	8a000058 	bhi	299e4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1a8>
   29880:	e5901000 	ldr	r1, [r0]
   29884:	e2811602 	add	r1, r1, #2097152	; 0x200000
   29888:	e2811070 	add	r1, r1, #112	; 0x70
   2988c:	e1a01401 	lsl	r1, r1, #8
   29890:	e5911020 	ldr	r1, [r1, #32]
   29894:	e1a01e21 	lsr	r1, r1, #28
   29898:	e2211001 	eor	r1, r1, #1
   2989c:	e3530801 	cmp	r3, #65536	; 0x10000
   298a0:	33811001 	orrcc	r1, r1, #1
   298a4:	e3110001 	tst	r1, #1
   298a8:	0a000051 	beq	299f4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1b8>
   298ac:	e3a01000 	mov	r1, #0
   298b0:	e3a06030 	mov	r6, #48	; 0x30
   298b4:	e1a0e60e 	lsl	lr, lr, #12
   298b8:	e38eee33 	orr	lr, lr, #816	; 0x330
   298bc:	e1a0742e 	lsr	r7, lr, #8
   298c0:	e5cc7001 	strb	r7, [ip, #1]
   298c4:	e1a0782e 	lsr	r7, lr, #16
   298c8:	e5cc7002 	strb	r7, [ip, #2]
   298cc:	e1a0ec2e 	lsr	lr, lr, #24
   298d0:	e3c27103 	bic	r7, r2, #-1073741824	; 0xc0000000
   298d4:	e5cce003 	strb	lr, [ip, #3]
   298d8:	e387e101 	orr	lr, r7, #1073741824	; 0x40000000
   298dc:	e5cc7004 	strb	r7, [ip, #4]
   298e0:	e1a0742e 	lsr	r7, lr, #8
   298e4:	e5cc7005 	strb	r7, [ip, #5]
   298e8:	e1a0782e 	lsr	r7, lr, #16
   298ec:	e5cc7006 	strb	r7, [ip, #6]
   298f0:	e1a0ec2e 	lsr	lr, lr, #24
   298f4:	e3c47103 	bic	r7, r4, #-1073741824	; 0xc0000000
   298f8:	e5cce007 	strb	lr, [ip, #7]
   298fc:	e387e101 	orr	lr, r7, #1073741824	; 0x40000000
   29900:	e5cc7008 	strb	r7, [ip, #8]
   29904:	e1a0742e 	lsr	r7, lr, #8
   29908:	e5cc7009 	strb	r7, [ip, #9]
   2990c:	e1a0782e 	lsr	r7, lr, #16
   29910:	e1a0ec2e 	lsr	lr, lr, #24
   29914:	e1550001 	cmp	r5, r1
   29918:	e5cc700a 	strb	r7, [ip, #10]
   2991c:	e5cce00b 	strb	lr, [ip, #11]
   29920:	e1a07423 	lsr	r7, r3, #8
   29924:	e1a0e823 	lsr	lr, r3, #16
   29928:	e5cc1010 	strb	r1, [ip, #16]
   2992c:	e5cc1011 	strb	r1, [ip, #17]
   29930:	e5cc1012 	strb	r1, [ip, #18]
   29934:	e5cc1013 	strb	r1, [ip, #19]
   29938:	e5cc1014 	strb	r1, [ip, #20]
   2993c:	e5cc1015 	strb	r1, [ip, #21]
   29940:	e5cc1016 	strb	r1, [ip, #22]
   29944:	e5cc1017 	strb	r1, [ip, #23]
   29948:	e1a01c23 	lsr	r1, r3, #24
   2994c:	e5cc6000 	strb	r6, [ip]
   29950:	e5cc300c 	strb	r3, [ip, #12]
   29954:	e1a06007 	mov	r6, r7
   29958:	e5cc700d 	strb	r7, [ip, #13]
   2995c:	e5cce00e 	strb	lr, [ip, #14]
   29960:	e5cc100f 	strb	r1, [ip, #15]
   29964:	1a000001 	bne	29970 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x134>
   29968:	e5805020 	str	r5, [r0, #32]
   2996c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29970:	e5804020 	str	r4, [r0, #32]
   29974:	e1a01003 	mov	r1, r3
   29978:	e5803024 	str	r3, [r0, #36]	; 0x24
   2997c:	e1a00002 	mov	r0, r2
   29980:	ebfffb87 	bl	287a4 <CleanAndInvalidateDataCacheRange>
   29984:	e1a01008 	mov	r1, r8
   29988:	e1a00004 	mov	r0, r4
   2998c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   29990:	eafffb83 	b	287a4 <CleanAndInvalidateDataCacheRange>
   29994:	e59f1068 	ldr	r1, [pc, #104]	; 29a04 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   29998:	e3a020ba 	mov	r2, #186	; 0xba
   2999c:	e2810060 	add	r0, r1, #96	; 0x60
   299a0:	ebffcf56 	bl	1d700 <assertion_failed>
   299a4:	e59f1058 	ldr	r1, [pc, #88]	; 29a04 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   299a8:	e3a020bb 	mov	r2, #187	; 0xbb
   299ac:	e2810074 	add	r0, r1, #116	; 0x74
   299b0:	ebffcf52 	bl	1d700 <assertion_failed>
   299b4:	e59f1048 	ldr	r1, [pc, #72]	; 29a04 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   299b8:	e3a020bc 	mov	r2, #188	; 0xbc
   299bc:	e2810084 	add	r0, r1, #132	; 0x84
   299c0:	ebffcf4e 	bl	1d700 <assertion_failed>
   299c4:	e59f1038 	ldr	r1, [pc, #56]	; 29a04 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   299c8:	e3a020bd 	mov	r2, #189	; 0xbd
   299cc:	e2810090 	add	r0, r1, #144	; 0x90
   299d0:	ebffcf4a 	bl	1d700 <assertion_failed>
   299d4:	e59f1028 	ldr	r1, [pc, #40]	; 29a04 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   299d8:	e3a020bf 	mov	r2, #191	; 0xbf
   299dc:	e28100a4 	add	r0, r1, #164	; 0xa4
   299e0:	ebffcf46 	bl	1d700 <assertion_failed>
   299e4:	e59f1018 	ldr	r1, [pc, #24]	; 29a04 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   299e8:	e3a020c0 	mov	r2, #192	; 0xc0
   299ec:	e28100bc 	add	r0, r1, #188	; 0xbc
   299f0:	ebffcf42 	bl	1d700 <assertion_failed>
   299f4:	e59f1008 	ldr	r1, [pc, #8]	; 29a04 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c8>
   299f8:	e3a020c1 	mov	r2, #193	; 0xc1
   299fc:	e28100d4 	add	r0, r1, #212	; 0xd4
   29a00:	ebffcf3e 	bl	1d700 <assertion_failed>
   29a04:	00034028 	.word	0x00034028

00029a08 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   29a08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29a0c:	e251e000 	subs	lr, r1, #0
   29a10:	e5dd1018 	ldrb	r1, [sp, #24]
   29a14:	0a000040 	beq	29b1c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x114>
   29a18:	e3530000 	cmp	r3, #0
   29a1c:	0a000042 	beq	29b2c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x124>
   29a20:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   29a24:	8a000044 	bhi	29b3c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x134>
   29a28:	e590c000 	ldr	ip, [r0]
   29a2c:	e28cc602 	add	ip, ip, #2097152	; 0x200000
   29a30:	e28cc070 	add	ip, ip, #112	; 0x70
   29a34:	e1a0c40c 	lsl	ip, ip, #8
   29a38:	e59cc020 	ldr	ip, [ip, #32]
   29a3c:	e1a0ce2c 	lsr	ip, ip, #28
   29a40:	e22cc001 	eor	ip, ip, #1
   29a44:	e3530801 	cmp	r3, #65536	; 0x10000
   29a48:	338cc001 	orrcc	ip, ip, #1
   29a4c:	e31c0001 	tst	ip, #1
   29a50:	0a000045 	beq	29b6c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x164>
   29a54:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
   29a58:	0a00003b 	beq	29b4c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x144>
   29a5c:	e590c008 	ldr	ip, [r0, #8]
   29a60:	e282247e 	add	r2, r2, #2113929216	; 0x7e000000
   29a64:	e35c0000 	cmp	ip, #0
   29a68:	0a00003b 	beq	29b5c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x154>
   29a6c:	e3a04000 	mov	r4, #0
   29a70:	e3ce5103 	bic	r5, lr, #-1073741824	; 0xc0000000
   29a74:	e5cc1002 	strb	r1, [ip, #2]
   29a78:	e3851101 	orr	r1, r5, #1073741824	; 0x40000000
   29a7c:	e5cc5008 	strb	r5, [ip, #8]
   29a80:	e1a05421 	lsr	r5, r1, #8
   29a84:	e5cc5009 	strb	r5, [ip, #9]
   29a88:	e1a05821 	lsr	r5, r1, #16
   29a8c:	e5cc500a 	strb	r5, [ip, #10]
   29a90:	e59f50e4 	ldr	r5, [pc, #228]	; 29b7c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x174>
   29a94:	e1a01c21 	lsr	r1, r1, #24
   29a98:	e5cc100b 	strb	r1, [ip, #11]
   29a9c:	e5cc5000 	strb	r5, [ip]
   29aa0:	e1a01822 	lsr	r1, r2, #16
   29aa4:	e1a05425 	lsr	r5, r5, #8
   29aa8:	e5cc2004 	strb	r2, [ip, #4]
   29aac:	e5cc5001 	strb	r5, [ip, #1]
   29ab0:	e1a07422 	lsr	r7, r2, #8
   29ab4:	e5cc4010 	strb	r4, [ip, #16]
   29ab8:	e5cc4011 	strb	r4, [ip, #17]
   29abc:	e5cc4012 	strb	r4, [ip, #18]
   29ac0:	e5cc4013 	strb	r4, [ip, #19]
   29ac4:	e5cc4014 	strb	r4, [ip, #20]
   29ac8:	e5cc4015 	strb	r4, [ip, #21]
   29acc:	e5cc4016 	strb	r4, [ip, #22]
   29ad0:	e5cc4017 	strb	r4, [ip, #23]
   29ad4:	e5cc4003 	strb	r4, [ip, #3]
   29ad8:	e5cc1006 	strb	r1, [ip, #6]
   29adc:	e1a05423 	lsr	r5, r3, #8
   29ae0:	e1a04823 	lsr	r4, r3, #16
   29ae4:	e1a01c23 	lsr	r1, r3, #24
   29ae8:	e1a02c22 	lsr	r2, r2, #24
   29aec:	e5cc7005 	strb	r7, [ip, #5]
   29af0:	e5cc500d 	strb	r5, [ip, #13]
   29af4:	e5cc400e 	strb	r4, [ip, #14]
   29af8:	e5cc100f 	strb	r1, [ip, #15]
   29afc:	e5cc300c 	strb	r3, [ip, #12]
   29b00:	e5cc2007 	strb	r2, [ip, #7]
   29b04:	e1a01003 	mov	r1, r3
   29b08:	e580e020 	str	lr, [r0, #32]
   29b0c:	e5803024 	str	r3, [r0, #36]	; 0x24
   29b10:	e1a0000e 	mov	r0, lr
   29b14:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   29b18:	eafffb21 	b	287a4 <CleanAndInvalidateDataCacheRange>
   29b1c:	e59f105c 	ldr	r1, [pc, #92]	; 29b80 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   29b20:	e3a020e8 	mov	r2, #232	; 0xe8
   29b24:	e2810060 	add	r0, r1, #96	; 0x60
   29b28:	ebffcef4 	bl	1d700 <assertion_failed>
   29b2c:	e59f104c 	ldr	r1, [pc, #76]	; 29b80 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   29b30:	e3a020e9 	mov	r2, #233	; 0xe9
   29b34:	e2810084 	add	r0, r1, #132	; 0x84
   29b38:	ebffcef0 	bl	1d700 <assertion_failed>
   29b3c:	e59f103c 	ldr	r1, [pc, #60]	; 29b80 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   29b40:	e3a020ea 	mov	r2, #234	; 0xea
   29b44:	e28100bc 	add	r0, r1, #188	; 0xbc
   29b48:	ebffceec 	bl	1d700 <assertion_failed>
   29b4c:	e59f102c 	ldr	r1, [pc, #44]	; 29b80 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   29b50:	e3a020ef 	mov	r2, #239	; 0xef
   29b54:	e2810f4b 	add	r0, r1, #300	; 0x12c
   29b58:	ebffcee8 	bl	1d700 <assertion_failed>
   29b5c:	e59f101c 	ldr	r1, [pc, #28]	; 29b80 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   29b60:	e3a020f2 	mov	r2, #242	; 0xf2
   29b64:	e28100a4 	add	r0, r1, #164	; 0xa4
   29b68:	ebffcee4 	bl	1d700 <assertion_failed>
   29b6c:	e59f100c 	ldr	r1, [pc, #12]	; 29b80 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x178>
   29b70:	e3a020eb 	mov	r2, #235	; 0xeb
   29b74:	e28100d4 	add	r0, r1, #212	; 0xd4
   29b78:	ebffcee0 	bl	1d700 <assertion_failed>
   29b7c:	00000438 	.word	0x00000438
   29b80:	00034028 	.word	0x00034028

00029b84 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   29b84:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29b88:	e3520000 	cmp	r2, #0
   29b8c:	e1a04000 	mov	r4, r0
   29b90:	e5dd0020 	ldrb	r0, [sp, #32]
   29b94:	0a00003f 	beq	29c98 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x114>
   29b98:	e3530000 	cmp	r3, #0
   29b9c:	0a000041 	beq	29ca8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x124>
   29ba0:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   29ba4:	8a000043 	bhi	29cb8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x134>
   29ba8:	e594c000 	ldr	ip, [r4]
   29bac:	e28cc602 	add	ip, ip, #2097152	; 0x200000
   29bb0:	e28cc070 	add	ip, ip, #112	; 0x70
   29bb4:	e1a0c40c 	lsl	ip, ip, #8
   29bb8:	e59cc020 	ldr	ip, [ip, #32]
   29bbc:	e1a0ce2c 	lsr	ip, ip, #28
   29bc0:	e22cc001 	eor	ip, ip, #1
   29bc4:	e3530801 	cmp	r3, #65536	; 0x10000
   29bc8:	338cc001 	orrcc	ip, ip, #1
   29bcc:	e31c0001 	tst	ip, #1
   29bd0:	0a000044 	beq	29ce8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x164>
   29bd4:	e3d114ff 	bics	r1, r1, #-16777216	; 0xff000000
   29bd8:	0a00003a 	beq	29cc8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x144>
   29bdc:	e594c008 	ldr	ip, [r4, #8]
   29be0:	e281e47e 	add	lr, r1, #2113929216	; 0x7e000000
   29be4:	e35c0000 	cmp	ip, #0
   29be8:	0a00003a 	beq	29cd8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x154>
   29bec:	e3a05000 	mov	r5, #0
   29bf0:	e3a09048 	mov	r9, #72	; 0x48
   29bf4:	e3a08003 	mov	r8, #3
   29bf8:	e3c26103 	bic	r6, r2, #-1073741824	; 0xc0000000
   29bfc:	e3861101 	orr	r1, r6, #1073741824	; 0x40000000
   29c00:	e5cc0002 	strb	r0, [ip, #2]
   29c04:	e5cc6004 	strb	r6, [ip, #4]
   29c08:	e1a00002 	mov	r0, r2
   29c0c:	e1a06421 	lsr	r6, r1, #8
   29c10:	e1a02821 	lsr	r2, r1, #16
   29c14:	e1a01c21 	lsr	r1, r1, #24
   29c18:	e5cc2006 	strb	r2, [ip, #6]
   29c1c:	e5cc1007 	strb	r1, [ip, #7]
   29c20:	e1a0282e 	lsr	r2, lr, #16
   29c24:	e1a0142e 	lsr	r1, lr, #8
   29c28:	e5cce008 	strb	lr, [ip, #8]
   29c2c:	e5cc6005 	strb	r6, [ip, #5]
   29c30:	e5cc1009 	strb	r1, [ip, #9]
   29c34:	e5cc200a 	strb	r2, [ip, #10]
   29c38:	e1a0ec2e 	lsr	lr, lr, #24
   29c3c:	e1a06423 	lsr	r6, r3, #8
   29c40:	e1a01823 	lsr	r1, r3, #16
   29c44:	e1a02c23 	lsr	r2, r3, #24
   29c48:	e5cc100e 	strb	r1, [ip, #14]
   29c4c:	e5cc300c 	strb	r3, [ip, #12]
   29c50:	e5cc9000 	strb	r9, [ip]
   29c54:	e5cc5010 	strb	r5, [ip, #16]
   29c58:	e5cc5011 	strb	r5, [ip, #17]
   29c5c:	e5cc5012 	strb	r5, [ip, #18]
   29c60:	e5cc5013 	strb	r5, [ip, #19]
   29c64:	e5cc5014 	strb	r5, [ip, #20]
   29c68:	e5cc5015 	strb	r5, [ip, #21]
   29c6c:	e5cc5016 	strb	r5, [ip, #22]
   29c70:	e5cc5017 	strb	r5, [ip, #23]
   29c74:	e5cc8001 	strb	r8, [ip, #1]
   29c78:	e5cc5003 	strb	r5, [ip, #3]
   29c7c:	e5cce00b 	strb	lr, [ip, #11]
   29c80:	e5cc600d 	strb	r6, [ip, #13]
   29c84:	e5cc200f 	strb	r2, [ip, #15]
   29c88:	e1a01003 	mov	r1, r3
   29c8c:	e5845020 	str	r5, [r4, #32]
   29c90:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29c94:	eafffac2 	b	287a4 <CleanAndInvalidateDataCacheRange>
   29c98:	e59f1058 	ldr	r1, [pc, #88]	; 29cf8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   29c9c:	e3a02e11 	mov	r2, #272	; 0x110
   29ca0:	e2810074 	add	r0, r1, #116	; 0x74
   29ca4:	ebffce95 	bl	1d700 <assertion_failed>
   29ca8:	e59f1048 	ldr	r1, [pc, #72]	; 29cf8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   29cac:	e59f2048 	ldr	r2, [pc, #72]	; 29cfc <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x178>
   29cb0:	e2810084 	add	r0, r1, #132	; 0x84
   29cb4:	ebffce91 	bl	1d700 <assertion_failed>
   29cb8:	e59f1038 	ldr	r1, [pc, #56]	; 29cf8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   29cbc:	e59f203c 	ldr	r2, [pc, #60]	; 29d00 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x17c>
   29cc0:	e28100bc 	add	r0, r1, #188	; 0xbc
   29cc4:	ebffce8d 	bl	1d700 <assertion_failed>
   29cc8:	e59f1028 	ldr	r1, [pc, #40]	; 29cf8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   29ccc:	e59f2030 	ldr	r2, [pc, #48]	; 29d04 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   29cd0:	e2810f4b 	add	r0, r1, #300	; 0x12c
   29cd4:	ebffce89 	bl	1d700 <assertion_failed>
   29cd8:	e59f1018 	ldr	r1, [pc, #24]	; 29cf8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   29cdc:	e59f2024 	ldr	r2, [pc, #36]	; 29d08 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x184>
   29ce0:	e28100a4 	add	r0, r1, #164	; 0xa4
   29ce4:	ebffce85 	bl	1d700 <assertion_failed>
   29ce8:	e59f1008 	ldr	r1, [pc, #8]	; 29cf8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x174>
   29cec:	e59f2018 	ldr	r2, [pc, #24]	; 29d0c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x188>
   29cf0:	e28100d4 	add	r0, r1, #212	; 0xd4
   29cf4:	ebffce81 	bl	1d700 <assertion_failed>
   29cf8:	00034028 	.word	0x00034028
   29cfc:	00000111 	.word	0x00000111
   29d00:	00000112 	.word	0x00000112
   29d04:	00000117 	.word	0x00000117
   29d08:	0000011a 	.word	0x0000011a
   29d0c:	00000113 	.word	0x00000113

00029d10 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   29d10:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29d14:	e251e000 	subs	lr, r1, #0
   29d18:	e1a04000 	mov	r4, r0
   29d1c:	e59d9020 	ldr	r9, [sp, #32]
   29d20:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   29d24:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   29d28:	0a00004f 	beq	29e6c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   29d2c:	e3520000 	cmp	r2, #0
   29d30:	0a000051 	beq	29e7c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x16c>
   29d34:	e3530000 	cmp	r3, #0
   29d38:	0a000053 	beq	29e8c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x17c>
   29d3c:	e3530801 	cmp	r3, #65536	; 0x10000
   29d40:	2a000055 	bcs	29e9c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x18c>
   29d44:	e3590000 	cmp	r9, #0
   29d48:	0a000057 	beq	29eac <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x19c>
   29d4c:	e3590901 	cmp	r9, #16384	; 0x4000
   29d50:	2a000059 	bcs	29ebc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ac>
   29d54:	e3550801 	cmp	r5, #65536	; 0x10000
   29d58:	2a00003f 	bcs	29e5c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x14c>
   29d5c:	e350000f 	cmp	r0, #15
   29d60:	8a000059 	bhi	29ecc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1bc>
   29d64:	e594c000 	ldr	ip, [r4]
   29d68:	e28cc602 	add	ip, ip, #2097152	; 0x200000
   29d6c:	e28cc070 	add	ip, ip, #112	; 0x70
   29d70:	e1a0c40c 	lsl	ip, ip, #8
   29d74:	e59c1020 	ldr	r1, [ip, #32]
   29d78:	e3110201 	tst	r1, #268435456	; 0x10000000
   29d7c:	1a000056 	bne	29edc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1cc>
   29d80:	e594c008 	ldr	ip, [r4, #8]
   29d84:	e35c0000 	cmp	ip, #0
   29d88:	0a000057 	beq	29eec <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1dc>
   29d8c:	e3a06000 	mov	r6, #0
   29d90:	e3cee103 	bic	lr, lr, #-1073741824	; 0xc0000000
   29d94:	e5cce008 	strb	lr, [ip, #8]
   29d98:	e38ee101 	orr	lr, lr, #1073741824	; 0x40000000
   29d9c:	e1a0142e 	lsr	r1, lr, #8
   29da0:	e5cc1009 	strb	r1, [ip, #9]
   29da4:	e1a0182e 	lsr	r1, lr, #16
   29da8:	e5cc100a 	strb	r1, [ip, #10]
   29dac:	e59f1148 	ldr	r1, [pc, #328]	; 29efc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1ec>
   29db0:	e1a0ec2e 	lsr	lr, lr, #24
   29db4:	e1810600 	orr	r0, r1, r0, lsl #12
   29db8:	e5cc1000 	strb	r1, [ip]
   29dbc:	e1a01420 	lsr	r1, r0, #8
   29dc0:	e5cce00b 	strb	lr, [ip, #11]
   29dc4:	e5cc1001 	strb	r1, [ip, #1]
   29dc8:	e3c2e103 	bic	lr, r2, #-1073741824	; 0xc0000000
   29dcc:	e1a01820 	lsr	r1, r0, #16
   29dd0:	e5cc1002 	strb	r1, [ip, #2]
   29dd4:	e1a00c20 	lsr	r0, r0, #24
   29dd8:	e38e1101 	orr	r1, lr, #1073741824	; 0x40000000
   29ddc:	e5cc0003 	strb	r0, [ip, #3]
   29de0:	e1a00002 	mov	r0, r2
   29de4:	e1a02821 	lsr	r2, r1, #16
   29de8:	e5cc2006 	strb	r2, [ip, #6]
   29dec:	e2492001 	sub	r2, r9, #1
   29df0:	e5cce004 	strb	lr, [ip, #4]
   29df4:	e1832802 	orr	r2, r3, r2, lsl #16
   29df8:	e1a0e421 	lsr	lr, r1, #8
   29dfc:	e1a01c21 	lsr	r1, r1, #24
   29e00:	e5cc300c 	strb	r3, [ip, #12]
   29e04:	e5cc5012 	strb	r5, [ip, #18]
   29e08:	e5cc1007 	strb	r1, [ip, #7]
   29e0c:	e1a05805 	lsl	r5, r5, #16
   29e10:	e0010399 	mul	r1, r9, r3
   29e14:	e1a03422 	lsr	r3, r2, #8
   29e18:	e5cc300d 	strb	r3, [ip, #13]
   29e1c:	e1a05c25 	lsr	r5, r5, #24
   29e20:	e1a03822 	lsr	r3, r2, #16
   29e24:	e1a02c22 	lsr	r2, r2, #24
   29e28:	e5cc5013 	strb	r5, [ip, #19]
   29e2c:	e5cce005 	strb	lr, [ip, #5]
   29e30:	e5cc300e 	strb	r3, [ip, #14]
   29e34:	e5cc200f 	strb	r2, [ip, #15]
   29e38:	e5cc6014 	strb	r6, [ip, #20]
   29e3c:	e5cc6015 	strb	r6, [ip, #21]
   29e40:	e5cc6016 	strb	r6, [ip, #22]
   29e44:	e5cc6017 	strb	r6, [ip, #23]
   29e48:	e5cc6010 	strb	r6, [ip, #16]
   29e4c:	e5cc6011 	strb	r6, [ip, #17]
   29e50:	e5846020 	str	r6, [r4, #32]
   29e54:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29e58:	eafffa51 	b	287a4 <CleanAndInvalidateDataCacheRange>
   29e5c:	e59f109c 	ldr	r1, [pc, #156]	; 29f00 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   29e60:	e3a02d05 	mov	r2, #320	; 0x140
   29e64:	e2810e19 	add	r0, r1, #400	; 0x190
   29e68:	ebffce24 	bl	1d700 <assertion_failed>
   29e6c:	e59f108c 	ldr	r1, [pc, #140]	; 29f00 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   29e70:	e59f208c 	ldr	r2, [pc, #140]	; 29f04 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f4>
   29e74:	e2810060 	add	r0, r1, #96	; 0x60
   29e78:	ebffce20 	bl	1d700 <assertion_failed>
   29e7c:	e59f107c 	ldr	r1, [pc, #124]	; 29f00 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   29e80:	e59f2080 	ldr	r2, [pc, #128]	; 29f08 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f8>
   29e84:	e2810074 	add	r0, r1, #116	; 0x74
   29e88:	ebffce1c 	bl	1d700 <assertion_failed>
   29e8c:	e3a02f4f 	mov	r2, #316	; 0x13c
   29e90:	e59f1068 	ldr	r1, [pc, #104]	; 29f00 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   29e94:	e0810002 	add	r0, r1, r2
   29e98:	ebffce18 	bl	1d700 <assertion_failed>
   29e9c:	e59f105c 	ldr	r1, [pc, #92]	; 29f00 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   29ea0:	e59f2064 	ldr	r2, [pc, #100]	; 29f0c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1fc>
   29ea4:	e2810e15 	add	r0, r1, #336	; 0x150
   29ea8:	ebffce14 	bl	1d700 <assertion_failed>
   29eac:	e59f104c 	ldr	r1, [pc, #76]	; 29f00 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   29eb0:	e59f2058 	ldr	r2, [pc, #88]	; 29f10 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   29eb4:	e2810f5a 	add	r0, r1, #360	; 0x168
   29eb8:	ebffce10 	bl	1d700 <assertion_failed>
   29ebc:	e59f103c 	ldr	r1, [pc, #60]	; 29f00 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   29ec0:	e59f204c 	ldr	r2, [pc, #76]	; 29f14 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x204>
   29ec4:	e2810f5e 	add	r0, r1, #376	; 0x178
   29ec8:	ebffce0c 	bl	1d700 <assertion_failed>
   29ecc:	e59f102c 	ldr	r1, [pc, #44]	; 29f00 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   29ed0:	e59f2040 	ldr	r2, [pc, #64]	; 29f18 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x208>
   29ed4:	e2810090 	add	r0, r1, #144	; 0x90
   29ed8:	ebffce08 	bl	1d700 <assertion_failed>
   29edc:	e59f101c 	ldr	r1, [pc, #28]	; 29f00 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   29ee0:	e59f2034 	ldr	r2, [pc, #52]	; 29f1c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x20c>
   29ee4:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   29ee8:	ebffce04 	bl	1d700 <assertion_failed>
   29eec:	e59f100c 	ldr	r1, [pc, #12]	; 29f00 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   29ef0:	e59f2028 	ldr	r2, [pc, #40]	; 29f20 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
   29ef4:	e28100a4 	add	r0, r1, #164	; 0xa4
   29ef8:	ebffce00 	bl	1d700 <assertion_failed>
   29efc:	00000332 	.word	0x00000332
   29f00:	00034028 	.word	0x00034028
   29f04:	0000013a 	.word	0x0000013a
   29f08:	0000013b 	.word	0x0000013b
   29f0c:	0000013d 	.word	0x0000013d
   29f10:	0000013e 	.word	0x0000013e
   29f14:	0000013f 	.word	0x0000013f
   29f18:	00000141 	.word	0x00000141
   29f1c:	00000143 	.word	0x00000143
   29f20:	00000145 	.word	0x00000145

00029f24 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   29f24:	e5903000 	ldr	r3, [r0]
   29f28:	e92d4070 	push	{r4, r5, r6, lr}
   29f2c:	e353000d 	cmp	r3, #13
   29f30:	8a000014 	bhi	29f88 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x64>
   29f34:	e1a04000 	mov	r4, r0
   29f38:	e590000c 	ldr	r0, [r0, #12]
   29f3c:	e3500000 	cmp	r0, #0
   29f40:	0a000014 	beq	29f98 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x74>
   29f44:	e1a06002 	mov	r6, r2
   29f48:	e5d42010 	ldrb	r2, [r4, #16]
   29f4c:	e1a05001 	mov	r5, r1
   29f50:	e3520000 	cmp	r2, #0
   29f54:	0a000004 	beq	29f6c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   29f58:	e3550000 	cmp	r5, #0
   29f5c:	e5845014 	str	r5, [r4, #20]
   29f60:	0a000010 	beq	29fa8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x84>
   29f64:	e5846018 	str	r6, [r4, #24]
   29f68:	e8bd8070 	pop	{r4, r5, r6, pc}
   29f6c:	e2831010 	add	r1, r3, #16
   29f70:	e59f2040 	ldr	r2, [pc, #64]	; 29fb8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x94>
   29f74:	e1a03004 	mov	r3, r4
   29f78:	ebfffac7 	bl	28a9c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   29f7c:	e3a03001 	mov	r3, #1
   29f80:	e5c43010 	strb	r3, [r4, #16]
   29f84:	eafffff3 	b	29f58 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   29f88:	e59f102c 	ldr	r1, [pc, #44]	; 29fbc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   29f8c:	e3a02f59 	mov	r2, #356	; 0x164
   29f90:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   29f94:	ebffcdd9 	bl	1d700 <assertion_failed>
   29f98:	e59f101c 	ldr	r1, [pc, #28]	; 29fbc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   29f9c:	e59f201c 	ldr	r2, [pc, #28]	; 29fc0 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x9c>
   29fa0:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   29fa4:	ebffcdd5 	bl	1d700 <assertion_failed>
   29fa8:	e59f100c 	ldr	r1, [pc, #12]	; 29fbc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   29fac:	e59f2010 	ldr	r2, [pc, #16]	; 29fc4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xa0>
   29fb0:	e2810f85 	add	r0, r1, #532	; 0x214
   29fb4:	ebffcdd1 	bl	1d700 <assertion_failed>
   29fb8:	0002a334 	.word	0x0002a334
   29fbc:	00034028 	.word	0x00034028
   29fc0:	00000165 	.word	0x00000165
   29fc4:	0000016f 	.word	0x0000016f

00029fc8 <CDMAChannel::Start()>:
   29fc8:	e5903000 	ldr	r3, [r0]
   29fcc:	e92d4070 	push	{r4, r5, r6, lr}
   29fd0:	e353000c 	cmp	r3, #12
   29fd4:	8a00003b 	bhi	2a0c8 <CDMAChannel::Start()+0x100>
   29fd8:	e5902008 	ldr	r2, [r0, #8]
   29fdc:	e1a04000 	mov	r4, r0
   29fe0:	e3520000 	cmp	r2, #0
   29fe4:	0a00003b 	beq	2a0d8 <CDMAChannel::Start()+0x110>
   29fe8:	e5903014 	ldr	r3, [r0, #20]
   29fec:	e3530000 	cmp	r3, #0
   29ff0:	0a000014 	beq	2a048 <CDMAChannel::Start()+0x80>
   29ff4:	e590300c 	ldr	r3, [r0, #12]
   29ff8:	e3530000 	cmp	r3, #0
   29ffc:	0a000041 	beq	2a108 <CDMAChannel::Start()+0x140>
   2a000:	e5d03010 	ldrb	r3, [r0, #16]
   2a004:	e3530000 	cmp	r3, #0
   2a008:	0a00002a 	beq	2a0b8 <CDMAChannel::Start()+0xf0>
   2a00c:	e5d21001 	ldrb	r1, [r2, #1]
   2a010:	e5d23000 	ldrb	r3, [r2]
   2a014:	e5d20002 	ldrb	r0, [r2, #2]
   2a018:	e1833401 	orr	r3, r3, r1, lsl #8
   2a01c:	e5d21003 	ldrb	r1, [r2, #3]
   2a020:	e1833800 	orr	r3, r3, r0, lsl #16
   2a024:	e1833c01 	orr	r3, r3, r1, lsl #24
   2a028:	e3833001 	orr	r3, r3, #1
   2a02c:	e1a0c423 	lsr	ip, r3, #8
   2a030:	e1a00823 	lsr	r0, r3, #16
   2a034:	e1a01c23 	lsr	r1, r3, #24
   2a038:	e5c23000 	strb	r3, [r2]
   2a03c:	e5c2c001 	strb	ip, [r2, #1]
   2a040:	e5c20002 	strb	r0, [r2, #2]
   2a044:	e5c21003 	strb	r1, [r2, #3]
   2a048:	e3a03000 	mov	r3, #0
   2a04c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2a050:	e5945000 	ldr	r5, [r4]
   2a054:	e2853602 	add	r3, r5, #2097152	; 0x200000
   2a058:	e2833070 	add	r3, r3, #112	; 0x70
   2a05c:	e1a03403 	lsl	r3, r3, #8
   2a060:	e5932000 	ldr	r2, [r3]
   2a064:	e3120004 	tst	r2, #4
   2a068:	1a00001e 	bne	2a0e8 <CDMAChannel::Start()+0x120>
   2a06c:	e3a01001 	mov	r1, #1
   2a070:	e59f20a0 	ldr	r2, [pc, #160]	; 2a118 <CDMAChannel::Start()+0x150>
   2a074:	e5922fe0 	ldr	r2, [r2, #4064]	; 0xfe0
   2a078:	e0125511 	ands	r5, r2, r1, lsl r5
   2a07c:	1a00001d 	bne	2a0f8 <CDMAChannel::Start()+0x130>
   2a080:	e5940008 	ldr	r0, [r4, #8]
   2a084:	e3a01020 	mov	r1, #32
   2a088:	e3c02103 	bic	r2, r0, #-1073741824	; 0xc0000000
   2a08c:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
   2a090:	e5832004 	str	r2, [r3, #4]
   2a094:	ebfff9c2 	bl	287a4 <CleanAndInvalidateDataCacheRange>
   2a098:	e5943000 	ldr	r3, [r4]
   2a09c:	e59f2078 	ldr	r2, [pc, #120]	; 2a11c <CDMAChannel::Start()+0x154>
   2a0a0:	e2833602 	add	r3, r3, #2097152	; 0x200000
   2a0a4:	e2833070 	add	r3, r3, #112	; 0x70
   2a0a8:	e1a03403 	lsl	r3, r3, #8
   2a0ac:	e5832000 	str	r2, [r3]
   2a0b0:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   2a0b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a0b8:	e59f1060 	ldr	r1, [pc, #96]	; 2a120 <CDMAChannel::Start()+0x158>
   2a0bc:	e59f2060 	ldr	r2, [pc, #96]	; 2a124 <CDMAChannel::Start()+0x15c>
   2a0c0:	e2810e23 	add	r0, r1, #560	; 0x230
   2a0c4:	ebffcd8d 	bl	1d700 <assertion_failed>
   2a0c8:	e59f1050 	ldr	r1, [pc, #80]	; 2a120 <CDMAChannel::Start()+0x158>
   2a0cc:	e59f2054 	ldr	r2, [pc, #84]	; 2a128 <CDMAChannel::Start()+0x160>
   2a0d0:	e2810030 	add	r0, r1, #48	; 0x30
   2a0d4:	ebffcd89 	bl	1d700 <assertion_failed>
   2a0d8:	e59f1040 	ldr	r1, [pc, #64]	; 2a120 <CDMAChannel::Start()+0x158>
   2a0dc:	e3a02d06 	mov	r2, #384	; 0x180
   2a0e0:	e28100a4 	add	r0, r1, #164	; 0xa4
   2a0e4:	ebffcd85 	bl	1d700 <assertion_failed>
   2a0e8:	e59f1030 	ldr	r1, [pc, #48]	; 2a120 <CDMAChannel::Start()+0x158>
   2a0ec:	e59f2038 	ldr	r2, [pc, #56]	; 2a12c <CDMAChannel::Start()+0x164>
   2a0f0:	e2810d09 	add	r0, r1, #576	; 0x240
   2a0f4:	ebffcd81 	bl	1d700 <assertion_failed>
   2a0f8:	e59f1020 	ldr	r1, [pc, #32]	; 2a120 <CDMAChannel::Start()+0x158>
   2a0fc:	e3a02f63 	mov	r2, #396	; 0x18c
   2a100:	e2810f9d 	add	r0, r1, #628	; 0x274
   2a104:	ebffcd7d 	bl	1d700 <assertion_failed>
   2a108:	e59f1010 	ldr	r1, [pc, #16]	; 2a120 <CDMAChannel::Start()+0x158>
   2a10c:	e3a02f61 	mov	r2, #388	; 0x184
   2a110:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   2a114:	ebffcd79 	bl	1d700 <assertion_failed>
   2a118:	20007000 	.word	0x20007000
   2a11c:	10f10001 	.word	0x10f10001
   2a120:	00034028 	.word	0x00034028
   2a124:	00000185 	.word	0x00000185
   2a128:	0000017f 	.word	0x0000017f
   2a12c:	0000018b 	.word	0x0000018b

0002a130 <CDMAChannel::Wait()>:
   2a130:	e5903000 	ldr	r3, [r0]
   2a134:	e92d4010 	push	{r4, lr}
   2a138:	e353000c 	cmp	r3, #12
   2a13c:	8a000019 	bhi	2a1a8 <CDMAChannel::Wait()+0x78>
   2a140:	e5903014 	ldr	r3, [r0, #20]
   2a144:	e1a04000 	mov	r4, r0
   2a148:	e3530000 	cmp	r3, #0
   2a14c:	1a000019 	bne	2a1b8 <CDMAChannel::Wait()+0x88>
   2a150:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2a154:	e5902000 	ldr	r2, [r0]
   2a158:	e2822602 	add	r2, r2, #2097152	; 0x200000
   2a15c:	e2822070 	add	r2, r2, #112	; 0x70
   2a160:	e1a02402 	lsl	r2, r2, #8
   2a164:	e5923000 	ldr	r3, [r2]
   2a168:	e3130001 	tst	r3, #1
   2a16c:	1afffffc 	bne	2a164 <CDMAChannel::Wait()+0x34>
   2a170:	e5940020 	ldr	r0, [r4, #32]
   2a174:	e1a03423 	lsr	r3, r3, #8
   2a178:	e2233001 	eor	r3, r3, #1
   2a17c:	e2033001 	and	r3, r3, #1
   2a180:	e3500000 	cmp	r0, #0
   2a184:	e5c4301c 	strb	r3, [r4, #28]
   2a188:	1a000003 	bne	2a19c <CDMAChannel::Wait()+0x6c>
   2a18c:	e3a03000 	mov	r3, #0
   2a190:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2a194:	e5d4001c 	ldrb	r0, [r4, #28]
   2a198:	e8bd8010 	pop	{r4, pc}
   2a19c:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   2a1a0:	ebfff97f 	bl	287a4 <CleanAndInvalidateDataCacheRange>
   2a1a4:	eafffff8 	b	2a18c <CDMAChannel::Wait()+0x5c>
   2a1a8:	e59f1018 	ldr	r1, [pc, #24]	; 2a1c8 <CDMAChannel::Wait()+0x98>
   2a1ac:	e59f2018 	ldr	r2, [pc, #24]	; 2a1cc <CDMAChannel::Wait()+0x9c>
   2a1b0:	e2810030 	add	r0, r1, #48	; 0x30
   2a1b4:	ebffcd51 	bl	1d700 <assertion_failed>
   2a1b8:	e59f1008 	ldr	r1, [pc, #8]	; 2a1c8 <CDMAChannel::Wait()+0x98>
   2a1bc:	e3a02f69 	mov	r2, #420	; 0x1a4
   2a1c0:	e2810faa 	add	r0, r1, #680	; 0x2a8
   2a1c4:	ebffcd4d 	bl	1d700 <assertion_failed>
   2a1c8:	00034028 	.word	0x00034028
   2a1cc:	000001a3 	.word	0x000001a3

0002a1d0 <CDMAChannel::GetStatus()>:
   2a1d0:	e5903000 	ldr	r3, [r0]
   2a1d4:	e92d4010 	push	{r4, lr}
   2a1d8:	e353000c 	cmp	r3, #12
   2a1dc:	8a000007 	bhi	2a200 <CDMAChannel::GetStatus()+0x30>
   2a1e0:	e2833602 	add	r3, r3, #2097152	; 0x200000
   2a1e4:	e2833070 	add	r3, r3, #112	; 0x70
   2a1e8:	e1a03403 	lsl	r3, r3, #8
   2a1ec:	e5933000 	ldr	r3, [r3]
   2a1f0:	e3130001 	tst	r3, #1
   2a1f4:	1a000005 	bne	2a210 <CDMAChannel::GetStatus()+0x40>
   2a1f8:	e5d0001c 	ldrb	r0, [r0, #28]
   2a1fc:	e8bd8010 	pop	{r4, pc}
   2a200:	e59f1018 	ldr	r1, [pc, #24]	; 2a220 <CDMAChannel::GetStatus()+0x50>
   2a204:	e59f2018 	ldr	r2, [pc, #24]	; 2a224 <CDMAChannel::GetStatus()+0x54>
   2a208:	e2810030 	add	r0, r1, #48	; 0x30
   2a20c:	ebffcd3b 	bl	1d700 <assertion_failed>
   2a210:	e59f1008 	ldr	r1, [pc, #8]	; 2a220 <CDMAChannel::GetStatus()+0x50>
   2a214:	e3a02f71 	mov	r2, #452	; 0x1c4
   2a218:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   2a21c:	ebffcd37 	bl	1d700 <assertion_failed>
   2a220:	00034028 	.word	0x00034028
   2a224:	000001c3 	.word	0x000001c3

0002a228 <CDMAChannel::InterruptHandler()>:
   2a228:	e92d4010 	push	{r4, lr}
   2a22c:	e1a04000 	mov	r4, r0
   2a230:	e5900020 	ldr	r0, [r0, #32]
   2a234:	e3500000 	cmp	r0, #0
   2a238:	1a000022 	bne	2a2c8 <CDMAChannel::InterruptHandler()+0xa0>
   2a23c:	e3a00000 	mov	r0, #0
   2a240:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
   2a244:	e5942000 	ldr	r2, [r4]
   2a248:	e352000c 	cmp	r2, #12
   2a24c:	8a000020 	bhi	2a2d4 <CDMAChannel::InterruptHandler()+0xac>
   2a250:	e3a03001 	mov	r3, #1
   2a254:	e59f10c8 	ldr	r1, [pc, #200]	; 2a324 <CDMAChannel::InterruptHandler()+0xfc>
   2a258:	e1a03213 	lsl	r3, r3, r2
   2a25c:	e5912fe0 	ldr	r2, [r1, #4064]	; 0xfe0
   2a260:	e1130002 	tst	r3, r2
   2a264:	0a00001e 	beq	2a2e4 <CDMAChannel::InterruptHandler()+0xbc>
   2a268:	e5813fe0 	str	r3, [r1, #4064]	; 0xfe0
   2a26c:	e5943000 	ldr	r3, [r4]
   2a270:	e2833602 	add	r3, r3, #2097152	; 0x200000
   2a274:	e2833070 	add	r3, r3, #112	; 0x70
   2a278:	e1a03403 	lsl	r3, r3, #8
   2a27c:	e5931000 	ldr	r1, [r3]
   2a280:	e3110004 	tst	r1, #4
   2a284:	0a00001a 	beq	2a2f4 <CDMAChannel::InterruptHandler()+0xcc>
   2a288:	e3110001 	tst	r1, #1
   2a28c:	1a00001c 	bne	2a304 <CDMAChannel::InterruptHandler()+0xdc>
   2a290:	e3a02004 	mov	r2, #4
   2a294:	e5832000 	str	r2, [r3]
   2a298:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   2a29c:	e5943014 	ldr	r3, [r4, #20]
   2a2a0:	e1a01421 	lsr	r1, r1, #8
   2a2a4:	e2211001 	eor	r1, r1, #1
   2a2a8:	e2011001 	and	r1, r1, #1
   2a2ac:	e3530000 	cmp	r3, #0
   2a2b0:	e5c4101c 	strb	r1, [r4, #28]
   2a2b4:	0a000016 	beq	2a314 <CDMAChannel::InterruptHandler()+0xec>
   2a2b8:	e5942018 	ldr	r2, [r4, #24]
   2a2bc:	e5940000 	ldr	r0, [r4]
   2a2c0:	e8bd4010 	pop	{r4, lr}
   2a2c4:	e12fff13 	bx	r3
   2a2c8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   2a2cc:	ebfff934 	bl	287a4 <CleanAndInvalidateDataCacheRange>
   2a2d0:	eaffffd9 	b	2a23c <CDMAChannel::InterruptHandler()+0x14>
   2a2d4:	e59f104c 	ldr	r1, [pc, #76]	; 2a328 <CDMAChannel::InterruptHandler()+0x100>
   2a2d8:	e59f204c 	ldr	r2, [pc, #76]	; 2a32c <CDMAChannel::InterruptHandler()+0x104>
   2a2dc:	e2810030 	add	r0, r1, #48	; 0x30
   2a2e0:	ebffcd06 	bl	1d700 <assertion_failed>
   2a2e4:	e59f103c 	ldr	r1, [pc, #60]	; 2a328 <CDMAChannel::InterruptHandler()+0x100>
   2a2e8:	e3a02f76 	mov	r2, #472	; 0x1d8
   2a2ec:	e2810fbe 	add	r0, r1, #760	; 0x2f8
   2a2f0:	ebffcd02 	bl	1d700 <assertion_failed>
   2a2f4:	e59f102c 	ldr	r1, [pc, #44]	; 2a328 <CDMAChannel::InterruptHandler()+0x100>
   2a2f8:	e3a02f77 	mov	r2, #476	; 0x1dc
   2a2fc:	e2810e31 	add	r0, r1, #784	; 0x310
   2a300:	ebffccfe 	bl	1d700 <assertion_failed>
   2a304:	e59f101c 	ldr	r1, [pc, #28]	; 2a328 <CDMAChannel::InterruptHandler()+0x100>
   2a308:	e59f2020 	ldr	r2, [pc, #32]	; 2a330 <CDMAChannel::InterruptHandler()+0x108>
   2a30c:	e2810e32 	add	r0, r1, #800	; 0x320
   2a310:	ebffccfa 	bl	1d700 <assertion_failed>
   2a314:	e59f100c 	ldr	r1, [pc, #12]	; 2a328 <CDMAChannel::InterruptHandler()+0x100>
   2a318:	e3a02f79 	mov	r2, #484	; 0x1e4
   2a31c:	e2810f85 	add	r0, r1, #532	; 0x214
   2a320:	ebffccf6 	bl	1d700 <assertion_failed>
   2a324:	20007000 	.word	0x20007000
   2a328:	00034028 	.word	0x00034028
   2a32c:	000001d2 	.word	0x000001d2
   2a330:	000001dd 	.word	0x000001dd

0002a334 <CDMAChannel::InterruptStub(void*)>:
   2a334:	e3500000 	cmp	r0, #0
   2a338:	0a000000 	beq	2a340 <CDMAChannel::InterruptStub(void*)+0xc>
   2a33c:	eaffffb9 	b	2a228 <CDMAChannel::InterruptHandler()>
   2a340:	e59f100c 	ldr	r1, [pc, #12]	; 2a354 <CDMAChannel::InterruptStub(void*)+0x20>
   2a344:	e92d4010 	push	{r4, lr}
   2a348:	e59f2008 	ldr	r2, [pc, #8]	; 2a358 <CDMAChannel::InterruptStub(void*)+0x24>
   2a34c:	e2810fcd 	add	r0, r1, #820	; 0x334
   2a350:	ebffccea 	bl	1d700 <assertion_failed>
   2a354:	00034028 	.word	0x00034028
   2a358:	000001eb 	.word	0x000001eb

0002a35c <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)>:
   2a35c:	e3510006 	cmp	r1, #6
   2a360:	e92d4010 	push	{r4, lr}
   2a364:	e5c01000 	strb	r1, [r0]
   2a368:	e5c02001 	strb	r2, [r0, #1]
   2a36c:	8a000005 	bhi	2a388 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x2c>
   2a370:	e3520010 	cmp	r2, #16
   2a374:	98bd8010 	popls	{r4, pc}
   2a378:	e59f1018 	ldr	r1, [pc, #24]	; 2a398 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x3c>
   2a37c:	e3a0201f 	mov	r2, #31
   2a380:	e2810028 	add	r0, r1, #40	; 0x28
   2a384:	ebffccdd 	bl	1d700 <assertion_failed>
   2a388:	e59f1008 	ldr	r1, [pc, #8]	; 2a398 <CGPIOClock::CGPIOClock(TGPIOClock, TGPIOClockSource)+0x3c>
   2a38c:	e3a0201e 	mov	r2, #30
   2a390:	e2810010 	add	r0, r1, #16
   2a394:	ebffccd9 	bl	1d700 <assertion_failed>
   2a398:	00034368 	.word	0x00034368

0002a39c <CGPIOClock::~CGPIOClock()>:
   2a39c:	e5d01000 	ldrb	r1, [r0]
   2a3a0:	e59f2028 	ldr	r2, [pc, #40]	; 2a3d0 <CGPIOClock::~CGPIOClock()+0x34>
   2a3a4:	e3a03000 	mov	r3, #0
   2a3a8:	e0812002 	add	r2, r1, r2
   2a3ac:	e1a02182 	lsl	r2, r2, #3
   2a3b0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2a3b4:	e59f3018 	ldr	r3, [pc, #24]	; 2a3d4 <CGPIOClock::~CGPIOClock()+0x38>
   2a3b8:	e5823000 	str	r3, [r2]
   2a3bc:	e5923000 	ldr	r3, [r2]
   2a3c0:	e2133080 	ands	r3, r3, #128	; 0x80
   2a3c4:	1afffffc 	bne	2a3bc <CGPIOClock::~CGPIOClock()+0x20>
   2a3c8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2a3cc:	e12fff1e 	bx	lr
   2a3d0:	0402020e 	.word	0x0402020e
   2a3d4:	5a000020 	.word	0x5a000020

0002a3d8 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>:
   2a3d8:	e3530003 	cmp	r3, #3
   2a3dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2a3e0:	8a00002c 	bhi	2a498 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xc0>
   2a3e4:	e1a06003 	mov	r6, r3
   2a3e8:	e59f30d8 	ldr	r3, [pc, #216]	; 2a4c8 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xf0>
   2a3ec:	e7933106 	ldr	r3, [r3, r6, lsl #2]
   2a3f0:	e1530001 	cmp	r3, r1
   2a3f4:	93510a01 	cmpls	r1, #4096	; 0x1000
   2a3f8:	2a000022 	bcs	2a488 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xb0>
   2a3fc:	e3520a01 	cmp	r2, #4096	; 0x1000
   2a400:	2a000028 	bcs	2a4a8 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xd0>
   2a404:	e1a07000 	mov	r7, r0
   2a408:	e59f50bc 	ldr	r5, [pc, #188]	; 2a4cc <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xf4>
   2a40c:	e5d00000 	ldrb	r0, [r0]
   2a410:	e3a03000 	mov	r3, #0
   2a414:	e0805005 	add	r5, r0, r5
   2a418:	e1a05185 	lsl	r5, r5, #3
   2a41c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2a420:	e59f30a8 	ldr	r3, [pc, #168]	; 2a4d0 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xf8>
   2a424:	e5853000 	str	r3, [r5]
   2a428:	e595c000 	ldr	ip, [r5]
   2a42c:	e21c4080 	ands	r4, ip, #128	; 0x80
   2a430:	1afffffc 	bne	2a428 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0x50>
   2a434:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2a438:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2a43c:	e1822601 	orr	r2, r2, r1, lsl #12
   2a440:	e382245a 	orr	r2, r2, #1509949440	; 0x5a000000
   2a444:	e3a0000a 	mov	r0, #10
   2a448:	e5852004 	str	r2, [r5, #4]
   2a44c:	ebfff08b 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
   2a450:	e5d73001 	ldrb	r3, [r7, #1]
   2a454:	e353000f 	cmp	r3, #15
   2a458:	8a000016 	bhi	2a4b8 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xe0>
   2a45c:	e1833486 	orr	r3, r3, r6, lsl #9
   2a460:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   2a464:	e5853000 	str	r3, [r5]
   2a468:	e3a0000a 	mov	r0, #10
   2a46c:	ebfff083 	bl	26680 <CTimer::SimpleusDelay(unsigned int)>
   2a470:	e5953000 	ldr	r3, [r5]
   2a474:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   2a478:	e3833010 	orr	r3, r3, #16
   2a47c:	e5853000 	str	r3, [r5]
   2a480:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2a484:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2a488:	e59f1044 	ldr	r1, [pc, #68]	; 2a4d4 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xfc>
   2a48c:	e3a0202d 	mov	r2, #45	; 0x2d
   2a490:	e2810058 	add	r0, r1, #88	; 0x58
   2a494:	ebffcc99 	bl	1d700 <assertion_failed>
   2a498:	e59f1034 	ldr	r1, [pc, #52]	; 2a4d4 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xfc>
   2a49c:	e3a0202c 	mov	r2, #44	; 0x2c
   2a4a0:	e281004c 	add	r0, r1, #76	; 0x4c
   2a4a4:	ebffcc95 	bl	1d700 <assertion_failed>
   2a4a8:	e59f1024 	ldr	r1, [pc, #36]	; 2a4d4 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xfc>
   2a4ac:	e3a0202e 	mov	r2, #46	; 0x2e
   2a4b0:	e2810084 	add	r0, r1, #132	; 0x84
   2a4b4:	ebffcc91 	bl	1d700 <assertion_failed>
   2a4b8:	e59f1014 	ldr	r1, [pc, #20]	; 2a4d4 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)+0xfc>
   2a4bc:	e3a0203c 	mov	r2, #60	; 0x3c
   2a4c0:	e2810094 	add	r0, r1, #148	; 0x94
   2a4c4:	ebffcc8d 	bl	1d700 <assertion_failed>
   2a4c8:	00034b30 	.word	0x00034b30
   2a4cc:	0402020e 	.word	0x0402020e
   2a4d0:	5a000020 	.word	0x5a000020
   2a4d4:	00034368 	.word	0x00034368

0002a4d8 <CGPIOClock::StartRate(unsigned int)>:
   2a4d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2a4dc:	e2516000 	subs	r6, r1, #0
   2a4e0:	11a08000 	movne	r8, r0
   2a4e4:	13a05000 	movne	r5, #0
   2a4e8:	159f7078 	ldrne	r7, [pc, #120]	; 2a568 <CGPIOClock::StartRate(unsigned int)+0x90>
   2a4ec:	0a000019 	beq	2a558 <CGPIOClock::StartRate(unsigned int)+0x80>
   2a4f0:	ebffd883 	bl	20704 <CMachineInfo::Get()>
   2a4f4:	e1a01005 	mov	r1, r5
   2a4f8:	ebffd803 	bl	2050c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>
   2a4fc:	e2504000 	subs	r4, r0, #0
   2a500:	0a000007 	beq	2a524 <CGPIOClock::StartRate(unsigned int)+0x4c>
   2a504:	e1a01006 	mov	r1, r6
   2a508:	eb00015d 	bl	2aa84 <__udivsi3>
   2a50c:	e2403001 	sub	r3, r0, #1
   2a510:	e1530007 	cmp	r3, r7
   2a514:	8a000002 	bhi	2a524 <CGPIOClock::StartRate(unsigned int)+0x4c>
   2a518:	e0030690 	mul	r3, r0, r6
   2a51c:	e1530004 	cmp	r3, r4
   2a520:	0a000004 	beq	2a538 <CGPIOClock::StartRate(unsigned int)+0x60>
   2a524:	e2855001 	add	r5, r5, #1
   2a528:	e3550010 	cmp	r5, #16
   2a52c:	1affffef 	bne	2a4f0 <CGPIOClock::StartRate(unsigned int)+0x18>
   2a530:	e3a00000 	mov	r0, #0
   2a534:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2a538:	e3a03000 	mov	r3, #0
   2a53c:	e1a01000 	mov	r1, r0
   2a540:	e1a02003 	mov	r2, r3
   2a544:	e1a00008 	mov	r0, r8
   2a548:	e5c85001 	strb	r5, [r8, #1]
   2a54c:	ebffffa1 	bl	2a3d8 <CGPIOClock::Start(unsigned int, unsigned int, unsigned int)>
   2a550:	e3a00001 	mov	r0, #1
   2a554:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2a558:	e59f100c 	ldr	r1, [pc, #12]	; 2a56c <CGPIOClock::StartRate(unsigned int)+0x94>
   2a55c:	e3a02048 	mov	r2, #72	; 0x48
   2a560:	e28100b8 	add	r0, r1, #184	; 0xb8
   2a564:	ebffcc65 	bl	1d700 <assertion_failed>
   2a568:	00000ffe 	.word	0x00000ffe
   2a56c:	00034368 	.word	0x00034368

0002a570 <CGPIOClock::Stop()>:
   2a570:	e5d01000 	ldrb	r1, [r0]
   2a574:	e59f2028 	ldr	r2, [pc, #40]	; 2a5a4 <CGPIOClock::Stop()+0x34>
   2a578:	e3a03000 	mov	r3, #0
   2a57c:	e0812002 	add	r2, r1, r2
   2a580:	e1a02182 	lsl	r2, r2, #3
   2a584:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2a588:	e59f3018 	ldr	r3, [pc, #24]	; 2a5a8 <CGPIOClock::Stop()+0x38>
   2a58c:	e5823000 	str	r3, [r2]
   2a590:	e5923000 	ldr	r3, [r2]
   2a594:	e2133080 	ands	r3, r3, #128	; 0x80
   2a598:	1afffffc 	bne	2a590 <CGPIOClock::Stop()+0x20>
   2a59c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2a5a0:	e12fff1e 	bx	lr
   2a5a4:	0402020e 	.word	0x0402020e
   2a5a8:	5a000020 	.word	0x5a000020

0002a5ac <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   2a5ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2a5b0:	e3a0e000 	mov	lr, #0
   2a5b4:	e1a03000 	mov	r3, r0
   2a5b8:	e1a0c00e 	mov	ip, lr
   2a5bc:	e5801000 	str	r1, [r0]
   2a5c0:	e28020dc 	add	r2, r0, #220	; 0xdc
   2a5c4:	e5e3e004 	strb	lr, [r3, #4]!
   2a5c8:	e5a3c004 	str	ip, [r3, #4]!
   2a5cc:	e1530002 	cmp	r3, r2
   2a5d0:	1afffffc 	bne	2a5c8 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   2a5d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002a5d8 <CGPIOManager::~CGPIOManager()>:
   2a5d8:	e92d4010 	push	{r4, lr}
   2a5dc:	e2803004 	add	r3, r0, #4
   2a5e0:	e1a04000 	mov	r4, r0
   2a5e4:	e28010dc 	add	r1, r0, #220	; 0xdc
   2a5e8:	ea000001 	b	2a5f4 <CGPIOManager::~CGPIOManager()+0x1c>
   2a5ec:	e1530001 	cmp	r3, r1
   2a5f0:	0a000006 	beq	2a610 <CGPIOManager::~CGPIOManager()+0x38>
   2a5f4:	e5b32004 	ldr	r2, [r3, #4]!
   2a5f8:	e3520000 	cmp	r2, #0
   2a5fc:	0afffffa 	beq	2a5ec <CGPIOManager::~CGPIOManager()+0x14>
   2a600:	e3a0202c 	mov	r2, #44	; 0x2c
   2a604:	e59f103c 	ldr	r1, [pc, #60]	; 2a648 <CGPIOManager::~CGPIOManager()+0x70>
   2a608:	e59f003c 	ldr	r0, [pc, #60]	; 2a64c <CGPIOManager::~CGPIOManager()+0x74>
   2a60c:	ebffcc3b 	bl	1d700 <assertion_failed>
   2a610:	e5d43004 	ldrb	r3, [r4, #4]
   2a614:	e3530000 	cmp	r3, #0
   2a618:	0a000004 	beq	2a630 <CGPIOManager::~CGPIOManager()+0x58>
   2a61c:	e5940000 	ldr	r0, [r4]
   2a620:	e3500000 	cmp	r0, #0
   2a624:	0a000003 	beq	2a638 <CGPIOManager::~CGPIOManager()+0x60>
   2a628:	e3a01034 	mov	r1, #52	; 0x34
   2a62c:	ebfff94e 	bl	28b6c <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2a630:	e1a00004 	mov	r0, r4
   2a634:	e8bd8010 	pop	{r4, pc}
   2a638:	e3a02032 	mov	r2, #50	; 0x32
   2a63c:	e59f1004 	ldr	r1, [pc, #4]	; 2a648 <CGPIOManager::~CGPIOManager()+0x70>
   2a640:	e59f0008 	ldr	r0, [pc, #8]	; 2a650 <CGPIOManager::~CGPIOManager()+0x78>
   2a644:	ebffcc2d 	bl	1d700 <assertion_failed>
   2a648:	0003442c 	.word	0x0003442c
   2a64c:	0003443c 	.word	0x0003443c
   2a650:	00034450 	.word	0x00034450

0002a654 <CGPIOManager::Initialize()>:
   2a654:	e5d03004 	ldrb	r3, [r0, #4]
   2a658:	e92d4010 	push	{r4, lr}
   2a65c:	e3530000 	cmp	r3, #0
   2a660:	1a00000a 	bne	2a690 <CGPIOManager::Initialize()+0x3c>
   2a664:	e1a04000 	mov	r4, r0
   2a668:	e5900000 	ldr	r0, [r0]
   2a66c:	e3500000 	cmp	r0, #0
   2a670:	0a00000a 	beq	2a6a0 <CGPIOManager::Initialize()+0x4c>
   2a674:	e1a03004 	mov	r3, r4
   2a678:	e3a01034 	mov	r1, #52	; 0x34
   2a67c:	e59f202c 	ldr	r2, [pc, #44]	; 2a6b0 <CGPIOManager::Initialize()+0x5c>
   2a680:	ebfff905 	bl	28a9c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2a684:	e3a00001 	mov	r0, #1
   2a688:	e5c40004 	strb	r0, [r4, #4]
   2a68c:	e8bd8010 	pop	{r4, pc}
   2a690:	e3a0203b 	mov	r2, #59	; 0x3b
   2a694:	e59f1018 	ldr	r1, [pc, #24]	; 2a6b4 <CGPIOManager::Initialize()+0x60>
   2a698:	e59f0018 	ldr	r0, [pc, #24]	; 2a6b8 <CGPIOManager::Initialize()+0x64>
   2a69c:	ebffcc17 	bl	1d700 <assertion_failed>
   2a6a0:	e3a0203c 	mov	r2, #60	; 0x3c
   2a6a4:	e59f1008 	ldr	r1, [pc, #8]	; 2a6b4 <CGPIOManager::Initialize()+0x60>
   2a6a8:	e59f000c 	ldr	r0, [pc, #12]	; 2a6bc <CGPIOManager::Initialize()+0x68>
   2a6ac:	ebffcc13 	bl	1d700 <assertion_failed>
   2a6b0:	0002a8b0 	.word	0x0002a8b0
   2a6b4:	0003442c 	.word	0x0003442c
   2a6b8:	00034464 	.word	0x00034464
   2a6bc:	00034450 	.word	0x00034450

0002a6c0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   2a6c0:	e5d03004 	ldrb	r3, [r0, #4]
   2a6c4:	e92d4010 	push	{r4, lr}
   2a6c8:	e3530000 	cmp	r3, #0
   2a6cc:	0a00000a 	beq	2a6fc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   2a6d0:	e3510000 	cmp	r1, #0
   2a6d4:	0a00000c 	beq	2a70c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   2a6d8:	e5913004 	ldr	r3, [r1, #4]
   2a6dc:	e3530035 	cmp	r3, #53	; 0x35
   2a6e0:	8a00000d 	bhi	2a71c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   2a6e4:	e0800103 	add	r0, r0, r3, lsl #2
   2a6e8:	e5903008 	ldr	r3, [r0, #8]
   2a6ec:	e3530000 	cmp	r3, #0
   2a6f0:	1a00000d 	bne	2a72c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   2a6f4:	e5801008 	str	r1, [r0, #8]
   2a6f8:	e8bd8010 	pop	{r4, pc}
   2a6fc:	e3a02045 	mov	r2, #69	; 0x45
   2a700:	e59f1034 	ldr	r1, [pc, #52]	; 2a73c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2a704:	e59f0034 	ldr	r0, [pc, #52]	; 2a740 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   2a708:	ebffcbfc 	bl	1d700 <assertion_failed>
   2a70c:	e3a02047 	mov	r2, #71	; 0x47
   2a710:	e59f1024 	ldr	r1, [pc, #36]	; 2a73c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2a714:	e59f0028 	ldr	r0, [pc, #40]	; 2a744 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   2a718:	ebffcbf8 	bl	1d700 <assertion_failed>
   2a71c:	e3a02049 	mov	r2, #73	; 0x49
   2a720:	e59f1014 	ldr	r1, [pc, #20]	; 2a73c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2a724:	e59f001c 	ldr	r0, [pc, #28]	; 2a748 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x88>
   2a728:	ebffcbf4 	bl	1d700 <assertion_failed>
   2a72c:	e3a0204b 	mov	r2, #75	; 0x4b
   2a730:	e59f1004 	ldr	r1, [pc, #4]	; 2a73c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2a734:	e59f0010 	ldr	r0, [pc, #16]	; 2a74c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x8c>
   2a738:	ebffcbf0 	bl	1d700 <assertion_failed>
   2a73c:	0003442c 	.word	0x0003442c
   2a740:	00034478 	.word	0x00034478
   2a744:	00034488 	.word	0x00034488
   2a748:	00034494 	.word	0x00034494
   2a74c:	0003443c 	.word	0x0003443c

0002a750 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   2a750:	e5d03004 	ldrb	r3, [r0, #4]
   2a754:	e92d4010 	push	{r4, lr}
   2a758:	e3530000 	cmp	r3, #0
   2a75c:	0a00000b 	beq	2a790 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   2a760:	e3510000 	cmp	r1, #0
   2a764:	0a00000d 	beq	2a7a0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   2a768:	e5913004 	ldr	r3, [r1, #4]
   2a76c:	e3530035 	cmp	r3, #53	; 0x35
   2a770:	8a00000e 	bhi	2a7b0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x60>
   2a774:	e0800103 	add	r0, r0, r3, lsl #2
   2a778:	e5903008 	ldr	r3, [r0, #8]
   2a77c:	e3530000 	cmp	r3, #0
   2a780:	0a00000e 	beq	2a7c0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   2a784:	e3a03000 	mov	r3, #0
   2a788:	e5803008 	str	r3, [r0, #8]
   2a78c:	e8bd8010 	pop	{r4, pc}
   2a790:	e3a02052 	mov	r2, #82	; 0x52
   2a794:	e59f1034 	ldr	r1, [pc, #52]	; 2a7d0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2a798:	e59f0034 	ldr	r0, [pc, #52]	; 2a7d4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x84>
   2a79c:	ebffcbd7 	bl	1d700 <assertion_failed>
   2a7a0:	e3a02054 	mov	r2, #84	; 0x54
   2a7a4:	e59f1024 	ldr	r1, [pc, #36]	; 2a7d0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2a7a8:	e59f0028 	ldr	r0, [pc, #40]	; 2a7d8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   2a7ac:	ebffcbd3 	bl	1d700 <assertion_failed>
   2a7b0:	e3a02056 	mov	r2, #86	; 0x56
   2a7b4:	e59f1014 	ldr	r1, [pc, #20]	; 2a7d0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2a7b8:	e59f001c 	ldr	r0, [pc, #28]	; 2a7dc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   2a7bc:	ebffcbcf 	bl	1d700 <assertion_failed>
   2a7c0:	e3a02058 	mov	r2, #88	; 0x58
   2a7c4:	e59f1004 	ldr	r1, [pc, #4]	; 2a7d0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2a7c8:	e59f0010 	ldr	r0, [pc, #16]	; 2a7e0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   2a7cc:	ebffcbcb 	bl	1d700 <assertion_failed>
   2a7d0:	0003442c 	.word	0x0003442c
   2a7d4:	00034478 	.word	0x00034478
   2a7d8:	00034488 	.word	0x00034488
   2a7dc:	00034494 	.word	0x00034494
   2a7e0:	000344a8 	.word	0x000344a8

0002a7e4 <CGPIOManager::InterruptHandler()>:
   2a7e4:	e5d03004 	ldrb	r3, [r0, #4]
   2a7e8:	e92d4070 	push	{r4, r5, r6, lr}
   2a7ec:	e3530000 	cmp	r3, #0
   2a7f0:	0a000025 	beq	2a88c <CGPIOManager::InterruptHandler()+0xa8>
   2a7f4:	e3a04000 	mov	r4, #0
   2a7f8:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2a7fc:	e59f2098 	ldr	r2, [pc, #152]	; 2a89c <CGPIOManager::InterruptHandler()+0xb8>
   2a800:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   2a804:	ea000005 	b	2a820 <CGPIOManager::InterruptHandler()+0x3c>
   2a808:	e2844001 	add	r4, r4, #1
   2a80c:	e314001f 	tst	r4, #31
   2a810:	11a030a3 	lsrne	r3, r3, #1
   2a814:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   2a818:	e3540036 	cmp	r4, #54	; 0x36
   2a81c:	0a00000d 	beq	2a858 <CGPIOManager::InterruptHandler()+0x74>
   2a820:	e3130001 	tst	r3, #1
   2a824:	0afffff7 	beq	2a808 <CGPIOManager::InterruptHandler()+0x24>
   2a828:	e2843002 	add	r3, r4, #2
   2a82c:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   2a830:	e3550000 	cmp	r5, #0
   2a834:	0a00000a 	beq	2a864 <CGPIOManager::InterruptHandler()+0x80>
   2a838:	e1a00005 	mov	r0, r5
   2a83c:	ebffd1e7 	bl	1efe0 <CGPIOPin::InterruptHandler()>
   2a840:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   2a844:	e3530000 	cmp	r3, #0
   2a848:	1595100c 	ldrne	r1, [r5, #12]
   2a84c:	15952008 	ldrne	r2, [r5, #8]
   2a850:	159f3048 	ldrne	r3, [pc, #72]	; 2a8a0 <CGPIOManager::InterruptHandler()+0xbc>
   2a854:	17821003 	strne	r1, [r2, r3]
   2a858:	e3a03000 	mov	r3, #0
   2a85c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2a860:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a864:	e1a00004 	mov	r0, r4
   2a868:	ebffd1fd 	bl	1f064 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   2a86c:	e3a02001 	mov	r2, #1
   2a870:	e59f302c 	ldr	r3, [pc, #44]	; 2a8a4 <CGPIOManager::InterruptHandler()+0xc0>
   2a874:	e204101f 	and	r1, r4, #31
   2a878:	e08332a4 	add	r3, r3, r4, lsr #5
   2a87c:	e1a03103 	lsl	r3, r3, #2
   2a880:	e1a02112 	lsl	r2, r2, r1
   2a884:	e5832000 	str	r2, [r3]
   2a888:	eafffff2 	b	2a858 <CGPIOManager::InterruptHandler()+0x74>
   2a88c:	e3a0205e 	mov	r2, #94	; 0x5e
   2a890:	e59f1010 	ldr	r1, [pc, #16]	; 2a8a8 <CGPIOManager::InterruptHandler()+0xc4>
   2a894:	e59f0010 	ldr	r0, [pc, #16]	; 2a8ac <CGPIOManager::InterruptHandler()+0xc8>
   2a898:	ebffcb98 	bl	1d700 <assertion_failed>
   2a89c:	20200000 	.word	0x20200000
   2a8a0:	20200040 	.word	0x20200040
   2a8a4:	08080010 	.word	0x08080010
   2a8a8:	0003442c 	.word	0x0003442c
   2a8ac:	00034478 	.word	0x00034478

0002a8b0 <CGPIOManager::InterruptStub(void*)>:
   2a8b0:	e3500000 	cmp	r0, #0
   2a8b4:	0a000000 	beq	2a8bc <CGPIOManager::InterruptStub(void*)+0xc>
   2a8b8:	eaffffc9 	b	2a7e4 <CGPIOManager::InterruptHandler()>
   2a8bc:	e3a0208e 	mov	r2, #142	; 0x8e
   2a8c0:	e92d4010 	push	{r4, lr}
   2a8c4:	e59f1004 	ldr	r1, [pc, #4]	; 2a8d0 <CGPIOManager::InterruptStub(void*)+0x20>
   2a8c8:	e59f0004 	ldr	r0, [pc, #4]	; 2a8d4 <CGPIOManager::InterruptStub(void*)+0x24>
   2a8cc:	ebffcb8b 	bl	1d700 <assertion_failed>
   2a8d0:	0003442c 	.word	0x0003442c
   2a8d4:	000344bc 	.word	0x000344bc

0002a8d8 <CPageAllocator::CPageAllocator()>:
   2a8d8:	e3a02000 	mov	r2, #0
   2a8dc:	e3a01001 	mov	r1, #1
   2a8e0:	e5802000 	str	r2, [r0]
   2a8e4:	e580100c 	str	r1, [r0, #12]
   2a8e8:	e5802004 	str	r2, [r0, #4]
   2a8ec:	e5802008 	str	r2, [r0, #8]
   2a8f0:	e12fff1e 	bx	lr

0002a8f4 <CPageAllocator::~CPageAllocator()>:
   2a8f4:	e12fff1e 	bx	lr

0002a8f8 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   2a8f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2a8fc:	e28db000 	add	fp, sp, #0
   2a900:	e24dd014 	sub	sp, sp, #20
   2a904:	e50b0008 	str	r0, [fp, #-8]
   2a908:	e50b100c 	str	r1, [fp, #-12]
   2a90c:	e50b2010 	str	r2, [fp, #-16]
   2a910:	e51b300c 	ldr	r3, [fp, #-12]
   2a914:	e2833eff 	add	r3, r3, #4080	; 0xff0
   2a918:	e283300f 	add	r3, r3, #15
   2a91c:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2a920:	e3c3300f 	bic	r3, r3, #15
   2a924:	e1a02003 	mov	r2, r3
   2a928:	e51b3008 	ldr	r3, [fp, #-8]
   2a92c:	e5832000 	str	r2, [r3]
   2a930:	e51b200c 	ldr	r2, [fp, #-12]
   2a934:	e51b3010 	ldr	r3, [fp, #-16]
   2a938:	e0823003 	add	r3, r2, r3
   2a93c:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2a940:	e3c3300f 	bic	r3, r3, #15
   2a944:	e1a02003 	mov	r2, r3
   2a948:	e51b3008 	ldr	r3, [fp, #-8]
   2a94c:	e5832004 	str	r2, [r3, #4]
   2a950:	e320f000 	nop	{0}
   2a954:	e28bd000 	add	sp, fp, #0
   2a958:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2a95c:	e12fff1e 	bx	lr

0002a960 <CPageAllocator::GetFreeSpace() const>:
   2a960:	e8900005 	ldm	r0, {r0, r2}
   2a964:	e0420000 	sub	r0, r2, r0
   2a968:	e12fff1e 	bx	lr

0002a96c <CPageAllocator::Allocate()>:
   2a96c:	e5903000 	ldr	r3, [r0]
   2a970:	e92d4070 	push	{r4, r5, r6, lr}
   2a974:	e3530000 	cmp	r3, #0
   2a978:	0a000023 	beq	2aa0c <CPageAllocator::Allocate()+0xa0>
   2a97c:	e1a04000 	mov	r4, r0
   2a980:	e590000c 	ldr	r0, [r0, #12]
   2a984:	e3500000 	cmp	r0, #0
   2a988:	1a00000f 	bne	2a9cc <CPageAllocator::Allocate()+0x60>
   2a98c:	e5945008 	ldr	r5, [r4, #8]
   2a990:	e3550000 	cmp	r5, #0
   2a994:	0a000010 	beq	2a9dc <CPageAllocator::Allocate()+0x70>
   2a998:	e59f308c 	ldr	r3, [pc, #140]	; 2aa2c <CPageAllocator::Allocate()+0xc0>
   2a99c:	e5952000 	ldr	r2, [r5]
   2a9a0:	e1520003 	cmp	r2, r3
   2a9a4:	1a00001c 	bne	2aa1c <CPageAllocator::Allocate()+0xb0>
   2a9a8:	e3a03000 	mov	r3, #0
   2a9ac:	e5952004 	ldr	r2, [r5, #4]
   2a9b0:	e5842008 	str	r2, [r4, #8]
   2a9b4:	e5853000 	str	r3, [r5]
   2a9b8:	e594300c 	ldr	r3, [r4, #12]
   2a9bc:	e3530000 	cmp	r3, #0
   2a9c0:	1a00000e 	bne	2aa00 <CPageAllocator::Allocate()+0x94>
   2a9c4:	e1a00005 	mov	r0, r5
   2a9c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a9cc:	ebfff734 	bl	286a4 <EnterCritical>
   2a9d0:	e5945008 	ldr	r5, [r4, #8]
   2a9d4:	e3550000 	cmp	r5, #0
   2a9d8:	1affffee 	bne	2a998 <CPageAllocator::Allocate()+0x2c>
   2a9dc:	e5942000 	ldr	r2, [r4]
   2a9e0:	e5941004 	ldr	r1, [r4, #4]
   2a9e4:	e2823a01 	add	r3, r2, #4096	; 0x1000
   2a9e8:	e1530001 	cmp	r3, r1
   2a9ec:	e5843000 	str	r3, [r4]
   2a9f0:	e594300c 	ldr	r3, [r4, #12]
   2a9f4:	91a05002 	movls	r5, r2
   2a9f8:	e3530000 	cmp	r3, #0
   2a9fc:	0afffff0 	beq	2a9c4 <CPageAllocator::Allocate()+0x58>
   2aa00:	ebfff751 	bl	2874c <LeaveCritical>
   2aa04:	e1a00005 	mov	r0, r5
   2aa08:	e8bd8070 	pop	{r4, r5, r6, pc}
   2aa0c:	e59f101c 	ldr	r1, [pc, #28]	; 2aa30 <CPageAllocator::Allocate()+0xc4>
   2aa10:	e3a02036 	mov	r2, #54	; 0x36
   2aa14:	e2810014 	add	r0, r1, #20
   2aa18:	ebffcb38 	bl	1d700 <assertion_failed>
   2aa1c:	e59f100c 	ldr	r1, [pc, #12]	; 2aa30 <CPageAllocator::Allocate()+0xc4>
   2aa20:	e3a02044 	mov	r2, #68	; 0x44
   2aa24:	e2810024 	add	r0, r1, #36	; 0x24
   2aa28:	ebffcb34 	bl	1d700 <assertion_failed>
   2aa2c:	50474d43 	.word	0x50474d43
   2aa30:	000344c8 	.word	0x000344c8

0002aa34 <CPageAllocator::Free(void*)>:
   2aa34:	e92d4070 	push	{r4, r5, r6, lr}
   2aa38:	e2514000 	subs	r4, r1, #0
   2aa3c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2aa40:	e1a05000 	mov	r5, r0
   2aa44:	e590000c 	ldr	r0, [r0, #12]
   2aa48:	e3500000 	cmp	r0, #0
   2aa4c:	1a000009 	bne	2aa78 <CPageAllocator::Free(void*)+0x44>
   2aa50:	e59f3028 	ldr	r3, [pc, #40]	; 2aa80 <CPageAllocator::Free(void*)+0x4c>
   2aa54:	e5952008 	ldr	r2, [r5, #8]
   2aa58:	e5843000 	str	r3, [r4]
   2aa5c:	e595300c 	ldr	r3, [r5, #12]
   2aa60:	e5842004 	str	r2, [r4, #4]
   2aa64:	e3530000 	cmp	r3, #0
   2aa68:	e5854008 	str	r4, [r5, #8]
   2aa6c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2aa70:	e8bd4070 	pop	{r4, r5, r6, lr}
   2aa74:	eafff734 	b	2874c <LeaveCritical>
   2aa78:	ebfff709 	bl	286a4 <EnterCritical>
   2aa7c:	eafffff3 	b	2aa50 <CPageAllocator::Free(void*)+0x1c>
   2aa80:	50474d43 	.word	0x50474d43

0002aa84 <__udivsi3>:
   2aa84:	e2512001 	subs	r2, r1, #1
   2aa88:	012fff1e 	bxeq	lr
   2aa8c:	3a000074 	bcc	2ac64 <__udivsi3+0x1e0>
   2aa90:	e1500001 	cmp	r0, r1
   2aa94:	9a00006b 	bls	2ac48 <__udivsi3+0x1c4>
   2aa98:	e1110002 	tst	r1, r2
   2aa9c:	0a00006c 	beq	2ac54 <__udivsi3+0x1d0>
   2aaa0:	e16f3f10 	clz	r3, r0
   2aaa4:	e16f2f11 	clz	r2, r1
   2aaa8:	e0423003 	sub	r3, r2, r3
   2aaac:	e273301f 	rsbs	r3, r3, #31
   2aab0:	10833083 	addne	r3, r3, r3, lsl #1
   2aab4:	e3a02000 	mov	r2, #0
   2aab8:	108ff103 	addne	pc, pc, r3, lsl #2
   2aabc:	e1a00000 	nop			; (mov r0, r0)
   2aac0:	e1500f81 	cmp	r0, r1, lsl #31
   2aac4:	e0a22002 	adc	r2, r2, r2
   2aac8:	20400f81 	subcs	r0, r0, r1, lsl #31
   2aacc:	e1500f01 	cmp	r0, r1, lsl #30
   2aad0:	e0a22002 	adc	r2, r2, r2
   2aad4:	20400f01 	subcs	r0, r0, r1, lsl #30
   2aad8:	e1500e81 	cmp	r0, r1, lsl #29
   2aadc:	e0a22002 	adc	r2, r2, r2
   2aae0:	20400e81 	subcs	r0, r0, r1, lsl #29
   2aae4:	e1500e01 	cmp	r0, r1, lsl #28
   2aae8:	e0a22002 	adc	r2, r2, r2
   2aaec:	20400e01 	subcs	r0, r0, r1, lsl #28
   2aaf0:	e1500d81 	cmp	r0, r1, lsl #27
   2aaf4:	e0a22002 	adc	r2, r2, r2
   2aaf8:	20400d81 	subcs	r0, r0, r1, lsl #27
   2aafc:	e1500d01 	cmp	r0, r1, lsl #26
   2ab00:	e0a22002 	adc	r2, r2, r2
   2ab04:	20400d01 	subcs	r0, r0, r1, lsl #26
   2ab08:	e1500c81 	cmp	r0, r1, lsl #25
   2ab0c:	e0a22002 	adc	r2, r2, r2
   2ab10:	20400c81 	subcs	r0, r0, r1, lsl #25
   2ab14:	e1500c01 	cmp	r0, r1, lsl #24
   2ab18:	e0a22002 	adc	r2, r2, r2
   2ab1c:	20400c01 	subcs	r0, r0, r1, lsl #24
   2ab20:	e1500b81 	cmp	r0, r1, lsl #23
   2ab24:	e0a22002 	adc	r2, r2, r2
   2ab28:	20400b81 	subcs	r0, r0, r1, lsl #23
   2ab2c:	e1500b01 	cmp	r0, r1, lsl #22
   2ab30:	e0a22002 	adc	r2, r2, r2
   2ab34:	20400b01 	subcs	r0, r0, r1, lsl #22
   2ab38:	e1500a81 	cmp	r0, r1, lsl #21
   2ab3c:	e0a22002 	adc	r2, r2, r2
   2ab40:	20400a81 	subcs	r0, r0, r1, lsl #21
   2ab44:	e1500a01 	cmp	r0, r1, lsl #20
   2ab48:	e0a22002 	adc	r2, r2, r2
   2ab4c:	20400a01 	subcs	r0, r0, r1, lsl #20
   2ab50:	e1500981 	cmp	r0, r1, lsl #19
   2ab54:	e0a22002 	adc	r2, r2, r2
   2ab58:	20400981 	subcs	r0, r0, r1, lsl #19
   2ab5c:	e1500901 	cmp	r0, r1, lsl #18
   2ab60:	e0a22002 	adc	r2, r2, r2
   2ab64:	20400901 	subcs	r0, r0, r1, lsl #18
   2ab68:	e1500881 	cmp	r0, r1, lsl #17
   2ab6c:	e0a22002 	adc	r2, r2, r2
   2ab70:	20400881 	subcs	r0, r0, r1, lsl #17
   2ab74:	e1500801 	cmp	r0, r1, lsl #16
   2ab78:	e0a22002 	adc	r2, r2, r2
   2ab7c:	20400801 	subcs	r0, r0, r1, lsl #16
   2ab80:	e1500781 	cmp	r0, r1, lsl #15
   2ab84:	e0a22002 	adc	r2, r2, r2
   2ab88:	20400781 	subcs	r0, r0, r1, lsl #15
   2ab8c:	e1500701 	cmp	r0, r1, lsl #14
   2ab90:	e0a22002 	adc	r2, r2, r2
   2ab94:	20400701 	subcs	r0, r0, r1, lsl #14
   2ab98:	e1500681 	cmp	r0, r1, lsl #13
   2ab9c:	e0a22002 	adc	r2, r2, r2
   2aba0:	20400681 	subcs	r0, r0, r1, lsl #13
   2aba4:	e1500601 	cmp	r0, r1, lsl #12
   2aba8:	e0a22002 	adc	r2, r2, r2
   2abac:	20400601 	subcs	r0, r0, r1, lsl #12
   2abb0:	e1500581 	cmp	r0, r1, lsl #11
   2abb4:	e0a22002 	adc	r2, r2, r2
   2abb8:	20400581 	subcs	r0, r0, r1, lsl #11
   2abbc:	e1500501 	cmp	r0, r1, lsl #10
   2abc0:	e0a22002 	adc	r2, r2, r2
   2abc4:	20400501 	subcs	r0, r0, r1, lsl #10
   2abc8:	e1500481 	cmp	r0, r1, lsl #9
   2abcc:	e0a22002 	adc	r2, r2, r2
   2abd0:	20400481 	subcs	r0, r0, r1, lsl #9
   2abd4:	e1500401 	cmp	r0, r1, lsl #8
   2abd8:	e0a22002 	adc	r2, r2, r2
   2abdc:	20400401 	subcs	r0, r0, r1, lsl #8
   2abe0:	e1500381 	cmp	r0, r1, lsl #7
   2abe4:	e0a22002 	adc	r2, r2, r2
   2abe8:	20400381 	subcs	r0, r0, r1, lsl #7
   2abec:	e1500301 	cmp	r0, r1, lsl #6
   2abf0:	e0a22002 	adc	r2, r2, r2
   2abf4:	20400301 	subcs	r0, r0, r1, lsl #6
   2abf8:	e1500281 	cmp	r0, r1, lsl #5
   2abfc:	e0a22002 	adc	r2, r2, r2
   2ac00:	20400281 	subcs	r0, r0, r1, lsl #5
   2ac04:	e1500201 	cmp	r0, r1, lsl #4
   2ac08:	e0a22002 	adc	r2, r2, r2
   2ac0c:	20400201 	subcs	r0, r0, r1, lsl #4
   2ac10:	e1500181 	cmp	r0, r1, lsl #3
   2ac14:	e0a22002 	adc	r2, r2, r2
   2ac18:	20400181 	subcs	r0, r0, r1, lsl #3
   2ac1c:	e1500101 	cmp	r0, r1, lsl #2
   2ac20:	e0a22002 	adc	r2, r2, r2
   2ac24:	20400101 	subcs	r0, r0, r1, lsl #2
   2ac28:	e1500081 	cmp	r0, r1, lsl #1
   2ac2c:	e0a22002 	adc	r2, r2, r2
   2ac30:	20400081 	subcs	r0, r0, r1, lsl #1
   2ac34:	e1500001 	cmp	r0, r1
   2ac38:	e0a22002 	adc	r2, r2, r2
   2ac3c:	20400001 	subcs	r0, r0, r1
   2ac40:	e1a00002 	mov	r0, r2
   2ac44:	e12fff1e 	bx	lr
   2ac48:	03a00001 	moveq	r0, #1
   2ac4c:	13a00000 	movne	r0, #0
   2ac50:	e12fff1e 	bx	lr
   2ac54:	e16f2f11 	clz	r2, r1
   2ac58:	e262201f 	rsb	r2, r2, #31
   2ac5c:	e1a00230 	lsr	r0, r0, r2
   2ac60:	e12fff1e 	bx	lr
   2ac64:	e3500000 	cmp	r0, #0
   2ac68:	13e00000 	mvnne	r0, #0
   2ac6c:	ea000097 	b	2aed0 <__aeabi_idiv0>

0002ac70 <__aeabi_uidivmod>:
   2ac70:	e3510000 	cmp	r1, #0
   2ac74:	0afffffa 	beq	2ac64 <__udivsi3+0x1e0>
   2ac78:	e92d4003 	push	{r0, r1, lr}
   2ac7c:	ebffff80 	bl	2aa84 <__udivsi3>
   2ac80:	e8bd4006 	pop	{r1, r2, lr}
   2ac84:	e0030092 	mul	r3, r2, r0
   2ac88:	e0411003 	sub	r1, r1, r3
   2ac8c:	e12fff1e 	bx	lr

0002ac90 <__divsi3>:
   2ac90:	e3510000 	cmp	r1, #0
   2ac94:	0a000081 	beq	2aea0 <.divsi3_skip_div0_test+0x208>

0002ac98 <.divsi3_skip_div0_test>:
   2ac98:	e020c001 	eor	ip, r0, r1
   2ac9c:	42611000 	rsbmi	r1, r1, #0
   2aca0:	e2512001 	subs	r2, r1, #1
   2aca4:	0a000070 	beq	2ae6c <.divsi3_skip_div0_test+0x1d4>
   2aca8:	e1b03000 	movs	r3, r0
   2acac:	42603000 	rsbmi	r3, r0, #0
   2acb0:	e1530001 	cmp	r3, r1
   2acb4:	9a00006f 	bls	2ae78 <.divsi3_skip_div0_test+0x1e0>
   2acb8:	e1110002 	tst	r1, r2
   2acbc:	0a000071 	beq	2ae88 <.divsi3_skip_div0_test+0x1f0>
   2acc0:	e16f2f13 	clz	r2, r3
   2acc4:	e16f0f11 	clz	r0, r1
   2acc8:	e0402002 	sub	r2, r0, r2
   2accc:	e272201f 	rsbs	r2, r2, #31
   2acd0:	10822082 	addne	r2, r2, r2, lsl #1
   2acd4:	e3a00000 	mov	r0, #0
   2acd8:	108ff102 	addne	pc, pc, r2, lsl #2
   2acdc:	e1a00000 	nop			; (mov r0, r0)
   2ace0:	e1530f81 	cmp	r3, r1, lsl #31
   2ace4:	e0a00000 	adc	r0, r0, r0
   2ace8:	20433f81 	subcs	r3, r3, r1, lsl #31
   2acec:	e1530f01 	cmp	r3, r1, lsl #30
   2acf0:	e0a00000 	adc	r0, r0, r0
   2acf4:	20433f01 	subcs	r3, r3, r1, lsl #30
   2acf8:	e1530e81 	cmp	r3, r1, lsl #29
   2acfc:	e0a00000 	adc	r0, r0, r0
   2ad00:	20433e81 	subcs	r3, r3, r1, lsl #29
   2ad04:	e1530e01 	cmp	r3, r1, lsl #28
   2ad08:	e0a00000 	adc	r0, r0, r0
   2ad0c:	20433e01 	subcs	r3, r3, r1, lsl #28
   2ad10:	e1530d81 	cmp	r3, r1, lsl #27
   2ad14:	e0a00000 	adc	r0, r0, r0
   2ad18:	20433d81 	subcs	r3, r3, r1, lsl #27
   2ad1c:	e1530d01 	cmp	r3, r1, lsl #26
   2ad20:	e0a00000 	adc	r0, r0, r0
   2ad24:	20433d01 	subcs	r3, r3, r1, lsl #26
   2ad28:	e1530c81 	cmp	r3, r1, lsl #25
   2ad2c:	e0a00000 	adc	r0, r0, r0
   2ad30:	20433c81 	subcs	r3, r3, r1, lsl #25
   2ad34:	e1530c01 	cmp	r3, r1, lsl #24
   2ad38:	e0a00000 	adc	r0, r0, r0
   2ad3c:	20433c01 	subcs	r3, r3, r1, lsl #24
   2ad40:	e1530b81 	cmp	r3, r1, lsl #23
   2ad44:	e0a00000 	adc	r0, r0, r0
   2ad48:	20433b81 	subcs	r3, r3, r1, lsl #23
   2ad4c:	e1530b01 	cmp	r3, r1, lsl #22
   2ad50:	e0a00000 	adc	r0, r0, r0
   2ad54:	20433b01 	subcs	r3, r3, r1, lsl #22
   2ad58:	e1530a81 	cmp	r3, r1, lsl #21
   2ad5c:	e0a00000 	adc	r0, r0, r0
   2ad60:	20433a81 	subcs	r3, r3, r1, lsl #21
   2ad64:	e1530a01 	cmp	r3, r1, lsl #20
   2ad68:	e0a00000 	adc	r0, r0, r0
   2ad6c:	20433a01 	subcs	r3, r3, r1, lsl #20
   2ad70:	e1530981 	cmp	r3, r1, lsl #19
   2ad74:	e0a00000 	adc	r0, r0, r0
   2ad78:	20433981 	subcs	r3, r3, r1, lsl #19
   2ad7c:	e1530901 	cmp	r3, r1, lsl #18
   2ad80:	e0a00000 	adc	r0, r0, r0
   2ad84:	20433901 	subcs	r3, r3, r1, lsl #18
   2ad88:	e1530881 	cmp	r3, r1, lsl #17
   2ad8c:	e0a00000 	adc	r0, r0, r0
   2ad90:	20433881 	subcs	r3, r3, r1, lsl #17
   2ad94:	e1530801 	cmp	r3, r1, lsl #16
   2ad98:	e0a00000 	adc	r0, r0, r0
   2ad9c:	20433801 	subcs	r3, r3, r1, lsl #16
   2ada0:	e1530781 	cmp	r3, r1, lsl #15
   2ada4:	e0a00000 	adc	r0, r0, r0
   2ada8:	20433781 	subcs	r3, r3, r1, lsl #15
   2adac:	e1530701 	cmp	r3, r1, lsl #14
   2adb0:	e0a00000 	adc	r0, r0, r0
   2adb4:	20433701 	subcs	r3, r3, r1, lsl #14
   2adb8:	e1530681 	cmp	r3, r1, lsl #13
   2adbc:	e0a00000 	adc	r0, r0, r0
   2adc0:	20433681 	subcs	r3, r3, r1, lsl #13
   2adc4:	e1530601 	cmp	r3, r1, lsl #12
   2adc8:	e0a00000 	adc	r0, r0, r0
   2adcc:	20433601 	subcs	r3, r3, r1, lsl #12
   2add0:	e1530581 	cmp	r3, r1, lsl #11
   2add4:	e0a00000 	adc	r0, r0, r0
   2add8:	20433581 	subcs	r3, r3, r1, lsl #11
   2addc:	e1530501 	cmp	r3, r1, lsl #10
   2ade0:	e0a00000 	adc	r0, r0, r0
   2ade4:	20433501 	subcs	r3, r3, r1, lsl #10
   2ade8:	e1530481 	cmp	r3, r1, lsl #9
   2adec:	e0a00000 	adc	r0, r0, r0
   2adf0:	20433481 	subcs	r3, r3, r1, lsl #9
   2adf4:	e1530401 	cmp	r3, r1, lsl #8
   2adf8:	e0a00000 	adc	r0, r0, r0
   2adfc:	20433401 	subcs	r3, r3, r1, lsl #8
   2ae00:	e1530381 	cmp	r3, r1, lsl #7
   2ae04:	e0a00000 	adc	r0, r0, r0
   2ae08:	20433381 	subcs	r3, r3, r1, lsl #7
   2ae0c:	e1530301 	cmp	r3, r1, lsl #6
   2ae10:	e0a00000 	adc	r0, r0, r0
   2ae14:	20433301 	subcs	r3, r3, r1, lsl #6
   2ae18:	e1530281 	cmp	r3, r1, lsl #5
   2ae1c:	e0a00000 	adc	r0, r0, r0
   2ae20:	20433281 	subcs	r3, r3, r1, lsl #5
   2ae24:	e1530201 	cmp	r3, r1, lsl #4
   2ae28:	e0a00000 	adc	r0, r0, r0
   2ae2c:	20433201 	subcs	r3, r3, r1, lsl #4
   2ae30:	e1530181 	cmp	r3, r1, lsl #3
   2ae34:	e0a00000 	adc	r0, r0, r0
   2ae38:	20433181 	subcs	r3, r3, r1, lsl #3
   2ae3c:	e1530101 	cmp	r3, r1, lsl #2
   2ae40:	e0a00000 	adc	r0, r0, r0
   2ae44:	20433101 	subcs	r3, r3, r1, lsl #2
   2ae48:	e1530081 	cmp	r3, r1, lsl #1
   2ae4c:	e0a00000 	adc	r0, r0, r0
   2ae50:	20433081 	subcs	r3, r3, r1, lsl #1
   2ae54:	e1530001 	cmp	r3, r1
   2ae58:	e0a00000 	adc	r0, r0, r0
   2ae5c:	20433001 	subcs	r3, r3, r1
   2ae60:	e35c0000 	cmp	ip, #0
   2ae64:	42600000 	rsbmi	r0, r0, #0
   2ae68:	e12fff1e 	bx	lr
   2ae6c:	e13c0000 	teq	ip, r0
   2ae70:	42600000 	rsbmi	r0, r0, #0
   2ae74:	e12fff1e 	bx	lr
   2ae78:	33a00000 	movcc	r0, #0
   2ae7c:	01a00fcc 	asreq	r0, ip, #31
   2ae80:	03800001 	orreq	r0, r0, #1
   2ae84:	e12fff1e 	bx	lr
   2ae88:	e16f2f11 	clz	r2, r1
   2ae8c:	e262201f 	rsb	r2, r2, #31
   2ae90:	e35c0000 	cmp	ip, #0
   2ae94:	e1a00233 	lsr	r0, r3, r2
   2ae98:	42600000 	rsbmi	r0, r0, #0
   2ae9c:	e12fff1e 	bx	lr
   2aea0:	e3500000 	cmp	r0, #0
   2aea4:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
   2aea8:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
   2aeac:	ea000007 	b	2aed0 <__aeabi_idiv0>

0002aeb0 <__aeabi_idivmod>:
   2aeb0:	e3510000 	cmp	r1, #0
   2aeb4:	0afffff9 	beq	2aea0 <.divsi3_skip_div0_test+0x208>
   2aeb8:	e92d4003 	push	{r0, r1, lr}
   2aebc:	ebffff75 	bl	2ac98 <.divsi3_skip_div0_test>
   2aec0:	e8bd4006 	pop	{r1, r2, lr}
   2aec4:	e0030092 	mul	r3, r2, r0
   2aec8:	e0411003 	sub	r1, r1, r3
   2aecc:	e12fff1e 	bx	lr

0002aed0 <__aeabi_idiv0>:
   2aed0:	e12fff1e 	bx	lr

0002aed4 <__aeabi_ldivmod>:
   2aed4:	e3530000 	cmp	r3, #0
   2aed8:	03520000 	cmpeq	r2, #0
   2aedc:	1a000007 	bne	2af00 <__aeabi_ldivmod+0x2c>
   2aee0:	e3510000 	cmp	r1, #0
   2aee4:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
   2aee8:	b3a00000 	movlt	r0, #0
   2aeec:	ba000002 	blt	2aefc <__aeabi_ldivmod+0x28>
   2aef0:	03500000 	cmpeq	r0, #0
   2aef4:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
   2aef8:	13e00000 	mvnne	r0, #0
   2aefc:	eafffff3 	b	2aed0 <__aeabi_idiv0>
   2af00:	e24dd008 	sub	sp, sp, #8
   2af04:	e92d6000 	push	{sp, lr}
   2af08:	e3510000 	cmp	r1, #0
   2af0c:	ba000006 	blt	2af2c <__aeabi_ldivmod+0x58>
   2af10:	e3530000 	cmp	r3, #0
   2af14:	ba000011 	blt	2af60 <__aeabi_ldivmod+0x8c>
   2af18:	eb000031 	bl	2afe4 <__udivmoddi4>
   2af1c:	e59de004 	ldr	lr, [sp, #4]
   2af20:	e28dd008 	add	sp, sp, #8
   2af24:	e8bd000c 	pop	{r2, r3}
   2af28:	e12fff1e 	bx	lr
   2af2c:	e2700000 	rsbs	r0, r0, #0
   2af30:	e0c11081 	sbc	r1, r1, r1, lsl #1
   2af34:	e3530000 	cmp	r3, #0
   2af38:	ba000011 	blt	2af84 <__aeabi_ldivmod+0xb0>
   2af3c:	eb000028 	bl	2afe4 <__udivmoddi4>
   2af40:	e59de004 	ldr	lr, [sp, #4]
   2af44:	e28dd008 	add	sp, sp, #8
   2af48:	e8bd000c 	pop	{r2, r3}
   2af4c:	e2700000 	rsbs	r0, r0, #0
   2af50:	e0c11081 	sbc	r1, r1, r1, lsl #1
   2af54:	e2722000 	rsbs	r2, r2, #0
   2af58:	e0c33083 	sbc	r3, r3, r3, lsl #1
   2af5c:	e12fff1e 	bx	lr
   2af60:	e2722000 	rsbs	r2, r2, #0
   2af64:	e0c33083 	sbc	r3, r3, r3, lsl #1
   2af68:	eb00001d 	bl	2afe4 <__udivmoddi4>
   2af6c:	e59de004 	ldr	lr, [sp, #4]
   2af70:	e28dd008 	add	sp, sp, #8
   2af74:	e8bd000c 	pop	{r2, r3}
   2af78:	e2700000 	rsbs	r0, r0, #0
   2af7c:	e0c11081 	sbc	r1, r1, r1, lsl #1
   2af80:	e12fff1e 	bx	lr
   2af84:	e2722000 	rsbs	r2, r2, #0
   2af88:	e0c33083 	sbc	r3, r3, r3, lsl #1
   2af8c:	eb000014 	bl	2afe4 <__udivmoddi4>
   2af90:	e59de004 	ldr	lr, [sp, #4]
   2af94:	e28dd008 	add	sp, sp, #8
   2af98:	e8bd000c 	pop	{r2, r3}
   2af9c:	e2722000 	rsbs	r2, r2, #0
   2afa0:	e0c33083 	sbc	r3, r3, r3, lsl #1
   2afa4:	e12fff1e 	bx	lr

0002afa8 <__aeabi_uldivmod>:
   2afa8:	e3530000 	cmp	r3, #0
   2afac:	03520000 	cmpeq	r2, #0
   2afb0:	1a000004 	bne	2afc8 <__aeabi_uldivmod+0x20>
   2afb4:	e3510000 	cmp	r1, #0
   2afb8:	03500000 	cmpeq	r0, #0
   2afbc:	13e01000 	mvnne	r1, #0
   2afc0:	13e00000 	mvnne	r0, #0
   2afc4:	eaffffc1 	b	2aed0 <__aeabi_idiv0>
   2afc8:	e24dd008 	sub	sp, sp, #8
   2afcc:	e92d6000 	push	{sp, lr}
   2afd0:	eb000003 	bl	2afe4 <__udivmoddi4>
   2afd4:	e59de004 	ldr	lr, [sp, #4]
   2afd8:	e28dd008 	add	sp, sp, #8
   2afdc:	e8bd000c 	pop	{r2, r3}
   2afe0:	e12fff1e 	bx	lr

0002afe4 <__udivmoddi4>:
   2afe4:	e1510003 	cmp	r1, r3
   2afe8:	01500002 	cmpeq	r0, r2
   2afec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2aff0:	e1a04000 	mov	r4, r0
   2aff4:	33a00000 	movcc	r0, #0
   2aff8:	e1a05001 	mov	r5, r1
   2affc:	e59dc020 	ldr	ip, [sp, #32]
   2b000:	31a01000 	movcc	r1, r0
   2b004:	3a00003f 	bcc	2b108 <__udivmoddi4+0x124>
   2b008:	e1a06002 	mov	r6, r2
   2b00c:	e3530000 	cmp	r3, #0
   2b010:	116f2f13 	clzne	r2, r3
   2b014:	016f2f16 	clzeq	r2, r6
   2b018:	02822020 	addeq	r2, r2, #32
   2b01c:	e3550000 	cmp	r5, #0
   2b020:	e1a07003 	mov	r7, r3
   2b024:	016f3f14 	clzeq	r3, r4
   2b028:	02833020 	addeq	r3, r3, #32
   2b02c:	116f3f15 	clzne	r3, r5
   2b030:	e0422003 	sub	r2, r2, r3
   2b034:	e1a09217 	lsl	r9, r7, r2
   2b038:	e242a020 	sub	sl, r2, #32
   2b03c:	e1899a16 	orr	r9, r9, r6, lsl sl
   2b040:	e262e020 	rsb	lr, r2, #32
   2b044:	e1899e36 	orr	r9, r9, r6, lsr lr
   2b048:	e1a08216 	lsl	r8, r6, r2
   2b04c:	e1550009 	cmp	r5, r9
   2b050:	01540008 	cmpeq	r4, r8
   2b054:	33a00000 	movcc	r0, #0
   2b058:	31a01000 	movcc	r1, r0
   2b05c:	3a000005 	bcc	2b078 <__udivmoddi4+0x94>
   2b060:	e3a00001 	mov	r0, #1
   2b064:	e1a01a10 	lsl	r1, r0, sl
   2b068:	e0544008 	subs	r4, r4, r8
   2b06c:	e1811e30 	orr	r1, r1, r0, lsr lr
   2b070:	e1a00210 	lsl	r0, r0, r2
   2b074:	e0c55009 	sbc	r5, r5, r9
   2b078:	e3520000 	cmp	r2, #0
   2b07c:	0a000021 	beq	2b108 <__udivmoddi4+0x124>
   2b080:	e1a060a8 	lsr	r6, r8, #1
   2b084:	e1866f89 	orr	r6, r6, r9, lsl #31
   2b088:	e1a070a9 	lsr	r7, r9, #1
   2b08c:	e1a08002 	mov	r8, r2
   2b090:	ea000007 	b	2b0b4 <__udivmoddi4+0xd0>
   2b094:	e0543006 	subs	r3, r4, r6
   2b098:	e0c59007 	sbc	r9, r5, r7
   2b09c:	e0933003 	adds	r3, r3, r3
   2b0a0:	e0a99009 	adc	r9, r9, r9
   2b0a4:	e2934001 	adds	r4, r3, #1
   2b0a8:	e2a95000 	adc	r5, r9, #0
   2b0ac:	e2588001 	subs	r8, r8, #1
   2b0b0:	0a000006 	beq	2b0d0 <__udivmoddi4+0xec>
   2b0b4:	e1550007 	cmp	r5, r7
   2b0b8:	01540006 	cmpeq	r4, r6
   2b0bc:	2afffff4 	bcs	2b094 <__udivmoddi4+0xb0>
   2b0c0:	e0944004 	adds	r4, r4, r4
   2b0c4:	e0a55005 	adc	r5, r5, r5
   2b0c8:	e2588001 	subs	r8, r8, #1
   2b0cc:	1afffff8 	bne	2b0b4 <__udivmoddi4+0xd0>
   2b0d0:	e1a03234 	lsr	r3, r4, r2
   2b0d4:	e1833e15 	orr	r3, r3, r5, lsl lr
   2b0d8:	e1a06235 	lsr	r6, r5, r2
   2b0dc:	e1833a35 	orr	r3, r3, r5, lsr sl
   2b0e0:	e0900004 	adds	r0, r0, r4
   2b0e4:	e1a04003 	mov	r4, r3
   2b0e8:	e1a03216 	lsl	r3, r6, r2
   2b0ec:	e1833a14 	orr	r3, r3, r4, lsl sl
   2b0f0:	e1a02214 	lsl	r2, r4, r2
   2b0f4:	e1833e34 	orr	r3, r3, r4, lsr lr
   2b0f8:	e0a11005 	adc	r1, r1, r5
   2b0fc:	e0500002 	subs	r0, r0, r2
   2b100:	e1a05006 	mov	r5, r6
   2b104:	e0c11003 	sbc	r1, r1, r3
   2b108:	e35c0000 	cmp	ip, #0
   2b10c:	11cc40f0 	strdne	r4, [ip]
   2b110:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b114:	00000000 	andeq	r0, r0, r0

0002b118 <cos>:
   2b118:	eeb07b40 	vmov.f64	d7, d0
   2b11c:	e59f20b4 	ldr	r2, [pc, #180]	; 2b1d8 <cos+0xc0>
   2b120:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2b124:	ee173a90 	vmov	r3, s15
   2b128:	e24dd014 	sub	sp, sp, #20
   2b12c:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   2b130:	e1530002 	cmp	r3, r2
   2b134:	da000013 	ble	2b188 <cos+0x70>
   2b138:	e59f209c 	ldr	r2, [pc, #156]	; 2b1dc <cos+0xc4>
   2b13c:	e1530002 	cmp	r3, r2
   2b140:	da000002 	ble	2b150 <cos+0x38>
   2b144:	ee300b40 	vsub.f64	d0, d0, d0
   2b148:	e28dd014 	add	sp, sp, #20
   2b14c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2b150:	e1a0000d 	mov	r0, sp
   2b154:	eb000055 	bl	2b2b0 <__ieee754_rem_pio2>
   2b158:	e2000003 	and	r0, r0, #3
   2b15c:	e3500001 	cmp	r0, #1
   2b160:	0a00000c 	beq	2b198 <cos+0x80>
   2b164:	e3500002 	cmp	r0, #2
   2b168:	0a000013 	beq	2b1bc <cos+0xa4>
   2b16c:	e3500000 	cmp	r0, #0
   2b170:	0a00000d 	beq	2b1ac <cos+0x94>
   2b174:	e3a00001 	mov	r0, #1
   2b178:	ed9d1b02 	vldr	d1, [sp, #8]
   2b17c:	ed9d0b00 	vldr	d0, [sp]
   2b180:	eb000390 	bl	2bfc8 <__kernel_sin>
   2b184:	eaffffef 	b	2b148 <cos+0x30>
   2b188:	ed9f1b10 	vldr	d1, [pc, #64]	; 2b1d0 <cos+0xb8>
   2b18c:	eb00010f 	bl	2b5d0 <__kernel_cos>
   2b190:	e28dd014 	add	sp, sp, #20
   2b194:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2b198:	ed9d1b02 	vldr	d1, [sp, #8]
   2b19c:	ed9d0b00 	vldr	d0, [sp]
   2b1a0:	eb000388 	bl	2bfc8 <__kernel_sin>
   2b1a4:	eeb10b40 	vneg.f64	d0, d0
   2b1a8:	eaffffe6 	b	2b148 <cos+0x30>
   2b1ac:	ed9d1b02 	vldr	d1, [sp, #8]
   2b1b0:	ed9d0b00 	vldr	d0, [sp]
   2b1b4:	eb000105 	bl	2b5d0 <__kernel_cos>
   2b1b8:	eaffffe2 	b	2b148 <cos+0x30>
   2b1bc:	ed9d1b02 	vldr	d1, [sp, #8]
   2b1c0:	ed9d0b00 	vldr	d0, [sp]
   2b1c4:	eb000101 	bl	2b5d0 <__kernel_cos>
   2b1c8:	eeb10b40 	vneg.f64	d0, d0
   2b1cc:	eaffffdd 	b	2b148 <cos+0x30>
	...
   2b1d8:	3fe921fb 	.word	0x3fe921fb
   2b1dc:	7fefffff 	.word	0x7fefffff

0002b1e0 <sin>:
   2b1e0:	eeb07b40 	vmov.f64	d7, d0
   2b1e4:	e59f20bc 	ldr	r2, [pc, #188]	; 2b2a8 <sin+0xc8>
   2b1e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2b1ec:	ee173a90 	vmov	r3, s15
   2b1f0:	e24dd014 	sub	sp, sp, #20
   2b1f4:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   2b1f8:	e1530002 	cmp	r3, r2
   2b1fc:	da000013 	ble	2b250 <sin+0x70>
   2b200:	e59f20a4 	ldr	r2, [pc, #164]	; 2b2ac <sin+0xcc>
   2b204:	e1530002 	cmp	r3, r2
   2b208:	da000002 	ble	2b218 <sin+0x38>
   2b20c:	ee300b40 	vsub.f64	d0, d0, d0
   2b210:	e28dd014 	add	sp, sp, #20
   2b214:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2b218:	e1a0000d 	mov	r0, sp
   2b21c:	eb000023 	bl	2b2b0 <__ieee754_rem_pio2>
   2b220:	e2000003 	and	r0, r0, #3
   2b224:	e3500001 	cmp	r0, #1
   2b228:	0a00000d 	beq	2b264 <sin+0x84>
   2b22c:	e3500002 	cmp	r0, #2
   2b230:	0a000014 	beq	2b288 <sin+0xa8>
   2b234:	e3500000 	cmp	r0, #0
   2b238:	0a00000d 	beq	2b274 <sin+0x94>
   2b23c:	ed9d1b02 	vldr	d1, [sp, #8]
   2b240:	ed9d0b00 	vldr	d0, [sp]
   2b244:	eb0000e1 	bl	2b5d0 <__kernel_cos>
   2b248:	eeb10b40 	vneg.f64	d0, d0
   2b24c:	eaffffef 	b	2b210 <sin+0x30>
   2b250:	e3a00000 	mov	r0, #0
   2b254:	ed9f1b11 	vldr	d1, [pc, #68]	; 2b2a0 <sin+0xc0>
   2b258:	eb00035a 	bl	2bfc8 <__kernel_sin>
   2b25c:	e28dd014 	add	sp, sp, #20
   2b260:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2b264:	ed9d1b02 	vldr	d1, [sp, #8]
   2b268:	ed9d0b00 	vldr	d0, [sp]
   2b26c:	eb0000d7 	bl	2b5d0 <__kernel_cos>
   2b270:	eaffffe6 	b	2b210 <sin+0x30>
   2b274:	e3a00001 	mov	r0, #1
   2b278:	ed9d1b02 	vldr	d1, [sp, #8]
   2b27c:	ed9d0b00 	vldr	d0, [sp]
   2b280:	eb000350 	bl	2bfc8 <__kernel_sin>
   2b284:	eaffffe1 	b	2b210 <sin+0x30>
   2b288:	e3a00001 	mov	r0, #1
   2b28c:	ed9d1b02 	vldr	d1, [sp, #8]
   2b290:	ed9d0b00 	vldr	d0, [sp]
   2b294:	eb00034b 	bl	2bfc8 <__kernel_sin>
   2b298:	eeb10b40 	vneg.f64	d0, d0
   2b29c:	eaffffdb 	b	2b210 <sin+0x30>
	...
   2b2a8:	3fe921fb 	.word	0x3fe921fb
   2b2ac:	7fefffff 	.word	0x7fefffff

0002b2b0 <__ieee754_rem_pio2>:
   2b2b0:	ec532b10 	vmov	r2, r3, d0
   2b2b4:	e59f12f4 	ldr	r1, [pc, #756]	; 2b5b0 <__ieee754_rem_pio2+0x300>
   2b2b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b2bc:	e3c36102 	bic	r6, r3, #-2147483648	; 0x80000000
   2b2c0:	e1560001 	cmp	r6, r1
   2b2c4:	e24dd024 	sub	sp, sp, #36	; 0x24
   2b2c8:	e1a04000 	mov	r4, r0
   2b2cc:	da000049 	ble	2b3f8 <__ieee754_rem_pio2+0x148>
   2b2d0:	e59f12dc 	ldr	r1, [pc, #732]	; 2b5b4 <__ieee754_rem_pio2+0x304>
   2b2d4:	e1a05003 	mov	r5, r3
   2b2d8:	e1560001 	cmp	r6, r1
   2b2dc:	ca000014 	bgt	2b334 <__ieee754_rem_pio2+0x84>
   2b2e0:	e3530000 	cmp	r3, #0
   2b2e4:	ed9f7b9f 	vldr	d7, [pc, #636]	; 2b568 <__ieee754_rem_pio2+0x2b8>
   2b2e8:	da00008d 	ble	2b524 <__ieee754_rem_pio2+0x274>
   2b2ec:	ee307b47 	vsub.f64	d7, d0, d7
   2b2f0:	e2411a9b 	sub	r1, r1, #634880	; 0x9b000
   2b2f4:	e2411d1e 	sub	r1, r1, #1920	; 0x780
   2b2f8:	e1560001 	cmp	r6, r1
   2b2fc:	0d9f5b9b 	vldreq	d5, [pc, #620]	; 2b570 <__ieee754_rem_pio2+0x2c0>
   2b300:	eeb06b40 	vmov.f64	d6, d0
   2b304:	1d9f6b9b 	vldrne	d6, [pc, #620]	; 2b578 <__ieee754_rem_pio2+0x2c8>
   2b308:	0d9f6b9c 	vldreq	d6, [pc, #624]	; 2b580 <__ieee754_rem_pio2+0x2d0>
   2b30c:	0e377b45 	vsubeq.f64	d7, d7, d5
   2b310:	13a00001 	movne	r0, #1
   2b314:	03a00001 	moveq	r0, #1
   2b318:	ee375b46 	vsub.f64	d5, d7, d6
   2b31c:	ee377b45 	vsub.f64	d7, d7, d5
   2b320:	ed845b00 	vstr	d5, [r4]
   2b324:	ee377b46 	vsub.f64	d7, d7, d6
   2b328:	ed847b02 	vstr	d7, [r4, #8]
   2b32c:	e28dd024 	add	sp, sp, #36	; 0x24
   2b330:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b334:	e59f127c 	ldr	r1, [pc, #636]	; 2b5b8 <__ieee754_rem_pio2+0x308>
   2b338:	e1560001 	cmp	r6, r1
   2b33c:	da000039 	ble	2b428 <__ieee754_rem_pio2+0x178>
   2b340:	e59f1274 	ldr	r1, [pc, #628]	; 2b5bc <__ieee754_rem_pio2+0x30c>
   2b344:	e1560001 	cmp	r6, r1
   2b348:	ca000031 	bgt	2b414 <__ieee754_rem_pio2+0x164>
   2b34c:	ee100a10 	vmov	r0, s0
   2b350:	e1a02a46 	asr	r2, r6, #20
   2b354:	e2422e41 	sub	r2, r2, #1040	; 0x410
   2b358:	e2422006 	sub	r2, r2, #6
   2b35c:	e0461a02 	sub	r1, r6, r2, lsl #20
   2b360:	ec410b17 	vmov	d7, r0, r1
   2b364:	ed9f5b87 	vldr	d5, [pc, #540]	; 2b588 <__ieee754_rem_pio2+0x2d8>
   2b368:	eebd6bc7 	vcvt.s32.f64	s12, d7
   2b36c:	eeb86bc6 	vcvt.f64.s32	d6, s12
   2b370:	ee377b46 	vsub.f64	d7, d7, d6
   2b374:	ed8d6b02 	vstr	d6, [sp, #8]
   2b378:	ee277b05 	vmul.f64	d7, d7, d5
   2b37c:	eefd4bc7 	vcvt.s32.f64	s9, d7
   2b380:	eeb86be4 	vcvt.f64.s32	d6, s9
   2b384:	ee377b46 	vsub.f64	d7, d7, d6
   2b388:	ed8d6b04 	vstr	d6, [sp, #16]
   2b38c:	ee277b05 	vmul.f64	d7, d7, d5
   2b390:	eeb57b40 	vcmp.f64	d7, #0.0
   2b394:	ed8d7b06 	vstr	d7, [sp, #24]
   2b398:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2b39c:	13a03003 	movne	r3, #3
   2b3a0:	1a000003 	bne	2b3b4 <__ieee754_rem_pio2+0x104>
   2b3a4:	ee143a90 	vmov	r3, s9
   2b3a8:	e3530000 	cmp	r3, #0
   2b3ac:	03a03001 	moveq	r3, #1
   2b3b0:	13a03002 	movne	r3, #2
   2b3b4:	e59f0204 	ldr	r0, [pc, #516]	; 2b5c0 <__ieee754_rem_pio2+0x310>
   2b3b8:	e3a01002 	mov	r1, #2
   2b3bc:	e58d0004 	str	r0, [sp, #4]
   2b3c0:	e58d1000 	str	r1, [sp]
   2b3c4:	e28d0008 	add	r0, sp, #8
   2b3c8:	e1a01004 	mov	r1, r4
   2b3cc:	eb0000d9 	bl	2b738 <__kernel_rem_pio2>
   2b3d0:	e3550000 	cmp	r5, #0
   2b3d4:	aaffffd4 	bge	2b32c <__ieee754_rem_pio2+0x7c>
   2b3d8:	ed946b00 	vldr	d6, [r4]
   2b3dc:	ed947b02 	vldr	d7, [r4, #8]
   2b3e0:	e2600000 	rsb	r0, r0, #0
   2b3e4:	eeb16b46 	vneg.f64	d6, d6
   2b3e8:	eeb17b47 	vneg.f64	d7, d7
   2b3ec:	ed846b00 	vstr	d6, [r4]
   2b3f0:	ed847b02 	vstr	d7, [r4, #8]
   2b3f4:	eaffffcc 	b	2b32c <__ieee754_rem_pio2+0x7c>
   2b3f8:	e3a06000 	mov	r6, #0
   2b3fc:	e3a07000 	mov	r7, #0
   2b400:	e3a00000 	mov	r0, #0
   2b404:	ed840b00 	vstr	d0, [r4]
   2b408:	e1c460f8 	strd	r6, [r4, #8]
   2b40c:	e28dd024 	add	sp, sp, #36	; 0x24
   2b410:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b414:	ee307b40 	vsub.f64	d7, d0, d0
   2b418:	e3a00000 	mov	r0, #0
   2b41c:	ed847b02 	vstr	d7, [r4, #8]
   2b420:	ed847b00 	vstr	d7, [r4]
   2b424:	eaffffc0 	b	2b32c <__ieee754_rem_pio2+0x7c>
   2b428:	eb000314 	bl	2c080 <fabs>
   2b42c:	ed9f5b57 	vldr	d5, [pc, #348]	; 2b590 <__ieee754_rem_pio2+0x2e0>
   2b430:	ed9f6b58 	vldr	d6, [pc, #352]	; 2b598 <__ieee754_rem_pio2+0x2e8>
   2b434:	ed9f4b4b 	vldr	d4, [pc, #300]	; 2b568 <__ieee754_rem_pio2+0x2b8>
   2b438:	ed9f7b4e 	vldr	d7, [pc, #312]	; 2b578 <__ieee754_rem_pio2+0x2c8>
   2b43c:	ee006b05 	vmla.f64	d6, d0, d5
   2b440:	eefd6bc6 	vcvt.s32.f64	s13, d6
   2b444:	eeb85be6 	vcvt.f64.s32	d5, s13
   2b448:	ee160a90 	vmov	r0, s13
   2b44c:	e350001f 	cmp	r0, #31
   2b450:	ee050b44 	vmls.f64	d0, d5, d4
   2b454:	ee257b07 	vmul.f64	d7, d5, d7
   2b458:	ca000011 	bgt	2b4a4 <__ieee754_rem_pio2+0x1f4>
   2b45c:	e59f3160 	ldr	r3, [pc, #352]	; 2b5c4 <__ieee754_rem_pio2+0x314>
   2b460:	e2402001 	sub	r2, r0, #1
   2b464:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   2b468:	ee306b47 	vsub.f64	d6, d0, d7
   2b46c:	e1530006 	cmp	r3, r6
   2b470:	0a00000c 	beq	2b4a8 <__ieee754_rem_pio2+0x1f8>
   2b474:	ed846b00 	vstr	d6, [r4]
   2b478:	ee300b46 	vsub.f64	d0, d0, d6
   2b47c:	e3550000 	cmp	r5, #0
   2b480:	ee300b47 	vsub.f64	d0, d0, d7
   2b484:	ed840b02 	vstr	d0, [r4, #8]
   2b488:	aaffffa7 	bge	2b32c <__ieee754_rem_pio2+0x7c>
   2b48c:	eeb16b46 	vneg.f64	d6, d6
   2b490:	eeb10b40 	vneg.f64	d0, d0
   2b494:	e2600000 	rsb	r0, r0, #0
   2b498:	ed846b00 	vstr	d6, [r4]
   2b49c:	ed840b02 	vstr	d0, [r4, #8]
   2b4a0:	eaffffa1 	b	2b32c <__ieee754_rem_pio2+0x7c>
   2b4a4:	ee306b47 	vsub.f64	d6, d0, d7
   2b4a8:	ee163a90 	vmov	r3, s13
   2b4ac:	e59f2114 	ldr	r2, [pc, #276]	; 2b5c8 <__ieee754_rem_pio2+0x318>
   2b4b0:	e1a06a46 	asr	r6, r6, #20
   2b4b4:	e0023a23 	and	r3, r2, r3, lsr #20
   2b4b8:	e0463003 	sub	r3, r6, r3
   2b4bc:	e3530010 	cmp	r3, #16
   2b4c0:	daffffeb 	ble	2b474 <__ieee754_rem_pio2+0x1c4>
   2b4c4:	ed9f7b29 	vldr	d7, [pc, #164]	; 2b570 <__ieee754_rem_pio2+0x2c0>
   2b4c8:	ed9f6b2c 	vldr	d6, [pc, #176]	; 2b580 <__ieee754_rem_pio2+0x2d0>
   2b4cc:	ee257b07 	vmul.f64	d7, d5, d7
   2b4d0:	ee304b47 	vsub.f64	d4, d0, d7
   2b4d4:	ee300b44 	vsub.f64	d0, d0, d4
   2b4d8:	ee307b47 	vsub.f64	d7, d0, d7
   2b4dc:	ee157b06 	vnmls.f64	d7, d5, d6
   2b4e0:	ee346b47 	vsub.f64	d6, d4, d7
   2b4e4:	ee163a90 	vmov	r3, s13
   2b4e8:	e0022a23 	and	r2, r2, r3, lsr #20
   2b4ec:	e0466002 	sub	r6, r6, r2
   2b4f0:	e3560031 	cmp	r6, #49	; 0x31
   2b4f4:	dd846b00 	vstrle	d6, [r4]
   2b4f8:	deb00b44 	vmovle.f64	d0, d4
   2b4fc:	daffffdd 	ble	2b478 <__ieee754_rem_pio2+0x1c8>
   2b500:	ed9f7b26 	vldr	d7, [pc, #152]	; 2b5a0 <__ieee754_rem_pio2+0x2f0>
   2b504:	ed9f6b27 	vldr	d6, [pc, #156]	; 2b5a8 <__ieee754_rem_pio2+0x2f8>
   2b508:	ee257b07 	vmul.f64	d7, d5, d7
   2b50c:	ee340b47 	vsub.f64	d0, d4, d7
   2b510:	ee344b40 	vsub.f64	d4, d4, d0
   2b514:	ee347b47 	vsub.f64	d7, d4, d7
   2b518:	ee157b06 	vnmls.f64	d7, d5, d6
   2b51c:	ee306b47 	vsub.f64	d6, d0, d7
   2b520:	eaffffd3 	b	2b474 <__ieee754_rem_pio2+0x1c4>
   2b524:	ee307b07 	vadd.f64	d7, d0, d7
   2b528:	e59f109c 	ldr	r1, [pc, #156]	; 2b5cc <__ieee754_rem_pio2+0x31c>
   2b52c:	eeb06b40 	vmov.f64	d6, d0
   2b530:	e1560001 	cmp	r6, r1
   2b534:	0d9f5b0d 	vldreq	d5, [pc, #52]	; 2b570 <__ieee754_rem_pio2+0x2c0>
   2b538:	1d9f6b0e 	vldrne	d6, [pc, #56]	; 2b578 <__ieee754_rem_pio2+0x2c8>
   2b53c:	0d9f6b0f 	vldreq	d6, [pc, #60]	; 2b580 <__ieee754_rem_pio2+0x2d0>
   2b540:	13e00000 	mvnne	r0, #0
   2b544:	0e377b05 	vaddeq.f64	d7, d7, d5
   2b548:	03e00000 	mvneq	r0, #0
   2b54c:	ee375b06 	vadd.f64	d5, d7, d6
   2b550:	ee377b45 	vsub.f64	d7, d7, d5
   2b554:	ed845b00 	vstr	d5, [r4]
   2b558:	ee377b06 	vadd.f64	d7, d7, d6
   2b55c:	ed847b02 	vstr	d7, [r4, #8]
   2b560:	eaffff71 	b	2b32c <__ieee754_rem_pio2+0x7c>
   2b564:	e1a00000 	nop			; (mov r0, r0)
   2b568:	54400000 	.word	0x54400000
   2b56c:	3ff921fb 	.word	0x3ff921fb
   2b570:	1a600000 	.word	0x1a600000
   2b574:	3dd0b461 	.word	0x3dd0b461
   2b578:	1a626331 	.word	0x1a626331
   2b57c:	3dd0b461 	.word	0x3dd0b461
   2b580:	2e037073 	.word	0x2e037073
   2b584:	3ba3198a 	.word	0x3ba3198a
   2b588:	00000000 	.word	0x00000000
   2b58c:	41700000 	.word	0x41700000
   2b590:	6dc9c883 	.word	0x6dc9c883
   2b594:	3fe45f30 	.word	0x3fe45f30
   2b598:	00000000 	.word	0x00000000
   2b59c:	3fe00000 	.word	0x3fe00000
   2b5a0:	2e000000 	.word	0x2e000000
   2b5a4:	3ba3198a 	.word	0x3ba3198a
   2b5a8:	252049c1 	.word	0x252049c1
   2b5ac:	397b839a 	.word	0x397b839a
   2b5b0:	3fe921fb 	.word	0x3fe921fb
   2b5b4:	4002d97b 	.word	0x4002d97b
   2b5b8:	413921fb 	.word	0x413921fb
   2b5bc:	7fefffff 	.word	0x7fefffff
   2b5c0:	00034590 	.word	0x00034590
   2b5c4:	00034510 	.word	0x00034510
   2b5c8:	000007ff 	.word	0x000007ff
   2b5cc:	3ff921fb 	.word	0x3ff921fb

0002b5d0 <__kernel_cos>:
   2b5d0:	ee103a90 	vmov	r3, s1
   2b5d4:	ed2d8b02 	vpush	{d8}
   2b5d8:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   2b5dc:	e35305f9 	cmp	r3, #1044381696	; 0x3e400000
   2b5e0:	aa000018 	bge	2b648 <__kernel_cos+0x78>
   2b5e4:	eefd7bc0 	vcvt.s32.f64	s15, d0
   2b5e8:	ee173a90 	vmov	r3, s15
   2b5ec:	e3530000 	cmp	r3, #0
   2b5f0:	0a000036 	beq	2b6d0 <__kernel_cos+0x100>
   2b5f4:	ee207b00 	vmul.f64	d7, d0, d0
   2b5f8:	ed9f8b38 	vldr	d8, [pc, #224]	; 2b6e0 <__kernel_cos+0x110>
   2b5fc:	ed9f2b39 	vldr	d2, [pc, #228]	; 2b6e8 <__kernel_cos+0x118>
   2b600:	ed9f3b3a 	vldr	d3, [pc, #232]	; 2b6f0 <__kernel_cos+0x120>
   2b604:	ed9f4b3b 	vldr	d4, [pc, #236]	; 2b6f8 <__kernel_cos+0x128>
   2b608:	ed9f5b3c 	vldr	d5, [pc, #240]	; 2b700 <__kernel_cos+0x130>
   2b60c:	ed9f6b3d 	vldr	d6, [pc, #244]	; 2b708 <__kernel_cos+0x138>
   2b610:	ee072b08 	vmla.f64	d2, d7, d8
   2b614:	ee123b07 	vnmls.f64	d3, d2, d7
   2b618:	ee034b07 	vmla.f64	d4, d3, d7
   2b61c:	ee145b07 	vnmls.f64	d5, d4, d7
   2b620:	ee056b07 	vmla.f64	d6, d5, d7
   2b624:	ee266b07 	vmul.f64	d6, d6, d7
   2b628:	ed9f4b38 	vldr	d4, [pc, #224]	; 2b710 <__kernel_cos+0x140>
   2b62c:	ee200b01 	vmul.f64	d0, d0, d1
   2b630:	ed9f5b38 	vldr	d5, [pc, #224]	; 2b718 <__kernel_cos+0x148>
   2b634:	ecbd8b02 	vpop	{d8}
   2b638:	ee170b06 	vnmls.f64	d0, d7, d6
   2b63c:	ee170b04 	vnmls.f64	d0, d7, d4
   2b640:	ee350b40 	vsub.f64	d0, d5, d0
   2b644:	e12fff1e 	bx	lr
   2b648:	ee207b00 	vmul.f64	d7, d0, d0
   2b64c:	ed9f6b23 	vldr	d6, [pc, #140]	; 2b6e0 <__kernel_cos+0x110>
   2b650:	ed9f2b24 	vldr	d2, [pc, #144]	; 2b6e8 <__kernel_cos+0x118>
   2b654:	ed9f3b25 	vldr	d3, [pc, #148]	; 2b6f0 <__kernel_cos+0x120>
   2b658:	ed9f4b26 	vldr	d4, [pc, #152]	; 2b6f8 <__kernel_cos+0x128>
   2b65c:	ed9f5b27 	vldr	d5, [pc, #156]	; 2b700 <__kernel_cos+0x130>
   2b660:	e59f20c8 	ldr	r2, [pc, #200]	; 2b730 <__kernel_cos+0x160>
   2b664:	e1530002 	cmp	r3, r2
   2b668:	ee072b06 	vmla.f64	d2, d7, d6
   2b66c:	ed9f6b25 	vldr	d6, [pc, #148]	; 2b708 <__kernel_cos+0x138>
   2b670:	ee123b07 	vnmls.f64	d3, d2, d7
   2b674:	ee034b07 	vmla.f64	d4, d3, d7
   2b678:	ee145b07 	vnmls.f64	d5, d4, d7
   2b67c:	ee056b07 	vmla.f64	d6, d5, d7
   2b680:	ee266b07 	vmul.f64	d6, d6, d7
   2b684:	daffffe7 	ble	2b628 <__kernel_cos+0x58>
   2b688:	ee200b01 	vmul.f64	d0, d0, d1
   2b68c:	e59f20a0 	ldr	r2, [pc, #160]	; 2b734 <__kernel_cos+0x164>
   2b690:	ed9f3b1e 	vldr	d3, [pc, #120]	; 2b710 <__kernel_cos+0x140>
   2b694:	e1530002 	cmp	r3, r2
   2b698:	d3a01000 	movle	r1, #0
   2b69c:	d3a00000 	movle	r0, #0
   2b6a0:	d2431602 	suble	r1, r3, #2097152	; 0x200000
   2b6a4:	dc410b14 	vmovle	d4, r0, r1
   2b6a8:	dd9f5b1a 	vldrle	d5, [pc, #104]	; 2b718 <__kernel_cos+0x148>
   2b6ac:	cd9f4b1b 	vldrgt	d4, [pc, #108]	; 2b720 <__kernel_cos+0x150>
   2b6b0:	ee170b06 	vnmls.f64	d0, d7, d6
   2b6b4:	cd9f5b1b 	vldrgt	d5, [pc, #108]	; 2b728 <__kernel_cos+0x158>
   2b6b8:	de355b44 	vsuble.f64	d5, d5, d4
   2b6bc:	ee174b03 	vnmls.f64	d4, d7, d3
   2b6c0:	ecbd8b02 	vpop	{d8}
   2b6c4:	ee340b40 	vsub.f64	d0, d4, d0
   2b6c8:	ee350b40 	vsub.f64	d0, d5, d0
   2b6cc:	e12fff1e 	bx	lr
   2b6d0:	ed9f0b10 	vldr	d0, [pc, #64]	; 2b718 <__kernel_cos+0x148>
   2b6d4:	ecbd8b02 	vpop	{d8}
   2b6d8:	e12fff1e 	bx	lr
   2b6dc:	e1a00000 	nop			; (mov r0, r0)
   2b6e0:	be8838d4 	.word	0xbe8838d4
   2b6e4:	bda8fae9 	.word	0xbda8fae9
   2b6e8:	bdb4b1c4 	.word	0xbdb4b1c4
   2b6ec:	3e21ee9e 	.word	0x3e21ee9e
   2b6f0:	809c52ad 	.word	0x809c52ad
   2b6f4:	3e927e4f 	.word	0x3e927e4f
   2b6f8:	19cb1590 	.word	0x19cb1590
   2b6fc:	3efa01a0 	.word	0x3efa01a0
   2b700:	16c15177 	.word	0x16c15177
   2b704:	3f56c16c 	.word	0x3f56c16c
   2b708:	5555554c 	.word	0x5555554c
   2b70c:	3fa55555 	.word	0x3fa55555
   2b710:	00000000 	.word	0x00000000
   2b714:	3fe00000 	.word	0x3fe00000
   2b718:	00000000 	.word	0x00000000
   2b71c:	3ff00000 	.word	0x3ff00000
   2b720:	00000000 	.word	0x00000000
   2b724:	3fd20000 	.word	0x3fd20000
   2b728:	00000000 	.word	0x00000000
   2b72c:	3fe70000 	.word	0x3fe70000
   2b730:	3fd33332 	.word	0x3fd33332
   2b734:	3fe90000 	.word	0x3fe90000

0002b738 <__kernel_rem_pio2>:
   2b738:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b73c:	ed2d8b10 	vpush	{d8-d15}
   2b740:	e59fc310 	ldr	ip, [pc, #784]	; 2ba58 <__kernel_rem_pio2+0x320>
   2b744:	e2436001 	sub	r6, r3, #1
   2b748:	e24ddf93 	sub	sp, sp, #588	; 0x24c
   2b74c:	e58d3008 	str	r3, [sp, #8]
   2b750:	e59d32b0 	ldr	r3, [sp, #688]	; 0x2b0
   2b754:	e3720014 	cmn	r2, #20
   2b758:	e1a08000 	mov	r8, r0
   2b75c:	e58d1010 	str	r1, [sp, #16]
   2b760:	e79c5103 	ldr	r5, [ip, r3, lsl #2]
   2b764:	ba000199 	blt	2bdd0 <__kernel_rem_pio2+0x698>
   2b768:	e59f12ec 	ldr	r1, [pc, #748]	; 2ba5c <__kernel_rem_pio2+0x324>
   2b76c:	e2423003 	sub	r3, r2, #3
   2b770:	e0cc0193 	smull	r0, ip, r3, r1
   2b774:	e1a03fc3 	asr	r3, r3, #31
   2b778:	e063314c 	rsb	r3, r3, ip, asr #2
   2b77c:	e58d3004 	str	r3, [sp, #4]
   2b780:	e2833001 	add	r3, r3, #1
   2b784:	e0433103 	sub	r3, r3, r3, lsl #2
   2b788:	e1a03183 	lsl	r3, r3, #3
   2b78c:	e0829003 	add	r9, r2, r3
   2b790:	e59d3004 	ldr	r3, [sp, #4]
   2b794:	e0951006 	adds	r1, r5, r6
   2b798:	e0433006 	sub	r3, r3, r6
   2b79c:	4a00000d 	bmi	2b7d8 <__kernel_rem_pio2+0xa0>
   2b7a0:	ed9f6b9e 	vldr	d6, [pc, #632]	; 2ba20 <__kernel_rem_pio2+0x2e8>
   2b7a4:	e2811001 	add	r1, r1, #1
   2b7a8:	e59d02b4 	ldr	r0, [sp, #692]	; 0x2b4
   2b7ac:	e0811003 	add	r1, r1, r3
   2b7b0:	e28d2068 	add	r2, sp, #104	; 0x68
   2b7b4:	e3530000 	cmp	r3, #0
   2b7b8:	a790c103 	ldrge	ip, [r0, r3, lsl #2]
   2b7bc:	eeb07b46 	vmov.f64	d7, d6
   2b7c0:	ae07ca90 	vmovge	s15, ip
   2b7c4:	e2833001 	add	r3, r3, #1
   2b7c8:	aeb87be7 	vcvtge.f64.s32	d7, s15
   2b7cc:	e1530001 	cmp	r3, r1
   2b7d0:	eca27b02 	vstmia	r2!, {d7}
   2b7d4:	1afffff6 	bne	2b7b4 <__kernel_rem_pio2+0x7c>
   2b7d8:	e59d3008 	ldr	r3, [sp, #8]
   2b7dc:	e3550000 	cmp	r5, #0
   2b7e0:	e1a04183 	lsl	r4, r3, #3
   2b7e4:	ba000013 	blt	2b838 <__kernel_rem_pio2+0x100>
   2b7e8:	e28d3068 	add	r3, sp, #104	; 0x68
   2b7ec:	e083c004 	add	ip, r3, r4
   2b7f0:	e28d3e1b 	add	r3, sp, #432	; 0x1b0
   2b7f4:	e0881004 	add	r1, r8, r4
   2b7f8:	e083e185 	add	lr, r3, r5, lsl #3
   2b7fc:	e28d0f6a 	add	r0, sp, #424	; 0x1a8
   2b800:	e3560000 	cmp	r6, #0
   2b804:	ed9f7b85 	vldr	d7, [pc, #532]	; 2ba20 <__kernel_rem_pio2+0x2e8>
   2b808:	a1a0200c 	movge	r2, ip
   2b80c:	a1a03008 	movge	r3, r8
   2b810:	ba000004 	blt	2b828 <__kernel_rem_pio2+0xf0>
   2b814:	ecb35b02 	vldmia	r3!, {d5}
   2b818:	ed326b02 	vldmdb	r2!, {d6}
   2b81c:	e1530001 	cmp	r3, r1
   2b820:	ee057b06 	vmla.f64	d7, d5, d6
   2b824:	1afffffa 	bne	2b814 <__kernel_rem_pio2+0xdc>
   2b828:	eca07b02 	vstmia	r0!, {d7}
   2b82c:	e28cc008 	add	ip, ip, #8
   2b830:	e150000e 	cmp	r0, lr
   2b834:	1afffff1 	bne	2b800 <__kernel_rem_pio2+0xc8>
   2b838:	ed9fdb7a 	vldr	d13, [pc, #488]	; 2ba28 <__kernel_rem_pio2+0x2f0>
   2b83c:	ed9fcb7b 	vldr	d12, [pc, #492]	; 2ba30 <__kernel_rem_pio2+0x2f8>
   2b840:	ed9f9b7c 	vldr	d9, [pc, #496]	; 2ba38 <__kernel_rem_pio2+0x300>
   2b844:	ed9f8b7d 	vldr	d8, [pc, #500]	; 2ba40 <__kernel_rem_pio2+0x308>
   2b848:	ed9fbb7e 	vldr	d11, [pc, #504]	; 2ba48 <__kernel_rem_pio2+0x310>
   2b84c:	ed9fab7f 	vldr	d10, [pc, #508]	; 2ba50 <__kernel_rem_pio2+0x318>
   2b850:	e1a07105 	lsl	r7, r5, #2
   2b854:	e2473004 	sub	r3, r7, #4
   2b858:	e28da018 	add	sl, sp, #24
   2b85c:	e08a3003 	add	r3, sl, r3
   2b860:	e0884004 	add	r4, r8, r4
   2b864:	e08a7007 	add	r7, sl, r7
   2b868:	e1a0b005 	mov	fp, r5
   2b86c:	e58d300c 	str	r3, [sp, #12]
   2b870:	e28d3f92 	add	r3, sp, #584	; 0x248
   2b874:	e083318b 	add	r3, r3, fp, lsl #3
   2b878:	e35b0000 	cmp	fp, #0
   2b87c:	ed130b28 	vldr	d0, [r3, #-160]	; 0xffffff60
   2b880:	da00000e 	ble	2b8c0 <__kernel_rem_pio2+0x188>
   2b884:	e28d1f6a 	add	r1, sp, #424	; 0x1a8
   2b888:	e081318b 	add	r3, r1, fp, lsl #3
   2b88c:	e28d2014 	add	r2, sp, #20
   2b890:	ee207b0d 	vmul.f64	d7, d0, d13
   2b894:	ed336b02 	vldmdb	r3!, {d6}
   2b898:	eeb05b40 	vmov.f64	d5, d0
   2b89c:	e1530001 	cmp	r3, r1
   2b8a0:	eebd7bc7 	vcvt.s32.f64	s14, d7
   2b8a4:	eeb87bc7 	vcvt.f64.s32	d7, s14
   2b8a8:	ee075b4c 	vmls.f64	d5, d7, d12
   2b8ac:	ee370b06 	vadd.f64	d0, d7, d6
   2b8b0:	eebd5bc5 	vcvt.s32.f64	s10, d5
   2b8b4:	ee150a10 	vmov	r0, s10
   2b8b8:	e5a20004 	str	r0, [r2, #4]!
   2b8bc:	1afffff3 	bne	2b890 <__kernel_rem_pio2+0x158>
   2b8c0:	e1a00009 	mov	r0, r9
   2b8c4:	eb00024f 	bl	2c208 <scalbn>
   2b8c8:	eeb0eb40 	vmov.f64	d14, d0
   2b8cc:	ee200b09 	vmul.f64	d0, d0, d9
   2b8d0:	eb0001f0 	bl	2c098 <floor>
   2b8d4:	e3590000 	cmp	r9, #0
   2b8d8:	ee00eb48 	vmls.f64	d14, d0, d8
   2b8dc:	eebdfbce 	vcvt.s32.f64	s30, d14
   2b8e0:	eeb87bcf 	vcvt.f64.s32	d7, s30
   2b8e4:	ee3eeb47 	vsub.f64	d14, d14, d7
   2b8e8:	da00005c 	ble	2ba60 <__kernel_rem_pio2+0x328>
   2b8ec:	e28d3f92 	add	r3, sp, #584	; 0x248
   2b8f0:	e24b1001 	sub	r1, fp, #1
   2b8f4:	e0831101 	add	r1, r3, r1, lsl #2
   2b8f8:	e5112230 	ldr	r2, [r1, #-560]	; 0xfffffdd0
   2b8fc:	e2693018 	rsb	r3, r9, #24
   2b900:	e1a00352 	asr	r0, r2, r3
   2b904:	e0423310 	sub	r3, r2, r0, lsl r3
   2b908:	e5013230 	str	r3, [r1, #-560]	; 0xfffffdd0
   2b90c:	ee1f1a10 	vmov	r1, s30
   2b910:	e2692017 	rsb	r2, r9, #23
   2b914:	e1a02253 	asr	r2, r3, r2
   2b918:	e0811000 	add	r1, r1, r0
   2b91c:	e3520000 	cmp	r2, #0
   2b920:	ee0f1a10 	vmov	s30, r1
   2b924:	ca000054 	bgt	2ba7c <__kernel_rem_pio2+0x344>
   2b928:	eeb5eb40 	vcmp.f64	d14, #0.0
   2b92c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2b930:	1a00007f 	bne	2bb34 <__kernel_rem_pio2+0x3fc>
   2b934:	e24b3001 	sub	r3, fp, #1
   2b938:	e1550003 	cmp	r5, r3
   2b93c:	ca000007 	bgt	2b960 <__kernel_rem_pio2+0x228>
   2b940:	e08a110b 	add	r1, sl, fp, lsl #2
   2b944:	e3a00000 	mov	r0, #0
   2b948:	e531c004 	ldr	ip, [r1, #-4]!
   2b94c:	e1510007 	cmp	r1, r7
   2b950:	e180000c 	orr	r0, r0, ip
   2b954:	1afffffb 	bne	2b948 <__kernel_rem_pio2+0x210>
   2b958:	e3500000 	cmp	r0, #0
   2b95c:	1a0000eb 	bne	2bd10 <__kernel_rem_pio2+0x5d8>
   2b960:	e28d3f92 	add	r3, sp, #584	; 0x248
   2b964:	e0833105 	add	r3, r3, r5, lsl #2
   2b968:	e5133234 	ldr	r3, [r3, #-564]	; 0xfffffdcc
   2b96c:	e3530000 	cmp	r3, #0
   2b970:	1a0000e2 	bne	2bd00 <__kernel_rem_pio2+0x5c8>
   2b974:	e59d300c 	ldr	r3, [sp, #12]
   2b978:	e3a00001 	mov	r0, #1
   2b97c:	e5332004 	ldr	r2, [r3, #-4]!
   2b980:	e2800001 	add	r0, r0, #1
   2b984:	e3520000 	cmp	r2, #0
   2b988:	0afffffb 	beq	2b97c <__kernel_rem_pio2+0x244>
   2b98c:	e28b3001 	add	r3, fp, #1
   2b990:	e08b0000 	add	r0, fp, r0
   2b994:	e1a0c003 	mov	ip, r3
   2b998:	e59d2004 	ldr	r2, [sp, #4]
   2b99c:	e28d1068 	add	r1, sp, #104	; 0x68
   2b9a0:	e083e002 	add	lr, r3, r2
   2b9a4:	e59d2008 	ldr	r2, [sp, #8]
   2b9a8:	e24ee107 	sub	lr, lr, #-1073741823	; 0xc0000001
   2b9ac:	e082200b 	add	r2, r2, fp
   2b9b0:	e0812182 	add	r2, r1, r2, lsl #3
   2b9b4:	e59d12b4 	ldr	r1, [sp, #692]	; 0x2b4
   2b9b8:	e081e10e 	add	lr, r1, lr, lsl #2
   2b9bc:	e28d1f6a 	add	r1, sp, #424	; 0x1a8
   2b9c0:	e081b183 	add	fp, r1, r3, lsl #3
   2b9c4:	e5be3004 	ldr	r3, [lr, #4]!
   2b9c8:	e1a01002 	mov	r1, r2
   2b9cc:	ee073a10 	vmov	s14, r3
   2b9d0:	e3560000 	cmp	r6, #0
   2b9d4:	ed9f6b11 	vldr	d6, [pc, #68]	; 2ba20 <__kernel_rem_pio2+0x2e8>
   2b9d8:	eeb87bc7 	vcvt.f64.s32	d7, s14
   2b9dc:	eca17b02 	vstmia	r1!, {d7}
   2b9e0:	ba000006 	blt	2ba00 <__kernel_rem_pio2+0x2c8>
   2b9e4:	e1a03008 	mov	r3, r8
   2b9e8:	ea000000 	b	2b9f0 <__kernel_rem_pio2+0x2b8>
   2b9ec:	ed327b02 	vldmdb	r2!, {d7}
   2b9f0:	ecb35b02 	vldmia	r3!, {d5}
   2b9f4:	e1530004 	cmp	r3, r4
   2b9f8:	ee056b07 	vmla.f64	d6, d5, d7
   2b9fc:	1afffffa 	bne	2b9ec <__kernel_rem_pio2+0x2b4>
   2ba00:	e28cc001 	add	ip, ip, #1
   2ba04:	e15c0000 	cmp	ip, r0
   2ba08:	ecab6b02 	vstmia	fp!, {d6}
   2ba0c:	e1a02001 	mov	r2, r1
   2ba10:	daffffeb 	ble	2b9c4 <__kernel_rem_pio2+0x28c>
   2ba14:	e1a0b000 	mov	fp, r0
   2ba18:	eaffff94 	b	2b870 <__kernel_rem_pio2+0x138>
   2ba1c:	e1a00000 	nop			; (mov r0, r0)
	...
   2ba2c:	3e700000 	.word	0x3e700000
   2ba30:	00000000 	.word	0x00000000
   2ba34:	41700000 	.word	0x41700000
   2ba38:	00000000 	.word	0x00000000
   2ba3c:	3fc00000 	.word	0x3fc00000
   2ba40:	00000000 	.word	0x00000000
   2ba44:	40200000 	.word	0x40200000
   2ba48:	00000000 	.word	0x00000000
   2ba4c:	3ff00000 	.word	0x3ff00000
   2ba50:	00000000 	.word	0x00000000
   2ba54:	3fe00000 	.word	0x3fe00000
   2ba58:	00034698 	.word	0x00034698
   2ba5c:	2aaaaaab 	.word	0x2aaaaaab
   2ba60:	1a000099 	bne	2bccc <__kernel_rem_pio2+0x594>
   2ba64:	e28d3f92 	add	r3, sp, #584	; 0x248
   2ba68:	e083310b 	add	r3, r3, fp, lsl #2
   2ba6c:	e5132234 	ldr	r2, [r3, #-564]	; 0xfffffdcc
   2ba70:	e1a02bc2 	asr	r2, r2, #23
   2ba74:	e3520000 	cmp	r2, #0
   2ba78:	daffffaa 	ble	2b928 <__kernel_rem_pio2+0x1f0>
   2ba7c:	ee1f3a10 	vmov	r3, s30
   2ba80:	e35b0000 	cmp	fp, #0
   2ba84:	e2833001 	add	r3, r3, #1
   2ba88:	ee0f3a10 	vmov	s30, r3
   2ba8c:	da000124 	ble	2bf24 <__kernel_rem_pio2+0x7ec>
   2ba90:	e59d3018 	ldr	r3, [sp, #24]
   2ba94:	e3530000 	cmp	r3, #0
   2ba98:	1a000075 	bne	2bc74 <__kernel_rem_pio2+0x53c>
   2ba9c:	e35b0001 	cmp	fp, #1
   2baa0:	0a000008 	beq	2bac8 <__kernel_rem_pio2+0x390>
   2baa4:	e28dc01c 	add	ip, sp, #28
   2baa8:	e3a00001 	mov	r0, #1
   2baac:	e49c3004 	ldr	r3, [ip], #4
   2bab0:	e2801001 	add	r1, r0, #1
   2bab4:	e3530000 	cmp	r3, #0
   2bab8:	1a00006f 	bne	2bc7c <__kernel_rem_pio2+0x544>
   2babc:	e15b0001 	cmp	fp, r1
   2bac0:	e1a00001 	mov	r0, r1
   2bac4:	1afffff8 	bne	2baac <__kernel_rem_pio2+0x374>
   2bac8:	e3590000 	cmp	r9, #0
   2bacc:	da00000a 	ble	2bafc <__kernel_rem_pio2+0x3c4>
   2bad0:	e3590001 	cmp	r9, #1
   2bad4:	0a0000b5 	beq	2bdb0 <__kernel_rem_pio2+0x678>
   2bad8:	e3590002 	cmp	r9, #2
   2badc:	1a000006 	bne	2bafc <__kernel_rem_pio2+0x3c4>
   2bae0:	e28d1f92 	add	r1, sp, #584	; 0x248
   2bae4:	e24b0001 	sub	r0, fp, #1
   2bae8:	e0810100 	add	r0, r1, r0, lsl #2
   2baec:	e5101230 	ldr	r1, [r0, #-560]	; 0xfffffdd0
   2baf0:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
   2baf4:	e3c11503 	bic	r1, r1, #12582912	; 0xc00000
   2baf8:	e5001230 	str	r1, [r0, #-560]	; 0xfffffdd0
   2bafc:	e3520002 	cmp	r2, #2
   2bb00:	1affff88 	bne	2b928 <__kernel_rem_pio2+0x1f0>
   2bb04:	e3530000 	cmp	r3, #0
   2bb08:	ee3beb4e 	vsub.f64	d14, d11, d14
   2bb0c:	0affff85 	beq	2b928 <__kernel_rem_pio2+0x1f0>
   2bb10:	e1a00009 	mov	r0, r9
   2bb14:	eeb00b4b 	vmov.f64	d0, d11
   2bb18:	e58d2014 	str	r2, [sp, #20]
   2bb1c:	eb0001b9 	bl	2c208 <scalbn>
   2bb20:	e59d2014 	ldr	r2, [sp, #20]
   2bb24:	ee3eeb40 	vsub.f64	d14, d14, d0
   2bb28:	eeb5eb40 	vcmp.f64	d14, #0.0
   2bb2c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2bb30:	0affff7f 	beq	2b934 <__kernel_rem_pio2+0x1fc>
   2bb34:	eeb00b4e 	vmov.f64	d0, d14
   2bb38:	e2690000 	rsb	r0, r9, #0
   2bb3c:	e58d2004 	str	r2, [sp, #4]
   2bb40:	eb0001b0 	bl	2c208 <scalbn>
   2bb44:	ed9f6bf9 	vldr	d6, [pc, #996]	; 2bf30 <__kernel_rem_pio2+0x7f8>
   2bb48:	e59d2004 	ldr	r2, [sp, #4]
   2bb4c:	eeb40bc6 	vcmpe.f64	d0, d6
   2bb50:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2bb54:	ba000100 	blt	2bf5c <__kernel_rem_pio2+0x824>
   2bb58:	ed9f7bf6 	vldr	d7, [pc, #984]	; 2bf38 <__kernel_rem_pio2+0x800>
   2bb5c:	e28d3f92 	add	r3, sp, #584	; 0x248
   2bb60:	e083010b 	add	r0, r3, fp, lsl #2
   2bb64:	e28d1f92 	add	r1, sp, #584	; 0x248
   2bb68:	ee207b07 	vmul.f64	d7, d0, d7
   2bb6c:	e28b3001 	add	r3, fp, #1
   2bb70:	e0811103 	add	r1, r1, r3, lsl #2
   2bb74:	e2899018 	add	r9, r9, #24
   2bb78:	eebd7bc7 	vcvt.s32.f64	s14, d7
   2bb7c:	eeb85bc7 	vcvt.f64.s32	d5, s14
   2bb80:	ee050b46 	vmls.f64	d0, d5, d6
   2bb84:	eebd0bc0 	vcvt.s32.f64	s0, d0
   2bb88:	ed000a8c 	vstr	s0, [r0, #-560]	; 0xfffffdd0
   2bb8c:	ed017a8c 	vstr	s14, [r1, #-560]	; 0xfffffdd0
   2bb90:	e1a00009 	mov	r0, r9
   2bb94:	ed9f0be9 	vldr	d0, [pc, #932]	; 2bf40 <__kernel_rem_pio2+0x808>
   2bb98:	e98d000c 	stmib	sp, {r2, r3}
   2bb9c:	eb000199 	bl	2c208 <scalbn>
   2bba0:	e59d3008 	ldr	r3, [sp, #8]
   2bba4:	e59d2004 	ldr	r2, [sp, #4]
   2bba8:	e3530000 	cmp	r3, #0
   2bbac:	ba0000f6 	blt	2bf8c <__kernel_rem_pio2+0x854>
   2bbb0:	ed9f6be0 	vldr	d6, [pc, #896]	; 2bf38 <__kernel_rem_pio2+0x800>
   2bbb4:	e1a06183 	lsl	r6, r3, #3
   2bbb8:	e28d7f6a 	add	r7, sp, #424	; 0x1a8
   2bbbc:	e0874006 	add	r4, r7, r6
   2bbc0:	e284c008 	add	ip, r4, #8
   2bbc4:	e08a0103 	add	r0, sl, r3, lsl #2
   2bbc8:	e1a01000 	mov	r1, r0
   2bbcc:	e411e004 	ldr	lr, [r1], #-4
   2bbd0:	e150000a 	cmp	r0, sl
   2bbd4:	ee07ea10 	vmov	s14, lr
   2bbd8:	e1a00001 	mov	r0, r1
   2bbdc:	eeb87bc7 	vcvt.f64.s32	d7, s14
   2bbe0:	ee277b00 	vmul.f64	d7, d7, d0
   2bbe4:	ee200b06 	vmul.f64	d0, d0, d6
   2bbe8:	ed2c7b02 	vstmdb	ip!, {d7}
   2bbec:	1afffff5 	bne	2bbc8 <__kernel_rem_pio2+0x490>
   2bbf0:	ed9f4bd4 	vldr	d4, [pc, #848]	; 2bf48 <__kernel_rem_pio2+0x810>
   2bbf4:	e28d9f42 	add	r9, sp, #264	; 0x108
   2bbf8:	e1a08009 	mov	r8, r9
   2bbfc:	e3a0e000 	mov	lr, #0
   2bc00:	e3550000 	cmp	r5, #0
   2bc04:	ba0000c4 	blt	2bf1c <__kernel_rem_pio2+0x7e4>
   2bc08:	e59fc348 	ldr	ip, [pc, #840]	; 2bf58 <__kernel_rem_pio2+0x820>
   2bc0c:	e1a00004 	mov	r0, r4
   2bc10:	eeb06b44 	vmov.f64	d6, d4
   2bc14:	ed9f7bcd 	vldr	d7, [pc, #820]	; 2bf50 <__kernel_rem_pio2+0x818>
   2bc18:	e3a01000 	mov	r1, #0
   2bc1c:	ea000002 	b	2bc2c <__kernel_rem_pio2+0x4f4>
   2bc20:	e151000e 	cmp	r1, lr
   2bc24:	ca000005 	bgt	2bc40 <__kernel_rem_pio2+0x508>
   2bc28:	ecbc6b02 	vldmia	ip!, {d6}
   2bc2c:	ecb05b02 	vldmia	r0!, {d5}
   2bc30:	e2811001 	add	r1, r1, #1
   2bc34:	e1550001 	cmp	r5, r1
   2bc38:	ee057b06 	vmla.f64	d7, d5, d6
   2bc3c:	aafffff7 	bge	2bc20 <__kernel_rem_pio2+0x4e8>
   2bc40:	e1540007 	cmp	r4, r7
   2bc44:	eca87b02 	vstmia	r8!, {d7}
   2bc48:	e28ee001 	add	lr, lr, #1
   2bc4c:	e2444008 	sub	r4, r4, #8
   2bc50:	1affffea 	bne	2bc00 <__kernel_rem_pio2+0x4c8>
   2bc54:	e59d12b0 	ldr	r1, [sp, #688]	; 0x2b0
   2bc58:	e3510003 	cmp	r1, #3
   2bc5c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   2bc60:	ea00004d 	b	2bd9c <__kernel_rem_pio2+0x664>
   2bc64:	0002beec 	.word	0x0002beec
   2bc68:	0002bebc 	.word	0x0002bebc
   2bc6c:	0002bebc 	.word	0x0002bebc
   2bc70:	0002bde0 	.word	0x0002bde0
   2bc74:	e3a01001 	mov	r1, #1
   2bc78:	e3a00000 	mov	r0, #0
   2bc7c:	e28dcf92 	add	ip, sp, #584	; 0x248
   2bc80:	e08c0100 	add	r0, ip, r0, lsl #2
   2bc84:	e2633401 	rsb	r3, r3, #16777216	; 0x1000000
   2bc88:	e15b0001 	cmp	fp, r1
   2bc8c:	e5003230 	str	r3, [r0, #-560]	; 0xfffffdd0
   2bc90:	da00000b 	ble	2bcc4 <__kernel_rem_pio2+0x58c>
   2bc94:	e1a03101 	lsl	r3, r1, #2
   2bc98:	e08c1003 	add	r1, ip, r3
   2bc9c:	e5111230 	ldr	r1, [r1, #-560]	; 0xfffffdd0
   2bca0:	e08a3003 	add	r3, sl, r3
   2bca4:	e08ac10b 	add	ip, sl, fp, lsl #2
   2bca8:	e3e004ff 	mvn	r0, #-16777216	; 0xff000000
   2bcac:	ea000000 	b	2bcb4 <__kernel_rem_pio2+0x57c>
   2bcb0:	e5931000 	ldr	r1, [r3]
   2bcb4:	e0401001 	sub	r1, r0, r1
   2bcb8:	e4831004 	str	r1, [r3], #4
   2bcbc:	e153000c 	cmp	r3, ip
   2bcc0:	1afffffa 	bne	2bcb0 <__kernel_rem_pio2+0x578>
   2bcc4:	e3a03001 	mov	r3, #1
   2bcc8:	eaffff7e 	b	2bac8 <__kernel_rem_pio2+0x390>
   2bccc:	eeb4ebca 	vcmpe.f64	d14, d10
   2bcd0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2bcd4:	b3a02000 	movlt	r2, #0
   2bcd8:	baffff12 	blt	2b928 <__kernel_rem_pio2+0x1f0>
   2bcdc:	ee1f3a10 	vmov	r3, s30
   2bce0:	e35b0000 	cmp	fp, #0
   2bce4:	c3a02002 	movgt	r2, #2
   2bce8:	e2833001 	add	r3, r3, #1
   2bcec:	ee0f3a10 	vmov	s30, r3
   2bcf0:	caffff66 	bgt	2ba90 <__kernel_rem_pio2+0x358>
   2bcf4:	ee3beb4e 	vsub.f64	d14, d11, d14
   2bcf8:	e3a02002 	mov	r2, #2
   2bcfc:	eaffff09 	b	2b928 <__kernel_rem_pio2+0x1f0>
   2bd00:	e28b3001 	add	r3, fp, #1
   2bd04:	e1a0c003 	mov	ip, r3
   2bd08:	e1a00003 	mov	r0, r3
   2bd0c:	eaffff21 	b	2b998 <__kernel_rem_pio2+0x260>
   2bd10:	e28d1f92 	add	r1, sp, #584	; 0x248
   2bd14:	e0811103 	add	r1, r1, r3, lsl #2
   2bd18:	e5111230 	ldr	r1, [r1, #-560]	; 0xfffffdd0
   2bd1c:	e2499018 	sub	r9, r9, #24
   2bd20:	e3510000 	cmp	r1, #0
   2bd24:	1affff99 	bne	2bb90 <__kernel_rem_pio2+0x458>
   2bd28:	e24b1107 	sub	r1, fp, #-1073741823	; 0xc0000001
   2bd2c:	e08a1101 	add	r1, sl, r1, lsl #2
   2bd30:	e5310004 	ldr	r0, [r1, #-4]!
   2bd34:	e2433001 	sub	r3, r3, #1
   2bd38:	e3500000 	cmp	r0, #0
   2bd3c:	e2499018 	sub	r9, r9, #24
   2bd40:	0afffffa 	beq	2bd30 <__kernel_rem_pio2+0x5f8>
   2bd44:	eaffff91 	b	2bb90 <__kernel_rem_pio2+0x458>
   2bd48:	ed9f7b80 	vldr	d7, [pc, #512]	; 2bf50 <__kernel_rem_pio2+0x818>
   2bd4c:	ed9d6b42 	vldr	d6, [sp, #264]	; 0x108
   2bd50:	e3520000 	cmp	r2, #0
   2bd54:	ee366b47 	vsub.f64	d6, d6, d7
   2bd58:	1a000085 	bne	2bf74 <__kernel_rem_pio2+0x83c>
   2bd5c:	e59d1010 	ldr	r1, [sp, #16]
   2bd60:	e3530000 	cmp	r3, #0
   2bd64:	ed817b00 	vstr	d7, [r1]
   2bd68:	da000009 	ble	2bd94 <__kernel_rem_pio2+0x65c>
   2bd6c:	e28d0e11 	add	r0, sp, #272	; 0x110
   2bd70:	e3a01001 	mov	r1, #1
   2bd74:	ecb07b02 	vldmia	r0!, {d7}
   2bd78:	e2811001 	add	r1, r1, #1
   2bd7c:	e1530001 	cmp	r3, r1
   2bd80:	ee366b07 	vadd.f64	d6, d6, d7
   2bd84:	aafffffa 	bge	2bd74 <__kernel_rem_pio2+0x63c>
   2bd88:	e3520000 	cmp	r2, #0
   2bd8c:	0a000000 	beq	2bd94 <__kernel_rem_pio2+0x65c>
   2bd90:	eeb16b46 	vneg.f64	d6, d6
   2bd94:	e59d3010 	ldr	r3, [sp, #16]
   2bd98:	ed836b02 	vstr	d6, [r3, #8]
   2bd9c:	ee1f3a10 	vmov	r3, s30
   2bda0:	e2030007 	and	r0, r3, #7
   2bda4:	e28ddf93 	add	sp, sp, #588	; 0x24c
   2bda8:	ecbd8b10 	vpop	{d8-d15}
   2bdac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bdb0:	e28d1f92 	add	r1, sp, #584	; 0x248
   2bdb4:	e24b0001 	sub	r0, fp, #1
   2bdb8:	e0810100 	add	r0, r1, r0, lsl #2
   2bdbc:	e5101230 	ldr	r1, [r0, #-560]	; 0xfffffdd0
   2bdc0:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
   2bdc4:	e3c11502 	bic	r1, r1, #8388608	; 0x800000
   2bdc8:	e5001230 	str	r1, [r0, #-560]	; 0xfffffdd0
   2bdcc:	eaffff4a 	b	2bafc <__kernel_rem_pio2+0x3c4>
   2bdd0:	e3a01000 	mov	r1, #0
   2bdd4:	e3e03017 	mvn	r3, #23
   2bdd8:	e58d1004 	str	r1, [sp, #4]
   2bddc:	eafffe6a 	b	2b78c <__kernel_rem_pio2+0x54>
   2bde0:	e3530000 	cmp	r3, #0
   2bde4:	da000072 	ble	2bfb4 <__kernel_rem_pio2+0x87c>
   2bde8:	e1a00183 	lsl	r0, r3, #3
   2bdec:	e28d1f92 	add	r1, sp, #584	; 0x248
   2bdf0:	e0811000 	add	r1, r1, r0
   2bdf4:	e28d9f42 	add	r9, sp, #264	; 0x108
   2bdf8:	ed115b50 	vldr	d5, [r1, #-320]	; 0xfffffec0
   2bdfc:	e0891183 	add	r1, r9, r3, lsl #3
   2be00:	ed317b02 	vldmdb	r1!, {d7}
   2be04:	ee376b05 	vadd.f64	d6, d7, d5
   2be08:	e1590001 	cmp	r9, r1
   2be0c:	ee377b46 	vsub.f64	d7, d7, d6
   2be10:	ed816b00 	vstr	d6, [r1]
   2be14:	ee377b05 	vadd.f64	d7, d7, d5
   2be18:	eeb05b46 	vmov.f64	d5, d6
   2be1c:	ed817b02 	vstr	d7, [r1, #8]
   2be20:	1afffff6 	bne	2be00 <__kernel_rem_pio2+0x6c8>
   2be24:	e3530001 	cmp	r3, #1
   2be28:	da000061 	ble	2bfb4 <__kernel_rem_pio2+0x87c>
   2be2c:	e28d1f92 	add	r1, sp, #584	; 0x248
   2be30:	e243321e 	sub	r3, r3, #-536870911	; 0xe0000001
   2be34:	e0810000 	add	r0, r1, r0
   2be38:	e1a01183 	lsl	r1, r3, #3
   2be3c:	e2813008 	add	r3, r1, #8
   2be40:	ed105b50 	vldr	d5, [r0, #-320]	; 0xfffffec0
   2be44:	e0893003 	add	r3, r9, r3
   2be48:	e28d0e11 	add	r0, sp, #272	; 0x110
   2be4c:	ed337b02 	vldmdb	r3!, {d7}
   2be50:	ee376b05 	vadd.f64	d6, d7, d5
   2be54:	e1500003 	cmp	r0, r3
   2be58:	ee377b46 	vsub.f64	d7, d7, d6
   2be5c:	ed836b00 	vstr	d6, [r3]
   2be60:	ee377b05 	vadd.f64	d7, d7, d5
   2be64:	eeb05b46 	vmov.f64	d5, d6
   2be68:	ed837b02 	vstr	d7, [r3, #8]
   2be6c:	1afffff6 	bne	2be4c <__kernel_rem_pio2+0x714>
   2be70:	ed9f7b36 	vldr	d7, [pc, #216]	; 2bf50 <__kernel_rem_pio2+0x818>
   2be74:	e2813010 	add	r3, r1, #16
   2be78:	e0893003 	add	r3, r9, r3
   2be7c:	e2899010 	add	r9, r9, #16
   2be80:	ed336b02 	vldmdb	r3!, {d6}
   2be84:	e1590003 	cmp	r9, r3
   2be88:	ee377b06 	vadd.f64	d7, d7, d6
   2be8c:	1afffffb 	bne	2be80 <__kernel_rem_pio2+0x748>
   2be90:	ed9d5b42 	vldr	d5, [sp, #264]	; 0x108
   2be94:	ed9d6b44 	vldr	d6, [sp, #272]	; 0x110
   2be98:	e3520000 	cmp	r2, #0
   2be9c:	1eb17b47 	vnegne.f64	d7, d7
   2bea0:	1eb15b45 	vnegne.f64	d5, d5
   2bea4:	1eb16b46 	vnegne.f64	d6, d6
   2bea8:	e59d3010 	ldr	r3, [sp, #16]
   2beac:	ed835b00 	vstr	d5, [r3]
   2beb0:	ed836b02 	vstr	d6, [r3, #8]
   2beb4:	ed837b04 	vstr	d7, [r3, #16]
   2beb8:	eaffffb7 	b	2bd9c <__kernel_rem_pio2+0x664>
   2bebc:	ed9f7b23 	vldr	d7, [pc, #140]	; 2bf50 <__kernel_rem_pio2+0x818>
   2bec0:	e2861008 	add	r1, r6, #8
   2bec4:	e0891001 	add	r1, r9, r1
   2bec8:	ed316b02 	vldmdb	r1!, {d6}
   2becc:	e1590001 	cmp	r9, r1
   2bed0:	ee377b06 	vadd.f64	d7, d7, d6
   2bed4:	1afffffb 	bne	2bec8 <__kernel_rem_pio2+0x790>
   2bed8:	ed9d6b42 	vldr	d6, [sp, #264]	; 0x108
   2bedc:	e3520000 	cmp	r2, #0
   2bee0:	ee366b47 	vsub.f64	d6, d6, d7
   2bee4:	0affff9c 	beq	2bd5c <__kernel_rem_pio2+0x624>
   2bee8:	ea000021 	b	2bf74 <__kernel_rem_pio2+0x83c>
   2beec:	ed9f7b17 	vldr	d7, [pc, #92]	; 2bf50 <__kernel_rem_pio2+0x818>
   2bef0:	e2863008 	add	r3, r6, #8
   2bef4:	e0893003 	add	r3, r9, r3
   2bef8:	ed336b02 	vldmdb	r3!, {d6}
   2befc:	e1590003 	cmp	r9, r3
   2bf00:	ee377b06 	vadd.f64	d7, d7, d6
   2bf04:	1afffffb 	bne	2bef8 <__kernel_rem_pio2+0x7c0>
   2bf08:	e3520000 	cmp	r2, #0
   2bf0c:	1eb17b47 	vnegne.f64	d7, d7
   2bf10:	e59d3010 	ldr	r3, [sp, #16]
   2bf14:	ed837b00 	vstr	d7, [r3]
   2bf18:	eaffff9f 	b	2bd9c <__kernel_rem_pio2+0x664>
   2bf1c:	ed9f7b0b 	vldr	d7, [pc, #44]	; 2bf50 <__kernel_rem_pio2+0x818>
   2bf20:	eaffff46 	b	2bc40 <__kernel_rem_pio2+0x508>
   2bf24:	e3a03000 	mov	r3, #0
   2bf28:	eafffee6 	b	2bac8 <__kernel_rem_pio2+0x390>
   2bf2c:	e1a00000 	nop			; (mov r0, r0)
   2bf30:	00000000 	.word	0x00000000
   2bf34:	41700000 	.word	0x41700000
   2bf38:	00000000 	.word	0x00000000
   2bf3c:	3e700000 	.word	0x3e700000
   2bf40:	00000000 	.word	0x00000000
   2bf44:	3ff00000 	.word	0x3ff00000
   2bf48:	40000000 	.word	0x40000000
   2bf4c:	3ff921fb 	.word	0x3ff921fb
	...
   2bf58:	000346b0 	.word	0x000346b0
   2bf5c:	eebd0bc0 	vcvt.s32.f64	s0, d0
   2bf60:	e28d3f92 	add	r3, sp, #584	; 0x248
   2bf64:	e083110b 	add	r1, r3, fp, lsl #2
   2bf68:	e1a0300b 	mov	r3, fp
   2bf6c:	ed010a8c 	vstr	s0, [r1, #-560]	; 0xfffffdd0
   2bf70:	eaffff06 	b	2bb90 <__kernel_rem_pio2+0x458>
   2bf74:	eeb17b47 	vneg.f64	d7, d7
   2bf78:	e59d1010 	ldr	r1, [sp, #16]
   2bf7c:	e3530000 	cmp	r3, #0
   2bf80:	ed817b00 	vstr	d7, [r1]
   2bf84:	caffff78 	bgt	2bd6c <__kernel_rem_pio2+0x634>
   2bf88:	eaffff80 	b	2bd90 <__kernel_rem_pio2+0x658>
   2bf8c:	e59d12b0 	ldr	r1, [sp, #688]	; 0x2b0
   2bf90:	e3510003 	cmp	r1, #3
   2bf94:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   2bf98:	eaffff7f 	b	2bd9c <__kernel_rem_pio2+0x664>
   2bf9c:	0002bfac 	.word	0x0002bfac
   2bfa0:	0002bd48 	.word	0x0002bd48
   2bfa4:	0002bd48 	.word	0x0002bd48
   2bfa8:	0002bde0 	.word	0x0002bde0
   2bfac:	ed9f7b03 	vldr	d7, [pc, #12]	; 2bfc0 <__kernel_rem_pio2+0x888>
   2bfb0:	eaffffd4 	b	2bf08 <__kernel_rem_pio2+0x7d0>
   2bfb4:	ed9f7b01 	vldr	d7, [pc, #4]	; 2bfc0 <__kernel_rem_pio2+0x888>
   2bfb8:	eaffffb4 	b	2be90 <__kernel_rem_pio2+0x758>
   2bfbc:	e1a00000 	nop			; (mov r0, r0)
	...

0002bfc8 <__kernel_sin>:
   2bfc8:	ee103a90 	vmov	r3, s1
   2bfcc:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   2bfd0:	e35305f9 	cmp	r3, #1044381696	; 0x3e400000
   2bfd4:	aa000003 	bge	2bfe8 <__kernel_sin+0x20>
   2bfd8:	eefd7bc0 	vcvt.s32.f64	s15, d0
   2bfdc:	ee173a90 	vmov	r3, s15
   2bfe0:	e3530000 	cmp	r3, #0
   2bfe4:	012fff1e 	bxeq	lr
   2bfe8:	ee207b00 	vmul.f64	d7, d0, d0
   2bfec:	ed9f4b15 	vldr	d4, [pc, #84]	; 2c048 <__kernel_sin+0x80>
   2bff0:	ed9f2b16 	vldr	d2, [pc, #88]	; 2c050 <__kernel_sin+0x88>
   2bff4:	ed9f3b17 	vldr	d3, [pc, #92]	; 2c058 <__kernel_sin+0x90>
   2bff8:	ed9f5b18 	vldr	d5, [pc, #96]	; 2c060 <__kernel_sin+0x98>
   2bffc:	ed9f6b19 	vldr	d6, [pc, #100]	; 2c068 <__kernel_sin+0xa0>
   2c000:	e3500000 	cmp	r0, #0
   2c004:	ee172b04 	vnmls.f64	d2, d7, d4
   2c008:	ee204b07 	vmul.f64	d4, d0, d7
   2c00c:	ee023b07 	vmla.f64	d3, d2, d7
   2c010:	ee135b07 	vnmls.f64	d5, d3, d7
   2c014:	1d9f3b15 	vldrne	d3, [pc, #84]	; 2c070 <__kernel_sin+0xa8>
   2c018:	ee056b07 	vmla.f64	d6, d5, d7
   2c01c:	0d9f5b15 	vldreq	d5, [pc, #84]	; 2c078 <__kernel_sin+0xb0>
   2c020:	1d9f5b14 	vldrne	d5, [pc, #80]	; 2c078 <__kernel_sin+0xb0>
   2c024:	1e246b06 	vmulne.f64	d6, d4, d6
   2c028:	0e175b06 	vnmlseq.f64	d5, d7, d6
   2c02c:	1e116b03 	vnmlsne.f64	d6, d1, d3
   2c030:	0e050b04 	vmlaeq.f64	d0, d5, d4
   2c034:	1e161b07 	vnmlsne.f64	d1, d6, d7
   2c038:	1e041b05 	vmlane.f64	d1, d4, d5
   2c03c:	1e300b41 	vsubne.f64	d0, d0, d1
   2c040:	e12fff1e 	bx	lr
   2c044:	e1a00000 	nop			; (mov r0, r0)
   2c048:	5acfd57c 	.word	0x5acfd57c
   2c04c:	3de5d93a 	.word	0x3de5d93a
   2c050:	8a2b9ceb 	.word	0x8a2b9ceb
   2c054:	3e5ae5e6 	.word	0x3e5ae5e6
   2c058:	57b1fe7d 	.word	0x57b1fe7d
   2c05c:	3ec71de3 	.word	0x3ec71de3
   2c060:	19c161d5 	.word	0x19c161d5
   2c064:	3f2a01a0 	.word	0x3f2a01a0
   2c068:	1110f8a6 	.word	0x1110f8a6
   2c06c:	3f811111 	.word	0x3f811111
   2c070:	00000000 	.word	0x00000000
   2c074:	3fe00000 	.word	0x3fe00000
   2c078:	55555549 	.word	0x55555549
   2c07c:	3fc55555 	.word	0x3fc55555

0002c080 <fabs>:
   2c080:	ec510b10 	vmov	r0, r1, d0
   2c084:	ee102a10 	vmov	r2, s0
   2c088:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
   2c08c:	ec432b10 	vmov	d0, r2, r3
   2c090:	e12fff1e 	bx	lr
   2c094:	00000000 	andeq	r0, r0, r0

0002c098 <floor>:
   2c098:	e24dd008 	sub	sp, sp, #8
   2c09c:	ed8d0b00 	vstr	d0, [sp]
   2c0a0:	e59f2150 	ldr	r2, [pc, #336]	; 2c1f8 <floor+0x160>
   2c0a4:	e59d1004 	ldr	r1, [sp, #4]
   2c0a8:	e59d0000 	ldr	r0, [sp]
   2c0ac:	e0022a41 	and	r2, r2, r1, asr #20
   2c0b0:	e2423fff 	sub	r3, r2, #1020	; 0x3fc
   2c0b4:	e2433003 	sub	r3, r3, #3
   2c0b8:	e3530013 	cmp	r3, #19
   2c0bc:	ca000026 	bgt	2c15c <floor+0xc4>
   2c0c0:	e3530000 	cmp	r3, #0
   2c0c4:	ba000014 	blt	2c11c <floor+0x84>
   2c0c8:	e59f212c 	ldr	r2, [pc, #300]	; 2c1fc <floor+0x164>
   2c0cc:	e1a02352 	asr	r2, r2, r3
   2c0d0:	e002c001 	and	ip, r2, r1
   2c0d4:	e19cc000 	orrs	ip, ip, r0
   2c0d8:	0a000023 	beq	2c16c <floor+0xd4>
   2c0dc:	ed9f7b43 	vldr	d7, [pc, #268]	; 2c1f0 <floor+0x158>
   2c0e0:	ed9d6b00 	vldr	d6, [sp]
   2c0e4:	ee367b07 	vadd.f64	d7, d6, d7
   2c0e8:	eeb57bc0 	vcmpe.f64	d7, #0.0
   2c0ec:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2c0f0:	da000004 	ble	2c108 <floor+0x70>
   2c0f4:	e3510000 	cmp	r1, #0
   2c0f8:	b3a00601 	movlt	r0, #1048576	; 0x100000
   2c0fc:	b0811350 	addlt	r1, r1, r0, asr r3
   2c100:	e3a00000 	mov	r0, #0
   2c104:	e1c11002 	bic	r1, r1, r2
   2c108:	e1a03001 	mov	r3, r1
   2c10c:	e1a02000 	mov	r2, r0
   2c110:	ec432b10 	vmov	d0, r2, r3
   2c114:	e28dd008 	add	sp, sp, #8
   2c118:	e12fff1e 	bx	lr
   2c11c:	ed9f7b33 	vldr	d7, [pc, #204]	; 2c1f0 <floor+0x158>
   2c120:	ee307b07 	vadd.f64	d7, d0, d7
   2c124:	eeb57bc0 	vcmpe.f64	d7, #0.0
   2c128:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2c12c:	dafffff5 	ble	2c108 <floor+0x70>
   2c130:	e3510000 	cmp	r1, #0
   2c134:	a3a00000 	movge	r0, #0
   2c138:	a1a01000 	movge	r1, r0
   2c13c:	aafffff1 	bge	2c108 <floor+0x70>
   2c140:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
   2c144:	e1830000 	orr	r0, r3, r0
   2c148:	e59f20b0 	ldr	r2, [pc, #176]	; 2c200 <floor+0x168>
   2c14c:	e3500000 	cmp	r0, #0
   2c150:	11a01002 	movne	r1, r2
   2c154:	e3a00000 	mov	r0, #0
   2c158:	eaffffea 	b	2c108 <floor+0x70>
   2c15c:	e3530033 	cmp	r3, #51	; 0x33
   2c160:	da000004 	ble	2c178 <floor+0xe0>
   2c164:	e3530b01 	cmp	r3, #1024	; 0x400
   2c168:	0a000012 	beq	2c1b8 <floor+0x120>
   2c16c:	ed9d0b00 	vldr	d0, [sp]
   2c170:	e28dd008 	add	sp, sp, #8
   2c174:	e12fff1e 	bx	lr
   2c178:	e2422e41 	sub	r2, r2, #1040	; 0x410
   2c17c:	e2422003 	sub	r2, r2, #3
   2c180:	e3e0c000 	mvn	ip, #0
   2c184:	e1a0223c 	lsr	r2, ip, r2
   2c188:	e1120000 	tst	r2, r0
   2c18c:	0afffff6 	beq	2c16c <floor+0xd4>
   2c190:	ed9f7b16 	vldr	d7, [pc, #88]	; 2c1f0 <floor+0x158>
   2c194:	ed9d6b00 	vldr	d6, [sp]
   2c198:	ee367b07 	vadd.f64	d7, d6, d7
   2c19c:	eeb57bc0 	vcmpe.f64	d7, #0.0
   2c1a0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2c1a4:	daffffd7 	ble	2c108 <floor+0x70>
   2c1a8:	e3510000 	cmp	r1, #0
   2c1ac:	ba000004 	blt	2c1c4 <floor+0x12c>
   2c1b0:	e1c00002 	bic	r0, r0, r2
   2c1b4:	eaffffd3 	b	2c108 <floor+0x70>
   2c1b8:	ed9d7b00 	vldr	d7, [sp]
   2c1bc:	ee370b07 	vadd.f64	d0, d7, d7
   2c1c0:	eaffffea 	b	2c170 <floor+0xd8>
   2c1c4:	e3530014 	cmp	r3, #20
   2c1c8:	02811001 	addeq	r1, r1, #1
   2c1cc:	0afffff7 	beq	2c1b0 <floor+0x118>
   2c1d0:	e3a0c001 	mov	ip, #1
   2c1d4:	e2633034 	rsb	r3, r3, #52	; 0x34
   2c1d8:	e080331c 	add	r3, r0, ip, lsl r3
   2c1dc:	e1500003 	cmp	r0, r3
   2c1e0:	8081100c 	addhi	r1, r1, ip
   2c1e4:	e1a00003 	mov	r0, r3
   2c1e8:	eafffff0 	b	2c1b0 <floor+0x118>
   2c1ec:	e1a00000 	nop			; (mov r0, r0)
   2c1f0:	8800759c 	.word	0x8800759c
   2c1f4:	7e37e43c 	.word	0x7e37e43c
   2c1f8:	000007ff 	.word	0x000007ff
   2c1fc:	000fffff 	.word	0x000fffff
   2c200:	bff00000 	.word	0xbff00000
   2c204:	00000000 	.word	0x00000000

0002c208 <scalbn>:
   2c208:	e24dd008 	sub	sp, sp, #8
   2c20c:	ed8d0b00 	vstr	d0, [sp]
   2c210:	e59f1140 	ldr	r1, [pc, #320]	; 2c358 <scalbn+0x150>
   2c214:	e59d3004 	ldr	r3, [sp, #4]
   2c218:	e0112a43 	ands	r2, r1, r3, asr #20
   2c21c:	1a00001a 	bne	2c28c <scalbn+0x84>
   2c220:	e59d2000 	ldr	r2, [sp]
   2c224:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   2c228:	e1933002 	orrs	r3, r3, r2
   2c22c:	0a000025 	beq	2c2c8 <scalbn+0xc0>
   2c230:	ed9f7b3c 	vldr	d7, [pc, #240]	; 2c328 <scalbn+0x120>
   2c234:	e59f3120 	ldr	r3, [pc, #288]	; 2c35c <scalbn+0x154>
   2c238:	e1500003 	cmp	r0, r3
   2c23c:	ee207b07 	vmul.f64	d7, d0, d7
   2c240:	ed8d7b00 	vstr	d7, [sp]
   2c244:	ba000033 	blt	2c318 <scalbn+0x110>
   2c248:	e59d3004 	ldr	r3, [sp, #4]
   2c24c:	e0012a43 	and	r2, r1, r3, asr #20
   2c250:	e2422036 	sub	r2, r2, #54	; 0x36
   2c254:	e59f1104 	ldr	r1, [pc, #260]	; 2c360 <scalbn+0x158>
   2c258:	e080c002 	add	ip, r0, r2
   2c25c:	e15c0001 	cmp	ip, r1
   2c260:	ca00000f 	bgt	2c2a4 <scalbn+0x9c>
   2c264:	e35c0000 	cmp	ip, #0
   2c268:	ca000023 	bgt	2c2fc <scalbn+0xf4>
   2c26c:	e37c0035 	cmn	ip, #53	; 0x35
   2c270:	aa000017 	bge	2c2d4 <scalbn+0xcc>
   2c274:	e59f30e8 	ldr	r3, [pc, #232]	; 2c364 <scalbn+0x15c>
   2c278:	e1500003 	cmp	r0, r3
   2c27c:	ca000008 	bgt	2c2a4 <scalbn+0x9c>
   2c280:	ed9f7b2a 	vldr	d7, [pc, #168]	; 2c330 <scalbn+0x128>
   2c284:	ed9f6b2b 	vldr	d6, [pc, #172]	; 2c338 <scalbn+0x130>
   2c288:	ea000007 	b	2c2ac <scalbn+0xa4>
   2c28c:	e1520001 	cmp	r2, r1
   2c290:	1affffef 	bne	2c254 <scalbn+0x4c>
   2c294:	ed9d7b00 	vldr	d7, [sp]
   2c298:	ee370b07 	vadd.f64	d0, d7, d7
   2c29c:	e28dd008 	add	sp, sp, #8
   2c2a0:	e12fff1e 	bx	lr
   2c2a4:	ed9f7b25 	vldr	d7, [pc, #148]	; 2c340 <scalbn+0x138>
   2c2a8:	ed9f6b26 	vldr	d6, [pc, #152]	; 2c348 <scalbn+0x140>
   2c2ac:	e59d3004 	ldr	r3, [sp, #4]
   2c2b0:	eeb00b47 	vmov.f64	d0, d7
   2c2b4:	e3530000 	cmp	r3, #0
   2c2b8:	beb07b46 	vmovlt.f64	d7, d6
   2c2bc:	ee270b00 	vmul.f64	d0, d7, d0
   2c2c0:	e28dd008 	add	sp, sp, #8
   2c2c4:	e12fff1e 	bx	lr
   2c2c8:	ed9d0b00 	vldr	d0, [sp]
   2c2cc:	e28dd008 	add	sp, sp, #8
   2c2d0:	e12fff1e 	bx	lr
   2c2d4:	e3c3147f 	bic	r1, r3, #2130706432	; 0x7f000000
   2c2d8:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
   2c2dc:	e1cd20d0 	ldrd	r2, [sp]
   2c2e0:	e28cc036 	add	ip, ip, #54	; 0x36
   2c2e4:	e1813a0c 	orr	r3, r1, ip, lsl #20
   2c2e8:	ec432b10 	vmov	d0, r2, r3
   2c2ec:	ed9f7b17 	vldr	d7, [pc, #92]	; 2c350 <scalbn+0x148>
   2c2f0:	ee200b07 	vmul.f64	d0, d0, d7
   2c2f4:	e28dd008 	add	sp, sp, #8
   2c2f8:	e12fff1e 	bx	lr
   2c2fc:	e3c3147f 	bic	r1, r3, #2130706432	; 0x7f000000
   2c300:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
   2c304:	e1cd20d0 	ldrd	r2, [sp]
   2c308:	e1813a0c 	orr	r3, r1, ip, lsl #20
   2c30c:	ec432b10 	vmov	d0, r2, r3
   2c310:	e28dd008 	add	sp, sp, #8
   2c314:	e12fff1e 	bx	lr
   2c318:	ed9f0b04 	vldr	d0, [pc, #16]	; 2c330 <scalbn+0x128>
   2c31c:	ee270b00 	vmul.f64	d0, d7, d0
   2c320:	e28dd008 	add	sp, sp, #8
   2c324:	e12fff1e 	bx	lr
   2c328:	00000000 	.word	0x00000000
   2c32c:	43500000 	.word	0x43500000
   2c330:	c2f8f359 	.word	0xc2f8f359
   2c334:	01a56e1f 	.word	0x01a56e1f
   2c338:	c2f8f359 	.word	0xc2f8f359
   2c33c:	81a56e1f 	.word	0x81a56e1f
   2c340:	8800759c 	.word	0x8800759c
   2c344:	7e37e43c 	.word	0x7e37e43c
   2c348:	8800759c 	.word	0x8800759c
   2c34c:	fe37e43c 	.word	0xfe37e43c
   2c350:	00000000 	.word	0x00000000
   2c354:	3c900000 	.word	0x3c900000
   2c358:	000007ff 	.word	0x000007ff
   2c35c:	ffff3cb0 	.word	0xffff3cb0
   2c360:	000007fe 	.word	0x000007fe
   2c364:	0000c350 	.word	0x0000c350
